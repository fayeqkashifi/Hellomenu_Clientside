[{"D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\index.js":"1","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\App.js":"2","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\Consts.js":"3","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\PublicRoute.js":"4","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\pages\\Login.js":"5","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\pages\\Registration.js":"6","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\pages\\ForgotPassword.js":"7","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Default\\ShowProducts.js":"8","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Default\\Main.js":"9","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\First\\ProductDetails.js":"10","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\Main.js":"11","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\FilterSelection.js":"12","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\ProductDetails.js":"13","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\OrderDetails.js":"14","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Thrid\\Main.js":"15","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\First\\Main.js":"16","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Thrid\\ProductsList.js":"17","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Second\\ProductDetails.js":"18","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Thrid\\ProductDetails.js":"19","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\Cart.js":"20","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Second\\Main.js":"21","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\index.js":"22","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\CustomAlert.js":"23","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Second\\Footer.js":"24","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Second\\Header.js":"25","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\pages\\Error404.js":"26","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Orders\\OrderDetails.js":"27","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Areas\\Area.js":"28","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Products\\Ingredients.js":"29","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Orders\\Order.js":"30","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\utils\\index.js":"31","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Attributes\\Attributes.js":"32","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Branches\\Tables.js":"33","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Branches\\Branches.js":"34","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Branches\\Show.js":"35","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\PrivateRoute.js":"36","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Dashboard\\Profile\\Profile.js":"37","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Services\\ServiceArea.js":"38","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Companies\\Company.js":"39","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Dashboard\\Home\\Home.js":"40","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\layouts\\Footer.js":"41","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\layouts\\PageTitle.js":"42","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\layouts\\nav\\index.js":"43","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Products\\Show.js":"44","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Show.js":"45","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\Customization.js":"46","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Categories\\Category.js":"47","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Categories\\SubCategory.js":"48","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Categories\\Shared.js":"49","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\layouts\\nav\\Header.js":"50","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\layouts\\nav\\NavHader.js":"51","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Default\\Customization.js":"52","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Products\\EditProduct.js":"53","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\EditTheme.js":"54","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Design.js":"55","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Theme.js":"56","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Products\\Product.js":"57","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Products\\AddProduct.js":"58","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\layouts\\nav\\SideBar.js":"59","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Variants\\Variants.js":"60","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Variants\\NewGrid.js":"61","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\Header.js":"62","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\First\\Header.js":"63","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\First\\Footer.js":"64","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\Footer.js":"65","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\Counter.js":"66"},{"size":1407,"mtime":1641978665852,"results":"67","hashOfConfig":"68"},{"size":5351,"mtime":1641978665392,"results":"69","hashOfConfig":"68"},{"size":67,"mtime":1641978665392,"results":"70","hashOfConfig":"68"},{"size":458,"mtime":1641978665880,"results":"71","hashOfConfig":"68"},{"size":7415,"mtime":1642049499557,"results":"72","hashOfConfig":"68"},{"size":8089,"mtime":1643437031965,"results":"73","hashOfConfig":"68"},{"size":1842,"mtime":1641978665910,"results":"74","hashOfConfig":"68"},{"size":14591,"mtime":1641978665869,"results":"75","hashOfConfig":"68"},{"size":9217,"mtime":1643437031951,"results":"76","hashOfConfig":"68"},{"size":19291,"mtime":1641978665869,"results":"77","hashOfConfig":"68"},{"size":13618,"mtime":1643630431954,"results":"78","hashOfConfig":"68"},{"size":6692,"mtime":1643437031947,"results":"79","hashOfConfig":"68"},{"size":26556,"mtime":1643631863565,"results":"80","hashOfConfig":"68"},{"size":21969,"mtime":1643631836121,"results":"81","hashOfConfig":"68"},{"size":11228,"mtime":1641978665869,"results":"82","hashOfConfig":"68"},{"size":9775,"mtime":1641978665869,"results":"83","hashOfConfig":"68"},{"size":6876,"mtime":1641978665869,"results":"84","hashOfConfig":"68"},{"size":19267,"mtime":1641978665869,"results":"85","hashOfConfig":"68"},{"size":18702,"mtime":1643437031951,"results":"86","hashOfConfig":"68"},{"size":43256,"mtime":1643633801210,"results":"87","hashOfConfig":"68"},{"size":11783,"mtime":1641978665869,"results":"88","hashOfConfig":"68"},{"size":2632,"mtime":1643658946029,"results":"89","hashOfConfig":"68"},{"size":1646,"mtime":1643437031938,"results":"90","hashOfConfig":"68"},{"size":543,"mtime":1641978665869,"results":"91","hashOfConfig":"68"},{"size":1002,"mtime":1641978665869,"results":"92","hashOfConfig":"68"},{"size":891,"mtime":1641978665910,"results":"93","hashOfConfig":"68"},{"size":15583,"mtime":1643658635551,"results":"94","hashOfConfig":"68"},{"size":12917,"mtime":1643653935692,"results":"95","hashOfConfig":"68"},{"size":12790,"mtime":1643658260872,"results":"96","hashOfConfig":"68"},{"size":4377,"mtime":1643658690744,"results":"97","hashOfConfig":"68"},{"size":214,"mtime":1641978665910,"results":"98","hashOfConfig":"68"},{"size":10202,"mtime":1643654023143,"results":"99","hashOfConfig":"68"},{"size":18610,"mtime":1643655045784,"results":"100","hashOfConfig":"68"},{"size":25742,"mtime":1643654921845,"results":"101","hashOfConfig":"68"},{"size":8471,"mtime":1643659017325,"results":"102","hashOfConfig":"68"},{"size":501,"mtime":1641978665869,"results":"103","hashOfConfig":"68"},{"size":23716,"mtime":1641978665860,"results":"104","hashOfConfig":"68"},{"size":17670,"mtime":1643658228132,"results":"105","hashOfConfig":"68"},{"size":10306,"mtime":1643657956865,"results":"106","hashOfConfig":"68"},{"size":2236,"mtime":1643437031938,"results":"107","hashOfConfig":"68"},{"size":489,"mtime":1641978665900,"results":"108","hashOfConfig":"68"},{"size":823,"mtime":1641978665900,"results":"109","hashOfConfig":"68"},{"size":688,"mtime":1641978665910,"results":"110","hashOfConfig":"68"},{"size":1035,"mtime":1643439384474,"results":"111","hashOfConfig":"68"},{"size":1378,"mtime":1643437031940,"results":"112","hashOfConfig":"68"},{"size":32020,"mtime":1643630530530,"results":"113","hashOfConfig":"68"},{"size":24886,"mtime":1643655243064,"results":"114","hashOfConfig":"68"},{"size":17286,"mtime":1643655539052,"results":"115","hashOfConfig":"68"},{"size":2461,"mtime":1643655438774,"results":"116","hashOfConfig":"68"},{"size":8195,"mtime":1641978665900,"results":"117","hashOfConfig":"68"},{"size":953,"mtime":1641978665910,"results":"118","hashOfConfig":"68"},{"size":20606,"mtime":1641978665869,"results":"119","hashOfConfig":"68"},{"size":25324,"mtime":1643658420076,"results":"120","hashOfConfig":"68"},{"size":16570,"mtime":1643684836246,"results":"121","hashOfConfig":"68"},{"size":27384,"mtime":1643659625385,"results":"122","hashOfConfig":"68"},{"size":21685,"mtime":1643437031951,"results":"123","hashOfConfig":"68"},{"size":12516,"mtime":1643658231848,"results":"124","hashOfConfig":"68"},{"size":23740,"mtime":1643658535688,"results":"125","hashOfConfig":"68"},{"size":5244,"mtime":1643437031954,"results":"126","hashOfConfig":"68"},{"size":15754,"mtime":1643521926347,"results":"127","hashOfConfig":"68"},{"size":9075,"mtime":1643606571366,"results":"128","hashOfConfig":"68"},{"size":5488,"mtime":1643631761988,"results":"129","hashOfConfig":"68"},{"size":3140,"mtime":1641978665869,"results":"130","hashOfConfig":"68"},{"size":632,"mtime":1641978665869,"results":"131","hashOfConfig":"68"},{"size":4547,"mtime":1643630967825,"results":"132","hashOfConfig":"68"},{"size":11473,"mtime":1643437031945,"results":"133","hashOfConfig":"68"},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},"8xo3r1",{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"136"},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"136"},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"136"},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"136"},{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"136"},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"136"},{"filePath":"169","messages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"136"},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"136"},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"136"},{"filePath":"178","messages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"136"},{"filePath":"181","messages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"136"},{"filePath":"184","messages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"136"},{"filePath":"187","messages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"136"},{"filePath":"190","messages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"192","messages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"194","messages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"196","messages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"198","messages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"200","messages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"136"},{"filePath":"203","messages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"205","messages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"207","messages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"136"},{"filePath":"210","messages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"212","messages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"214","messages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"216","messages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"218","messages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"220","messages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"222","messages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"224","messages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"226","messages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"228","messages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"230","messages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"232","messages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"234","messages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"236","messages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"238","messages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"240","messages":"241","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"136"},{"filePath":"243","messages":"244","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"245","messages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"247","messages":"248","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"249","messages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"136"},{"filePath":"252","messages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"254","messages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"136"},{"filePath":"257","messages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"259","messages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261"},{"filePath":"262","messages":"263","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"264","messages":"265","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266","usedDeprecatedRules":"136"},{"filePath":"267","messages":"268","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"269","messages":"270","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"271","messages":"272","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273","usedDeprecatedRules":"136"},{"filePath":"274","messages":"275","errorCount":0,"fatalErrorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276","usedDeprecatedRules":"136"},{"filePath":"277","messages":"278","errorCount":0,"fatalErrorCount":0,"warningCount":35,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279","usedDeprecatedRules":"136"},{"filePath":"280","messages":"281","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"282","messages":"283","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284","usedDeprecatedRules":"136"},{"filePath":"285","messages":"286","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"287","messages":"288","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"289","usedDeprecatedRules":"136"},{"filePath":"290","messages":"291","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},"D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\index.js",[],["292","293"],"D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\App.js",[],"D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\Consts.js",[],"D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\PublicRoute.js",[],"D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\pages\\Login.js",[],"D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\pages\\Registration.js",[],"D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\pages\\ForgotPassword.js",[],"D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Default\\ShowProducts.js",["294","295","296","297","298","299","300","301","302","303","304","305"],"import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { base_url, port } from \"../../../../../Consts\";\r\n\r\nimport { Zoom } from \"react-slideshow-image\";\r\nimport \"react-slideshow-image/dist/styles.css\";\r\nimport Accordion from \"@mui/material/Accordion\";\r\nimport AccordionSummary from \"@mui/material/AccordionSummary\";\r\nimport AccordionDetails from \"@mui/material/AccordionDetails\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport \"../style.css\";\r\nconst ShowProducts = (props) => {\r\n  // for localization\r\n  const { t } = useTranslation();\r\n\r\n  const id = atob(props.match.params.id);\r\n  const themes = props.history.location.state.themes;\r\n  let varData = [];\r\n  //for retriving data using laravel API\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [variantData, setVariantData] = useState([]);\r\n  const [showVaralint, setShowVarlist] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [skuarray, setSkuArray] = useState([]);\r\n  const [productDetails, setProductDetails] = useState({\r\n    price: 0,\r\n    stock: 0,\r\n    image: fetchData?.image,\r\n  });\r\n  useEffect(() => {\r\n    const getdata = async () => {\r\n      const product = await axios({\r\n        method: \"GET\",\r\n        url: `/api/GetProduct/${id}`,\r\n      });\r\n      const data = product.data.fetchData;\r\n\r\n      const res = await axios({\r\n        method: \"GET\",\r\n        url: `/api/Getvariations/${id}`,\r\n      });\r\n      setFetchData(data[0]);\r\n      if (res.data.fetchData !== \"\") {\r\n        varData = JSON.parse(res.data.fetchData);\r\n        parseVariants(varData);\r\n      }\r\n\r\n      setLoading(false);\r\n    };\r\n    getdata(); // axios\r\n  }, [id]);\r\n  const changePrice = (varName, variant) => {\r\n    const keys = Object.keys(showVaralint);\r\n    const varlineindex = keys.indexOf(varName);\r\n    const newSkuArray = skuarray;\r\n    newSkuArray[varlineindex] = variant;\r\n    setSkuArray(newSkuArray);\r\n    if (keys.length == newSkuArray.length) {\r\n      caluclatePrice(newSkuArray, variantData);\r\n    }\r\n  };\r\n  const caluclatePrice = (newSkuArray, variantData) => {\r\n    let sku = id + \"-\";\r\n    for (let i = 0; i < newSkuArray.length; i++) {\r\n      if (i == newSkuArray.length - 1) {\r\n        sku += newSkuArray[i];\r\n      } else {\r\n        sku += newSkuArray[i] + \"-\";\r\n      }\r\n    }\r\n\r\n    const priceList = variantData.filter((item) => {\r\n      return item.sku.replace(/\\s+/g, \"\") == sku.replace(/\\s+/g, \"\");\r\n    });\r\n    console.log(newSkuArray);\r\n    let productdetails = { price: 0, stock: 0 };\r\n    if (priceList.length !== 0) {\r\n      const line = priceList.pop();\r\n      const newProductDetails = {\r\n        price: line.price,\r\n        stock: line.stock,\r\n        image: line.image,\r\n      };\r\n      productdetails = newProductDetails;\r\n    } else {\r\n      const newProductDetails = {\r\n        price: 0,\r\n        stock: \"No Stock\",\r\n        image: fetchData.image,\r\n      };\r\n      productdetails = newProductDetails;\r\n    }\r\n    setProductDetails({ ...productdetails });\r\n  };\r\n  const parseVariants = (variantData) => {\r\n    const variants = [];\r\n    const savePostion = [\"postion\", \"sku\", \"price\", \"stock\", \"image\"];\r\n    const varLine = variantData[0];\r\n    const varlinekey = Object.keys(varLine);\r\n    for (let i = 0; i < varlinekey.length; i++) {\r\n      if (savePostion.indexOf(varlinekey[i]) == -1) {\r\n        let listvar = variantData.map((item) => {\r\n          return item[varlinekey[i]];\r\n        });\r\n        // get unique variants\r\n        listvar = listvar.filter(\r\n          (thing, index, self) =>\r\n            index ===\r\n            self.findIndex((t) => t.place === listvar.place && t === thing)\r\n        );\r\n        if (listvar[0] != 0) variants[varlinekey[i]] = listvar;\r\n      }\r\n    }\r\n    let def = [];\r\n    Object.keys(variants).map((item) => {\r\n      def.push(variants[item][0]);\r\n    });\r\n    setSkuArray(def);\r\n    caluclatePrice(def, variantData);\r\n    setShowVarlist(variants);\r\n    setVariantData(variantData);\r\n  };\r\n  const [ingredients, setIntgredients] = useState([]);\r\n  const changeIngredients = (label) => {\r\n    if (!ingredients.includes(label) === false) {\r\n      setIntgredients(ingredients.filter((item) => item !== label));\r\n    } else {\r\n      setIntgredients([...ingredients, label]);\r\n    }\r\n  };\r\n  let [sum, setSum] = useState(0);\r\n\r\n  const extraHandlers = (e, price) => {\r\n    if (e.target.checked) {\r\n      // console.log((sum += parseInt(price)));\r\n      setSum((sum += parseInt(price)));\r\n    } else {\r\n      setSum((sum -= parseInt(price)));\r\n    }\r\n  };\r\n\r\n  const zoomOutProperties = {\r\n    duration: 100,\r\n    transitionDuration: 5,\r\n    canSwipe: true,\r\n    indicators: true,\r\n    scale: false,\r\n    autoplay: false,\r\n    indicators: (i) => (\r\n      <div className=\"indicator\">\r\n        <img\r\n          src={\r\n            productDetails?.stock === \"No Stock\" || productDetails?.stock === 0\r\n              ? `http://${base_url}:${port}/images/products/${fetchData?.image}`\r\n              : `http://${base_url}:${port}/images/variants_pics/${productDetails.image[i]}`\r\n          }\r\n          width=\"40px\"\r\n          // className=\"p-1\"\r\n          // style={{ width: \"40px\" }}\r\n        />\r\n      </div>\r\n    ),\r\n  };\r\n\r\n  var viewImages_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"container \">\r\n        <div\r\n          className=\"spinner-border text-primary \"\r\n          role=\"status\"\r\n          style={{ position: \"fixed\", top: \"50%\", left: \"50%\" }}\r\n        >\r\n          <span className=\"sr-only\">{t(\"loading\")}</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewImages_HTMLTABLE = (\r\n      <div className=\"row p-2\">\r\n        <div className=\"col-xl-5 col-lg-5 col-md-12 col-sm-12\">\r\n          <div className=\"row col-md-12 text-center \">\r\n            <Zoom {...zoomOutProperties}>\r\n              {(() => {\r\n                if (Array.isArray(productDetails.image)) {\r\n                  return productDetails.image?.map((image) => {\r\n                    return (\r\n                      <div key={image} style={{ width: \"100%\" }}>\r\n                        <img\r\n                          src={`http://${base_url}:${port}/images/variants_pics/${image}`}\r\n                          style={{\r\n                            height: \"500px\",\r\n                            width: \"100%\",\r\n                            objectFit: \"contain\",\r\n                          }}\r\n                          // className=\"img-thumbnail\"\r\n                          alt=\"\"\r\n                        />\r\n                      </div>\r\n                    );\r\n                  });\r\n                } else {\r\n                  return (\r\n                    <div style={{ width: \"100%\" }}>\r\n                      <img\r\n                        src={\r\n                          productDetails.stock === \"No Stock\" ||\r\n                          productDetails?.stock === 0\r\n                            ? `http://${base_url}:${port}/images/products/${\r\n                                productDetails.image\r\n                                  ? productDetails?.image\r\n                                  : fetchData?.image\r\n                              }`\r\n                            : `http://${base_url}:${port}/images/variants_pics/${productDetails.image}`\r\n                        }\r\n                        style={{\r\n                          height: \"500px\",\r\n                          width: \"100%\",\r\n                          objectFit: \"contain\",\r\n                        }}\r\n                        alt=\"\"\r\n                      />\r\n                    </div>\r\n                  );\r\n                }\r\n              })()}\r\n            </Zoom>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"col-xl-7 col-lg-7 col-sm-12\">\r\n          <div className=\"card border\">\r\n            <div className=\"row mx-3 mt-3\">\r\n              <h4>\r\n                {t(\"product_name\")}: {fetchData?.ProductName}\r\n              </h4>\r\n              <p>\r\n                {t(\"description\")}: {fetchData?.Description}\r\n              </p>\r\n              <p>\r\n                {t(\"unit\")}: {fetchData?.UnitName}\r\n              </p>\r\n              {themes?.preparation_time != 0 ? (\r\n                <p>\r\n                  {t(\"preparation_Time\")}: {fetchData?.preparationTime} Minutes\r\n                </p>\r\n              ) : (\r\n                \" \"\r\n              )}\r\n              <p>\r\n                {t(\"price\")} :{\" \"}\r\n                {productDetails.price === 0\r\n                  ? fetchData?.price + sum\r\n                  : parseInt(productDetails.price) + sum}\r\n              </p>\r\n              <p>\r\n                {t(\"stock\")}:{\" \"}\r\n                {productDetails.stock === 0\r\n                  ? fetchData?.stock\r\n                  : productDetails.stock}\r\n              </p>\r\n            </div>\r\n            <div className=\"row mx-3\">\r\n              <h4> {t(\"ingredients\")}</h4>\r\n              <small>Please select the ingredients you want to remove.</small>\r\n            </div>\r\n            <div className=\"row mx-4\">\r\n              {JSON.parse(fetchData.ingredients)?.map((item, i) => {\r\n                return (\r\n                  <div\r\n                    className=\"col-md-auto col-sm-auto col-xl-auto col-lg-auto col-auto\"\r\n                    onClick={() => {\r\n                      changeIngredients(item.label);\r\n                    }}\r\n                    style={\r\n                      ingredients.includes(item.label)\r\n                        ? {\r\n                            cursor: \"pointer\",\r\n\r\n                            padding: \"3px\",\r\n                            margin: \"2px\",\r\n                            border: \"1px solid\",\r\n                            textAlign: \"center\",\r\n                            borderColor: \"red\",\r\n                            textDecoration: \"line-through\",\r\n                            color: \"red\",\r\n                          }\r\n                        : {\r\n                            cursor: \"pointer\",\r\n                            padding: \"3px\",\r\n                            margin: \"2px\",\r\n                            border: \"1px solid\",\r\n                            textAlign: \"center\",\r\n                            // borderRadius: \"10px\",\r\n                            borderColor: \"black\",\r\n                          }\r\n                    }\r\n                  >\r\n                    {item.label}\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n            <div className=\"row m-3\">\r\n              <Accordion>\r\n                <AccordionSummary\r\n                  expandIcon={<ExpandMoreIcon />}\r\n                  aria-controls=\"panel1a-content\"\r\n                  id=\"panel1a-header\"\r\n                >\r\n                  <Typography>{t(\"extras\")}</Typography>\r\n                </AccordionSummary>\r\n                <AccordionDetails>\r\n                  <Typography>\r\n                    <FormGroup>\r\n                      {JSON.parse(fetchData.extras)?.map((item, i) => {\r\n                        return (\r\n                          <FormControlLabel\r\n                            key={i}\r\n                            control={\r\n                              <Checkbox\r\n                                onChange={(e) => {\r\n                                  extraHandlers(e, item.price);\r\n                                }}\r\n                                color=\"secondary\"\r\n                              />\r\n                            }\r\n                            label={\r\n                              item.label + \" ( +\" + item.price + \".00\" + \" )\"\r\n                            }\r\n                          />\r\n                        );\r\n                      })}\r\n                    </FormGroup>\r\n                  </Typography>\r\n                </AccordionDetails>\r\n              </Accordion>\r\n            </div>\r\n\r\n            <div className=\"row m-3\">\r\n              <h4> {t(\"vatiants\")}</h4>\r\n            </div>\r\n\r\n            <div className=\"row mx-2\">\r\n              {Object.keys(showVaralint).map((list, i) => {\r\n                return (\r\n                  <div className=\"row \" key={i}>\r\n                    <div className=\"col-md-auto col-sm-auto col-xl-auto col-lg-auto col-auto\">\r\n                      {list}\r\n                      <div className=\"row\">\r\n                        {showVaralint[list].map((variant) => {\r\n                          return (\r\n                            <div className=\"col-md-auto col-sm-auto col-xl-auto col-lg-auto col-auto\">\r\n                              <div\r\n                                onClick={() => {\r\n                                  changePrice(list, variant);\r\n                                }}\r\n                                style={\r\n                                  skuarray[i] == variant\r\n                                    ? {\r\n                                        cursor: \"pointer\",\r\n                                        margin: \"2px\",\r\n                                        padding: \"5px\",\r\n                                        border: \"1px solid\",\r\n                                        textAlign: \"center\",\r\n                                        borderRadius: \"10px\",\r\n                                        borderColor: \"red\",\r\n                                      }\r\n                                    : {\r\n                                        cursor: \"pointer\",\r\n                                        margin: \"2px\",\r\n\r\n                                        padding: \"5px\",\r\n                                        border: \"1px solid\",\r\n                                        textAlign: \"center\",\r\n                                        borderRadius: \"10px\",\r\n                                        borderColor: \"black\",\r\n                                      }\r\n                                }\r\n                              >\r\n                                {variant}\r\n                              </div>\r\n                            </div>\r\n                          );\r\n                        })}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  return <> {viewImages_HTMLTABLE}</>;\r\n};\r\n\r\nexport default ShowProducts;\r\n","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Default\\Main.js",["306"],"import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Link as RLink } from \"react-router-dom\";\r\nimport \"react-awesome-slider/dist/styles.css\";\r\nimport { Col } from \"react-bootstrap\";\r\nimport {\r\n  CContainer,\r\n  CNavbar,\r\n  CNavbarBrand,\r\n  CNavbarToggler,\r\n  CCollapse,\r\n  CNavbarNav,\r\n  CNavItem,\r\n  CNavLink,\r\n} from \"@coreui/react\";\r\n// Import css files\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport Link from \"@mui/material/Link\";\r\n\r\nimport { base_url, port } from \"../../../../../Consts\";\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\nimport getSymbolFromCurrency from \"currency-symbol-map\";\r\n\r\nvar hold = 1;\r\n\r\nconst DefaultMain = (props) => {\r\n  const { t } = useTranslation();\r\n  const branchId = atob(props.match.params.id);\r\n  const [loading, setLoading] = useState(true);\r\n  const [data, setData] = useState([]);\r\n  const [categories, setCategories] = useState([]);\r\n  const [subcategories, setSubCategories] = useState([]);\r\n  const [products, setProducts] = useState([]);\r\n  const [activeCategory, setActiveCategory] = useState(0);\r\n  const [activeSubCategory, setActiveSubCategory] = useState(0);\r\n  const [themes, setThemes] = useState([]);\r\n  useEffect(() => {\r\n    axios.get(`/api/GetTempBasedOnBranch/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setThemes(res.data.fetchData?.Customization);\r\n      }\r\n    });\r\n    axios.get(`/api/GetBranchForShow/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setData(res.data.data);\r\n      }\r\n      setLoading(false);\r\n    });\r\n    axios.get(`/api/GetCategories/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setCategories(res.data.fetchData);\r\n        // setActiveCategory(res.data.fetchData[0].id);\r\n      }\r\n    });\r\n    axios.get(`/api/getSubCateBasedOnBranch/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        // console.log(res.data.fetchData);\r\n        axios\r\n          .get(\r\n            `/api/GetProductsBasedOnSubCategory/${res.data.fetchData[0]?.sub_id}`\r\n          )\r\n          .then((res) => {\r\n            if (res.data.status === 200) {\r\n              setProducts(res.data.data);\r\n              setActiveSubCategory(res.data.data[0]?.sub_category_id);\r\n            }\r\n          });\r\n        setSubCategories(res.data.fetchData);\r\n      }\r\n    });\r\n  }, []);\r\n  const [changeState, setChangeState] = useState(true);\r\n  const fetchMoreData = () => {\r\n    if (hold < subcategories.length) {\r\n      axios.get(`/api/getSubCateBasedOnBranch/${branchId}`).then((res) => {\r\n        if (res.data.status === 200) {\r\n          // console.log(res.data.fetchData);\r\n          setActiveSubCategory(res.data.fetchData[hold].sub_id);\r\n          axios\r\n            .get(\r\n              `/api/GetProductsBasedOnSubCategory/${res.data.fetchData[hold].sub_id}`\r\n            )\r\n            .then((res) => {\r\n              if (res.data.status === 200) {\r\n                if (res.data.data?.length === 0) {\r\n                  hold = hold + 1;\r\n                  // console.log(res.data.fetchData);\r\n                  fetchMoreData();\r\n                } else {\r\n                  hold = hold + 1;\r\n                  setProducts(products.concat(res.data.data));\r\n                }\r\n              }\r\n            });\r\n\r\n          setSubCategories(res.data.fetchData);\r\n        }\r\n      });\r\n    } else {\r\n      setChangeState(false);\r\n    }\r\n    // console.log(hold);\r\n  };\r\n  const filterCategory = (cateId) => {\r\n    axios.get(`/api/GetSubCategories/${cateId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        // console.log(res.data.fetchData);\r\n        setSubCategories(res.data.fetchData);\r\n        // console.log(subcategories.length);\r\n        // setProducts([]);\r\n        // setVariants([]);\r\n      }\r\n    });\r\n    setActiveCategory(cateId);\r\n  };\r\n  // this function called by child (counter)\r\n  const filterProducts = (subCateID) => {\r\n    axios.get(`/api/GetProductsBasedOnSubCategory/${subCateID}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        // console.log(res.data.data);\r\n        setProducts(res.data.data);\r\n      }\r\n    });\r\n    setActiveSubCategory(subCateID);\r\n  };\r\n\r\n  const [visible, setVisible] = useState(false);\r\n  var viewShow_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div\r\n        className=\"spinner-border text-primary \"\r\n        role=\"status\"\r\n        style={{ position: \"fixed\", top: \"50%\", left: \"50%\" }}\r\n      >\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewShow_HTMLTABLE = products.map((item, i) => {\r\n      return (\r\n        <div\r\n          className=\"col-xl-2 col-lg-2 col-md-2 col-sm-4 col-6\"\r\n          key={i}\r\n          id={item.SubCategoryName}\r\n        >\r\n          <div className=\"card\">\r\n            <div className=\"card-body\">\r\n              <div className=\"new-arrival-product\">\r\n                <div className=\"text-center bg-white\">\r\n                  <img\r\n                    className=\"img-fluid w-40 img-thumbnail\"\r\n                    style={{ height: \"100px\", objectFit: \"contain\" }}\r\n                    src={`http://${base_url}:${port}/images/products/${item.image}`}\r\n                    alt=\"\"\r\n                  />\r\n                </div>\r\n                <RLink\r\n                  to={{\r\n                    pathname: `/standard-template/product/${btoa(item.id)}`,\r\n                    state: { themes: themes },\r\n                  }}\r\n                  className=\"text-black\"\r\n                >\r\n                  <div className=\"new-arrival-content text-center mt-3\">\r\n                    <h4>\r\n                      {item.ProductName}\r\n                      <p className=\"text-success\" style={{ fontSize: 10 }}>\r\n                        {item.UnitName}\r\n                      </p>\r\n                    </h4>\r\n\r\n                    <span className=\"price\">\r\n                      {item.price +\r\n                        \" \" +\r\n                        getSymbolFromCurrency(item.currency_code)}\r\n                    </span>\r\n                  </div>\r\n                </RLink>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <CNavbar expand=\"lg\" colorScheme=\"light\" className=\"bg-light\">\r\n        <CContainer fluid>\r\n          <CNavbarBrand className=\"text-center text-uppercase text-primary\">\r\n            {data?.BrancheName}\r\n          </CNavbarBrand>\r\n          <CNavbarToggler\r\n            aria-label=\"Toggle navigation\"\r\n            aria-expanded={visible}\r\n            onClick={() => setVisible(!visible)}\r\n          />\r\n          <CCollapse className=\"navbar-collapse\" visible={visible}>\r\n            <CNavbarNav>\r\n              {categories.map((data, i) => (\r\n                <CNavItem as=\"li\" key={i}>\r\n                  <CNavLink\r\n                    href=\"#\"\r\n                    onClick={() => filterCategory(data.id)}\r\n                    className={`text-capitalize font-weight-bold ${\r\n                      activeCategory === data.id\r\n                        ? \"active bg-primary text-white\"\r\n                        : \" \"\r\n                    }`}\r\n                  >\r\n                    {data.CategoryName}\r\n                  </CNavLink>\r\n                </CNavItem>\r\n              ))}\r\n            </CNavbarNav>\r\n          </CCollapse>\r\n        </CContainer>\r\n      </CNavbar>\r\n      <CNavbar colorScheme=\"light\" className=\"bg-white\" placement=\"sticky-top\">\r\n        <Col lg={12}>\r\n          <Toolbar\r\n            component=\"nav\"\r\n            variant=\"dense\"\r\n            sx={{ justifyContent: \"space-between\", overflowX: \"auto\" }}\r\n          >\r\n            {subcategories.map((item, i) => (\r\n              <Link\r\n                onClick={() => filterProducts(item.sub_id)}\r\n                noWrap\r\n                key={i}\r\n                underline=\"hover\"\r\n                variant=\"body2\"\r\n                to={`${item.SubCategoryName}`}\r\n                className={`text-capitalize ${\r\n                  activeSubCategory === item.sub_id\r\n                    ? \"active border border-primary text-primary\"\r\n                    : \" \"\r\n                }`}\r\n                style={{ cursor: \"pointer\" }}\r\n                sx={{ p: 1, flexShrink: 0 }}\r\n              >\r\n                {item.SubCategoryName}\r\n              </Link>\r\n            ))}\r\n          </Toolbar>\r\n        </Col>\r\n      </CNavbar>\r\n      <div className=\"row mt-1 mx-1\">{viewShow_HTMLTABLE}</div>\r\n      <InfiniteScroll\r\n        dataLength={products.length} //This is important field to render the next data\r\n        next={fetchMoreData}\r\n        hasMore={changeState}\r\n        loader={\r\n          <p className=\"text-center pt-5\">\r\n            <b>{t(\"loading\")}</b>\r\n          </p>\r\n        }\r\n        endMessage={\r\n          <p style={{ textAlign: \"center \" }}>\r\n            <b>{t(\"yay_you_have_seen_it_all\")}</b>\r\n          </p>\r\n        }\r\n      ></InfiniteScroll>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DefaultMain;\r\n","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\First\\ProductDetails.js",["307","308","309","310","311","312","313","314","315","316","317","318","319","320","321","322","323","324","325","326","327"],"import React, { Fragment, useState, useEffect, SyntheticEvent } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// Import css files\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport Footer from \"./Footer\";\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport Container from \"@mui/material/Container\";\r\n// import Slider from \"react-slick\";\r\nimport Header from \"./Header\";\r\nimport { base_url, port } from \"../../../../../Consts\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardMedia from \"@mui/material/CardMedia\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Tabs from \"@mui/material/Tabs\";\r\nimport Tab from \"@mui/material/Tab\";\r\nimport Box from \"@mui/material/Box\";\r\n\r\nimport { Zoom } from \"react-slideshow-image\";\r\nimport \"react-slideshow-image/dist/styles.css\";\r\nimport Accordion from \"@mui/material/Accordion\";\r\nimport AccordionSummary from \"@mui/material/AccordionSummary\";\r\nimport AccordionDetails from \"@mui/material/AccordionDetails\";\r\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport \"../style.css\";\r\nconst ProductDetails = (props) => {\r\n  const [themeCustomization, setThemeCustomization] = useState([]);\r\n\r\n  const theme = createTheme({\r\n    palette: {\r\n      warning: {\r\n        // button background\r\n        main: themeCustomization?.button_background_color\r\n          ? themeCustomization.button_background_color\r\n          : \"#111\",\r\n      },\r\n    },\r\n    typography: {\r\n      fontFamily: themeCustomization?.font\r\n        ? themeCustomization.font\r\n        : \"sans-serif\",\r\n      subtitle1: {\r\n        fontSize: themeCustomization?.product_discription_font_size\r\n          ? themeCustomization.product_discription_font_size\r\n          : 10,\r\n        color: themeCustomization?.product_discription_color\r\n          ? themeCustomization.product_discription_color\r\n          : \"#777\",\r\n      },\r\n      // price\r\n      body1: {\r\n        fontSize: themeCustomization?.price_font_size\r\n          ? themeCustomization.price_font_size\r\n          : 12,\r\n        color: themeCustomization?.price_color\r\n          ? themeCustomization.price_color\r\n          : \"#111\",\r\n      },\r\n      // product Names\r\n      button: {\r\n        fontSize: themeCustomization?.product_name_font_size\r\n          ? themeCustomization.product_name_font_size\r\n          : 12,\r\n        color: themeCustomization?.product_name_color\r\n          ? themeCustomization.product_name_color\r\n          : \"#111\",\r\n      },\r\n      // categories and sub categories\r\n      overline: {\r\n        fontSize: themeCustomization?.categories_and_sub_categoies_font_size\r\n          ? themeCustomization.categories_and_sub_categoies_font_size\r\n          : 12,\r\n        color: themeCustomization?.categories_and_sub_categoies_color\r\n          ? themeCustomization.categories_and_sub_categoies_color\r\n          : \"#111\",\r\n      },\r\n      // branch Name\r\n      h6: {\r\n        fontSize: themeCustomization?.branch_name_font_size\r\n          ? themeCustomization.branch_name_font_size\r\n          : 14,\r\n        color: themeCustomization?.branch_name_color\r\n          ? themeCustomization.branch_name_color\r\n          : \"#111\",\r\n      },\r\n    },\r\n    components: {\r\n      MuiButton: {\r\n        variants: [\r\n          {\r\n            // button\r\n            props: { variant: \"contained\" },\r\n            style: {\r\n              fontSize: themeCustomization?.button_text_font_size\r\n                ? themeCustomization.button_text_font_size\r\n                : 12,\r\n              color: themeCustomization?.button_text_color\r\n                ? themeCustomization.button_text_color\r\n                : \"#fff\",\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n  });\r\n  // for localization\r\n  const { t } = useTranslation();\r\n  const id = atob(props.match.params.id);\r\n  //for retriving data using laravel API\r\n  const themes = props.history.location.state.themes;\r\n  let varData = [];\r\n  //for retriving data using laravel API\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [variantData, setVariantData] = useState([]);\r\n  const [showVaralint, setShowVarlist] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [skuarray, setSkuArray] = useState([]);\r\n  const [productDetails, setProductDetails] = useState({\r\n    price: 0,\r\n    stock: 0,\r\n    image: fetchData?.image,\r\n  });\r\n  useEffect(() => {\r\n    const getdata = async () => {\r\n      const product = await axios({\r\n        method: \"GET\",\r\n        url: `/api/GetProduct/${id}`,\r\n      });\r\n      const data = product.data.fetchData;\r\n\r\n      const res = await axios({\r\n        method: \"GET\",\r\n        url: `/api/Getvariations/${id}`,\r\n      });\r\n      setFetchData(data[0]);\r\n      if (res.data.fetchData !== \"\") {\r\n        varData = JSON.parse(res.data.fetchData);\r\n        parseVariants(varData);\r\n      }\r\n\r\n      setLoading(false);\r\n    };\r\n    getdata(); // axios\r\n  }, [id]);\r\n  const changePrice = (varName, variant) => {\r\n    const keys = Object.keys(showVaralint);\r\n    const varlineindex = keys.indexOf(varName);\r\n    const newSkuArray = skuarray;\r\n    newSkuArray[varlineindex] = variant;\r\n    setSkuArray(newSkuArray);\r\n    if (keys.length == newSkuArray.length) {\r\n      caluclatePrice(newSkuArray, variantData);\r\n    }\r\n  };\r\n  const caluclatePrice = (newSkuArray, variantData) => {\r\n    let sku = id + \"-\";\r\n    for (let i = 0; i < newSkuArray.length; i++) {\r\n      if (i == newSkuArray.length - 1) {\r\n        sku += newSkuArray[i];\r\n      } else {\r\n        sku += newSkuArray[i] + \"-\";\r\n      }\r\n    }\r\n\r\n    const priceList = variantData.filter((item) => {\r\n      return item.sku.replace(/\\s+/g, \"\") == sku.replace(/\\s+/g, \"\");\r\n    });\r\n    console.log(newSkuArray);\r\n    let productdetails = { price: 0, stock: 0 };\r\n    if (priceList.length !== 0) {\r\n      const line = priceList.pop();\r\n      const newProductDetails = {\r\n        price: line.price,\r\n        stock: line.stock,\r\n        image: line.image,\r\n      };\r\n      productdetails = newProductDetails;\r\n    } else {\r\n      const newProductDetails = {\r\n        price: 0,\r\n        stock: \"No Stock\",\r\n        image: fetchData.image,\r\n      };\r\n      productdetails = newProductDetails;\r\n    }\r\n    setProductDetails({ ...productdetails });\r\n  };\r\n  const parseVariants = (variantData) => {\r\n    const variants = [];\r\n    const savePostion = [\"postion\", \"sku\", \"price\", \"stock\", \"image\"];\r\n    const varLine = variantData[0];\r\n    const varlinekey = Object.keys(varLine);\r\n    for (let i = 0; i < varlinekey.length; i++) {\r\n      if (savePostion.indexOf(varlinekey[i]) == -1) {\r\n        let listvar = variantData.map((item) => {\r\n          return item[varlinekey[i]];\r\n        });\r\n        // get unique variants\r\n        listvar = listvar.filter(\r\n          (thing, index, self) =>\r\n            index ===\r\n            self.findIndex((t) => t.place === listvar.place && t === thing)\r\n        );\r\n        if (listvar[0] != 0) variants[varlinekey[i]] = listvar;\r\n      }\r\n    }\r\n    let def = [];\r\n    Object.keys(variants).map((item) => {\r\n      def.push(variants[item][0]);\r\n    });\r\n    setSkuArray(def);\r\n    caluclatePrice(def, variantData);\r\n    setShowVarlist(variants);\r\n    setVariantData(variantData);\r\n  };\r\n  const [ingredients, setIntgredients] = useState([]);\r\n  const changeIngredients = (label) => {\r\n    if (!ingredients.includes(label) === false) {\r\n      setIntgredients(ingredients.filter((item) => item !== label));\r\n    } else {\r\n      setIntgredients([...ingredients, label]);\r\n    }\r\n  };\r\n  let [sum, setSum] = useState(0);\r\n\r\n  const extraHandlers = (e, price) => {\r\n    if (e.target.checked) {\r\n      // console.log((sum += parseInt(price)));\r\n      setSum((sum += parseInt(price)));\r\n    } else {\r\n      setSum((sum -= parseInt(price)));\r\n    }\r\n  };\r\n\r\n  const zoomOutProperties = {\r\n    duration: 100,\r\n    transitionDuration: 5,\r\n    canSwipe: true,\r\n    indicators: true,\r\n    scale: false,\r\n    autoplay: false,\r\n    indicators: (i) => (\r\n      <div className=\"indicator\">\r\n        <img\r\n          src={\r\n            productDetails?.stock === \"No Stock\" || productDetails?.stock === 0\r\n              ? `http://${base_url}:${port}/images/products/${fetchData?.image}`\r\n              : `http://${base_url}:${port}/images/variants_pics/${productDetails.image[i]}`\r\n          }\r\n          width=\"40px\"\r\n          // className=\"p-1\"\r\n          // style={{ width: \"40px\" }}\r\n        />\r\n      </div>\r\n    ),\r\n  };\r\n\r\n  var viewImages_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"container \">\r\n        <div\r\n          className=\"spinner-border text-primary \"\r\n          role=\"status\"\r\n          style={{ position: \"fixed\", top: \"50%\", left: \"50%\" }}\r\n        >\r\n          <span className=\"sr-only\">{t(\"loading\")}</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewImages_HTMLTABLE = (\r\n      <Grid container>\r\n        <Grid item xs={12} sm={5} md={5} lg={5}>\r\n          <div className=\"row col-md-12 text-center \">\r\n            <Zoom {...zoomOutProperties}>\r\n              {(() => {\r\n                if (Array.isArray(productDetails.image)) {\r\n                  return productDetails.image?.map((image) => {\r\n                    return (\r\n                      <div key={image} style={{ width: \"100%\" }}>\r\n                        <img\r\n                          src={`http://${base_url}:${port}/images/variants_pics/${image}`}\r\n                          style={{\r\n                            height: \"500px\",\r\n                            width: \"100%\",\r\n                            objectFit: \"contain\",\r\n                          }}\r\n                          // className=\"img-thumbnail\"\r\n                          alt=\"\"\r\n                        />\r\n                      </div>\r\n                    );\r\n                  });\r\n                } else {\r\n                  return (\r\n                    <div style={{ width: \"100%\" }}>\r\n                      <img\r\n                        src={\r\n                          productDetails.stock === \"No Stock\" ||\r\n                          productDetails?.stock === 0\r\n                            ? `http://${base_url}:${port}/images/products/${\r\n                                productDetails.image\r\n                                  ? productDetails?.image\r\n                                  : fetchData?.image\r\n                              }`\r\n                            : `http://${base_url}:${port}/images/variants_pics/${productDetails.image}`\r\n                        }\r\n                        style={{\r\n                          height: \"500px\",\r\n                          width: \"100%\",\r\n                          objectFit: \"contain\",\r\n                        }}\r\n                        alt=\"\"\r\n                      />\r\n                    </div>\r\n                  );\r\n                }\r\n              })()}\r\n            </Zoom>\r\n          </div>\r\n        </Grid>\r\n\r\n        <Grid item xs={12} sm={7} md={7} lg={7}>\r\n          <Card\r\n            sx={{\r\n              // height: \"100%\",\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n            }}\r\n          >\r\n            <div className=\"row mx-3 mt-3\">\r\n              <Typography variant=\"overline\" gutterBottom>\r\n                {t(\"product_name\")}: {fetchData?.ProductName}\r\n              </Typography>\r\n              <Typography variant=\"body2\" gutterBottom>\r\n                {t(\"description\")}: {fetchData?.Description}\r\n              </Typography>\r\n              <Typography variant=\"body2\" gutterBottom>\r\n                {t(\"unit\")}: {fetchData?.UnitName}\r\n              </Typography>\r\n\r\n              {themes?.preparation_time != 0 ? (\r\n                <Typography variant=\"body2\" gutterBottom>\r\n                  {t(\"preparation_Time\")}: {fetchData?.preparationTime} Minutes\r\n                </Typography>\r\n              ) : (\r\n                \" \"\r\n              )}\r\n              <p>\r\n                {t(\"price\")} :{\" \"}\r\n                {productDetails.price === 0\r\n                  ? fetchData?.price + sum\r\n                  : parseInt(productDetails.price) + sum}\r\n              </p>\r\n              <p>\r\n                {t(\"stock\")}:{\" \"}\r\n                {productDetails.stock === 0\r\n                  ? fetchData?.stock\r\n                  : productDetails.stock}\r\n              </p>\r\n            </div>\r\n            <div className=\"row mx-3\">\r\n              <Typography variant=\"overline\" gutterBottom>\r\n                {t(\"ingredients\")}\r\n              </Typography>\r\n              <small>Please select the ingredients you want to remove.</small>\r\n            </div>\r\n            <div className=\"row mx-4\">\r\n              {JSON.parse(fetchData.ingredients)?.map((item, i) => {\r\n                return (\r\n                  <div\r\n                    className=\"col-md-auto col-sm-auto col-xl-auto col-lg-auto col-auto\"\r\n                    onClick={() => {\r\n                      changeIngredients(item.label);\r\n                    }}\r\n                    style={\r\n                      ingredients.includes(item.label)\r\n                        ? {\r\n                            cursor: \"pointer\",\r\n\r\n                            padding: \"3px\",\r\n                            margin: \"2px\",\r\n                            border: \"1px solid\",\r\n                            textAlign: \"center\",\r\n                            borderColor: \"red\",\r\n                            textDecoration: \"line-through\",\r\n                            color: \"red\",\r\n                          }\r\n                        : {\r\n                            cursor: \"pointer\",\r\n                            padding: \"3px\",\r\n                            margin: \"2px\",\r\n                            border: \"1px solid\",\r\n                            textAlign: \"center\",\r\n                            // borderRadius: \"10px\",\r\n                            borderColor: \"black\",\r\n                          }\r\n                    }\r\n                  >\r\n                    {item.label}\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n            <div className=\"row m-3\">\r\n              <Accordion>\r\n                <AccordionSummary\r\n                  expandIcon={<ExpandMoreIcon />}\r\n                  aria-controls=\"panel1a-content\"\r\n                  id=\"panel1a-header\"\r\n                >\r\n                  <Typography variant=\"overline\" gutterBottom>\r\n                    {t(\"extras\")}\r\n                  </Typography>\r\n                </AccordionSummary>\r\n                <AccordionDetails>\r\n                  <FormGroup>\r\n                    {JSON.parse(fetchData.extras)?.map((item, i) => {\r\n                      return (\r\n                        <FormControlLabel\r\n                          key={i}\r\n                          control={\r\n                            <Checkbox\r\n                              onChange={(e) => {\r\n                                extraHandlers(e, item.price);\r\n                              }}\r\n                              color=\"default\"\r\n                              sx={{\r\n                                color: themeCustomization?.branch_name_color\r\n                                  ? themeCustomization.branch_name_color\r\n                                  : \"#ff751d\",\r\n                              }}\r\n                            />\r\n                          }\r\n                          label={\r\n                            <Typography variant=\"body2\" gutterBottom>\r\n                              {item.label + \" ( +\" + item.price + \".00\" + \" )\"}\r\n                            </Typography>\r\n                          }\r\n                        />\r\n                      );\r\n                    })}\r\n                  </FormGroup>\r\n                </AccordionDetails>\r\n              </Accordion>\r\n            </div>\r\n\r\n            <div className=\"row m-3\">\r\n              <Typography variant=\"overline\" gutterBottom>\r\n                {t(\"vatiants\")}\r\n              </Typography>\r\n            </div>\r\n\r\n            <div className=\"row mx-2\">\r\n              {Object.keys(showVaralint).map((list, i) => {\r\n                return (\r\n                  <div className=\"row \" key={i}>\r\n                    <div className=\"col-md-auto col-sm-auto col-xl-auto col-lg-auto col-auto\">\r\n                      {list}\r\n                      <div className=\"row\">\r\n                        {showVaralint[list].map((variant) => {\r\n                          return (\r\n                            <div className=\"col-md-auto col-sm-auto col-xl-auto col-lg-auto col-auto\">\r\n                              <div\r\n                                onClick={() => {\r\n                                  changePrice(list, variant);\r\n                                }}\r\n                                style={\r\n                                  skuarray[i] == variant\r\n                                    ? {\r\n                                        cursor: \"pointer\",\r\n                                        margin: \"2px\",\r\n                                        padding: \"5px\",\r\n                                        border: \"1px solid\",\r\n                                        textAlign: \"center\",\r\n                                        borderRadius: \"10px\",\r\n                                        borderColor: \"red\",\r\n                                      }\r\n                                    : {\r\n                                        cursor: \"pointer\",\r\n                                        margin: \"2px\",\r\n\r\n                                        padding: \"5px\",\r\n                                        border: \"1px solid\",\r\n                                        textAlign: \"center\",\r\n                                        borderRadius: \"10px\",\r\n                                        borderColor: \"black\",\r\n                                      }\r\n                                }\r\n                              >\r\n                                {variant}\r\n                              </div>\r\n                            </div>\r\n                          );\r\n                        })}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <Container maxWidth=\"lg\">\r\n        <Header\r\n          // title={branch[0]?.BrancheName}\r\n          categories={0}\r\n          subcategories={0}\r\n          // setSubCategories={setSubCategories}\r\n          // activeSubCategory={activeSubCategory}\r\n        />\r\n        <main>\r\n          <Grid container spacing={2}>\r\n            {viewImages_HTMLTABLE}\r\n          </Grid>\r\n        </main>\r\n\r\n        <Footer title=\"Add to Card\" />\r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default ProductDetails;\r\n","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\Main.js",["328","329","330","331","332","333","334","335","336","337","338","339","340","341","342","343","344","345","346","347","348","349"],"import React, { useState, useEffect } from \"react\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Container from \"@mui/material/Container\";\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport Header from \"./Header\";\r\nimport Footer from \"./Footer\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport axios from \"axios\";\r\nimport { base_url, port } from \"../../../../../Consts\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport { Link } from \"react-router-dom\";\r\nimport getSymbolFromCurrency from \"currency-symbol-map\";\r\nimport FavoriteBorderIcon from \"@mui/icons-material/FavoriteBorder\";\r\nimport FavoriteIcon from \"@mui/icons-material/Favorite\";\r\n\r\nimport Counter from \"./Counter\";\r\n\r\nvar hold = 1;\r\nexport default function Main(props) {\r\n  const [loading, setLoading] = useState(true);\r\n  const { t } = useTranslation();\r\n  const branchId = atob(props.match.params.id);\r\n  const deliveryFees = parseInt(props.history.location.state.deliveryFees);\r\n\r\n  const [branch, setBranch] = useState([]);\r\n  const [menu, setMenu] = useState([]);\r\n  const [products, setProducts] = useState([]);\r\n  const [activeMenu, setActiveMenu] = useState(0);\r\n  const [custom, setCustom] = useState([]);\r\n  const [cart, setCart] = useState(\r\n    JSON.parse(localStorage.getItem(\"cart\")) || []\r\n  );\r\n  const dataLoad = () => {\r\n    axios.get(`/api/GetTempBasedOnBranch/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setCustom(res.data.fetchData[0]?.Customization);\r\n      }\r\n    });\r\n    axios.get(`/api/GetBranchForShow/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setBranch(res.data.data);\r\n      }\r\n    });\r\n    axios.get(`/api/getCategoriesBasedProducts/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setMenu(res.data.fetchData);\r\n        if (res.data.fetchData[0]?.sub_category_id === null) {\r\n          setActiveMenu(\r\n            res.data.fetchData[0]?.CategoryName +\r\n              res.data.fetchData[0]?.category_id\r\n          );\r\n          axios\r\n            .get(\r\n              `/api/GetProductsBasedCategory/${res.data.fetchData[0]?.category_id}`\r\n            )\r\n            .then((res) => {\r\n              if (res.data.status === 200) {\r\n                setProducts(res.data.data);\r\n              }\r\n            });\r\n        } else {\r\n          setActiveMenu(\r\n            res.data.fetchData[0]?.SubCategoryName +\r\n              res.data.fetchData[0]?.sub_category_id\r\n          );\r\n          axios\r\n            .get(\r\n              `/api/GetProductsBasedOnSubCategory/${res.data.fetchData[0]?.sub_category_id}`\r\n            )\r\n            .then((res) => {\r\n              if (res.data.status === 200) {\r\n                setProducts(res.data.data);\r\n              }\r\n            });\r\n        }\r\n        setLoading(false);\r\n      }\r\n    });\r\n  };\r\n  // const lengthArray = cart.length;\r\n  useEffect(() => {\r\n    let unmounted = false;\r\n    dataLoad();\r\n    return () => {\r\n      unmounted = true;\r\n    };\r\n  }, [cart.length]);\r\n\r\n  const [changeState, setChangeState] = useState(true);\r\n  const fetchMoreData = () => {\r\n    if (hold < menu.length) {\r\n      axios.get(`/api/getCategoriesBasedProducts/${branchId}`).then((res) => {\r\n        if (res.data.status === 200) {\r\n          // setActiveMenu(res.data.fetchData[hold].sub_id);\r\n\r\n          if (res.data.fetchData[hold]?.sub_category_id === null) {\r\n            setActiveMenu(\r\n              res.data.fetchData[hold]?.CategoryName +\r\n                res.data.fetchData[hold]?.category_id\r\n            );\r\n            axios\r\n              .get(\r\n                `/api/GetProductsBasedCategory/${res.data.fetchData[hold]?.category_id}`\r\n              )\r\n              .then((res) => {\r\n                if (res.data.status === 200) {\r\n                  hold = hold + 1;\r\n\r\n                  setProducts(products.concat(res.data.data));\r\n                }\r\n              });\r\n          } else {\r\n            setActiveMenu(\r\n              res.data.fetchData[hold]?.SubCategoryName +\r\n                res.data.fetchData[hold]?.sub_category_id\r\n            );\r\n\r\n            axios\r\n              .get(\r\n                `/api/GetProductsBasedOnSubCategory/${res.data.fetchData[hold]?.sub_category_id}`\r\n              )\r\n              .then((res) => {\r\n                if (res.data.status === 200) {\r\n                  hold = hold + 1;\r\n\r\n                  setProducts(products.concat(res.data.data));\r\n                }\r\n              });\r\n          }\r\n        }\r\n      });\r\n    } else {\r\n      setChangeState(false);\r\n    }\r\n    // console.log(hold);\r\n  };\r\n\r\n  // theme start\r\n  const theme = createTheme({\r\n    palette: {\r\n      background: {\r\n        default: custom?.bgColor ? custom.bgColor : \"#22252a\",\r\n      },\r\n    },\r\n    typography: {\r\n      fontFamily: custom?.font ? custom.font : \"sans-serif\",\r\n      // discription\r\n      subtitle1: {\r\n        fontSize: custom?.pDiscriptionSize\r\n          ? custom.pDiscriptionSize + \"rem\"\r\n          : \"0.75rem\",\r\n\r\n        color: custom?.product_discription_color\r\n          ? custom.product_discription_color\r\n          : \"#fff\",\r\n      },\r\n      // price\r\n      body1: {\r\n        fontSize: custom?.priceSize ? custom.priceSize + \"rem\" : \"1.25rem\",\r\n        color: custom?.price_color ? custom.price_color : \"#fff\",\r\n      },\r\n      // product Names\r\n      button: {\r\n        fontSize: custom?.pNameSize ? custom.pNameSize + \"rem\" : \"1rem\",\r\n        color: custom?.product_name_color ? custom.product_name_color : \"#fff\",\r\n      },\r\n      // Menus\r\n      h6: {\r\n        fontSize: custom?.menusSize ? custom.menusSize + \"rem\" : \"1rem\",\r\n        color: custom?.menusAcriveColor ? custom.menusAcriveColor : \"#f27d1e\",\r\n      },\r\n    },\r\n  });\r\n  // theme end\r\n\r\n  var viewShow_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div\r\n        className=\"spinner-border text-primary \"\r\n        role=\"status\"\r\n        style={{ position: \"fixed\", top: \"50%\", left: \"50%\" }}\r\n      >\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewShow_HTMLTABLE = products?.map((item, i) => {\r\n      return (\r\n        <Grid\r\n          item\r\n          style={\r\n            item.stock == 0\r\n              ? {\r\n                  pointerEvents: \"none\",\r\n                  opacity: \"0.4\",\r\n                  WebkitFilter: \"grayscale(1)\",\r\n                }\r\n              : {}\r\n          }\r\n          xs={\r\n            custom?.numberProductInRowMobile\r\n              ? custom.numberProductInRowMobile == 1\r\n                ? 12\r\n                : custom.numberProductInRowMobile == 2\r\n                ? 6\r\n                : custom.numberProductInRowMobile == 3\r\n                ? 4\r\n                : custom.numberProductInRowMobile == 4 ||\r\n                  custom.numberProductInRowMobile == 5\r\n                ? 3\r\n                : custom.numberProductInRowMobile == 6\r\n                ? 2\r\n                : 6\r\n              : 6\r\n          }\r\n          sm={\r\n            custom?.numberProductInRowTablet\r\n              ? custom.numberProductInRowTablet == 1\r\n                ? 12\r\n                : custom.numberProductInRowTablet == 2\r\n                ? 6\r\n                : custom.numberProductInRowTablet == 3\r\n                ? 4\r\n                : custom.numberProductInRowTablet == 4 ||\r\n                  custom.numberProductInRowTablet == 5\r\n                ? 3\r\n                : custom.numberProductInRowTablet == 6\r\n                ? 2\r\n                : 4\r\n              : 4\r\n          }\r\n          md={\r\n            custom?.numberProductInRowComputer\r\n              ? custom.numberProductInRowComputer == 1\r\n                ? 12\r\n                : custom.numberProductInRowComputer == 2\r\n                ? 6\r\n                : custom.numberProductInRowComputer == 3\r\n                ? 4\r\n                : custom.numberProductInRowComputer == 4 ||\r\n                  custom.numberProductInRowComputer == 5\r\n                ? 3\r\n                : custom.numberProductInRowComputer == 6\r\n                ? 2\r\n                : 3\r\n              : 3\r\n          }\r\n          key={i}\r\n        >\r\n          <Card\r\n            sx={{\r\n              // height: \"100%\",\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              borderRadius: \"5%\",\r\n              backgroundColor: custom?.cardBgColor\r\n                ? custom.cardBgColor\r\n                : \"#2d3134\",\r\n            }}\r\n          >\r\n            <div className=\"px-2 pt-2\">\r\n              {cart.every((val) => {\r\n                return val.id !== item.id;\r\n              }) ? (\r\n                <FavoriteBorderIcon\r\n                  sx={{\r\n                    color: custom?.menusDeactiveColor\r\n                      ? custom.menusDeactiveColor\r\n                      : \"#fff\",\r\n                  }}\r\n                />\r\n              ) : (\r\n                <FavoriteIcon\r\n                  sx={{\r\n                    color: custom?.menusActiveColor\r\n                      ? custom.menusActiveColor\r\n                      : \"#ff751d\",\r\n                  }}\r\n                />\r\n              )}\r\n            </div>\r\n\r\n            <CardContent sx={{ flexGrow: 1 }}>\r\n              <Link\r\n                to={{\r\n                  pathname: `/dark-template/product/${btoa(item.id)}`,\r\n                  state: {\r\n                    custom: custom,\r\n                    deliveryFees: deliveryFees,\r\n                    branchId: branchId,\r\n                    branch: branch,\r\n                  },\r\n                }}\r\n              >\r\n                <div className=\"text-center\">\r\n                  <img\r\n                    style={{\r\n                      height: \"150px\",\r\n                      width: \"100%\",\r\n                      borderRadius: \"15%\",\r\n                      objectFit: \"contain\",\r\n                    }}\r\n                    src={`http://${base_url}:${port}/images/products/${\r\n                      JSON.parse(item.image)[0]\r\n                    }`}\r\n                    alt=\"Image\"\r\n                  />\r\n                </div>\r\n              </Link>\r\n\r\n              <div className=\"mt-2\">\r\n                <Grid container>\r\n                  <Grid item xs={9}>\r\n                    <Link\r\n                      to={{\r\n                        pathname: `/dark-template/product/${btoa(item.id)}`,\r\n                        state: { custom: custom, deliveryFees: deliveryFees },\r\n                      }}\r\n                    >\r\n                      <Typography\r\n                        variant=\"button\"\r\n                        style={{ textTransform: \"capitalize\" }}\r\n                        // className=\"font-weight-bold\"\r\n                      >\r\n                        {item.ProductName}\r\n                      </Typography>\r\n                    </Link>\r\n                  </Grid>\r\n                  <Grid item xs={3}>\r\n                    <Counter\r\n                      custom={custom}\r\n                      item={item}\r\n                      cart={cart}\r\n                      setCart={setCart}\r\n                      products={products}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                <Typography\r\n                  variant=\"body1\"\r\n                  gutterBottom\r\n                  className=\"font-weight-bold\"\r\n                >\r\n                  {getSymbolFromCurrency(item.currency_code) +\r\n                    \"  \" +\r\n                    item.price.toFixed(2)}\r\n                </Typography>\r\n                <Typography variant=\"subtitle1\" gutterBottom>\r\n                  {item.Description}\r\n                </Typography>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      );\r\n    });\r\n  }\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <Container maxWidth=\"lg\">\r\n        <Header\r\n          cart={cart}\r\n          setCart={setCart}\r\n          title={branch?.BrancheName}\r\n          branch={branch}\r\n          menu={menu}\r\n          activeMenu={activeMenu}\r\n          setProducts={setProducts}\r\n          setActiveMenu={setActiveMenu}\r\n          custom={custom}\r\n          deliveryFees={deliveryFees}\r\n        />\r\n\r\n        <Container\r\n          className=\"mt-3 d-flex justify-content-center\"\r\n          style={{ marginBottom: \"50px\" }}\r\n        >\r\n          <Grid container spacing={2} className=\"d-flex justify-content-center\">\r\n            {viewShow_HTMLTABLE}\r\n          </Grid>\r\n        </Container>\r\n        <InfiniteScroll\r\n          dataLength={products.length} //This is important field to render the next data\r\n          next={fetchMoreData}\r\n          hasMore={changeState}\r\n          loader={\r\n            <p className=\"text-center py-4\" style={{ marginBottom: \"100px\" }}>\r\n              <b>{t(\"loading\")}</b>\r\n            </p>\r\n          }\r\n          endMessage={\r\n            <p\r\n              style={{ textAlign: \"center\", marginBottom: \"100px\" }}\r\n              className=\"py-4\"\r\n            >\r\n              <b>{t(\"yay_you_have_seen_it_all\")}</b>\r\n            </p>\r\n          }\r\n        ></InfiniteScroll>\r\n      </Container>\r\n      <Footer\r\n        title=\"Checkout Order\"\r\n        theme={custom}\r\n        cart={cart}\r\n        branch={branch}\r\n        setCart={setCart}\r\n        deliveryFees={deliveryFees}\r\n        branchId={branchId}\r\n      />\r\n    </ThemeProvider>\r\n  );\r\n}\r\n","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\FilterSelection.js",[],"D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\ProductDetails.js",["350","351","352","353","354","355","356","357","358","359","360","361","362","363","364"],"import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// Import css files\r\nimport Footer from \"./Footer\";\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport Container from \"@mui/material/Container\";\r\nimport Header from \"./Header\";\r\nimport { base_url, port } from \"../../../../../Consts\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Card from \"@mui/material/Card\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\n// import \"react-slideshow-image/dist/styles.css\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport FavoriteIcon from \"@mui/icons-material/Favorite\";\r\nimport getSymbolFromCurrency from \"currency-symbol-map\";\r\n// import \"react-responsive-carousel/lib/styles/carousel.min.css\"; // requires a loader\r\nimport { Swiper, SwiperSlide } from \"swiper/react\";\r\n\r\nimport \"swiper/swiper-bundle.min.css\";\r\nimport \"swiper/swiper.min.css\";\r\nimport SwiperCore, { Navigation, Thumbs } from \"swiper\";\r\n\r\n// install Swiper modules\r\nSwiperCore.use([Navigation, Thumbs]);\r\n\r\nconst ProductDetails = (props) => {\r\n  // for localization\r\n  const { t } = useTranslation();\r\n  const id = atob(props.match.params.id);\r\n  const custom = props.history.location.state.custom;\r\n  const deliveryFees = parseInt(props.history.location.state.deliveryFees);\r\n  const branchId = props.history.location.state.branchId;\r\n  const branch = props.history.location.state.branch;\r\n\r\n  // design start\r\n  const theme = createTheme({\r\n    palette: {\r\n      background: {\r\n        default: custom?.bgColor ? custom.bgColor : \"#22252a\",\r\n      },\r\n    },\r\n    typography: {\r\n      fontFamily: custom?.font ? custom.font : \"sans-serif\",\r\n      // discription\r\n      subtitle1: {\r\n        fontSize: custom?.pDiscriptionSize\r\n          ? custom.pDiscriptionSize + \"rem\"\r\n          : \"0.75rem\",\r\n\r\n        color: custom?.product_discription_color\r\n          ? custom.product_discription_color\r\n          : \"#fff\",\r\n      },\r\n      // price\r\n      body1: {\r\n        fontSize: custom?.priceSize ? custom.priceSize + \"rem\" : \"1.25rem\",\r\n        color: custom?.price_color ? custom.price_color : \"#fff\",\r\n      },\r\n      // product Names\r\n      button: {\r\n        fontSize: custom?.pNameSize ? custom.pNameSize + \"rem\" : \"1rem\",\r\n        color: custom?.product_name_color ? custom.product_name_color : \"#fff\",\r\n      },\r\n      // Menus\r\n      h6: {\r\n        fontSize: custom?.menusSize ? custom.menusSize + \"rem\" : \"1rem\",\r\n        color: custom?.menusAcriveColor ? custom.menusAcriveColor : \"#f27d1e\",\r\n      },\r\n    },\r\n  });\r\n  // design end\r\n  const [swiper, setSwiper] = useState(null);\r\n\r\n  let varData = [];\r\n  //for retriving data using laravel API\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [variantData, setVariantData] = useState([]);\r\n  const [showVaralint, setShowVarlist] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [skuarray, setSkuArray] = useState([]);\r\n  const [varPics, setVarPics] = useState([]);\r\n  const [activeSKU, setActiveSKU] = useState([]);\r\n  const [productDetails, setProductDetails] = useState({\r\n    price: 0,\r\n    stock: 0,\r\n    image: fetchData?.image,\r\n  });\r\n  useEffect(() => {\r\n    const getdata = async () => {\r\n      const product = await axios({\r\n        method: \"GET\",\r\n        url: `/api/GetProduct/${id}`,\r\n      });\r\n      const data = product.data.fetchData;\r\n      const res = await axios({\r\n        method: \"GET\",\r\n        url: `/api/Getvariations/${id}`,\r\n      });\r\n      setFetchData(data[0]);\r\n      if (res.data.fetchData !== \"\") {\r\n        varData = JSON.parse(res.data.fetchData.variants);\r\n        setVarPics(JSON.parse(res.data.fetchData.variants));\r\n\r\n        parseVariants(varData);\r\n      }\r\n      setLoading(false);\r\n    };\r\n    getdata(); // axios\r\n  }, [id]);\r\n  const changePrice = (varName, variant) => {\r\n    const keys = Object.keys(showVaralint);\r\n    const varlineindex = keys.indexOf(varName);\r\n    const newSkuArray = skuarray;\r\n    newSkuArray[varlineindex] = variant;\r\n\r\n    setSkuArray(newSkuArray);\r\n    if (keys.length == newSkuArray.length) {\r\n      caluclatePrice(newSkuArray, variantData);\r\n    }\r\n  };\r\n  const caluclatePrice = (newSkuArray, variantData) => {\r\n    let sku = id + \"-\";\r\n\r\n    for (let i = 0; i < newSkuArray.length; i++) {\r\n      if (i == newSkuArray.length - 1) {\r\n        sku += newSkuArray[i];\r\n      } else {\r\n        sku += newSkuArray[i] + \"-\";\r\n      }\r\n    }\r\n\r\n    const priceList = variantData.filter((item) => {\r\n      return item.sku.replace(/\\s+/g, \"\") == sku.replace(/\\s+/g, \"\");\r\n    });\r\n\r\n    let productdetails = { price: 0, stock: 0 };\r\n    if (priceList.length !== 0) {\r\n      const line = priceList.pop();\r\n      const newProductDetails = {\r\n        price: line.price,\r\n        stock: line.stock,\r\n        image: line.image,\r\n      };\r\n\r\n      productdetails = newProductDetails;\r\n    } else {\r\n      const newProductDetails = {\r\n        price: 0,\r\n        stock: \"No Stock\",\r\n        image: fetchData.image,\r\n      };\r\n\r\n      productdetails = newProductDetails;\r\n    }\r\n\r\n    setProductDetails({ ...productdetails });\r\n    if (swiper) {\r\n      let counter = 0;\r\n      varPics.map((section) => {\r\n        section.image.map((image, i) => {\r\n          if (Array.isArray(productDetails.image)) {\r\n            if (image === productDetails.image[0]) {\r\n              swiper.slideTo(counter);\r\n            }\r\n          } else {\r\n            swiper.slideTo(0);\r\n          }\r\n\r\n          counter++;\r\n        });\r\n      });\r\n    }\r\n    setActiveSKU(sku);\r\n  };\r\n  const parseVariants = (variantData) => {\r\n    const variants = [];\r\n    const savePostion = [\"postion\", \"sku\", \"price\", \"stock\", \"image\"];\r\n    const varLine = variantData[0];\r\n    const varlinekey = Object.keys(varLine);\r\n    for (let i = 0; i < varlinekey.length; i++) {\r\n      if (savePostion.indexOf(varlinekey[i]) == -1) {\r\n        let listvar = variantData.map((item) => {\r\n          return item[varlinekey[i]];\r\n        });\r\n        // get unique variants\r\n        listvar = listvar.filter(\r\n          (thing, index, self) =>\r\n            index ===\r\n            self.findIndex((t) => t.place === listvar.place && t === thing)\r\n        );\r\n        if (listvar[0] != 0) variants[varlinekey[i]] = listvar;\r\n      }\r\n    }\r\n    let def = [];\r\n    Object.keys(variants).map((item) => {\r\n      def.push(variants[item][0]);\r\n    });\r\n    setSkuArray(def);\r\n    caluclatePrice(def, variantData);\r\n    setShowVarlist(variants);\r\n    setVariantData(variantData);\r\n  };\r\n  const [ingredients, setIntgredients] = useState([]);\r\n  const changeIngredients = (label) => {\r\n    if (!ingredients.includes(label) === false) {\r\n      setIntgredients(ingredients.filter((item) => item !== label));\r\n    } else {\r\n      setIntgredients([...ingredients, label]);\r\n    }\r\n    // console.log(ingredients);\r\n  };\r\n  let [sum, setSum] = useState(0);\r\n  const [extraValue, setExtraValue] = useState([]);\r\n\r\n  const extraHandlers = (e, price) => {\r\n    if (e.target.checked) {\r\n      // console.log((sum += parseInt(price)));\r\n      setSum((sum += parseInt(price)));\r\n      setExtraValue([\r\n        ...extraValue,\r\n        {\r\n          value: e.target.value,\r\n        },\r\n      ]);\r\n    } else {\r\n      setSum((sum -= parseInt(price)));\r\n      setExtraValue(extraValue.filter((item) => item.value != e.target.value));\r\n    }\r\n    console.log(extraValue);\r\n  };\r\n  const [cart, setCart] = useState(\r\n    JSON.parse(localStorage.getItem(\"cart\")) || []\r\n  );\r\n  const [thumbsSwiper, setThumbsSwiper] = useState(null);\r\n\r\n  var viewImages_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"container\">\r\n        <div\r\n          className=\"spinner-border text-primary \"\r\n          role=\"status\"\r\n          style={{ position: \"fixed\", top: \"50%\", left: \"50%\" }}\r\n        >\r\n          <span className=\"sr-only\">{t(\"loading\")}</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewImages_HTMLTABLE = (\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12} sm={5} md={5} lg={5} xl={5}>\r\n          {(() => {\r\n            if (varPics.length != 0) {\r\n              return (\r\n                <div className=\"swiper\">\r\n                  <Swiper\r\n                    style={{\r\n                      \"--swiper-navigation-color\": \"#fff\",\r\n                      \"--swiper-pagination-color\": \"#fff\",\r\n                    }}\r\n                    spaceBetween={10}\r\n                    speed={2500}\r\n                    navigation={true}\r\n                    thumbs={{ swiper: thumbsSwiper }}\r\n                    onSwiper={(s) => {\r\n                      setSwiper(s);\r\n                    }}\r\n                    className=\"mySwiper2 m-1\"\r\n                  >\r\n                    {varPics?.map((section) => {\r\n                      return section.image?.map((image, i) => {\r\n                        return (\r\n                          <>\r\n                            <SwiperSlide key={image}>\r\n                              <img\r\n                                src={`http://${base_url}:${port}/images/variants_pics/${image}`}\r\n                                alt=\"\"\r\n                                style={{\r\n                                  height: \"400px\",\r\n                                  width: \"100%\",\r\n                                  borderRadius: \"5%\",\r\n                                  objectFit: \"contain\",\r\n                                }}\r\n                              />\r\n                            </SwiperSlide>\r\n                          </>\r\n                        );\r\n                      });\r\n                    })}\r\n                  </Swiper>\r\n                  <Swiper\r\n                    onSwiper={setThumbsSwiper}\r\n                    spaceBetween={10}\r\n                    slidesPerView={5}\r\n                    freeMode={true}\r\n                    watchSlidesProgress={true}\r\n                    className=\"mySwiper m-1\"\r\n                  >\r\n                    {varPics?.map((section) => {\r\n                      return section.image?.map((image) => {\r\n                        return (\r\n                          <SwiperSlide\r\n                            // onSwiper={productDetails.image[0]}\r\n                            key={image}\r\n                          >\r\n                            <img\r\n                              src={`http://${base_url}:${port}/images/variants_pics/${image}`}\r\n                              alt=\"\"\r\n                              style={{\r\n                                height: \"70px\",\r\n                                width: \"100%\",\r\n                                borderRadius: \"5%\",\r\n                                // objectFit: \"contain\",\r\n                              }}\r\n                            />\r\n                          </SwiperSlide>\r\n                        );\r\n                      });\r\n                    })}\r\n                  </Swiper>\r\n                </div>\r\n              );\r\n            } else {\r\n              return (\r\n                <div className=\"swiper\">\r\n                  <Swiper\r\n                    spaceBetween={10}\r\n                    speed={2500}\r\n                    navigation={true}\r\n                    thumbs={{ swiper: thumbsSwiper }}\r\n                    onSwiper={(s) => {\r\n                      setSwiper(s);\r\n                    }}\r\n                    className=\"mySwiper2 m-1\"\r\n                  >\r\n                    {JSON.parse(fetchData.image).map((image) => {\r\n                      return (\r\n                        <SwiperSlide key={image}>\r\n                          <img\r\n                            src={\r\n                              productDetails.stock === \"No Stock\" ||\r\n                              productDetails?.stock === 0\r\n                                ? `http://${base_url}:${port}/images/products/${\r\n                                    productDetails.image\r\n                                      ? productDetails?.image\r\n                                      : image\r\n                                  }`\r\n                                : `http://${base_url}:${port}/images/variants_pics/${productDetails.image}`\r\n                            }\r\n                            alt=\"\"\r\n                            style={{\r\n                              height: \"400px\",\r\n                              width: \"100%\",\r\n                              borderRadius: \"5%\",\r\n                              objectFit: \"contain\",\r\n                            }}\r\n                          />\r\n                        </SwiperSlide>\r\n                      );\r\n                    })}\r\n                  </Swiper>\r\n                  <Swiper\r\n                    onSwiper={setThumbsSwiper}\r\n                    spaceBetween={10}\r\n                    slidesPerView={5}\r\n                    freeMode={true}\r\n                    watchSlidesProgress={true}\r\n                    className=\"mySwiper m-1\"\r\n                  >\r\n                    {JSON.parse(fetchData.image)?.map((image) => {\r\n                      return (\r\n                        <SwiperSlide\r\n                          // onSwiper={productDetails.image[0]}\r\n                          key={image}\r\n                        >\r\n                          <img\r\n                            src={`http://${base_url}:${port}/images/products/${image}`}\r\n                            alt=\"\"\r\n                            style={{\r\n                              height: \"70px\",\r\n                              width: \"100%\",\r\n                              borderRadius: \"5%\",\r\n                              // objectFit: \"contain\",\r\n                            }}\r\n                          />\r\n                        </SwiperSlide>\r\n                      );\r\n                    })}\r\n                  </Swiper>\r\n                </div>\r\n              );\r\n            }\r\n          })()}\r\n        </Grid>\r\n\r\n        <Grid item xs={12} sm={7} md={7} lg={7} xl={7}>\r\n          <Card\r\n            sx={{\r\n              // height: \"100%\",\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              borderRadius: \"5%\",\r\n              backgroundColor: custom?.BgColor ? custom.BgColor : \"#22252a\",\r\n            }}\r\n          >\r\n            <div className=\"row mx-3 mt-3\">\r\n              <Grid container spacing={2}>\r\n                <Grid item xs={10}>\r\n                  <Typography\r\n                    variant=\"button\"\r\n                    style={{ textTransform: \"capitalize\" }}\r\n                    // className=\"font-weight-bold\"\r\n                  >\r\n                    {fetchData.ProductName}\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item xs={2}>\r\n                  <FavoriteIcon sx={{ color: \"#ff751d\" }} />\r\n                </Grid>\r\n              </Grid>\r\n\r\n              <Typography variant=\"subtitle1\" gutterBottom>\r\n                {fetchData?.Description}\r\n              </Typography>\r\n              <Typography variant=\"subtitle1\" gutterBottom>\r\n                {custom?.preparation_time === 0 ||\r\n                fetchData?.preparationTime == null ? (\r\n                  \"\"\r\n                ) : (\r\n                  <>\r\n                    {t(\"preparation_Time\")}: {fetchData?.preparationTime}{\" \"}\r\n                    Minutes\r\n                  </>\r\n                )}\r\n              </Typography>\r\n\r\n              <Typography\r\n                variant=\"body1\"\r\n                gutterBottom\r\n                className=\"font-weight-bold\"\r\n              >\r\n                {t(\"price\")} :{\" \"}\r\n                {productDetails.price === 0\r\n                  ? (fetchData?.price + sum).toFixed(2)\r\n                  : (parseInt(productDetails.price) + sum).toFixed(2)}\r\n                {\"  \" + getSymbolFromCurrency(fetchData.currency_code)}\r\n              </Typography>\r\n              <Typography\r\n                variant=\"body1\"\r\n                gutterBottom\r\n                className=\"font-weight-bold\"\r\n              >\r\n                {t(\"stock\")}:{\" \"}\r\n                {productDetails.stock === 0\r\n                  ? fetchData?.stock\r\n                  : productDetails.stock}\r\n              </Typography>\r\n            </div>\r\n            {custom?.show_ingredients === 0 ||\r\n            JSON.parse(fetchData.ingredients).length === 0 ? (\r\n              \"\"\r\n            ) : (\r\n              <>\r\n                <div className=\"row mx-3\">\r\n                  <Typography variant=\"h6\" gutterBottom>\r\n                    {t(\"ingredients\")}\r\n                  </Typography>\r\n                  <Typography variant=\"subtitle1\" gutterBottom>\r\n                    Please select the ingredients you want to remove.\r\n                  </Typography>\r\n                </div>\r\n                <div className=\"row mx-4\">\r\n                  {JSON.parse(fetchData.ingredients)?.map((item, i) => {\r\n                    return (\r\n                      <div\r\n                        key={i}\r\n                        className=\"col-md-auto col-sm-auto col-xl-auto col-lg-auto col-auto\"\r\n                        onClick={() => {\r\n                          changeIngredients(item.label);\r\n                        }}\r\n                        style={\r\n                          ingredients.includes(item.label)\r\n                            ? {\r\n                                cursor: \"pointer\",\r\n\r\n                                padding: \"3px\",\r\n                                margin: \"2px\",\r\n                                border: \"1px solid\",\r\n                                textAlign: \"center\",\r\n                                borderRadius: \"5px\",\r\n                                borderColor: custom?.menusAcriveColor\r\n                                  ? custom.menusAcriveColor\r\n                                  : \"#f27d1e\",\r\n                                textDecoration: \"line-through\",\r\n                                color: custom?.menusAcriveColor\r\n                                  ? custom.menusAcriveColor\r\n                                  : \"#f27d1e\",\r\n                                fontSize: custom?.pDiscriptionSize\r\n                                  ? custom.pDiscriptionSize + \"rem\"\r\n                                  : \"0.75rem\",\r\n                              }\r\n                            : {\r\n                                cursor: \"pointer\",\r\n                                padding: \"3px\",\r\n                                margin: \"2px\",\r\n                                border: \"1px solid\",\r\n                                textAlign: \"center\",\r\n                                borderRadius: \"5px\",\r\n                                borderColor: custom?.menusDeactiveColor\r\n                                  ? custom.menusDeactiveColor\r\n                                  : \"#fff\",\r\n                                color: custom?.menusDeactiveColor\r\n                                  ? custom.menusDeactiveColor\r\n                                  : \"#fff\",\r\n                                fontSize: custom?.pDiscriptionSize\r\n                                  ? custom.pDiscriptionSize + \"rem\"\r\n                                  : \"0.75rem\",\r\n                              }\r\n                        }\r\n                      >\r\n                        {item.label}\r\n                      </div>\r\n                    );\r\n                  })}\r\n                </div>\r\n              </>\r\n            )}\r\n            {custom?.show_extras === 0 ||\r\n            JSON.parse(fetchData.extras).length === 0 ? (\r\n              \"\"\r\n            ) : (\r\n              <div className=\"row mx-3\">\r\n                <Typography variant=\"h6\" gutterBottom>\r\n                  {t(\"extras\")}\r\n                </Typography>\r\n                <FormGroup>\r\n                  {JSON.parse(fetchData.extras)?.map((item, i) => {\r\n                    return (\r\n                      <FormControlLabel\r\n                        key={i}\r\n                        control={\r\n                          <Checkbox\r\n                            onChange={(e) => {\r\n                              extraHandlers(e, item.price);\r\n                            }}\r\n                            color=\"default\"\r\n                            sx={{\r\n                              color: custom?.menusAcriveColor\r\n                                ? custom.menusAcriveColor\r\n                                : \"#ff751d\",\r\n                            }}\r\n                            value={\r\n                              item.label + \" ( +\" + item.price + \".00\" + \" )\"\r\n                            }\r\n                          />\r\n                        }\r\n                        label={\r\n                          <Typography variant=\"subtitle1\" gutterBottom>\r\n                            {item.label + \" ( +\" + item.price + \".00\" + \" )\"}\r\n                          </Typography>\r\n                        }\r\n                      />\r\n                    );\r\n                  })}\r\n                </FormGroup>\r\n              </div>\r\n            )}\r\n            {custom?.show_variants === 0 ||\r\n            Object.keys(showVaralint).length === 0 ? (\r\n              \"\"\r\n            ) : (\r\n              <>\r\n                <div className=\"row mx-3\">\r\n                  <Typography variant=\"h6\" gutterBottom>\r\n                    {t(\"vatiants\")}\r\n                  </Typography>\r\n                </div>\r\n\r\n                <div className=\"row mx-4 \">\r\n                  {Object.keys(showVaralint).map((list, i) => {\r\n                    return (\r\n                      <div className=\"row m-1\" key={i}>\r\n                        {/* {list} */}\r\n                        <div\r\n                          className=\"row d-flex justify-content-around\"\r\n                          style={{\r\n                            backgroundColor: custom?.cardBgColor\r\n                              ? custom.cardBgColor\r\n                              : \"#2d3134\",\r\n                            borderRadius: \"50px\",\r\n                            padding: \"5px\",\r\n                          }}\r\n                        >\r\n                          {showVaralint[list].map((variant, z) => {\r\n                            return (\r\n                              <div className=\"col\" key={z}>\r\n                                <div\r\n                                  onClick={() => {\r\n                                    changePrice(list, variant);\r\n                                  }}\r\n                                  style={\r\n                                    skuarray[i] == variant\r\n                                      ? {\r\n                                          cursor: \"pointer\",\r\n                                          border: \"1px solid\",\r\n                                          textAlign: \"center\",\r\n                                          borderRadius: \"50px\",\r\n                                          borderColor: \"black\",\r\n                                          backgroundColor:\r\n                                            custom?.menusAcriveColor\r\n                                              ? custom.menusAcriveColor\r\n                                              : \"black\",\r\n                                          color: custom?.menusDeactiveColor\r\n                                            ? custom.menusDeactiveColor\r\n                                            : \"#fff\",\r\n                                        }\r\n                                      : {\r\n                                          cursor: \"pointer\",\r\n                                          border: \"1px solid\",\r\n                                          textAlign: \"center\",\r\n                                          borderRadius: \"50px\",\r\n                                          borderColor: \"#2d3134\",\r\n                                          backgroundColor: \"#2d3134\",\r\n                                          color: custom?.menusDeactiveColor\r\n                                            ? custom.menusDeactiveColor\r\n                                            : \"#fff\",\r\n                                        }\r\n                                  }\r\n                                >\r\n                                  {variant}\r\n                                </div>\r\n                              </div>\r\n                            );\r\n                          })}\r\n                        </div>\r\n                      </div>\r\n                    );\r\n                  })}\r\n                </div>\r\n              </>\r\n            )}\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <Container maxWidth=\"lg\" style={{ marginBottom: \"100px\" }}>\r\n        <Header\r\n          subcategories={0}\r\n          theme={custom}\r\n          cart={cart}\r\n          branch={branch}\r\n          setCart={setCart}\r\n          deliveryFees={deliveryFees}\r\n        />\r\n        {viewImages_HTMLTABLE}\r\n      </Container>\r\n      <Footer\r\n        title=\"Checkout\"\r\n        theme={custom}\r\n        branch={branch}\r\n        setCart={setCart}\r\n        branchId={branchId}\r\n        theme={custom}\r\n        stock={\r\n          productDetails.stock === 0 ? fetchData?.stock : productDetails.stock\r\n        }\r\n        cart={cart}\r\n        deliveryFees={deliveryFees}\r\n        url={{\r\n          pathname: `/dark-template/product/order-details/${btoa(id)}`,\r\n          state: {\r\n            productName: fetchData.ProductName,\r\n\r\n            picture: productDetails.image\r\n              ? JSON.stringify(productDetails?.image)\r\n              : fetchData?.image,\r\n\r\n            stock: productDetails.stock,\r\n            price:\r\n              productDetails.price === 0\r\n                ? fetchData?.price + sum\r\n                : parseInt(productDetails.price) + sum,\r\n            countryCode: fetchData.currency_code,\r\n            extraValue: extraValue,\r\n            orignalPrice:\r\n              productDetails.price === 0\r\n                ? fetchData?.price\r\n                : productDetails.price,\r\n            ingredients: ingredients,\r\n            custom: custom,\r\n            skuarray: skuarray,\r\n            activeSKU: activeSKU,\r\n            orignalStock: productDetails.stock,\r\n            branchId: branchId,\r\n            branch: branch,\r\n            deliveryFees: deliveryFees,\r\n          },\r\n        }}\r\n      />\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default ProductDetails;\r\n","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\OrderDetails.js",["365","366","367","368","369","370","371","372","373"],"import React, { useState, useEffect } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport axios from \"axios\";\r\n\r\n// Import css files\r\n// import \"slick-carousel/slick/slick.css\";\r\n// import \"slick-carousel/slick/slick-theme.css\";\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport Container from \"@mui/material/Container\";\r\n// import Slider from \"react-slick\";\r\nimport Header from \"./Header\";\r\nimport { base_url, port } from \"../../../../../Consts\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Card from \"@mui/material/Card\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport FavoriteIcon from \"@mui/icons-material/Favorite\";\r\nimport Box from \"@mui/material/Box\";\r\nimport getSymbolFromCurrency from \"currency-symbol-map\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport TextareaAutosize from \"@mui/base/TextareaAutosize\";\r\nimport { Swiper, SwiperSlide } from \"swiper/react\";\r\nimport CustomAlert from \"../../../CustomAlert\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\n// import { useHistory } from \"react-router-dom\";\r\nimport \"swiper/swiper-bundle.min.css\";\r\nimport \"swiper/swiper.min.css\";\r\nconst OrderDetails = (props) => {\r\n  const custom = props.history.location.state.custom;\r\n  // design start\r\n  const theme = createTheme({\r\n    palette: {\r\n      background: {\r\n        default: custom?.bgColor ? custom.bgColor : \"#22252a\",\r\n      },\r\n    },\r\n    typography: {\r\n      fontFamily: custom?.font ? custom.font : \"sans-serif\",\r\n      // discription\r\n      subtitle1: {\r\n        fontSize: custom?.pDiscriptionSize\r\n          ? custom.pDiscriptionSize + \"rem\"\r\n          : \"0.75rem\",\r\n\r\n        color: custom?.product_discription_color\r\n          ? custom.product_discription_color\r\n          : \"#fff\",\r\n      },\r\n      // price\r\n      body1: {\r\n        fontSize: custom?.priceSize ? custom.priceSize + \"rem\" : \"1.25rem\",\r\n        color: custom?.price_color ? custom.price_color : \"#fff\",\r\n      },\r\n      // product Names\r\n      button: {\r\n        fontSize: custom?.pNameSize ? custom.pNameSize + \"rem\" : \"1rem\",\r\n        color: custom?.product_name_color ? custom.product_name_color : \"#fff\",\r\n      },\r\n      // Menus\r\n      h6: {\r\n        fontSize: custom?.menusSize ? custom.menusSize + \"rem\" : \"1rem\",\r\n        color: custom?.menusAcriveColor ? custom.menusAcriveColor : \"#f27d1e\",\r\n      },\r\n    },\r\n  });\r\n  // design end\r\n  const { t } = useTranslation();\r\n\r\n  const deliveryFees = props.history.location.state.deliveryFees;\r\n  const branch = props.history.location.state.branch;\r\n  const branchId = props.history.location.state.branchId;\r\n  const productName = props.history.location.state.productName;\r\n  const picture = props.history.location.state.picture;\r\n  const stock = props.history.location.state.stock;\r\n  const price = props.history.location.state.price;\r\n  const orignalPrice = props.history.location.state.orignalPrice;\r\n  const orignalStock = props.history.location.state.orignalStock;\r\n  const countryCode = props.history.location.state.countryCode;\r\n  const extraValue = props.history.location.state.extraValue;\r\n  const ingredients = props.history.location.state.ingredients;\r\n  const skuarray = props.history.location.state.skuarray;\r\n  const activeSKU = props.history.location.state.activeSKU;\r\n\r\n  const id = atob(props.match.params.id);\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [item, setItem] = useState([]);\r\n  useEffect(() => {\r\n    const getdata = async () => {\r\n      const product = await axios({\r\n        method: \"GET\",\r\n        url: `/api/GetProduct/${id}`,\r\n      });\r\n      const data = product.data.fetchData;\r\n      setItem(data);\r\n      const recData = [];\r\n      JSON.parse(data[0].recommendations).map((item) => {\r\n        axios.get(`/api/GetProduct/${item.value}`).then((res) => {\r\n          if (res.data.status === 200 && res.data.fetchData[0].stock > 0) {\r\n            setFetchData(\r\n              recData.concat({\r\n                stock: res.data.fetchData[0].stock,\r\n                ...item,\r\n              })\r\n            );\r\n          }\r\n        });\r\n      });\r\n      setLoading(false);\r\n    };\r\n    getdata(); // axios\r\n  }, [id]);\r\n  let [sum, setSum] = useState(0);\r\n\r\n  const extraHandlers = (e, price, id, qty) => {\r\n    if (e.target.checked) {\r\n      setSum((sum += parseInt(price)));\r\n      setFetchData((fetchData) =>\r\n        fetchData.map((item) =>\r\n          id == item.value ? { ...item, show: true } : item\r\n        )\r\n      );\r\n    } else {\r\n      setSum((sum -= parseInt(price) * qty));\r\n      setFetchData((fetchData) =>\r\n        fetchData.map((item) =>\r\n          id == item.value ? { ...item, qty: 1, show: false } : item\r\n        )\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleDecrement = (e, qty, id, price) => {\r\n    e.preventDefault();\r\n    if (qty > 1) {\r\n      setFetchData((fetchData) =>\r\n        fetchData.map((item) =>\r\n          id == item.value\r\n            ? { ...item, qty: item.qty - (item.qty > 0 ? 1 : 0) }\r\n            : item\r\n        )\r\n      );\r\n      setSum((sum -= parseInt(price)));\r\n    }\r\n  };\r\n  const handelIncrement = (e, qty, id, stock, price) => {\r\n    e.preventDefault();\r\n    if (stock > qty) {\r\n      setFetchData((fetchData) =>\r\n        fetchData.map((item) =>\r\n          id == item.value ? { ...item, qty: item.qty + 1 } : item\r\n        )\r\n      );\r\n      setSum((sum += parseInt(price)));\r\n    } else {\r\n      setAlerts(\r\n        true,\r\n        \"warning\",\r\n        \"More than that isn't available because it's out of stock.\"\r\n      );\r\n    }\r\n  };\r\n  const [cart, setCart] = useState(\r\n    JSON.parse(localStorage.getItem(\"cart\")) || []\r\n  );\r\n  const [note, setNote] = useState([]);\r\n  const changeHandle = (e) => {\r\n    setNote({ ...note, [e.target.name]: e.target.value });\r\n  };\r\n  const [alert, setAlert] = useState({\r\n    open: false,\r\n    severity: \"success\",\r\n    message: \"\",\r\n  });\r\n  const setAlerts = (open, severity, message) => {\r\n    setAlert({\r\n      open: open,\r\n      severity: severity,\r\n      message: message,\r\n    });\r\n  };\r\n  // const history = useHistory();\r\n\r\n  const addItem = (e) => {\r\n    e.preventDefault();\r\n    const check = cart.every((val) => {\r\n      return val.id !== item[0].id;\r\n    });\r\n    if (check) {\r\n      item[0].price = orignalPrice;\r\n      item[0].stock = orignalStock;\r\n      item[0].itemNote = note.itemNote;\r\n      item[0].recommendations = fetchData;\r\n      item[0].extras = extraValue;\r\n      item[0].ingredients = ingredients;\r\n      item[0].totalPrice = (parseInt(price) + sum).toFixed(2);\r\n      item[0].variantSKU = skuarray;\r\n      item[0].checkSKU = activeSKU;\r\n\r\n      setItem(item);\r\n      localStorage.setItem(\"cart\", JSON.stringify(cart.concat(item)));\r\n      setCart(cart.concat(item));\r\n      setAlerts(true, \"success\", \"Successfully added to cart\");\r\n    } else {\r\n      let data = cart.filter((val) => {\r\n        return val.id === item[0].id;\r\n      });\r\n      data[0].price = orignalPrice;\r\n      data[0].stock = orignalStock;\r\n      data[0].itemNote = note.itemNote;\r\n      data[0].recommendations = fetchData;\r\n      data[0].extras = extraValue;\r\n      data[0].ingredients = ingredients;\r\n      data[0].totalPrice = (parseInt(price) + sum).toFixed(2);\r\n      data[0].variantSKU = skuarray;\r\n      data[0].checkSKU = activeSKU;\r\n\r\n      const otherData = cart.filter((val) => {\r\n        return val.id !== item[0].id;\r\n      });\r\n      localStorage.setItem(\"cart\", JSON.stringify(otherData.concat(data)));\r\n      setCart(otherData.concat(data));\r\n      setAlerts(true, \"success\", \"Cart Updated\");\r\n      // uhistory.push(`/dark-template/${btoa(branchId)}`);\r\n    }\r\n  };\r\n  var viewImages_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"container \">\r\n        <div\r\n          className=\"spinner-border text-primary \"\r\n          role=\"status\"\r\n          style={{ position: \"fixed\", top: \"50%\", left: \"50%\" }}\r\n        >\r\n          {/* <span className=\"sr-only\">{t(\"loading\")}</span> */}\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewImages_HTMLTABLE = fetchData?.map((item, i) => {\r\n      return (\r\n        <Grid container spacing={2} key={i}>\r\n          <Grid item xs={8} sm={8} md={8}>\r\n            <FormControlLabel\r\n              control={\r\n                <Checkbox\r\n                  color=\"default\"\r\n                  onChange={(e) => {\r\n                    extraHandlers(e, item.price, item.value, item.qty);\r\n                  }}\r\n                  sx={{\r\n                    color: custom?.menusAcriveColor\r\n                      ? custom.menusAcriveColor\r\n                      : \"#ff751d\",\r\n                  }}\r\n                />\r\n              }\r\n              label={\r\n                <Typography variant=\"subtitle1\" gutterBottom>\r\n                  {item.label +\r\n                    \" ( +\" +\r\n                    (item.price * item.qty).toFixed(2) +\r\n                    \" \" +\r\n                    getSymbolFromCurrency(countryCode) +\r\n                    \" )\"}\r\n                </Typography>\r\n              }\r\n            />\r\n          </Grid>\r\n          {item?.show ? (\r\n            <Grid item xs={4} sm={4} md={4}>\r\n              <div className=\"row mt-2\">\r\n                <div className={`row`}>\r\n                  <div className=\"col-4 \">\r\n                    <IconButton\r\n                      onClick={(e) =>\r\n                        handleDecrement(e, item.qty, item.value, item.price)\r\n                      }\r\n                    >\r\n                      <Typography\r\n                        style={{ cursor: \"pointer\" }}\r\n                        variant=\"h6\"\r\n                        gutterBottom\r\n                      >\r\n                        <svg\r\n                          xmlns=\"http://www.w3.org/2000/svg\"\r\n                          width=\"16\"\r\n                          height=\"16\"\r\n                          fill=\"currentColor\"\r\n                          className=\"bi bi-dash-square-dotted  \"\r\n                          viewBox=\"0 0 16 16\"\r\n                        >\r\n                          <path d=\"M2.5 0c-.166 0-.33.016-.487.048l.194.98A1.51 1.51 0 0 1 2.5 1h.458V0H2.5zm2.292 0h-.917v1h.917V0zm1.833 0h-.917v1h.917V0zm1.833 0h-.916v1h.916V0zm1.834 0h-.917v1h.917V0zm1.833 0h-.917v1h.917V0zM13.5 0h-.458v1h.458c.1 0 .199.01.293.029l.194-.981A2.51 2.51 0 0 0 13.5 0zm2.079 1.11a2.511 2.511 0 0 0-.69-.689l-.556.831c.164.11.305.251.415.415l.83-.556zM1.11.421a2.511 2.511 0 0 0-.689.69l.831.556c.11-.164.251-.305.415-.415L1.11.422zM16 2.5c0-.166-.016-.33-.048-.487l-.98.194c.018.094.028.192.028.293v.458h1V2.5zM.048 2.013A2.51 2.51 0 0 0 0 2.5v.458h1V2.5c0-.1.01-.199.029-.293l-.981-.194zM0 3.875v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zM0 5.708v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zM0 7.542v.916h1v-.916H0zm15 .916h1v-.916h-1v.916zM0 9.375v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zm-16 .916v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zm-16 .917v.458c0 .166.016.33.048.487l.98-.194A1.51 1.51 0 0 1 1 13.5v-.458H0zm16 .458v-.458h-1v.458c0 .1-.01.199-.029.293l.981.194c.032-.158.048-.32.048-.487zM.421 14.89c.183.272.417.506.69.689l.556-.831a1.51 1.51 0 0 1-.415-.415l-.83.556zm14.469.689c.272-.183.506-.417.689-.69l-.831-.556c-.11.164-.251.305-.415.415l.556.83zm-12.877.373c.158.032.32.048.487.048h.458v-1H2.5c-.1 0-.199-.01-.293-.029l-.194.981zM13.5 16c.166 0 .33-.016.487-.048l-.194-.98A1.51 1.51 0 0 1 13.5 15h-.458v1h.458zm-9.625 0h.917v-1h-.917v1zm1.833 0h.917v-1h-.917v1zm1.834 0h.916v-1h-.916v1zm1.833 0h.917v-1h-.917v1zm1.833 0h.917v-1h-.917v1zM4.5 7.5a.5.5 0 0 0 0 1h7a.5.5 0 0 0 0-1h-7z\" />\r\n                        </svg>\r\n                      </Typography>\r\n                    </IconButton>\r\n                  </div>\r\n                  <div className=\"col-4\">\r\n                    <IconButton>\r\n                      <Typography\r\n                        variant=\"subtitle1\"\r\n                        gutterBottom\r\n                        className=\"mt-1\"\r\n                      >\r\n                        {item.qty}\r\n                      </Typography>\r\n                    </IconButton>\r\n                  </div>\r\n                  <div className=\"col-4\">\r\n                    <IconButton\r\n                      onClick={(e) =>\r\n                        handelIncrement(\r\n                          e,\r\n                          item.qty,\r\n                          item.value,\r\n                          item.stock,\r\n                          item.price\r\n                        )\r\n                      }\r\n                    >\r\n                      <Typography\r\n                        style={{ cursor: \"pointer\" }}\r\n                        variant=\"h6\"\r\n                        gutterBottom\r\n                      >\r\n                        <svg\r\n                          xmlns=\"http://www.w3.org/2000/svg\"\r\n                          width=\"16\"\r\n                          height=\"16\"\r\n                          fill=\"currentColor\"\r\n                          className=\"bi bi-plus-square-dotted\"\r\n                          viewBox=\"0 0 16 16\"\r\n                        >\r\n                          <path d=\"M2.5 0c-.166 0-.33.016-.487.048l.194.98A1.51 1.51 0 0 1 2.5 1h.458V0H2.5zm2.292 0h-.917v1h.917V0zm1.833 0h-.917v1h.917V0zm1.833 0h-.916v1h.916V0zm1.834 0h-.917v1h.917V0zm1.833 0h-.917v1h.917V0zM13.5 0h-.458v1h.458c.1 0 .199.01.293.029l.194-.981A2.51 2.51 0 0 0 13.5 0zm2.079 1.11a2.511 2.511 0 0 0-.69-.689l-.556.831c.164.11.305.251.415.415l.83-.556zM1.11.421a2.511 2.511 0 0 0-.689.69l.831.556c.11-.164.251-.305.415-.415L1.11.422zM16 2.5c0-.166-.016-.33-.048-.487l-.98.194c.018.094.028.192.028.293v.458h1V2.5zM.048 2.013A2.51 2.51 0 0 0 0 2.5v.458h1V2.5c0-.1.01-.199.029-.293l-.981-.194zM0 3.875v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zM0 5.708v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zM0 7.542v.916h1v-.916H0zm15 .916h1v-.916h-1v.916zM0 9.375v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zm-16 .916v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zm-16 .917v.458c0 .166.016.33.048.487l.98-.194A1.51 1.51 0 0 1 1 13.5v-.458H0zm16 .458v-.458h-1v.458c0 .1-.01.199-.029.293l.981.194c.032-.158.048-.32.048-.487zM.421 14.89c.183.272.417.506.69.689l.556-.831a1.51 1.51 0 0 1-.415-.415l-.83.556zm14.469.689c.272-.183.506-.417.689-.69l-.831-.556c-.11.164-.251.305-.415.415l.556.83zm-12.877.373c.158.032.32.048.487.048h.458v-1H2.5c-.1 0-.199-.01-.293-.029l-.194.981zM13.5 16c.166 0 .33-.016.487-.048l-.194-.98A1.51 1.51 0 0 1 13.5 15h-.458v1h.458zm-9.625 0h.917v-1h-.917v1zm1.833 0h.917v-1h-.917v1zm1.834-1v1h.916v-1h-.916zm1.833 1h.917v-1h-.917v1zm1.833 0h.917v-1h-.917v1zM8.5 4.5a.5.5 0 0 0-1 0v3h-3a.5.5 0 0 0 0 1h3v3a.5.5 0 0 0 1 0v-3h3a.5.5 0 0 0 0-1h-3v-3z\" />\r\n                        </svg>\r\n                      </Typography>\r\n                    </IconButton>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </Grid>\r\n          ) : (\r\n            \" \"\r\n          )}\r\n        </Grid>\r\n      );\r\n    });\r\n  }\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      {alert.open ? (\r\n        <CustomAlert\r\n          open={alert.open}\r\n          severity={alert.severity}\r\n          message={alert.message}\r\n          setAlert={setAlert}\r\n        />\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <Container maxWidth=\"lg\">\r\n        <Header\r\n          subcategories={0}\r\n          cart={cart}\r\n          theme={custom}\r\n          branch={branch}\r\n          setCart={setCart}\r\n          deliveryFees={deliveryFees}\r\n        />\r\n        <Container\r\n          className=\"d-flex justify-content-center \"\r\n          style={{ marginBottom: \"100px\" }}\r\n        >\r\n          <Grid container spacing={2} className=\"d-flex justify-content-center\">\r\n            <Grid item xs={12} sm={8} md={8}>\r\n              <Card\r\n                sx={{\r\n                  display: \"flex\",\r\n                  flexDirection: \"column\",\r\n                  borderRadius: \"5%\",\r\n                  backgroundColor: custom?.cardBgColor\r\n                    ? custom.cardBgColor\r\n                    : \"#2d3134\",\r\n                }}\r\n              >\r\n                <Grid item xs={12} sm={12} md={12} lg={12}>\r\n                  <Swiper\r\n                    speed={2500}\r\n                    className=\"mySwiper2\"\r\n                    spaceBetween={1}\r\n                    style={{\r\n                      \"--swiper-navigation-color\": \"#fff\",\r\n                      \"--swiper-pagination-color\": \"#fff\",\r\n                    }}\r\n                    // navigation={true}\r\n                  >\r\n                    {JSON.parse(picture)?.map((image, i) => {\r\n                      return (\r\n                        <SwiperSlide key={i}>\r\n                          <img\r\n                            src={\r\n                              stock === \"No Stock\" || stock === 0\r\n                                ? `http://${base_url}:${port}/images/products/${image}`\r\n                                : `http://${base_url}:${port}/images/variants_pics/${image}`\r\n                            }\r\n                            alt=\"\"\r\n                            style={{\r\n                              height: \"200px\",\r\n                              width: \"100%\",\r\n                              borderRadius: \"5%\",\r\n\r\n                              objectFit: \"contain\",\r\n                            }}\r\n                          />\r\n                        </SwiperSlide>\r\n                      );\r\n                    })}\r\n                  </Swiper>\r\n                </Grid>\r\n                <FavoriteIcon sx={{ color: \"#ff751d\" }} className=\"mx-4 my-2\" />\r\n\r\n                <div className=\"row mx-3\">\r\n                  <Typography\r\n                    variant=\"button\"\r\n                    style={{ textTransform: \"capitalize\" }}\r\n                  >\r\n                    {productName}{\" \"}\r\n                    {orignalPrice +\r\n                      \".00\" +\r\n                      \" \" +\r\n                      getSymbolFromCurrency(countryCode)}\r\n                  </Typography>\r\n                  <Typography variant=\"subtitle1\" gutterBottom>\r\n                    {ingredients?.map((item, i) => {\r\n                      if (ingredients.length == i + 1) {\r\n                        return item + \" - Not Included\";\r\n                      } else {\r\n                        return item + \" , \";\r\n                      }\r\n                    })}\r\n                  </Typography>\r\n                  <Typography variant=\"subtitle1\" gutterBottom>\r\n                    {extraValue?.map((item, i) => {\r\n                      if (extraValue.length == i + 1) {\r\n                        return item.value + \" - Included\";\r\n                      } else {\r\n                        return item.value + \" , \";\r\n                      }\r\n                    })}\r\n                  </Typography>\r\n                  {custom?.show_recommendation == 0 ||\r\n                  fetchData.length === 0 ? (\r\n                    \"\"\r\n                  ) : (\r\n                    <>\r\n                      <Typography variant=\"h6\" gutterBottom>\r\n                        {t(\"recommendation\")}\r\n                      </Typography>\r\n                      <FormGroup>{viewImages_HTMLTABLE}</FormGroup>\r\n                    </>\r\n                  )}\r\n                  <TextareaAutosize\r\n                    // aria-label=\"empty textarea\"\r\n                    onChange={(e) => changeHandle(e)}\r\n                    name=\"itemNote\"\r\n                    className=\"my-3\"\r\n                    minRows={3}\r\n                    placeholder=\"Note\"\r\n                    style={{\r\n                      backgroundColor: custom?.cardBgColor\r\n                        ? custom.cardBgColor\r\n                        : \"#2d3134\",\r\n                      color: custom?.menusDeactiveColor\r\n                        ? custom.menusDeactiveColor\r\n                        : \"#fff\",\r\n                      fontSize: 12,\r\n                      borderColor: custom?.menusAcriveColor\r\n                        ? custom.menusAcriveColor\r\n                        : \"#ff751d\",\r\n                    }}\r\n                  />\r\n                </div>\r\n              </Card>\r\n            </Grid>\r\n          </Grid>\r\n        </Container>\r\n      </Container>\r\n      <Box\r\n        style={{ position: \"fixed\", width: \"100%\" }}\r\n        sx={{\r\n          bgcolor: theme?.cardBgColor ? theme.cardBgColor : \"#2d3134\",\r\n          position: \"sticky\",\r\n          bottom: \"0px\",\r\n        }}\r\n        // sx={{\r\n        //   borderRadius: \"5%\",\r\n        //   backgroundColor: \"light\",\r\n        //   position: \"sticky\",\r\n        //   bottom: \"0px\",\r\n        // }}\r\n        className=\"bottom-0 text-center p-1\"\r\n      >\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={7}>\r\n            <Typography\r\n              variant=\"body1\"\r\n              gutterBottom\r\n              className=\"font-weight-bold text-center col-12 btn\"\r\n            >\r\n              {(parseInt(price) + sum).toFixed(2) +\r\n                \" \" +\r\n                getSymbolFromCurrency(countryCode)}\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={5}>\r\n            <button\r\n              className=\"col-12 btn\"\r\n              style={{\r\n                textTransform: \"capitalize\",\r\n                backgroundColor: custom?.button_background_color\r\n                  ? custom.button_background_color\r\n                  : \"#ff751d\",\r\n                color: custom?.button_text_color\r\n                  ? custom.button_text_color\r\n                  : \"#f1fcfe\",\r\n                fontSize: custom?.bTextSize ? custom.bTextSize + \"rem\" : \"1rem\",\r\n              }}\r\n              onClick={(e) => addItem(e)}\r\n            >\r\n              Add to Cart\r\n            </button>\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default OrderDetails;\r\n","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Thrid\\Main.js",["374","375","376","377","378","379","380","381","382","383"],"import React, { useState, useEffect } from \"react\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Container from \"@mui/material/Container\";\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardMedia from \"@mui/material/CardMedia\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport axios from \"axios\";\r\nimport { base_url, port } from \"../../../../../Consts\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport Box from \"@mui/material/Box\";\r\nimport Tabs, { tabsClasses } from \"@mui/material/Tabs\";\r\nimport Tab from \"@mui/material/Tab\";\r\nimport getSymbolFromCurrency from \"currency-symbol-map\";\r\n\r\nvar hold = 1;\r\nexport default function Main(props) {\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  const [loading, setLoading] = useState(true);\r\n  const { t } = useTranslation();\r\n  const branchId = atob(props.match.params.id);\r\n  const [subcategories, setSubCategories] = useState([]);\r\n  const [products, setProducts] = useState([]);\r\n  const [themeCustomization, setThemeCustomization] = useState([]);\r\n  const [categories, setCategories] = useState([]);\r\n  const [activeCategory, setActiveCategory] = useState(0);\r\n\r\n  useEffect(() => {\r\n    axios.get(`/api/GetCategories/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setCategories(res.data.fetchData);\r\n        setActiveCategory(res.data.fetchData[0].id);\r\n        // console.log(res.data.fetchData);\r\n      }\r\n    });\r\n    axios.get(`/api/GetTempBasedOnBranch/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setThemeCustomization(res.data.fetchData[0]?.Customization);\r\n        // console.log(res.data.fetchData[0].Customization);\r\n      }\r\n    });\r\n    axios.get(`/api/getSubCateBasedOnBranch/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setSubCategories(res.data.fetchData);\r\n        // console.log(res.data.fetchData);\r\n      }\r\n      setLoading(false);\r\n    });\r\n  }, []);\r\n\r\n  // design start\r\n  const theme = createTheme({\r\n    // overrides: {\r\n    //   MuiButton: {\r\n    //     root: {\r\n    //       backgroundr: \"#d6e0ec\",\r\n    //     },\r\n    //   },\r\n    // },\r\n    palette: {\r\n      warning: {\r\n        // button background\r\n        main: themeCustomization?.button_background_color\r\n          ? themeCustomization.button_background_color\r\n          : \"#ff751d\",\r\n      },\r\n    },\r\n    typography: {\r\n      fontFamily: themeCustomization?.font\r\n        ? themeCustomization.font\r\n        : \"sans-serif\",\r\n      subtitle1: {\r\n        fontSize: themeCustomization?.product_discription_font_size\r\n          ? themeCustomization.product_discription_font_size\r\n          : 10,\r\n        color: themeCustomization?.product_discription_color\r\n          ? themeCustomization.product_discription_color\r\n          : \"#777\",\r\n      },\r\n      // price\r\n      body1: {\r\n        fontSize: themeCustomization?.price_font_size\r\n          ? themeCustomization.price_font_size\r\n          : 12,\r\n        color: themeCustomization?.price_color\r\n          ? themeCustomization.price_color\r\n          : \"#f1fcfe\",\r\n      },\r\n      // product Names\r\n      button: {\r\n        fontSize: themeCustomization?.product_name_font_size\r\n          ? themeCustomization.product_name_font_size\r\n          : 12,\r\n        color: themeCustomization?.product_name_color\r\n          ? themeCustomization.product_name_color\r\n          : \"#1f1d1f\",\r\n      },\r\n      // categories and sub categories\r\n      overline: {\r\n        fontSize: themeCustomization?.categories_and_sub_categoies_font_size\r\n          ? themeCustomization.categories_and_sub_categoies_font_size\r\n          : 12,\r\n        color: themeCustomization?.categories_and_sub_categoies_color\r\n          ? themeCustomization.categories_and_sub_categoies_color\r\n          : \"#ff751d\",\r\n      },\r\n      // branch Name\r\n      h4: {\r\n        fontSize: themeCustomization?.branch_name_font_size\r\n          ? themeCustomization.branch_name_font_size\r\n          : 28,\r\n        color: themeCustomization?.branch_name_color\r\n          ? themeCustomization.branch_name_color\r\n          : \"#aa3f32\",\r\n      },\r\n      subtitle2: {\r\n        fontSize: themeCustomization?.branch_name_font_size\r\n          ? themeCustomization.branch_name_font_size\r\n          : 12,\r\n        color: themeCustomization?.branch_name_color\r\n          ? themeCustomization.branch_name_color\r\n          : \"#1f1d1f\",\r\n      },\r\n    },\r\n    components: {\r\n      MuiButton: {\r\n        variants: [\r\n          {\r\n            // button\r\n            props: { variant: \"contained\" },\r\n            style: {\r\n              fontSize: themeCustomization?.button_text_font_size\r\n                ? themeCustomization.button_text_font_size\r\n                : 12,\r\n              color: themeCustomization?.button_text_color\r\n                ? themeCustomization.button_text_color\r\n                : \"#f1fcfe\",\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n  });\r\n  // design end\r\n  const filterCategory = (cateId) => {\r\n    axios.get(`/api/GetSubCategories/${cateId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setSubCategories(res.data.fetchData);\r\n      }\r\n    });\r\n    setActiveCategory(cateId);\r\n  };\r\n  var viewShow_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div\r\n        className=\"spinner-border text-primary \"\r\n        role=\"status\"\r\n        style={{ position: \"fixed\", top: \"50%\", left: \"50%\" }}\r\n      >\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewShow_HTMLTABLE = subcategories?.map((item, i) => {\r\n      return (\r\n        <Grid item xs={4} sm={4} md={2} key={i}>\r\n          <Card\r\n            sx={{\r\n              // width: \"300px\",\r\n              background: \"#ffffff\",\r\n\r\n              border: \"1px solid\",\r\n              textAlign: \"center\",\r\n              borderRadius: \"30px\",\r\n              borderColor: \"#ffffff\",\r\n            }}\r\n          >\r\n            <Link\r\n              to={{\r\n                pathname: `/thrid-template/products-list/${btoa(item.sub_id)}`,\r\n                state: {\r\n                  themes: themeCustomization,\r\n                  SubCategoryName: item.SubCategoryName,\r\n                },\r\n              }}\r\n            >\r\n              <CardContent sx={{ flexGrow: 1 }} className=\"text-center\">\r\n                <img\r\n                  style={{\r\n                    height: \"80px\",\r\n                    width: \"100px\",\r\n                    textAlign: \"center\",\r\n                    borderRadius: \"10%\",\r\n                  }}\r\n                  className=\"mb-2\"\r\n                  src={`http://${base_url}:${port}/images/sub_catagories/${item.SubCategoryIcon}`}\r\n                />\r\n                <Typography\r\n                  variant=\"subtitle2\"\r\n                  style={{ textTransform: \"capitalize\" }}\r\n                  className=\"font-weight-bold\"\r\n                >\r\n                  {item.SubCategoryName}\r\n                </Typography>\r\n              </CardContent>\r\n            </Link>\r\n          </Card>\r\n        </Grid>\r\n      );\r\n    });\r\n  }\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <Container\r\n        maxWidth=\"lg\"\r\n        className=\"p-2\"\r\n        // style={{ backgroundColor: \"#d6e0ec\" }}\r\n      >\r\n        <Grid item className=\"text-center\">\r\n          <Typography\r\n            variant=\"button\"\r\n            gutterBottom\r\n            className=\"font-weight-bold m-1\"\r\n          >\r\n            {subcategories[0].BrancheName}\r\n          </Typography>\r\n        </Grid>\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={12}>\r\n            <Box\r\n              sx={{\r\n                flexGrow: 1,\r\n                bgcolor: \"background.paper\",\r\n                display: \"flex\",\r\n                width: \"100%\",\r\n                marginBottom: \"10px\",\r\n              }}\r\n            >\r\n              <Tabs\r\n                variant=\"scrollable\"\r\n                scrollButtons=\"auto\"\r\n                aria-label=\"scrollable auto tabs example\"\r\n                value={value}\r\n                onChange={handleChange}\r\n                // variant=\"scrollable\"\r\n                // scrollButtons\r\n                TabIndicatorProps={{\r\n                  style: {\r\n                    display: \"none\",\r\n                  },\r\n                }}\r\n                sx={{\r\n                  [`& .${tabsClasses.scrollButtons}`]: {\r\n                    \"&.Mui-disabled\": { opacity: 0.3 },\r\n                  },\r\n                }}\r\n              >\r\n                {categories?.map((section, i) => (\r\n                  <Tab\r\n                    onClick={() => filterCategory(section.id)}\r\n                    style={\r\n                      activeCategory == section.id\r\n                        ? {\r\n                            cursor: \"pointer\",\r\n                            background: \"#f6753b\",\r\n                            margin: \"2px\",\r\n                            padding: \"5px\",\r\n                            border: \"1px solid\",\r\n                            textAlign: \"center\",\r\n                            borderRadius: \"10px\",\r\n                            borderColor: \"#f6753b\",\r\n                          }\r\n                        : {\r\n                            cursor: \"pointer\",\r\n                            margin: \"2px\",\r\n                            padding: \"5px\",\r\n                            textAlign: \"center\",\r\n                            borderRadius: \"10px\",\r\n                          }\r\n                    }\r\n                    icon={\r\n                      <img\r\n                        style={{\r\n                          height: \"40px\",\r\n                          width: \"60px\",\r\n                          borderRadius: \"10%\",\r\n                        }}\r\n                        src={`http://${base_url}:${port}/images/catagories/${section.CategoryIcon}`}\r\n                      />\r\n                    }\r\n                    label={\r\n                      <Typography\r\n                        style={\r\n                          activeCategory == section.id\r\n                            ? {\r\n                                color: \"white\",\r\n                                textTransform: \"capitalize\",\r\n                              }\r\n                            : {\r\n                                color: \"black\",\r\n                                textTransform: \"capitalize\",\r\n                              }\r\n                        }\r\n                        className=\"font-weight-bold\"\r\n                      >\r\n                        {section.CategoryName}\r\n                      </Typography>\r\n                    }\r\n                  />\r\n                ))}\r\n              </Tabs>\r\n            </Box>\r\n          </Grid>\r\n          <Grid container spacing={2} style={{ marginLeft: \"1px\" }}>\r\n            {viewShow_HTMLTABLE}\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\First\\Main.js",["384","385","386","387","388","389","390","391","392"],"import React, { useState, useEffect } from \"react\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Container from \"@mui/material/Container\";\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport Header from \"./Header\";\r\nimport Footer from \"./Footer\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardMedia from \"@mui/material/CardMedia\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport axios from \"axios\";\r\nimport { base_url, port } from \"../../../../../Consts\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport { Link } from \"react-router-dom\";\r\nimport getSymbolFromCurrency from \"currency-symbol-map\";\r\n\r\nvar hold = 1;\r\nexport default function Main(props) {\r\n  const [loading, setLoading] = useState(true);\r\n  const { t } = useTranslation();\r\n  const branchId = atob(props.match.params.id);\r\n  const [branch, setBranch] = useState([]);\r\n  const [categories, setCategories] = useState([]);\r\n  const [subcategories, setSubCategories] = useState([]);\r\n  const [products, setProducts] = useState([]);\r\n  const [activeSubCategory, setActiveSubCategory] = useState(0);\r\n  const [themeCustomization, setThemeCustomization] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios.get(`/api/GetTempBasedOnBranch/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setThemeCustomization(res.data.fetchData?.Customization);\r\n\r\n        // console.log(res.data.fetchData[0].Customization);\r\n      }\r\n    });\r\n    axios.get(`/api/GetBranchForShow/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setBranch(res.data.data);\r\n      }\r\n    });\r\n    axios.get(`/api/GetCategories/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setCategories(res.data.fetchData);\r\n      }\r\n    });\r\n    axios.get(`/api/getSubCateBasedOnBranch/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setSubCategories(res.data.fetchData);\r\n        setActiveSubCategory(res.data.fetchData[0].sub_id);\r\n\r\n        axios\r\n          .get(\r\n            `/api/GetProductsBasedOnSubCategory/${res.data.fetchData[0]?.sub_id}`\r\n          )\r\n          .then((res) => {\r\n            if (res.data.status === 200) {\r\n              setProducts(res.data.data);\r\n            }\r\n          });\r\n        setLoading(false);\r\n      }\r\n    });\r\n  }, []);\r\n  const [changeState, setChangeState] = useState(true);\r\n  const fetchMoreData = () => {\r\n    if (hold < subcategories.length) {\r\n      axios.get(`/api/getSubCateBasedOnBranch/${branchId}`).then((res) => {\r\n        if (res.data.status === 200) {\r\n          setActiveSubCategory(res.data.fetchData[hold].sub_id);\r\n          // console.log(res.data.fetchData[hold].sub_id);\r\n\r\n          axios\r\n            .get(\r\n              `/api/GetProductsBasedOnSubCategory/${res.data.fetchData[hold].sub_id}`\r\n            )\r\n            .then((res) => {\r\n              if (res.data.status === 200) {\r\n                if (res.data.data.length === 0) {\r\n                  hold = hold + 1;\r\n                  // console.log(res.data.data);\r\n                  fetchMoreData();\r\n                } else {\r\n                  hold = hold + 1;\r\n                  setProducts(products.concat(res.data.data));\r\n                }\r\n              }\r\n            });\r\n\r\n          setSubCategories(res.data.fetchData);\r\n        }\r\n      });\r\n    } else {\r\n      setChangeState(false);\r\n    }\r\n    // console.log(hold);\r\n  };\r\n  // design start\r\n  const theme = createTheme({\r\n    palette: {\r\n      warning: {\r\n        // button background\r\n        main: themeCustomization?.button_background_color\r\n          ? themeCustomization.button_background_color\r\n          : \"#ff751d\",\r\n      },\r\n    },\r\n    typography: {\r\n      fontFamily: themeCustomization?.font\r\n        ? themeCustomization.font\r\n        : \"sans-serif\",\r\n      subtitle1: {\r\n        fontSize: themeCustomization?.product_discription_font_size\r\n          ? themeCustomization.product_discription_font_size\r\n          : 10,\r\n        color: themeCustomization?.product_discription_color\r\n          ? themeCustomization.product_discription_color\r\n          : \"#777\",\r\n      },\r\n      // price\r\n      body1: {\r\n        fontSize: themeCustomization?.price_font_size\r\n          ? themeCustomization.price_font_size\r\n          : 12,\r\n        color: themeCustomization?.price_color\r\n          ? themeCustomization.price_color\r\n          : \"#111\",\r\n      },\r\n      // product Names\r\n      button: {\r\n        fontSize: themeCustomization?.product_name_font_size\r\n          ? themeCustomization.product_name_font_size\r\n          : 12,\r\n        color: themeCustomization?.product_name_color\r\n          ? themeCustomization.product_name_color\r\n          : \"#111\",\r\n      },\r\n      // categories and sub categories\r\n      overline: {\r\n        fontSize: themeCustomization?.categories_and_sub_categoies_font_size\r\n          ? themeCustomization.categories_and_sub_categoies_font_size\r\n          : 12,\r\n        color: themeCustomization?.categories_and_sub_categoies_color\r\n          ? themeCustomization.categories_and_sub_categoies_color\r\n          : \"#ff751d\",\r\n      },\r\n      // branch Name\r\n      h6: {\r\n        fontSize: themeCustomization?.branch_name_font_size\r\n          ? themeCustomization.branch_name_font_size\r\n          : 14,\r\n        color: themeCustomization?.branch_name_color\r\n          ? themeCustomization.branch_name_color\r\n          : \"#ff751d\",\r\n      },\r\n    },\r\n    components: {\r\n      MuiButton: {\r\n        variants: [\r\n          {\r\n            // button\r\n            props: { variant: \"contained\" },\r\n            style: {\r\n              fontSize: themeCustomization?.button_text_font_size\r\n                ? themeCustomization.button_text_font_size\r\n                : 12,\r\n              color: themeCustomization?.button_text_color\r\n                ? themeCustomization.button_text_color\r\n                : \"#f1fcfe\",\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n  });\r\n  // design end\r\n\r\n  var viewShow_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div\r\n        className=\"spinner-border text-primary \"\r\n        role=\"status\"\r\n        style={{ position: \"fixed\", top: \"50%\", left: \"50%\" }}\r\n      >\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewShow_HTMLTABLE = products?.map((item, i) => {\r\n      return (\r\n        <Grid\r\n          item\r\n          xs={\r\n            themeCustomization?.number_of_products_in_each_row == 1\r\n              ? 12\r\n              : themeCustomization?.number_of_products_in_each_row == 2\r\n              ? 6\r\n              : themeCustomization?.number_of_products_in_each_row == 3\r\n              ? 4\r\n              : themeCustomization?.number_of_products_in_each_row == 4\r\n              ? 3\r\n              : themeCustomization?.number_of_products_in_each_row == 5\r\n              ? 3\r\n              : themeCustomization?.number_of_products_in_each_row == 6\r\n              ? 2\r\n              : 6\r\n          }\r\n          // sm={2} md={2}\r\n          key={i}\r\n        >\r\n          <Card\r\n            sx={{\r\n              // height: \"100%\",\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n            }}\r\n          >\r\n            <CardMedia\r\n              component=\"img\"\r\n              sx={{ height: \"100px\", objectFit: \"contain\" }}\r\n              image={`http://${base_url}:${port}/images/products/${item.image}`}\r\n              alt=\"Image\"\r\n            />\r\n            <Link\r\n              to={{\r\n                pathname: `/template-first/product/${btoa(item.id)}`,\r\n                state: { themes: themeCustomization },\r\n              }}\r\n            >\r\n              <CardContent sx={{ flexGrow: 1 }}>\r\n                <Typography variant=\"button\" display=\"block\" gutterBottom>\r\n                  {item.ProductName}\r\n                </Typography>\r\n                <Typography variant=\"subtitle1\" gutterBottom>\r\n                  {item.preparationTime}\r\n                  {\" Minutes\"}\r\n                </Typography>\r\n                <Typography variant=\"button\" gutterBottom>\r\n                  {item.price + \" \" + getSymbolFromCurrency(item.currency_code)}\r\n                </Typography>\r\n              </CardContent>\r\n            </Link>\r\n          </Card>\r\n        </Grid>\r\n      );\r\n    });\r\n  }\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <Container maxWidth=\"lg\">\r\n        <Header\r\n          title={branch[0]?.BrancheName}\r\n          subcategories={subcategories}\r\n          activeSubCategory={activeSubCategory}\r\n          setProducts={setProducts}\r\n          setActiveSubCategory={setActiveSubCategory}\r\n        />\r\n\r\n        <main>\r\n          <Grid container spacing={4} className=\"text-center\">\r\n            {viewShow_HTMLTABLE}\r\n          </Grid>\r\n        </main>\r\n        <InfiniteScroll\r\n          dataLength={products.length} //This is important field to render the next data\r\n          next={fetchMoreData}\r\n          hasMore={changeState}\r\n          loader={\r\n            <Typography\r\n              variant=\"subtitle1\"\r\n              gutterBottom\r\n              className=\"text-center pt-5\"\r\n            >\r\n              <b>{t(\"loading\")}</b>\r\n            </Typography>\r\n          }\r\n          endMessage={\r\n            <Typography\r\n              variant=\"subtitle1\"\r\n              gutterBottom\r\n              style={{ textAlign: \"center \" }}\r\n            >\r\n              <b>{t(\"yay_you_have_seen_it_all\")}</b>\r\n            </Typography>\r\n          }\r\n        ></InfiniteScroll>\r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Thrid\\ProductsList.js",["393","394"],"import React, { useState, useEffect } from \"react\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Container from \"@mui/material/Container\";\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardMedia from \"@mui/material/CardMedia\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport axios from \"axios\";\r\nimport { base_url, port } from \"../../../../../Consts\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport Box from \"@mui/material/Box\";\r\nimport getSymbolFromCurrency from \"currency-symbol-map\";\r\n\r\nexport default function ProductsList(props) {\r\n  const [loading, setLoading] = useState(true);\r\n  const { t } = useTranslation();\r\n  const cateId = atob(props.match.params.id);\r\n  const SubCategoryName = props.history.location.state.SubCategoryName;\r\n\r\n  const [products, setProducts] = useState([]);\r\n  const [themeCustomization, setThemeCustomization] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios.get(`/api/GetProductsBasedOnSubCategory/${cateId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setProducts(res.data.data);\r\n        console.log(res.data.data);\r\n      }\r\n      setLoading(false);\r\n    });\r\n  }, []);\r\n\r\n  // design start\r\n  const theme = createTheme({\r\n    palette: {\r\n      warning: {\r\n        // button background\r\n        main: themeCustomization?.button_background_color\r\n          ? themeCustomization.button_background_color\r\n          : \"#ff751d\",\r\n      },\r\n    },\r\n    typography: {\r\n      fontFamily: themeCustomization?.font\r\n        ? themeCustomization.font\r\n        : \"sans-serif\",\r\n      subtitle1: {\r\n        fontSize: themeCustomization?.product_discription_font_size\r\n          ? themeCustomization.product_discription_font_size\r\n          : 10,\r\n        color: themeCustomization?.product_discription_color\r\n          ? themeCustomization.product_discription_color\r\n          : \"#777\",\r\n      },\r\n      // price\r\n      body1: {\r\n        fontSize: themeCustomization?.price_font_size\r\n          ? themeCustomization.price_font_size\r\n          : 12,\r\n        color: themeCustomization?.price_color\r\n          ? themeCustomization.price_color\r\n          : \"#f1fcfe\",\r\n      },\r\n      // product Names\r\n      button: {\r\n        fontSize: themeCustomization?.product_name_font_size\r\n          ? themeCustomization.product_name_font_size\r\n          : 14,\r\n        color: themeCustomization?.product_name_color\r\n          ? themeCustomization.product_name_color\r\n          : \"#1f1d1f\",\r\n      },\r\n      // categories and sub categories\r\n      overline: {\r\n        fontSize: themeCustomization?.categories_and_sub_categoies_font_size\r\n          ? themeCustomization.categories_and_sub_categoies_font_size\r\n          : 12,\r\n        color: themeCustomization?.categories_and_sub_categoies_color\r\n          ? themeCustomization.categories_and_sub_categoies_color\r\n          : \"#ff751d\",\r\n      },\r\n      // branch Name\r\n      h4: {\r\n        fontSize: themeCustomization?.branch_name_font_size\r\n          ? themeCustomization.branch_name_font_size\r\n          : 28,\r\n        color: themeCustomization?.branch_name_color\r\n          ? themeCustomization.branch_name_color\r\n          : \"#aa3f32\",\r\n      },\r\n      subtitle2: {\r\n        fontSize: themeCustomization?.branch_name_font_size\r\n          ? themeCustomization.branch_name_font_size\r\n          : 12,\r\n        color: themeCustomization?.branch_name_color\r\n          ? themeCustomization.branch_name_color\r\n          : \"#1f1d1f\",\r\n      },\r\n    },\r\n    components: {\r\n      MuiButton: {\r\n        variants: [\r\n          {\r\n            // button\r\n            props: { variant: \"contained\" },\r\n            style: {\r\n              fontSize: themeCustomization?.button_text_font_size\r\n                ? themeCustomization.button_text_font_size\r\n                : 12,\r\n              color: themeCustomization?.button_text_color\r\n                ? themeCustomization.button_text_color\r\n                : \"#f1fcfe\",\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n  });\r\n  // design end\r\n\r\n  var viewShow_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div\r\n        className=\"spinner-border text-primary \"\r\n        role=\"status\"\r\n        style={{ position: \"fixed\", top: \"50%\", left: \"50%\" }}\r\n      >\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewShow_HTMLTABLE = products?.map((item, i) => {\r\n      return (\r\n        <Grid item xs={12} sm={6} md={6} key={i}>\r\n          <Card sx={{ display: \"flex\" }}>\r\n            <CardMedia\r\n              component=\"img\"\r\n              sx={{\r\n                height: \"150px\",\r\n                width: \"40%\",\r\n                borderRadius: \"10%\",\r\n              }}\r\n              image={`http://${base_url}:${port}/images/products/${item.image}`}\r\n              alt=\"Live from space album cover\"\r\n            />\r\n            <Box sx={{ display: \"flex\", flexDirection: \"column\" }}>\r\n              <Link\r\n                to={{\r\n                  pathname: `/thrid-template/products-list/product-details/${btoa(\r\n                    item.id\r\n                  )}`,\r\n                  state: { themes: themeCustomization },\r\n                }}\r\n              >\r\n                <CardContent sx={{ flexGrow: 1 }}>\r\n                  <Typography\r\n                    variant=\"button\"\r\n                    display=\"block\"\r\n                    gutterBottom\r\n                    className=\"font-weight-bold\"\r\n                  >\r\n                    {item.ProductName}\r\n                  </Typography>\r\n                  <Typography variant=\"subtitle1\" gutterBottom>\r\n                    {item.Description}\r\n                  </Typography>\r\n                  <Typography\r\n                    variant=\"button\"\r\n                    gutterBottom\r\n                    className=\"font-weight-bold\"\r\n                  >\r\n                    {item.price +\r\n                      \" \" +\r\n                      getSymbolFromCurrency(item.currency_code)}\r\n                  </Typography>\r\n                </CardContent>\r\n              </Link>\r\n            </Box>\r\n          </Card>\r\n        </Grid>\r\n      );\r\n    });\r\n  }\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <Container maxWidth=\"lg\" className=\"p-2\">\r\n        <Grid item className=\"text-center\">\r\n          <Typography\r\n            variant=\"button\"\r\n            gutterBottom\r\n            className=\"font-weight-bold m-1\"\r\n          >\r\n            {SubCategoryName}\r\n          </Typography>\r\n        </Grid>\r\n\r\n        <Grid container spacing={2} className=\"mt-1\">\r\n          {viewShow_HTMLTABLE}\r\n        </Grid>\r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Second\\ProductDetails.js",["395","396","397","398","399","400","401","402","403","404","405","406","407","408","409","410","411","412","413","414","415","416"],"import React, { Fragment, useState, useEffect, SyntheticEvent } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// Import css files\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport Footer from \"./Footer\";\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport Container from \"@mui/material/Container\";\r\n// import Slider from \"react-slick\";\r\nimport Header from \"./Header\";\r\nimport { base_url, port } from \"../../../../../Consts\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardMedia from \"@mui/material/CardMedia\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Tabs from \"@mui/material/Tabs\";\r\nimport Tab from \"@mui/material/Tab\";\r\nimport Box from \"@mui/material/Box\";\r\n\r\nimport { Zoom } from \"react-slideshow-image\";\r\nimport \"react-slideshow-image/dist/styles.css\";\r\nimport Accordion from \"@mui/material/Accordion\";\r\nimport AccordionSummary from \"@mui/material/AccordionSummary\";\r\nimport AccordionDetails from \"@mui/material/AccordionDetails\";\r\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport \"../style.css\";\r\nconst ProductDetails = (props) => {\r\n  const [themeCustomization, setThemeCustomization] = useState([]);\r\n\r\n  const theme = createTheme({\r\n    palette: {\r\n      warning: {\r\n        // button background\r\n        main: themeCustomization?.button_background_color\r\n          ? themeCustomization.button_background_color\r\n          : \"#ff751d\",\r\n      },\r\n    },\r\n    typography: {\r\n      fontFamily: themeCustomization?.font\r\n        ? themeCustomization.font\r\n        : \"sans-serif\",\r\n      subtitle1: {\r\n        fontSize: themeCustomization?.product_discription_font_size\r\n          ? themeCustomization.product_discription_font_size\r\n          : 10,\r\n        color: themeCustomization?.product_discription_color\r\n          ? themeCustomization.product_discription_color\r\n          : \"#777\",\r\n      },\r\n      // price\r\n      body1: {\r\n        fontSize: themeCustomization?.price_font_size\r\n          ? themeCustomization.price_font_size\r\n          : 12,\r\n        color: themeCustomization?.price_color\r\n          ? themeCustomization.price_color\r\n          : \"#f1fcfe\",\r\n      },\r\n      // product Names\r\n      button: {\r\n        fontSize: themeCustomization?.product_name_font_size\r\n          ? themeCustomization.product_name_font_size\r\n          : 12,\r\n        color: themeCustomization?.product_name_color\r\n          ? themeCustomization.product_name_color\r\n          : \"#ff751d\",\r\n      },\r\n      // categories and sub categories\r\n      overline: {\r\n        fontSize: themeCustomization?.categories_and_sub_categoies_font_size\r\n          ? themeCustomization.categories_and_sub_categoies_font_size\r\n          : 12,\r\n        color: themeCustomization?.categories_and_sub_categoies_color\r\n          ? themeCustomization.categories_and_sub_categoies_color\r\n          : \"#ff751d\",\r\n      },\r\n      // branch Name\r\n      h6: {\r\n        fontSize: themeCustomization?.branch_name_font_size\r\n          ? themeCustomization.branch_name_font_size\r\n          : 14,\r\n        color: themeCustomization?.branch_name_color\r\n          ? themeCustomization.branch_name_color\r\n          : \"#ff751d\",\r\n      },\r\n    },\r\n    components: {\r\n      MuiButton: {\r\n        variants: [\r\n          {\r\n            // button\r\n            props: { variant: \"contained\" },\r\n            style: {\r\n              fontSize: themeCustomization?.button_text_font_size\r\n                ? themeCustomization.button_text_font_size\r\n                : 12,\r\n              color: themeCustomization?.button_text_color\r\n                ? themeCustomization.button_text_color\r\n                : \"#f1fcfe\",\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n  });\r\n  // for localization\r\n  const { t } = useTranslation();\r\n  const id = atob(props.match.params.id);\r\n  //for retriving data using laravel API\r\n  const themes = props.history.location.state.themes;\r\n  let varData = [];\r\n  //for retriving data using laravel API\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [variantData, setVariantData] = useState([]);\r\n  const [showVaralint, setShowVarlist] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [skuarray, setSkuArray] = useState([]);\r\n  const [productDetails, setProductDetails] = useState({\r\n    price: 0,\r\n    stock: 0,\r\n    image: fetchData?.image,\r\n  });\r\n  useEffect(() => {\r\n    const getdata = async () => {\r\n      const product = await axios({\r\n        method: \"GET\",\r\n        url: `/api/GetProduct/${id}`,\r\n      });\r\n      const data = product.data.fetchData;\r\n\r\n      const res = await axios({\r\n        method: \"GET\",\r\n        url: `/api/Getvariations/${id}`,\r\n      });\r\n      setFetchData(data[0]);\r\n      if (res.data.fetchData !== \"\") {\r\n        varData = JSON.parse(res.data.fetchData);\r\n        parseVariants(varData);\r\n      }\r\n\r\n      setLoading(false);\r\n    };\r\n    getdata(); // axios\r\n  }, [id]);\r\n  const changePrice = (varName, variant) => {\r\n    const keys = Object.keys(showVaralint);\r\n    const varlineindex = keys.indexOf(varName);\r\n    const newSkuArray = skuarray;\r\n    newSkuArray[varlineindex] = variant;\r\n    setSkuArray(newSkuArray);\r\n    if (keys.length == newSkuArray.length) {\r\n      caluclatePrice(newSkuArray, variantData);\r\n    }\r\n  };\r\n  const caluclatePrice = (newSkuArray, variantData) => {\r\n    let sku = id + \"-\";\r\n    for (let i = 0; i < newSkuArray.length; i++) {\r\n      if (i == newSkuArray.length - 1) {\r\n        sku += newSkuArray[i];\r\n      } else {\r\n        sku += newSkuArray[i] + \"-\";\r\n      }\r\n    }\r\n\r\n    const priceList = variantData.filter((item) => {\r\n      return item.sku.replace(/\\s+/g, \"\") == sku.replace(/\\s+/g, \"\");\r\n    });\r\n    console.log(newSkuArray);\r\n    let productdetails = { price: 0, stock: 0 };\r\n    if (priceList.length !== 0) {\r\n      const line = priceList.pop();\r\n      const newProductDetails = {\r\n        price: line.price,\r\n        stock: line.stock,\r\n        image: line.image,\r\n      };\r\n      productdetails = newProductDetails;\r\n    } else {\r\n      const newProductDetails = {\r\n        price: 0,\r\n        stock: \"No Stock\",\r\n        image: fetchData.image,\r\n      };\r\n      productdetails = newProductDetails;\r\n    }\r\n    setProductDetails({ ...productdetails });\r\n  };\r\n  const parseVariants = (variantData) => {\r\n    const variants = [];\r\n    const savePostion = [\"postion\", \"sku\", \"price\", \"stock\", \"image\"];\r\n    const varLine = variantData[0];\r\n    const varlinekey = Object.keys(varLine);\r\n    for (let i = 0; i < varlinekey.length; i++) {\r\n      if (savePostion.indexOf(varlinekey[i]) == -1) {\r\n        let listvar = variantData.map((item) => {\r\n          return item[varlinekey[i]];\r\n        });\r\n        // get unique variants\r\n        listvar = listvar.filter(\r\n          (thing, index, self) =>\r\n            index ===\r\n            self.findIndex((t) => t.place === listvar.place && t === thing)\r\n        );\r\n        if (listvar[0] != 0) variants[varlinekey[i]] = listvar;\r\n      }\r\n    }\r\n    let def = [];\r\n    Object.keys(variants).map((item) => {\r\n      def.push(variants[item][0]);\r\n    });\r\n    setSkuArray(def);\r\n    caluclatePrice(def, variantData);\r\n    setShowVarlist(variants);\r\n    setVariantData(variantData);\r\n  };\r\n  const [ingredients, setIntgredients] = useState([]);\r\n  const changeIngredients = (label) => {\r\n    if (!ingredients.includes(label) === false) {\r\n      setIntgredients(ingredients.filter((item) => item !== label));\r\n    } else {\r\n      setIntgredients([...ingredients, label]);\r\n    }\r\n  };\r\n  let [sum, setSum] = useState(0);\r\n\r\n  const extraHandlers = (e, price) => {\r\n    if (e.target.checked) {\r\n      // console.log((sum += parseInt(price)));\r\n      setSum((sum += parseInt(price)));\r\n    } else {\r\n      setSum((sum -= parseInt(price)));\r\n    }\r\n  };\r\n\r\n  const zoomOutProperties = {\r\n    duration: 100,\r\n    transitionDuration: 5,\r\n    canSwipe: true,\r\n    indicators: true,\r\n    scale: false,\r\n    autoplay: false,\r\n    indicators: (i) => (\r\n      <div className=\"indicator\">\r\n        <img\r\n          src={\r\n            productDetails?.stock === \"No Stock\" || productDetails?.stock === 0\r\n              ? `http://${base_url}:${port}/images/products/${fetchData?.image}`\r\n              : `http://${base_url}:${port}/images/variants_pics/${productDetails.image[i]}`\r\n          }\r\n          width=\"40px\"\r\n          // className=\"p-1\"\r\n          // style={{ width: \"40px\" }}\r\n        />\r\n      </div>\r\n    ),\r\n  };\r\n\r\n  var viewImages_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"container \">\r\n        <div\r\n          className=\"spinner-border text-primary \"\r\n          role=\"status\"\r\n          style={{ position: \"fixed\", top: \"50%\", left: \"50%\" }}\r\n        >\r\n          <span className=\"sr-only\">{t(\"loading\")}</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewImages_HTMLTABLE = (\r\n      <Grid container>\r\n        <Grid item xs={12} sm={5} md={5} lg={5}>\r\n          <div className=\"row col-md-12 text-center \">\r\n            <Zoom {...zoomOutProperties}>\r\n              {(() => {\r\n                if (Array.isArray(productDetails.image)) {\r\n                  return productDetails.image?.map((image) => {\r\n                    return (\r\n                      <div key={image} style={{ width: \"100%\" }}>\r\n                        <img\r\n                          src={`http://${base_url}:${port}/images/variants_pics/${image}`}\r\n                          style={{\r\n                            height: \"500px\",\r\n                            width: \"100%\",\r\n                            objectFit: \"contain\",\r\n                          }}\r\n                          // className=\"img-thumbnail\"\r\n                          alt=\"\"\r\n                        />\r\n                      </div>\r\n                    );\r\n                  });\r\n                } else {\r\n                  return (\r\n                    <div style={{ width: \"100%\" }}>\r\n                      <img\r\n                        src={\r\n                          productDetails.stock === \"No Stock\" ||\r\n                          productDetails?.stock === 0\r\n                            ? `http://${base_url}:${port}/images/products/${\r\n                                productDetails.image\r\n                                  ? productDetails?.image\r\n                                  : fetchData?.image\r\n                              }`\r\n                            : `http://${base_url}:${port}/images/variants_pics/${productDetails.image}`\r\n                        }\r\n                        style={{\r\n                          height: \"500px\",\r\n                          width: \"100%\",\r\n                          objectFit: \"contain\",\r\n                        }}\r\n                        alt=\"\"\r\n                      />\r\n                    </div>\r\n                  );\r\n                }\r\n              })()}\r\n            </Zoom>\r\n          </div>\r\n        </Grid>\r\n\r\n        <Grid item xs={12} sm={7} md={7} lg={7}>\r\n          <Card\r\n            sx={{\r\n              // height: \"100%\",\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n            }}\r\n          >\r\n            <div className=\"row mx-3 mt-3\">\r\n              <Typography variant=\"overline\" gutterBottom>\r\n                {t(\"product_name\")}: {fetchData?.ProductName}\r\n              </Typography>\r\n              <Typography variant=\"body2\" gutterBottom>\r\n                {t(\"description\")}: {fetchData?.Description}\r\n              </Typography>\r\n              <Typography variant=\"body2\" gutterBottom>\r\n                {t(\"unit\")}: {fetchData?.UnitName}\r\n              </Typography>\r\n\r\n              {themes?.preparation_time != 0 ? (\r\n                <Typography variant=\"body2\" gutterBottom>\r\n                  {t(\"preparation_Time\")}: {fetchData?.preparationTime} Minutes\r\n                </Typography>\r\n              ) : (\r\n                \" \"\r\n              )}\r\n              <p>\r\n                {t(\"price\")} :{\" \"}\r\n                {productDetails.price === 0\r\n                  ? fetchData?.price + sum\r\n                  : parseInt(productDetails.price) + sum}\r\n              </p>\r\n              <p>\r\n                {t(\"stock\")}:{\" \"}\r\n                {productDetails.stock === 0\r\n                  ? fetchData?.stock\r\n                  : productDetails.stock}\r\n              </p>\r\n            </div>\r\n            <div className=\"row mx-3\">\r\n              <Typography variant=\"overline\" gutterBottom>\r\n                {t(\"ingredients\")}\r\n              </Typography>\r\n              <small>Please select the ingredients you want to remove.</small>\r\n            </div>\r\n            <div className=\"row mx-4\">\r\n              {JSON.parse(fetchData.ingredients)?.map((item, i) => {\r\n                return (\r\n                  <div\r\n                    className=\"col-md-auto col-sm-auto col-xl-auto col-lg-auto col-auto\"\r\n                    onClick={() => {\r\n                      changeIngredients(item.label);\r\n                    }}\r\n                    style={\r\n                      ingredients.includes(item.label)\r\n                        ? {\r\n                            cursor: \"pointer\",\r\n\r\n                            padding: \"3px\",\r\n                            margin: \"2px\",\r\n                            border: \"1px solid\",\r\n                            textAlign: \"center\",\r\n                            borderColor: \"red\",\r\n                            textDecoration: \"line-through\",\r\n                            color: \"red\",\r\n                          }\r\n                        : {\r\n                            cursor: \"pointer\",\r\n                            padding: \"3px\",\r\n                            margin: \"2px\",\r\n                            border: \"1px solid\",\r\n                            textAlign: \"center\",\r\n                            // borderRadius: \"10px\",\r\n                            borderColor: \"black\",\r\n                          }\r\n                    }\r\n                  >\r\n                    {item.label}\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n            <div className=\"row m-3\">\r\n              <Accordion>\r\n                <AccordionSummary\r\n                  expandIcon={<ExpandMoreIcon />}\r\n                  aria-controls=\"panel1a-content\"\r\n                  id=\"panel1a-header\"\r\n                >\r\n                  <Typography variant=\"overline\" gutterBottom>\r\n                    {t(\"extras\")}\r\n                  </Typography>\r\n                </AccordionSummary>\r\n                <AccordionDetails>\r\n                  <FormGroup>\r\n                    {JSON.parse(fetchData.extras)?.map((item, i) => {\r\n                      return (\r\n                        <FormControlLabel\r\n                          key={i}\r\n                          control={\r\n                            <Checkbox\r\n                              onChange={(e) => {\r\n                                extraHandlers(e, item.price);\r\n                              }}\r\n                              color=\"default\"\r\n                              sx={{\r\n                                color: themeCustomization?.branch_name_color\r\n                                  ? themeCustomization.branch_name_color\r\n                                  : \"#ff751d\",\r\n                              }}\r\n                            />\r\n                          }\r\n                          label={\r\n                            <Typography variant=\"body2\" gutterBottom>\r\n                              {item.label + \" ( +\" + item.price + \".00\" + \" )\"}\r\n                            </Typography>\r\n                          }\r\n                        />\r\n                      );\r\n                    })}\r\n                  </FormGroup>\r\n                </AccordionDetails>\r\n              </Accordion>\r\n            </div>\r\n\r\n            <div className=\"row m-3\">\r\n              <Typography variant=\"overline\" gutterBottom>\r\n                {t(\"vatiants\")}\r\n              </Typography>\r\n            </div>\r\n\r\n            <div className=\"row mx-2\">\r\n              {Object.keys(showVaralint).map((list, i) => {\r\n                return (\r\n                  <div className=\"row \" key={i}>\r\n                    <div className=\"col-md-auto col-sm-auto col-xl-auto col-lg-auto col-auto\">\r\n                      {list}\r\n                      <div className=\"row\">\r\n                        {showVaralint[list].map((variant) => {\r\n                          return (\r\n                            <div className=\"col-md-auto col-sm-auto col-xl-auto col-lg-auto col-auto\">\r\n                              <div\r\n                                onClick={() => {\r\n                                  changePrice(list, variant);\r\n                                }}\r\n                                style={\r\n                                  skuarray[i] == variant\r\n                                    ? {\r\n                                        cursor: \"pointer\",\r\n                                        margin: \"2px\",\r\n                                        padding: \"5px\",\r\n                                        border: \"1px solid\",\r\n                                        textAlign: \"center\",\r\n                                        borderRadius: \"10px\",\r\n                                        borderColor: \"red\",\r\n                                      }\r\n                                    : {\r\n                                        cursor: \"pointer\",\r\n                                        margin: \"2px\",\r\n\r\n                                        padding: \"5px\",\r\n                                        border: \"1px solid\",\r\n                                        textAlign: \"center\",\r\n                                        borderRadius: \"10px\",\r\n                                        borderColor: \"black\",\r\n                                      }\r\n                                }\r\n                              >\r\n                                {variant}\r\n                              </div>\r\n                            </div>\r\n                          );\r\n                        })}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <Container maxWidth=\"lg\">\r\n        <Header\r\n          // title={branch[0]?.BrancheName}\r\n          categories={0}\r\n          subcategories={0}\r\n          // setSubCategories={setSubCategories}\r\n          // activeSubCategory={activeSubCategory}\r\n        />\r\n        <main>\r\n          <Grid container spacing={2}>\r\n            {viewImages_HTMLTABLE}\r\n          </Grid>\r\n        </main>\r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default ProductDetails;\r\n","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Thrid\\ProductDetails.js",["417","418","419","420","421","422","423","424","425","426","427","428","429"],"import React, {  useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// Import css files\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport Container from \"@mui/material/Container\";\r\n// import Slider from \"react-slick\";\r\nimport { base_url, port } from \"../../../../../Consts\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Card from \"@mui/material/Card\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\nimport { Zoom } from \"react-slideshow-image\";\r\nimport \"react-slideshow-image/dist/styles.css\";\r\nimport Accordion from \"@mui/material/Accordion\";\r\nimport AccordionSummary from \"@mui/material/AccordionSummary\";\r\nimport AccordionDetails from \"@mui/material/AccordionDetails\";\r\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport \"../style.css\";\r\nconst ProductDetails = (props) => {\r\n  const [themeCustomization, setThemeCustomization] = useState([]);\r\n\r\n  const theme = createTheme({\r\n    palette: {\r\n      warning: {\r\n        // button background\r\n        main: themeCustomization?.button_background_color\r\n          ? themeCustomization.button_background_color\r\n          : \"#ff751d\",\r\n      },\r\n    },\r\n    typography: {\r\n      fontFamily: themeCustomization?.font\r\n        ? themeCustomization.font\r\n        : \"sans-serif\",\r\n      subtitle1: {\r\n        fontSize: themeCustomization?.product_discription_font_size\r\n          ? themeCustomization.product_discription_font_size\r\n          : 10,\r\n        color: themeCustomization?.product_discription_color\r\n          ? themeCustomization.product_discription_color\r\n          : \"#777\",\r\n      },\r\n      // price\r\n      body1: {\r\n        fontSize: themeCustomization?.price_font_size\r\n          ? themeCustomization.price_font_size\r\n          : 12,\r\n        color: themeCustomization?.price_color\r\n          ? themeCustomization.price_color\r\n          : \"#f1fcfe\",\r\n      },\r\n      // product Names\r\n      button: {\r\n        fontSize: themeCustomization?.product_name_font_size\r\n          ? themeCustomization.product_name_font_size\r\n          : 12,\r\n        color: themeCustomization?.product_name_color\r\n          ? themeCustomization.product_name_color\r\n          : \"#ff751d\",\r\n      },\r\n      // categories and sub categories\r\n      overline: {\r\n        fontSize: themeCustomization?.categories_and_sub_categoies_font_size\r\n          ? themeCustomization.categories_and_sub_categoies_font_size\r\n          : 12,\r\n        color: themeCustomization?.categories_and_sub_categoies_color\r\n          ? themeCustomization.categories_and_sub_categoies_color\r\n          : \"#ff751d\",\r\n      },\r\n      // branch Name\r\n      h6: {\r\n        fontSize: themeCustomization?.branch_name_font_size\r\n          ? themeCustomization.branch_name_font_size\r\n          : 14,\r\n        color: themeCustomization?.branch_name_color\r\n          ? themeCustomization.branch_name_color\r\n          : \"#ff751d\",\r\n      },\r\n    },\r\n    components: {\r\n      MuiButton: {\r\n        variants: [\r\n          {\r\n            // button\r\n            props: { variant: \"contained\" },\r\n            style: {\r\n              fontSize: themeCustomization?.button_text_font_size\r\n                ? themeCustomization.button_text_font_size\r\n                : 12,\r\n              color: themeCustomization?.button_text_color\r\n                ? themeCustomization.button_text_color\r\n                : \"#f1fcfe\",\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n  });\r\n  // for localization\r\n  const { t } = useTranslation();\r\n  const id = atob(props.match.params.id);\r\n  //for retriving data using laravel API\r\n  const themes = props.history.location.state.themes;\r\n  let varData = [];\r\n  //for retriving data using laravel API\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [variantData, setVariantData] = useState([]);\r\n  const [showVaralint, setShowVarlist] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [skuarray, setSkuArray] = useState([]);\r\n  const [productDetails, setProductDetails] = useState({\r\n    price: 0,\r\n    stock: 0,\r\n    image: fetchData?.image,\r\n  });\r\n  useEffect(() => {\r\n    const getdata = async () => {\r\n      const product = await axios({\r\n        method: \"GET\",\r\n        url: `/api/GetProduct/${id}`,\r\n      });\r\n      const data = product.data.fetchData;\r\n\r\n      const res = await axios({\r\n        method: \"GET\",\r\n        url: `/api/Getvariations/${id}`,\r\n      });\r\n      setFetchData(data[0]);\r\n      if (res.data.fetchData !== \"\") {\r\n        varData = JSON.parse(res.data.fetchData);\r\n        parseVariants(varData);\r\n      }\r\n\r\n      setLoading(false);\r\n    };\r\n    getdata(); // axios\r\n  }, [id]);\r\n  const changePrice = (varName, variant) => {\r\n    const keys = Object.keys(showVaralint);\r\n    const varlineindex = keys.indexOf(varName);\r\n    const newSkuArray = skuarray;\r\n    newSkuArray[varlineindex] = variant;\r\n    setSkuArray(newSkuArray);\r\n    if (keys.length == newSkuArray.length) {\r\n      caluclatePrice(newSkuArray, variantData);\r\n    }\r\n  };\r\n  const caluclatePrice = (newSkuArray, variantData) => {\r\n    let sku = id + \"-\";\r\n    for (let i = 0; i < newSkuArray.length; i++) {\r\n      if (i == newSkuArray.length - 1) {\r\n        sku += newSkuArray[i];\r\n      } else {\r\n        sku += newSkuArray[i] + \"-\";\r\n      }\r\n    }\r\n\r\n    const priceList = variantData.filter((item) => {\r\n      return item.sku.replace(/\\s+/g, \"\") == sku.replace(/\\s+/g, \"\");\r\n    });\r\n    console.log(newSkuArray);\r\n    let productdetails = { price: 0, stock: 0 };\r\n    if (priceList.length !== 0) {\r\n      const line = priceList.pop();\r\n      const newProductDetails = {\r\n        price: line.price,\r\n        stock: line.stock,\r\n        image: line.image,\r\n      };\r\n      productdetails = newProductDetails;\r\n    } else {\r\n      const newProductDetails = {\r\n        price: 0,\r\n        stock: \"No Stock\",\r\n        image: fetchData.image,\r\n      };\r\n      productdetails = newProductDetails;\r\n    }\r\n    setProductDetails({ ...productdetails });\r\n  };\r\n  const parseVariants = (variantData) => {\r\n    const variants = [];\r\n    const savePostion = [\"postion\", \"sku\", \"price\", \"stock\", \"image\"];\r\n    const varLine = variantData[0];\r\n    const varlinekey = Object.keys(varLine);\r\n    for (let i = 0; i < varlinekey.length; i++) {\r\n      if (savePostion.indexOf(varlinekey[i]) == -1) {\r\n        let listvar = variantData.map((item) => {\r\n          return item[varlinekey[i]];\r\n        });\r\n        // get unique variants\r\n        listvar = listvar.filter(\r\n          (thing, index, self) =>\r\n            index ===\r\n            self.findIndex((t) => t.place === listvar.place && t === thing)\r\n        );\r\n        if (listvar[0] != 0) variants[varlinekey[i]] = listvar;\r\n      }\r\n    }\r\n    let def = [];\r\n    Object.keys(variants).map((item) => {\r\n      def.push(variants[item][0]);\r\n    });\r\n    setSkuArray(def);\r\n    caluclatePrice(def, variantData);\r\n    setShowVarlist(variants);\r\n    setVariantData(variantData);\r\n  };\r\n  const [ingredients, setIntgredients] = useState([]);\r\n  const changeIngredients = (label) => {\r\n    if (!ingredients.includes(label) === false) {\r\n      setIntgredients(ingredients.filter((item) => item !== label));\r\n    } else {\r\n      setIntgredients([...ingredients, label]);\r\n    }\r\n  };\r\n  let [sum, setSum] = useState(0);\r\n\r\n  const extraHandlers = (e, price) => {\r\n    if (e.target.checked) {\r\n      // console.log((sum += parseInt(price)));\r\n      setSum((sum += parseInt(price)));\r\n    } else {\r\n      setSum((sum -= parseInt(price)));\r\n    }\r\n  };\r\n\r\n  const zoomOutProperties = {\r\n    duration: 100,\r\n    transitionDuration: 5,\r\n    canSwipe: true,\r\n    indicators: true,\r\n    scale: false,\r\n    autoplay: false,\r\n    indicators: (i) => (\r\n      <div className=\"indicator\">\r\n        <img\r\n          src={\r\n            productDetails?.stock === \"No Stock\" || productDetails?.stock === 0\r\n              ? `http://${base_url}:${port}/images/products/${fetchData?.image}`\r\n              : `http://${base_url}:${port}/images/variants_pics/${productDetails.image[i]}`\r\n          }\r\n          width=\"40px\"\r\n          // className=\"p-1\"\r\n          // style={{ width: \"40px\" }}\r\n        />\r\n      </div>\r\n    ),\r\n  };\r\n\r\n  var viewImages_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"container \">\r\n        <div\r\n          className=\"spinner-border text-primary \"\r\n          role=\"status\"\r\n          style={{ position: \"fixed\", top: \"50%\", left: \"50%\" }}\r\n        >\r\n          <span className=\"sr-only\">{t(\"loading\")}</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewImages_HTMLTABLE = (\r\n      <Grid container>\r\n        <Grid item xs={12} sm={5} md={5} lg={5}>\r\n          <div className=\"row col-md-12 text-center \">\r\n            <Zoom {...zoomOutProperties}>\r\n              {(() => {\r\n                if (Array.isArray(productDetails.image)) {\r\n                  return productDetails.image?.map((image) => {\r\n                    return (\r\n                      <div key={image} style={{ width: \"100%\" }}>\r\n                        <img\r\n                          src={`http://${base_url}:${port}/images/variants_pics/${image}`}\r\n                          style={{\r\n                            height: \"500px\",\r\n                            width: \"100%\",\r\n                            objectFit: \"contain\",\r\n                          }}\r\n                          // className=\"img-thumbnail\"\r\n                          alt=\"\"\r\n                        />\r\n                      </div>\r\n                    );\r\n                  });\r\n                } else {\r\n                  return (\r\n                    <div style={{ width: \"100%\" }}>\r\n                      <img\r\n                        src={\r\n                          productDetails.stock === \"No Stock\" ||\r\n                          productDetails?.stock === 0\r\n                            ? `http://${base_url}:${port}/images/products/${\r\n                                productDetails.image\r\n                                  ? productDetails?.image\r\n                                  : fetchData?.image\r\n                              }`\r\n                            : `http://${base_url}:${port}/images/variants_pics/${productDetails.image}`\r\n                        }\r\n                        style={{\r\n                          height: \"500px\",\r\n                          width: \"100%\",\r\n                          objectFit: \"contain\",\r\n                        }}\r\n                        alt=\"\"\r\n                      />\r\n                    </div>\r\n                  );\r\n                }\r\n              })()}\r\n            </Zoom>\r\n          </div>\r\n        </Grid>\r\n\r\n        <Grid item xs={12} sm={7} md={7} lg={7}>\r\n          <Card\r\n            sx={{\r\n              // height: \"100%\",\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n            }}\r\n          >\r\n            <div className=\"row mx-3 mt-3\">\r\n              <Typography variant=\"overline\" gutterBottom>\r\n                {t(\"product_name\")}: {fetchData?.ProductName}\r\n              </Typography>\r\n              <Typography variant=\"body2\" gutterBottom>\r\n                {t(\"description\")}: {fetchData?.Description}\r\n              </Typography>\r\n              <Typography variant=\"body2\" gutterBottom>\r\n                {t(\"unit\")}: {fetchData?.UnitName}\r\n              </Typography>\r\n\r\n              {themes?.preparation_time != 0 ? (\r\n                <Typography variant=\"body2\" gutterBottom>\r\n                  {t(\"preparation_Time\")}: {fetchData?.preparationTime} Minutes\r\n                </Typography>\r\n              ) : (\r\n                \" \"\r\n              )}\r\n              <p>\r\n                {t(\"price\")} :{\" \"}\r\n                {productDetails.price === 0\r\n                  ? fetchData?.price + sum\r\n                  : parseInt(productDetails.price) + sum}\r\n              </p>\r\n              <p>\r\n                {t(\"stock\")}:{\" \"}\r\n                {productDetails.stock === 0\r\n                  ? fetchData?.stock\r\n                  : productDetails.stock}\r\n              </p>\r\n            </div>\r\n            <div className=\"row mx-3\">\r\n              <Typography variant=\"overline\" gutterBottom>\r\n                {t(\"ingredients\")}\r\n              </Typography>\r\n              <small>Please select the ingredients you want to remove.</small>\r\n            </div>\r\n            <div className=\"row mx-4\">\r\n              {JSON.parse(fetchData.ingredients)?.map((item, i) => {\r\n                return (\r\n                  <div\r\n                    className=\"col-md-auto col-sm-auto col-xl-auto col-lg-auto col-auto\"\r\n                    onClick={() => {\r\n                      changeIngredients(item.label);\r\n                    }}\r\n                    style={\r\n                      ingredients.includes(item.label)\r\n                        ? {\r\n                            cursor: \"pointer\",\r\n\r\n                            padding: \"3px\",\r\n                            margin: \"2px\",\r\n                            border: \"1px solid\",\r\n                            textAlign: \"center\",\r\n                            borderColor: \"red\",\r\n                            textDecoration: \"line-through\",\r\n                            color: \"red\",\r\n                          }\r\n                        : {\r\n                            cursor: \"pointer\",\r\n                            padding: \"3px\",\r\n                            margin: \"2px\",\r\n                            border: \"1px solid\",\r\n                            textAlign: \"center\",\r\n                            // borderRadius: \"10px\",\r\n                            borderColor: \"black\",\r\n                          }\r\n                    }\r\n                  >\r\n                    {item.label}\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n            <div className=\"row m-3\">\r\n              <Accordion>\r\n                <AccordionSummary\r\n                  expandIcon={<ExpandMoreIcon />}\r\n                  aria-controls=\"panel1a-content\"\r\n                  id=\"panel1a-header\"\r\n                >\r\n                  <Typography variant=\"overline\" gutterBottom>\r\n                    {t(\"extras\")}\r\n                  </Typography>\r\n                </AccordionSummary>\r\n                <AccordionDetails>\r\n                  <FormGroup>\r\n                    {JSON.parse(fetchData.extras)?.map((item, i) => {\r\n                      return (\r\n                        <FormControlLabel\r\n                          key={i}\r\n                          control={\r\n                            <Checkbox\r\n                              onChange={(e) => {\r\n                                extraHandlers(e, item.price);\r\n                              }}\r\n                              color=\"default\"\r\n                              sx={{\r\n                                color: themeCustomization?.branch_name_color\r\n                                  ? themeCustomization.branch_name_color\r\n                                  : \"#ff751d\",\r\n                              }}\r\n                            />\r\n                          }\r\n                          label={\r\n                            <Typography variant=\"body2\" gutterBottom>\r\n                              {item.label + \" ( +\" + item.price + \".00\" + \" )\"}\r\n                            </Typography>\r\n                          }\r\n                        />\r\n                      );\r\n                    })}\r\n                  </FormGroup>\r\n                </AccordionDetails>\r\n              </Accordion>\r\n            </div>\r\n\r\n            <div className=\"row m-3\">\r\n              <Typography variant=\"overline\" gutterBottom>\r\n                {t(\"vatiants\")}\r\n              </Typography>\r\n            </div>\r\n\r\n            <div className=\"row mx-2\">\r\n              {Object.keys(showVaralint).map((list, i) => {\r\n                return (\r\n                  <div className=\"row \" key={i}>\r\n                    <div className=\"col-md-auto col-sm-auto col-xl-auto col-lg-auto col-auto\">\r\n                      {list}\r\n                      <div className=\"row\">\r\n                        {showVaralint[list].map((variant) => {\r\n                          return (\r\n                            <div className=\"col-md-auto col-sm-auto col-xl-auto col-lg-auto col-auto\">\r\n                              <div\r\n                                onClick={() => {\r\n                                  changePrice(list, variant);\r\n                                }}\r\n                                style={\r\n                                  skuarray[i] == variant\r\n                                    ? {\r\n                                        cursor: \"pointer\",\r\n                                        margin: \"2px\",\r\n                                        padding: \"5px\",\r\n                                        border: \"1px solid\",\r\n                                        textAlign: \"center\",\r\n                                        borderRadius: \"10px\",\r\n                                        borderColor: \"red\",\r\n                                      }\r\n                                    : {\r\n                                        cursor: \"pointer\",\r\n                                        margin: \"2px\",\r\n\r\n                                        padding: \"5px\",\r\n                                        border: \"1px solid\",\r\n                                        textAlign: \"center\",\r\n                                        borderRadius: \"10px\",\r\n                                        borderColor: \"black\",\r\n                                      }\r\n                                }\r\n                              >\r\n                                {variant}\r\n                              </div>\r\n                            </div>\r\n                          );\r\n                        })}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <Container maxWidth=\"lg\" className=\"mt-5\">\r\n        <main>\r\n          <Grid container spacing={2}>\r\n            {viewImages_HTMLTABLE}\r\n          </Grid>\r\n        </main>\r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default ProductDetails;\r\n","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\Cart.js",["430","431","432"],"import React, { useState, useEffect } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// Import css files\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport Container from \"@mui/material/Container\";\r\n// import Slider from \"react-slick\";\r\nimport Header from \"./Header\";\r\nimport { base_url, port } from \"../../../../../Consts\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Card from \"@mui/material/Card\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport \"react-slideshow-image/dist/styles.css\";\r\nimport getSymbolFromCurrency from \"currency-symbol-map\";\r\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\"; // requires a loader\r\n// import { Carousel } from \"react-responsive-carousel\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport ClearIcon from \"@mui/icons-material/Clear\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport ReactWhatsapp from \"react-whatsapp\";\r\nimport TextareaAutosize from \"@mui/base/TextareaAutosize\";\r\nimport WhatsAppIcon from \"@mui/icons-material/WhatsApp\";\r\nimport \"../style.css\";\r\nimport QrReader from \"react-qr-reader\";\r\nimport axios from \"axios\";\r\nimport SendIcon from \"@mui/icons-material/Send\";\r\nimport CustomAlert from \"../../../CustomAlert\";\r\nimport * as Yup from \"yup\";\r\nimport \"yup-phone\";\r\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\r\n\r\nconst Cart = (props) => {\r\n  let message = \"\";\r\n  let { custom, checkBit, cart, setCart, branch, deliveryFees } = props;\r\n  const initialValues = {\r\n    phoneNumber: \"\",\r\n  };\r\n  const validationSchema = () => {\r\n    return Yup.object().shape({\r\n      phoneNumber: Yup.string().phone().required(\"Phone Number is required\"),\r\n    });\r\n  };\r\n  const theme = createTheme({\r\n    palette: {\r\n      background: {\r\n        default: custom?.bgColor ? custom.bgColor : \"#22252a\",\r\n      },\r\n    },\r\n    typography: {\r\n      fontFamily: custom?.font ? custom.font : \"sans-serif\",\r\n      // discription\r\n      subtitle1: {\r\n        fontSize: custom?.pDiscriptionSize\r\n          ? custom.pDiscriptionSize + \"rem\"\r\n          : \"0.75rem\",\r\n\r\n        color: custom?.product_discription_color\r\n          ? custom.product_discription_color\r\n          : \"#fff\",\r\n      },\r\n      // price\r\n      body1: {\r\n        fontSize: custom?.priceSize ? custom.priceSize + \"rem\" : \"1.25rem\",\r\n        color: custom?.price_color ? custom.price_color : \"#fff\",\r\n      },\r\n      // product Names\r\n      button: {\r\n        fontSize: custom?.pNameSize ? custom.pNameSize + \"rem\" : \"1rem\",\r\n        color: custom?.product_name_color ? custom.product_name_color : \"#fff\",\r\n      },\r\n      // Menus\r\n      h6: {\r\n        fontSize: custom?.menusSize ? custom.menusSize + \"rem\" : \"1rem\",\r\n        color: custom?.menusAcriveColor ? custom.menusAcriveColor : \"#f27d1e\",\r\n      },\r\n    },\r\n  });\r\n  const style = {\r\n    width: \"100%\",\r\n    backgroundColor: custom?.cardBgColor ? custom.cardBgColor : \"#2d3134\",\r\n    color: custom?.menusDeactiveColor ? custom.menusDeactiveColor : \"#fff\",\r\n    fontSize: 12,\r\n    borderColor: custom?.menusAcriveColor ? custom.menusAcriveColor : \"#ff751d\",\r\n  };\r\n  const card = {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    backgroundColor: custom?.cardBgColor ? custom.cardBgColor : \"#2d3134\",\r\n  };\r\n  const buttonStyle = {\r\n    textTransform: \"capitalize\",\r\n    backgroundColor: custom?.button_background_color\r\n      ? custom.button_background_color\r\n      : \"#ff751d\",\r\n    color: custom?.button_text_color ? custom.button_text_color : \"#f1fcfe\",\r\n    fontSize: custom?.bTextSize ? custom.bTextSize + \"rem\" : \"1rem\",\r\n  };\r\n  // for localization\r\n  const { t } = useTranslation();\r\n\r\n  const currency = getSymbolFromCurrency(cart[0]?.currency_code);\r\n  const [loading, setLoading] = useState(true);\r\n  let [sum, setSum] = useState(0);\r\n  const [tables, setTables] = useState([]);\r\n  const dataLoad = () => {\r\n    let Total = 0;\r\n    cart.map(\r\n      (item) =>\r\n        (Total +=\r\n          item.totalPrice === undefined\r\n            ? item.price * item.qty\r\n            : parseInt(item.totalPrice) + item.price * (item.qty - 1))\r\n    );\r\n    setSum(Total);\r\n    axios.get(`/api/GetTables/${branch.id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setTables(res.data.fetchData);\r\n      }\r\n    });\r\n    setLoading(false);\r\n  };\r\n  useEffect(() => {\r\n    let unmounted = false;\r\n    dataLoad();\r\n    return () => {\r\n      unmounted = true;\r\n    };\r\n  }, []);\r\n\r\n  const handleDecrement = (e, qty, id, price) => {\r\n    e.preventDefault();\r\n    let vars = cart.map((item) =>\r\n      id === item.id\r\n        ? {\r\n            ...item,\r\n            qty: item.qty - (item.qty > 0 ? 1 : 0),\r\n          }\r\n        : item\r\n    );\r\n    if (qty > 1) {\r\n      setCart((cart) => vars);\r\n      setSum((sum -= parseInt(price)));\r\n      localStorage.setItem(\"cart\", JSON.stringify(vars));\r\n    }\r\n  };\r\n  const handelIncrement = (e, qty, id, price, stock) => {\r\n    e.preventDefault();\r\n    if (stock > qty) {\r\n      let vars = cart.map((item) =>\r\n        id === item.id ? { ...item, qty: qty + 1 } : item\r\n      );\r\n      setCart((cart) => vars);\r\n      localStorage.setItem(\"cart\", JSON.stringify(vars));\r\n\r\n      setSum((sum += parseInt(price)));\r\n    } else {\r\n      setAlerts(\r\n        true,\r\n        \"warning\",\r\n        \"More than that isn't available because it's out of stock.\"\r\n      );\r\n    }\r\n  };\r\n  const remItem = (id, qty, price) => {\r\n    setSum((sum -= price * qty));\r\n\r\n    const data = cart.filter((cart) => {\r\n      return cart.id !== id;\r\n    });\r\n    localStorage.setItem(\"cart\", JSON.stringify(data));\r\n    setCart(data);\r\n  };\r\n  const [orderingWay, setOrderingWay] = useState();\r\n  const checkOrderingMethod = (key) => {\r\n    setOrderingWay(key);\r\n    setShowReservation([]);\r\n  };\r\n  const [showReservation, setShowReservation] = useState([]);\r\n  const checkReservation = (key) => {\r\n    setShowReservation(key);\r\n  };\r\n  const [userData, setUserData] = useState({ phoneNumber: \"\" });\r\n  const changeHandle = (e) => {\r\n    setUserData({ ...userData, [e.target.name]: e.target.value });\r\n  };\r\n  const [table, setTable] = useState([]);\r\n  const handleScan = (data) => {\r\n    if (data) {\r\n      axios.get(`/api/checkTheTbl/${data}`).then((res) => {\r\n        if (res.data.status === 200) {\r\n          setTable(res.data.data);\r\n        }\r\n      });\r\n    }\r\n  };\r\n  const handleError = (err) => {\r\n    console.error(err);\r\n  };\r\n  const [alert, setAlert] = useState({\r\n    open: false,\r\n    severity: \"success\",\r\n    message: \"\",\r\n  });\r\n  const setAlerts = (open, severity, message) => {\r\n    setAlert({\r\n      open: open,\r\n      severity: severity,\r\n      message: message,\r\n    });\r\n  };\r\n  const [error, setError] = useState(false);\r\n  const saveOrder = (data) => {\r\n    if (orderingWay !== undefined) {\r\n      if (orderingWay === \"tbl_qrcode\" && showReservation.length === 0) {\r\n        setAlerts(true, \"warning\", \"Please Select Table Reservation.\");\r\n      } else {\r\n        orderingWay === \"tbl_qrcode\"\r\n          ? showReservation === \"outside\"\r\n            ? userData.dateAndTime === undefined ||\r\n              userData.table_id === undefined\r\n              ? setError(true)\r\n              : save(data)\r\n            : table.length === 0\r\n            ? setAlerts(true, \"warning\", \"Please Scan The Table QR-Code.\")\r\n            : save(data)\r\n          : orderingWay === \"delivery\"\r\n          ? userData.address === undefined || userData.address === \"\"\r\n            ? setError(true)\r\n            : save(data)\r\n          : save(data);\r\n      }\r\n    } else {\r\n      setAlerts(true, \"warning\", \"Please choose at least one way of ordering.\");\r\n    }\r\n  };\r\n  const save = (data) => {\r\n    if (data !== undefined) {\r\n      const formData = new FormData();\r\n      formData.append(\"orderingItems\", localStorage.getItem(\"cart\"));\r\n      formData.append(\r\n        \"table_id\",\r\n        table.id === undefined ? userData.table_id : table.id\r\n      );\r\n      formData.append(\"dateAndTime\", userData.dateAndTime);\r\n      formData.append(\"orderingMethod\", orderingWay);\r\n      formData.append(\"generalNote\", userData.generalNote);\r\n      formData.append(\"phoneNumber\", data.phoneNumber);\r\n      formData.append(\"buildingNo\", userData.buildingNo);\r\n      formData.append(\"address\", userData.address);\r\n      formData.append(\"floor\", userData.floor);\r\n      formData.append(\"flat\", userData.flat);\r\n      formData.append(\"directions\", userData.directions);\r\n      formData.append(\"deliveryFees\", deliveryFees);\r\n      formData.append(\"branch_id\", branch.id);\r\n      axios.post(\"/api/InsertOrder\", formData).then((res) => {\r\n        if (res.data.status === 200) {\r\n          setAlerts(true, \"success\", res.data.message);\r\n          setTable([]);\r\n          setUserData([]);\r\n          setCart([]);\r\n          localStorage.removeItem(\"cart\");\r\n        }\r\n      });\r\n    }\r\n  };\r\n  const active = {\r\n    cursor: \"pointer\",\r\n    border: \"1px solid\",\r\n    textAlign: \"center\",\r\n    borderRadius: \"10px\",\r\n    borderColor: \"black\",\r\n    backgroundColor: custom?.menusAcriveColor\r\n      ? custom.menusAcriveColor\r\n      : \"black\",\r\n    color: custom?.menusDeactiveColor ? custom.menusDeactiveColor : \"#fff\",\r\n  };\r\n  const deactive = {\r\n    cursor: \"pointer\",\r\n    border: \"1px solid\",\r\n    textAlign: \"center\",\r\n    borderRadius: \"10px\",\r\n    borderColor: custom?.menusAcriveColor ? custom.menusAcriveColor : \"#ff751d\",\r\n    backgroundColor: \"#2d3134\",\r\n    color: custom?.menusDeactiveColor ? custom.menusDeactiveColor : \"#fff\",\r\n  };\r\n  const outputs = [];\r\n  for (const [key, value] of Object.entries(JSON.parse(branch?.orderMethods))) {\r\n    if (value === 1) {\r\n      outputs.push(\r\n        <Grid item xs={12} lg={3} xl={3} sm={12} md={6} key={key}>\r\n          <div\r\n            onClick={() => checkOrderingMethod(key)}\r\n            style={orderingWay === key ? active : deactive}\r\n          >\r\n            <Typography\r\n              variant=\"button\"\r\n              style={{ textTransform: \"capitalize\" }}\r\n              // className=\"font-weight-bold\"\r\n            >\r\n              {key === \"tbl_qrcode\"\r\n                ? \"Table Reservation\"\r\n                : key === \"delivery\"\r\n                ? \"Home Delivery\"\r\n                : key === \"whatsApp\"\r\n                ? \"WhatsApp\"\r\n                : key}\r\n            </Typography>\r\n          </div>\r\n        </Grid>\r\n      );\r\n    }\r\n  }\r\n  var viewImages_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"container \">\r\n        <div\r\n          className=\"spinner-border text-primary \"\r\n          role=\"status\"\r\n          style={{ position: \"fixed\", top: \"50%\", left: \"50%\" }}\r\n        >\r\n          <span className=\"sr-only\">{t(\"loading\")}</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewImages_HTMLTABLE = cart?.map((item, i) => {\r\n      message =\r\n        message +\r\n        `*Product Name*: ${item.ProductName} \\n*Category*: ${\r\n          item.CategoryName\r\n        } ${\r\n          item.SubCategoryName === undefined\r\n            ? \"\"\r\n            : ` \\n*Sub Category*: ${item.SubCategoryName}`\r\n        } \\n*QTY*: ${item.qty} \\n*Price*: ${item.price + \" \" + currency} ${\r\n          item.itemNote === undefined ? \"\" : `\\n*Item Note*: ${item.itemNote}`\r\n        } ${\r\n          item.variantSKU === undefined\r\n            ? \"\"\r\n            : `\\n*Item Variant*: ${item.variantSKU}`\r\n        } ${\r\n          item.extras === undefined || item.extras?.length === 0\r\n            ? \"\"\r\n            : `\\n*Extras*: ${item.extras.map((val) => val.value)} INCLUDED`\r\n        } ${\r\n          item.ingredients === undefined || item.ingredients?.length === 0\r\n            ? \"\"\r\n            : `\\n*Ingredients*: ${item.ingredients} NOT INCLUDED`\r\n        } ${\r\n          item.recommendations === undefined ||\r\n          item.recommendations?.length === 0\r\n            ? \"\"\r\n            : `\\n*Recommendations*: ${item.recommendations.map((val) =>\r\n                val.show\r\n                  ? val.label +\r\n                    \" price: \" +\r\n                    val.price +\r\n                    currency +\r\n                    \" qty: \" +\r\n                    val.qty\r\n                  : \"\"\r\n              )}`\r\n        } ${\r\n          item.totalPrice === undefined\r\n            ? `\\n*Item Total Price*: ${item.qty * item.price + \" \" + currency}`\r\n            : `\\n*Item Total Price*: ${item.totalPrice + \" \" + currency}`\r\n        }\\n\\n`;\r\n      return (\r\n        <Card key={i} sx={card} className=\"m-1\">\r\n          <div className=\"text-right\">\r\n            <IconButton onClick={() => remItem(item.id, item.qty, item.price)}>\r\n              <ClearIcon\r\n                sx={{\r\n                  color: custom?.menusAcriveColor\r\n                    ? custom.menusAcriveColor\r\n                    : \"#f27d1e\",\r\n                }}\r\n              />\r\n            </IconButton>\r\n          </div>\r\n\r\n          <CardContent sx={{ flexGrow: 1 }}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12} lg={2} xl={3} sm={6} md={6}>\r\n                <img\r\n                  style={{\r\n                    height: \"100px\",\r\n                    width: \"100%\",\r\n                    borderRadius: \"15%\",\r\n                    objectFit: \"contain\",\r\n                  }}\r\n                  src={`http://${base_url}:${port}/images/products/${\r\n                    JSON.parse(item.image)[0]\r\n                  }`}\r\n                  alt=\"Image\"\r\n                  // className=\"h-100\"\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} lg={3} xl={3} sm={6} md={6}>\r\n                <Typography\r\n                  variant=\"button\"\r\n                  style={{ textTransform: \"capitalize\" }}\r\n                  // className=\"font-weight-bold\"\r\n                >\r\n                  {item.ProductName}\r\n                </Typography>\r\n                {item?.variantSKU === undefined ? null : (\r\n                  <Typography variant=\"subtitle1\" gutterBottom>\r\n                    <b>Variants: </b>\r\n\r\n                    {item?.variantSKU?.map((val, i) => {\r\n                      if (item?.variantSKU.length === i + 1) {\r\n                        return val;\r\n                      } else {\r\n                        return val + \", \";\r\n                      }\r\n                    })}\r\n                  </Typography>\r\n                )}\r\n                <Typography\r\n                  variant=\"body1\"\r\n                  gutterBottom\r\n                  className=\"font-weight-bold\"\r\n                >\r\n                  {parseInt(item.price).toFixed(2) + \"  \" + currency}\r\n                </Typography>\r\n                <Typography variant=\"subtitle1\" gutterBottom>\r\n                  <b>Qty:</b> {item.qty + \" \" + item.UnitName}\r\n                </Typography>\r\n\r\n                <Typography variant=\"subtitle1\" gutterBottom>\r\n                  <b>Discription: </b>\r\n                  {item.Description}\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item xs={12} lg={5} xl={5} sm={6} md={6}>\r\n                {\" \"}\r\n                {item?.ingredients === undefined ? null : (\r\n                  <Typography variant=\"subtitle1\" gutterBottom>\r\n                    <b>Ingredients: </b>\r\n                    {item?.ingredients?.map((val, i) => {\r\n                      if (item?.ingredients.length === i + 1) {\r\n                        return val + \" - Not Included\";\r\n                      } else {\r\n                        return val + \", \";\r\n                      }\r\n                    })}\r\n                  </Typography>\r\n                )}\r\n                {item?.extras === undefined ? null : (\r\n                  <Typography variant=\"subtitle1\" gutterBottom>\r\n                    <b>Extras: </b>\r\n\r\n                    {item?.extras?.map((val, i) => {\r\n                      if (item?.extras.length === i + 1) {\r\n                        return val.value + \" - Included\";\r\n                      } else {\r\n                        return val.value + \" , \";\r\n                      }\r\n                    })}\r\n                  </Typography>\r\n                )}\r\n                {item?.recommendations === undefined ? null : (\r\n                  <Typography variant=\"subtitle1\" gutterBottom>\r\n                    <b>Recommendations: </b>\r\n\r\n                    {item?.recommendations?.map((val, i) => {\r\n                      if (val.show) {\r\n                        return (\r\n                          val.label +\r\n                          \" (Qty: \" +\r\n                          val.qty +\r\n                          \" * \" +\r\n                          val.price +\r\n                          \" = \" +\r\n                          (val.price * val.qty).toFixed(2) +\r\n                          \" \" +\r\n                          currency +\r\n                          \" )\"\r\n                        );\r\n                      } else {\r\n                        return \"\";\r\n                      }\r\n                    })}\r\n                  </Typography>\r\n                )}\r\n              </Grid>\r\n              <Grid item xs={12} lg={2} xl={2} sm={6} md={6}>\r\n                <div className=\"row mt-2\">\r\n                  <div className={`row`}>\r\n                    <div className=\"col-4 \">\r\n                      <IconButton\r\n                        onClick={(e) =>\r\n                          handleDecrement(e, item.qty, item.id, item.price)\r\n                        }\r\n                      >\r\n                        <Typography\r\n                          style={{ cursor: \"pointer\" }}\r\n                          variant=\"h6\"\r\n                          gutterBottom\r\n                        >\r\n                          <svg\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                            width=\"16\"\r\n                            height=\"16\"\r\n                            fill=\"currentColor\"\r\n                            className=\"bi bi-dash-square-dotted  \"\r\n                            viewBox=\"0 0 16 16\"\r\n                          >\r\n                            <path d=\"M2.5 0c-.166 0-.33.016-.487.048l.194.98A1.51 1.51 0 0 1 2.5 1h.458V0H2.5zm2.292 0h-.917v1h.917V0zm1.833 0h-.917v1h.917V0zm1.833 0h-.916v1h.916V0zm1.834 0h-.917v1h.917V0zm1.833 0h-.917v1h.917V0zM13.5 0h-.458v1h.458c.1 0 .199.01.293.029l.194-.981A2.51 2.51 0 0 0 13.5 0zm2.079 1.11a2.511 2.511 0 0 0-.69-.689l-.556.831c.164.11.305.251.415.415l.83-.556zM1.11.421a2.511 2.511 0 0 0-.689.69l.831.556c.11-.164.251-.305.415-.415L1.11.422zM16 2.5c0-.166-.016-.33-.048-.487l-.98.194c.018.094.028.192.028.293v.458h1V2.5zM.048 2.013A2.51 2.51 0 0 0 0 2.5v.458h1V2.5c0-.1.01-.199.029-.293l-.981-.194zM0 3.875v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zM0 5.708v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zM0 7.542v.916h1v-.916H0zm15 .916h1v-.916h-1v.916zM0 9.375v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zm-16 .916v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zm-16 .917v.458c0 .166.016.33.048.487l.98-.194A1.51 1.51 0 0 1 1 13.5v-.458H0zm16 .458v-.458h-1v.458c0 .1-.01.199-.029.293l.981.194c.032-.158.048-.32.048-.487zM.421 14.89c.183.272.417.506.69.689l.556-.831a1.51 1.51 0 0 1-.415-.415l-.83.556zm14.469.689c.272-.183.506-.417.689-.69l-.831-.556c-.11.164-.251.305-.415.415l.556.83zm-12.877.373c.158.032.32.048.487.048h.458v-1H2.5c-.1 0-.199-.01-.293-.029l-.194.981zM13.5 16c.166 0 .33-.016.487-.048l-.194-.98A1.51 1.51 0 0 1 13.5 15h-.458v1h.458zm-9.625 0h.917v-1h-.917v1zm1.833 0h.917v-1h-.917v1zm1.834 0h.916v-1h-.916v1zm1.833 0h.917v-1h-.917v1zm1.833 0h.917v-1h-.917v1zM4.5 7.5a.5.5 0 0 0 0 1h7a.5.5 0 0 0 0-1h-7z\" />\r\n                          </svg>\r\n                        </Typography>\r\n                      </IconButton>\r\n                    </div>\r\n                    <div className=\"col-4\">\r\n                      <IconButton>\r\n                        <Typography\r\n                          variant=\"subtitle1\"\r\n                          gutterBottom\r\n                          className=\"mt-1\"\r\n                        >\r\n                          {item.qty}\r\n                        </Typography>\r\n                      </IconButton>\r\n                    </div>\r\n                    <div className=\"col-4\">\r\n                      <IconButton\r\n                        onClick={(e) =>\r\n                          handelIncrement(\r\n                            e,\r\n                            item.qty,\r\n                            item.id,\r\n                            item.price,\r\n                            item.stock\r\n                          )\r\n                        }\r\n                      >\r\n                        <Typography\r\n                          style={{ cursor: \"pointer\" }}\r\n                          variant=\"h6\"\r\n                          gutterBottom\r\n                        >\r\n                          <svg\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                            width=\"16\"\r\n                            height=\"16\"\r\n                            fill=\"currentColor\"\r\n                            className=\"bi bi-plus-square-dotted\"\r\n                            viewBox=\"0 0 16 16\"\r\n                          >\r\n                            <path d=\"M2.5 0c-.166 0-.33.016-.487.048l.194.98A1.51 1.51 0 0 1 2.5 1h.458V0H2.5zm2.292 0h-.917v1h.917V0zm1.833 0h-.917v1h.917V0zm1.833 0h-.916v1h.916V0zm1.834 0h-.917v1h.917V0zm1.833 0h-.917v1h.917V0zM13.5 0h-.458v1h.458c.1 0 .199.01.293.029l.194-.981A2.51 2.51 0 0 0 13.5 0zm2.079 1.11a2.511 2.511 0 0 0-.69-.689l-.556.831c.164.11.305.251.415.415l.83-.556zM1.11.421a2.511 2.511 0 0 0-.689.69l.831.556c.11-.164.251-.305.415-.415L1.11.422zM16 2.5c0-.166-.016-.33-.048-.487l-.98.194c.018.094.028.192.028.293v.458h1V2.5zM.048 2.013A2.51 2.51 0 0 0 0 2.5v.458h1V2.5c0-.1.01-.199.029-.293l-.981-.194zM0 3.875v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zM0 5.708v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zM0 7.542v.916h1v-.916H0zm15 .916h1v-.916h-1v.916zM0 9.375v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zm-16 .916v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zm-16 .917v.458c0 .166.016.33.048.487l.98-.194A1.51 1.51 0 0 1 1 13.5v-.458H0zm16 .458v-.458h-1v.458c0 .1-.01.199-.029.293l.981.194c.032-.158.048-.32.048-.487zM.421 14.89c.183.272.417.506.69.689l.556-.831a1.51 1.51 0 0 1-.415-.415l-.83.556zm14.469.689c.272-.183.506-.417.689-.69l-.831-.556c-.11.164-.251.305-.415.415l.556.83zm-12.877.373c.158.032.32.048.487.048h.458v-1H2.5c-.1 0-.199-.01-.293-.029l-.194.981zM13.5 16c.166 0 .33-.016.487-.048l-.194-.98A1.51 1.51 0 0 1 13.5 15h-.458v1h.458zm-9.625 0h.917v-1h-.917v1zm1.833 0h.917v-1h-.917v1zm1.834-1v1h.916v-1h-.916zm1.833 1h.917v-1h-.917v1zm1.833 0h.917v-1h-.917v1zM8.5 4.5a.5.5 0 0 0-1 0v3h-3a.5.5 0 0 0 0 1h3v3a.5.5 0 0 0 1 0v-3h3a.5.5 0 0 0 0-1h-3v-3z\" />\r\n                          </svg>\r\n                        </Typography>\r\n                      </IconButton>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </Grid>\r\n              <Grid item xs={12} lg={6} xl={6} sm={6} md={6}>\r\n                {item?.itemNote === undefined ? null : (\r\n                  <Typography variant=\"subtitle1\" gutterBottom className=\"mx-1\">\r\n                    <b>Item Note: </b>\r\n                    {item?.itemNote}\r\n                  </Typography>\r\n                )}\r\n              </Grid>\r\n              <Grid item xs={12} lg={6} xl={6} sm={6} md={6}>\r\n                <Typography\r\n                  variant=\"subtitle1\"\r\n                  gutterBottom\r\n                  className=\"text-right mx-5\"\r\n                >\r\n                  <b>Total Price: </b>\r\n                  {item?.totalPrice !== undefined\r\n                    ? (\r\n                        parseInt(item.totalPrice) +\r\n                        item.price * (item.qty - 1)\r\n                      ).toFixed(2)\r\n                    : (parseInt(item.price) * item.qty).toFixed(2)}\r\n                  {\" \" + currency}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </CardContent>\r\n        </Card>\r\n      );\r\n    });\r\n  }\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <Container maxWidth=\"lg\" className=\"mb-2\">\r\n        {alert.open ? (\r\n          <CustomAlert\r\n            open={alert.open}\r\n            severity={alert.severity}\r\n            message={alert.message}\r\n            setAlert={setAlert}\r\n          />\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        {checkBit ? \"\" : <Header subcategories={0} cart={cart.length} />}\r\n        {cart.length === 0 ? (\r\n          <Grid container spacing={2} className=\"text-center\">\r\n            <Grid item xs={12} lg={12} xl={12} sm={6} md={6}>\r\n              No Item Available\r\n            </Grid>\r\n          </Grid>\r\n        ) : (\r\n          <>\r\n            {viewImages_HTMLTABLE}\r\n            <Card sx={card} className=\"m-1\">\r\n              <CardContent sx={{ flexGrow: 1 }}>\r\n                <Grid container spacing={2}>\r\n                  <Grid item xs={12} lg={3} xl={3} sm={12} md={6}>\r\n                    <Typography\r\n                      variant=\"button\"\r\n                      style={{ textTransform: \"capitalize\" }}\r\n                    >\r\n                      Ordering Methods\r\n                    </Typography>\r\n                  </Grid>\r\n                  {outputs}\r\n                  {orderingWay === \"tbl_qrcode\" ? (\r\n                    <>\r\n                      <Grid item xs={12} lg={4} xl={4} sm={12} md={6}>\r\n                        <Typography\r\n                          variant=\"button\"\r\n                          style={{ textTransform: \"capitalize\" }}\r\n                        >\r\n                          Table Reservation\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid item xs={12} lg={4} xl={4} sm={12} md={6}>\r\n                        <div\r\n                          onClick={() => checkReservation(\"inside\")}\r\n                          style={\r\n                            showReservation === \"inside\" ? active : deactive\r\n                          }\r\n                        >\r\n                          <Typography\r\n                            variant=\"button\"\r\n                            style={{ textTransform: \"capitalize\" }}\r\n                            // className=\"font-weight-bold\"\r\n                          >\r\n                            Scan QR Code\r\n                          </Typography>\r\n                        </div>\r\n                      </Grid>\r\n                      <Grid item xs={12} lg={4} xl={4} sm={12} md={6}>\r\n                        <div\r\n                          onClick={() => checkReservation(\"outside\")}\r\n                          style={\r\n                            showReservation === \"outside\" ? active : deactive\r\n                          }\r\n                        >\r\n                          <Typography\r\n                            variant=\"button\"\r\n                            style={{ textTransform: \"capitalize\" }}\r\n                          >\r\n                            Reserve a table\r\n                          </Typography>\r\n                        </div>\r\n                      </Grid>\r\n                    </>\r\n                  ) : null}\r\n                </Grid>\r\n              </CardContent>\r\n            </Card>\r\n            <Card sx={card} className=\"m-1\">\r\n              <CardContent sx={{ flexGrow: 1 }}>\r\n                <Grid container spacing={2}>\r\n                  <Grid\r\n                    item\r\n                    xs={12}\r\n                    lg={6}\r\n                    xl={6}\r\n                    sm={12}\r\n                    md={6}\r\n                    className=\"text-center\"\r\n                  >\r\n                    <Typography variant=\"body1\">Delivery Fee</Typography>\r\n                    <Typography variant=\"body1\" className=\"font-weight-bold \">\r\n                      {deliveryFees.toFixed(2) + \"  \" + currency}\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid\r\n                    item\r\n                    xs={12}\r\n                    lg={6}\r\n                    xl={6}\r\n                    sm={12}\r\n                    md={6}\r\n                    className=\"text-center\"\r\n                  >\r\n                    <Typography variant=\"body1\">Grand Total</Typography>\r\n                    <Typography variant=\"body1\" className=\"font-weight-bold \">\r\n                      {(sum + deliveryFees).toFixed(2) + \"  \" + currency}\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n              </CardContent>\r\n            </Card>\r\n            {showReservation === \"inside\" ? (\r\n              <Card sx={card} className=\"m-1\">\r\n                <CardContent sx={{ flexGrow: 1 }}>\r\n                  <div>\r\n                    <QrReader\r\n                      delay={300}\r\n                      onError={handleError}\r\n                      onScan={handleScan}\r\n                      style={{ width: \"100%\" }}\r\n                    />\r\n                    {table.length !== 0 ? (\r\n                      <Typography variant=\"subtitle1\" gutterBottom>\r\n                        successfully authenticated: {table.tableId}\r\n                      </Typography>\r\n                    ) : null}\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n            ) : showReservation === \"outside\" ? (\r\n              <Card sx={card} className=\"m-1\">\r\n                <CardContent sx={{ flexGrow: 1 }}>\r\n                  <Grid container spacing={1}>\r\n                    <Grid item xs={12} lg={6} xl={6} sm={6} md={6}>\r\n                      <div className=\"form-group\">\r\n                        <select\r\n                          className={`form-control ${\r\n                            error ? \"is-invalid\" : \"\"\r\n                          }`}\r\n                          aria-label=\"Default select example\"\r\n                          onChange={changeHandle}\r\n                          style={style}\r\n                          name=\"table_id\"\r\n                        >\r\n                          <option> Select a Table</option>\r\n                          {tables.map((item) => {\r\n                            return (\r\n                              <option value={item.id} key={item.id}>\r\n                                {item.tableId +\r\n                                  \" - \" +\r\n                                  item.numberOfSeats +\r\n                                  \" Seater\"}\r\n                              </option>\r\n                            );\r\n                          })}\r\n                        </select>\r\n                      </div>\r\n                    </Grid>\r\n                    <Grid item xs={12} lg={6} xl={6} sm={6} md={6}>\r\n                      <div className=\"form-group\">\r\n                        <input\r\n                          name=\"dateAndTime\"\r\n                          type=\"datetime-local\"\r\n                          className={`form-control ${\r\n                            error ? \"is-invalid\" : \"\"\r\n                          }`}\r\n                          placeholder=\"Date and Time\"\r\n                          onChange={changeHandle}\r\n                          style={style}\r\n                        />\r\n                      </div>\r\n                    </Grid>\r\n                  </Grid>\r\n                </CardContent>\r\n              </Card>\r\n            ) : null}\r\n            {orderingWay === \"delivery\" ? (\r\n              <Card sx={card} className=\"m-1\">\r\n                <CardContent sx={{ flexGrow: 1 }}>\r\n                  <Grid container spacing={1}>\r\n                    <Grid item xs={12} lg={4} xl={3} sm={6} md={6}>\r\n                      <TextareaAutosize\r\n                        name=\"address\"\r\n                        onChange={changeHandle}\r\n                        className={`form-control ${error ? \"is-invalid\" : \"\"}`}\r\n                        minRows={1}\r\n                        placeholder=\"Address\"\r\n                        style={style}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12} lg={4} xl={3} sm={6} md={6}>\r\n                      <div className=\"form-group\">\r\n                        <input\r\n                          name=\"buildingNo\"\r\n                          type=\"text\"\r\n                          className={\"form-control\"}\r\n                          placeholder=\"Building No\"\r\n                          onChange={changeHandle}\r\n                          style={style}\r\n                        />\r\n                      </div>\r\n                    </Grid>\r\n                    <Grid item xs={12} lg={4} xl={3} sm={6} md={6}>\r\n                      <div className=\"form-group\">\r\n                        <input\r\n                          name=\"floor\"\r\n                          type=\"text\"\r\n                          className={\"form-control\"}\r\n                          placeholder=\"Floor\"\r\n                          onChange={changeHandle}\r\n                          style={style}\r\n                        />\r\n                      </div>\r\n                    </Grid>\r\n                    <Grid item xs={12} lg={4} xl={3} sm={6} md={6}>\r\n                      <div className=\"form-group\">\r\n                        <input\r\n                          name=\"flat\"\r\n                          type=\"text\"\r\n                          className={\"form-control\"}\r\n                          placeholder=\"Flat\"\r\n                          onChange={changeHandle}\r\n                          style={style}\r\n                        />\r\n                      </div>\r\n                    </Grid>\r\n                    <Grid item xs={12} lg={4} xl={3} sm={6} md={6}>\r\n                      <div className=\"form-group\">\r\n                        <input\r\n                          name=\"directions\"\r\n                          type=\"text\"\r\n                          className={\"form-control\"}\r\n                          placeholder=\"Directions\"\r\n                          onChange={changeHandle}\r\n                          style={style}\r\n                        />\r\n                      </div>\r\n                    </Grid>\r\n                  </Grid>\r\n                </CardContent>\r\n              </Card>\r\n            ) : null}\r\n            <Formik\r\n              initialValues={initialValues}\r\n              validationSchema={validationSchema}\r\n              onSubmit={saveOrder}\r\n            >\r\n              {({ errors, status, touched, values }) => (\r\n                <Form>\r\n                  <Card sx={card} className=\"m-1\">\r\n                    <CardContent sx={{ flexGrow: 1 }}>\r\n                      <Grid container spacing={1}>\r\n                        <Grid item xs={12} lg={12} xl={6} sm={12} md={12}>\r\n                          <div className=\"form-group\">\r\n                            <Field\r\n                              name=\"phoneNumber\"\r\n                              type=\"text\"\r\n                              className={\r\n                                \"form-control\" +\r\n                                (errors.phoneNumber && touched.phoneNumber\r\n                                  ? \" is-invalid\"\r\n                                  : \"\")\r\n                              }\r\n                              placeholder=\"+93--- ---- ---\"\r\n                              style={style}\r\n                            />\r\n                            <ErrorMessage\r\n                              name=\"phoneNumber\"\r\n                              component=\"div\"\r\n                              style={{ fontSize: \"0.7em\" }}\r\n                              className=\"invalid-feedback\"\r\n                            />\r\n                            {/* <input\r\n                              name=\"phoneNumber\"\r\n                              type=\"text\"\r\n                              className={`form-control`}\r\n                              placeholder=\"Phone\"\r\n                              onChange={changeHandle}\r\n                              style={style}\r\n                            /> */}\r\n                          </div>\r\n                        </Grid>\r\n                        <Grid item xs={12} lg={12} xl={6} sm={12} md={12}>\r\n                          <TextareaAutosize\r\n                            name=\"generalNote\"\r\n                            onChange={changeHandle}\r\n                            className={\"form-control\"}\r\n                            minRows={3}\r\n                            placeholder=\"General Note\"\r\n                            style={style}\r\n                          />\r\n                        </Grid>\r\n                      </Grid>\r\n                    </CardContent>\r\n                  </Card>\r\n                  <Card sx={card} className=\"m-1\">\r\n                    <CardContent sx={{ flexGrow: 1 }}>\r\n                      <Grid container spacing={2}>\r\n                        <Grid item xs={12} lg={6} xl={6} sm={6} md={6}>\r\n                          {orderingWay !== \"tbl_qrcode\" ? (\r\n                            <>\r\n                              <p className=\"d-none\">\r\n                                {\r\n                                  (message = `\\n\\n${message} ------------------------- \\n *Sub Total*: ${\r\n                                    sum.toFixed(2) + \"  \" + currency\r\n                                  }\\n *Delivery Fee*: ${\r\n                                    deliveryFees.toFixed(2) + \"  \" + currency\r\n                                  }\\n *Grand Total*: ${\r\n                                    (sum + deliveryFees).toFixed(2) +\r\n                                    \"  \" +\r\n                                    currency\r\n                                  }\\n *Phone Number*: ${values?.phoneNumber}${\r\n                                    userData?.generalNote === undefined\r\n                                      ? \"\"\r\n                                      : `\\n *General Note*: ${userData?.generalNote}`\r\n                                  }\r\n                           `)\r\n                                }\r\n                                {orderingWay === \"delivery\"\r\n                                  ? (message = `${message} \\n---------------- \\n *Ordering Method*: Home Delivery\\n *Address*: ${userData?.address}\\n *Building No*: ${userData?.buildingNo}\\n *Floor*: ${userData?.floor}\\n *Flat*: ${userData?.flat}\\n *Directions*: ${userData?.directions}`)\r\n                                  : null}\r\n                              </p>\r\n                              {orderingWay === undefined ? (\r\n                                <button\r\n                                  className=\"col-12 btn\"\r\n                                  style={buttonStyle}\r\n                                  type=\"submit\"\r\n                                  // onClick={() => saveOrder()}\r\n                                >\r\n                                  <WhatsAppIcon /> {t(\"send_order\")}\r\n                                </button>\r\n                              ) : orderingWay === \"delivery\" ? (\r\n                                userData.address === undefined ||\r\n                                userData.address === \"\" ? (\r\n                                  <button\r\n                                    className=\"col-12 btn\"\r\n                                    style={buttonStyle}\r\n                                    type=\"submit\"\r\n                                    // onClick={() => saveOrder()}\r\n                                  >\r\n                                    <WhatsAppIcon /> {t(\"send_order\")}\r\n                                  </button>\r\n                                ) : (\r\n                                  <ReactWhatsapp\r\n                                    className=\"col-12 btn\"\r\n                                    type=\"submit\"\r\n                                    style={buttonStyle}\r\n                                    number={branch?.phoneNumber}\r\n                                    message={message}\r\n                                    max=\"4096\"\r\n                                    // onClick={() => saveOrder()}\r\n                                  >\r\n                                    <WhatsAppIcon /> {t(\"send_order\")}\r\n                                  </ReactWhatsapp>\r\n                                )\r\n                              ) : orderingWay === \"whatsApp\" &&\r\n                                values.phoneNumber === \"\" ? (\r\n                                <button\r\n                                  className=\"col-12 btn\"\r\n                                  style={buttonStyle}\r\n                                  type=\"submit\"\r\n                                  // onClick={() => saveOrder()}\r\n                                >\r\n                                  <WhatsAppIcon /> {t(\"send_order\")}\r\n                                </button>\r\n                              ) : errors.phoneNumber && touched.phoneNumber ? (\r\n                                <button\r\n                                  className=\"col-12 btn\"\r\n                                  style={buttonStyle}\r\n                                  type=\"submit\"\r\n                                  // onClick={() => saveOrder()}\r\n                                >\r\n                                  <WhatsAppIcon /> {t(\"send_order\")}\r\n                                </button>\r\n                              ) : (\r\n                                <ReactWhatsapp\r\n                                  className=\"col-12 btn\"\r\n                                  type=\"submit\"\r\n                                  style={buttonStyle}\r\n                                  number={branch?.phoneNumber}\r\n                                  message={message}\r\n                                  max=\"4096\"\r\n                                  // onClick={() => saveOrder()}\r\n                                >\r\n                                  <WhatsAppIcon /> {t(\"send_order\")}\r\n                                </ReactWhatsapp>\r\n                              )}\r\n                            </>\r\n                          ) : (\r\n                            <button\r\n                              className=\"col-12 btn\"\r\n                              style={buttonStyle}\r\n                              onClick={() => saveOrder()}\r\n                            >\r\n                              <SendIcon /> {t(\"send_order\")}\r\n                            </button>\r\n                          )}\r\n                        </Grid>\r\n                        <Grid item xs={12} lg={6} xl={6} sm={6} md={6}>\r\n                          <button\r\n                            className=\"col-12 btn\"\r\n                            style={buttonStyle}\r\n                            onClick={() => [\r\n                              localStorage.removeItem(\"cart\"),\r\n                              setCart([]),\r\n                              setUserData([]),\r\n                            ]}\r\n                          >\r\n                            <ClearIcon /> {t(\"empty_cart\")}\r\n                          </button>\r\n                        </Grid>\r\n                      </Grid>\r\n                    </CardContent>\r\n                  </Card>\r\n                </Form>\r\n              )}\r\n            </Formik>\r\n          </>\r\n        )}\r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default Cart;\r\n","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Second\\Main.js",["433","434","435","436","437","438","439"],"import React, { useState, useEffect } from \"react\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Container from \"@mui/material/Container\";\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport Header from \"./Header\";\r\nimport Footer from \"./Footer\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardMedia from \"@mui/material/CardMedia\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport axios from \"axios\";\r\nimport { base_url, port } from \"../../../../../Consts\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport Box from \"@mui/material/Box\";\r\nimport Tabs, { tabsClasses } from \"@mui/material/Tabs\";\r\nimport Tab from \"@mui/material/Tab\";\r\nimport HorizontalScroller from \"react-horizontal-scroll-container\";\r\nimport getSymbolFromCurrency from \"currency-symbol-map\";\r\n\r\nvar hold = 1;\r\nexport default function Main(props) {\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  const [loading, setLoading] = useState(true);\r\n  const { t } = useTranslation();\r\n  const branchId = atob(props.match.params.id);\r\n  const [subcategories, setSubCategories] = useState([]);\r\n  const [products, setProducts] = useState([]);\r\n  const [activeSubCategory, setActiveSubCategory] = useState(0);\r\n  const [themeCustomization, setThemeCustomization] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios.get(`/api/GetTempBasedOnBranch/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setThemeCustomization(res.data.fetchData[0]?.Customization);\r\n        // console.log(res.data.fetchData[0].Customization);\r\n      }\r\n    });\r\n    axios.get(`/api/getSubCateBasedOnBranch/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setSubCategories(res.data.fetchData);\r\n        setActiveSubCategory(res.data.fetchData[0]?.sub_id);\r\n        setSubName(res.data.fetchData[0].SubCategoryName);\r\n\r\n        axios\r\n          .get(\r\n            `/api/GetProductsBasedOnSubCategory/${res.data.fetchData[0]?.sub_id}`\r\n          )\r\n          .then((res) => {\r\n            if (res.data.status === 200) {\r\n              setProducts(res.data.data);\r\n            }\r\n          });\r\n        setLoading(false);\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  // design start\r\n  const theme = createTheme({\r\n    palette: {\r\n      warning: {\r\n        // button background\r\n        main: themeCustomization?.button_background_color\r\n          ? themeCustomization.button_background_color\r\n          : \"#ff751d\",\r\n      },\r\n    },\r\n    typography: {\r\n      fontFamily: themeCustomization?.font\r\n        ? themeCustomization.font\r\n        : \"sans-serif\",\r\n      subtitle1: {\r\n        fontSize: themeCustomization?.product_discription_font_size\r\n          ? themeCustomization.product_discription_font_size\r\n          : 10,\r\n        color: themeCustomization?.product_discription_color\r\n          ? themeCustomization.product_discription_color\r\n          : \"#777\",\r\n      },\r\n      // price\r\n      body1: {\r\n        fontSize: themeCustomization?.price_font_size\r\n          ? themeCustomization.price_font_size\r\n          : 12,\r\n        color: themeCustomization?.price_color\r\n          ? themeCustomization.price_color\r\n          : \"#f1fcfe\",\r\n      },\r\n      // product Names\r\n      button: {\r\n        fontSize: themeCustomization?.product_name_font_size\r\n          ? themeCustomization.product_name_font_size\r\n          : 12,\r\n        color: themeCustomization?.product_name_color\r\n          ? themeCustomization.product_name_color\r\n          : \"#1f1d1f\",\r\n      },\r\n      // categories and sub categories\r\n      overline: {\r\n        fontSize: themeCustomization?.categories_and_sub_categoies_font_size\r\n          ? themeCustomization.categories_and_sub_categoies_font_size\r\n          : 12,\r\n        color: themeCustomization?.categories_and_sub_categoies_color\r\n          ? themeCustomization.categories_and_sub_categoies_color\r\n          : \"#ff751d\",\r\n      },\r\n      // branch Name\r\n      h4: {\r\n        fontSize: themeCustomization?.branch_name_font_size\r\n          ? themeCustomization.branch_name_font_size\r\n          : 28,\r\n        color: themeCustomization?.branch_name_color\r\n          ? themeCustomization.branch_name_color\r\n          : \"#aa3f32\",\r\n      },\r\n      h3: {\r\n        fontSize: themeCustomization?.branch_name_font_size\r\n          ? themeCustomization.branch_name_font_size\r\n          : 36,\r\n        color: themeCustomization?.branch_name_color\r\n          ? themeCustomization.branch_name_color\r\n          : \"#1f1d1f\",\r\n      },\r\n    },\r\n    components: {\r\n      MuiButton: {\r\n        variants: [\r\n          {\r\n            // button\r\n            props: { variant: \"contained\" },\r\n            style: {\r\n              fontSize: themeCustomization?.button_text_font_size\r\n                ? themeCustomization.button_text_font_size\r\n                : 12,\r\n              color: themeCustomization?.button_text_color\r\n                ? themeCustomization.button_text_color\r\n                : \"#f1fcfe\",\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n  });\r\n  // design end\r\n  let [subName, setSubName] = useState(\"\");\r\n  const filterProducts = (subCateID, name) => {\r\n    axios.get(`/api/GetProductsBasedOnSubCategory/${subCateID}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        // console.log(res.data.data);\r\n        setProducts(res.data.data);\r\n      }\r\n    });\r\n    setSubName(name);\r\n    setActiveSubCategory(subCateID);\r\n  };\r\n  var viewShow_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div\r\n        className=\"spinner-border text-primary \"\r\n        role=\"status\"\r\n        style={{ position: \"fixed\", top: \"50%\", left: \"50%\" }}\r\n      >\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewShow_HTMLTABLE = products?.map((item, i) => {\r\n      return (\r\n        <Grid\r\n          item\r\n          xs={12}\r\n          sm={12}\r\n          md={12}\r\n          key={i}\r\n          sx={{ height: \"500px\" }}\r\n          className=\"center\"\r\n        >\r\n          <Card\r\n            sx={{\r\n              width: \"300px\",\r\n              margin: \"30px\",\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n            }}\r\n          >\r\n            <CardMedia\r\n              component=\"img\"\r\n              sx={{ height: \"300px\", objectFit: \"contain\" }}\r\n              image={`http://${base_url}:${port}/images/products/${item.image}`}\r\n              alt=\"Image\"\r\n            />\r\n            <Link\r\n              to={{\r\n                pathname: `/second-template/product/${btoa(item.id)}`,\r\n                state: { themes: themeCustomization },\r\n              }}\r\n            >\r\n              <CardContent sx={{ flexGrow: 1 }} className=\"text-center\">\r\n                <Typography\r\n                  variant=\"button\"\r\n                  style={{ textTransform: \"capitalize\" }}\r\n                >\r\n                  {item.ProductName}\r\n                </Typography>\r\n                <Typography variant=\"subtitle1\" gutterBottom>\r\n                  {item.Description}\r\n                </Typography>\r\n                <Typography variant=\"h4\" gutterBottom>\r\n                  {item.price + \" \" + getSymbolFromCurrency(item.currency_code)}\r\n                </Typography>\r\n              </CardContent>\r\n            </Link>\r\n          </Card>\r\n        </Grid>\r\n      );\r\n    });\r\n  }\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <Container maxWidth=\"lg\">\r\n        <Typography\r\n          component=\"h2\"\r\n          variant=\"h3\"\r\n          align=\"left\"\r\n          style={{\r\n            marginLeft: 200,\r\n            paddingBottom: \"2px\",\r\n            marginBottom: \"10px\",\r\n            borderBottomStyle: \"solid\",\r\n            borderottomWidth: \"3.1px\",\r\n            width: \"fit-content\",\r\n            borderColor: \"#33cd6b\",\r\n          }}\r\n          noWrap\r\n          sx={{ flex: 1 }}\r\n        >\r\n          {subName}\r\n        </Typography>\r\n\r\n        <Card>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={2}>\r\n              <Box\r\n                sx={{\r\n                  flexGrow: 1,\r\n                  bgcolor: \"background.paper\",\r\n                  display: \"flex\",\r\n                  height: 500,\r\n                }}\r\n              >\r\n                <Tabs\r\n                  orientation=\"vertical\"\r\n                  value={value}\r\n                  onChange={handleChange}\r\n                  variant=\"scrollable\"\r\n                  scrollButtons\r\n                  aria-label=\"Vertical tabs example\"\r\n                  TabIndicatorProps={{\r\n                    style: {\r\n                      display: \"none\",\r\n                    },\r\n                  }}\r\n                  sx={{\r\n                    [`& .${tabsClasses.scrollButtons}`]: {\r\n                      \"&.Mui-disabled\": { opacity: 0.3 },\r\n                    },\r\n                  }}\r\n                >\r\n                  {subcategories?.map((section, i) => (\r\n                    <Tab\r\n                      className=\"mb-2\"\r\n                      onClick={() =>\r\n                        filterProducts(section.sub_id, section.SubCategoryName)\r\n                      }\r\n                      style={\r\n                        activeSubCategory == section.sub_id\r\n                          ? {\r\n                              cursor: \"pointer\",\r\n                              background: \"#33cd6b\",\r\n                              margin: \"2px\",\r\n                              padding: \"5px\",\r\n                              border: \"1px solid\",\r\n                              textAlign: \"center\",\r\n                              borderRadius: \"10px\",\r\n                              borderColor: \"#33cd6b\",\r\n                            }\r\n                          : {\r\n                              cursor: \"pointer\",\r\n                              margin: \"2px\",\r\n                              padding: \"5px\",\r\n                              textAlign: \"center\",\r\n                              borderRadius: \"10px\",\r\n                            }\r\n                      }\r\n                      icon={\r\n                        <img\r\n                          style={{\r\n                            height: \"50px\",\r\n                            width: \"50px\",\r\n                            objectFit: \"contain\",\r\n                          }}\r\n                          src={`http://${base_url}:${port}/images/sub_catagories/${section.SubCategoryIcon}`}\r\n                        />\r\n                      }\r\n                      label={\r\n                        <Typography\r\n                          style={\r\n                            activeSubCategory == section.sub_id\r\n                              ? {\r\n                                  color: \"white\",\r\n                                  textTransform: \"capitalize\",\r\n                                }\r\n                              : {\r\n                                  color: \"black\",\r\n                                  textTransform: \"capitalize\",\r\n                                }\r\n                          }\r\n                        >\r\n                          {section.SubCategoryName}\r\n                        </Typography>\r\n                      }\r\n                    />\r\n                  ))}\r\n                </Tabs>\r\n              </Box>\r\n            </Grid>\r\n            <Grid item xs={10}>\r\n              <HorizontalScroller>{viewShow_HTMLTABLE}</HorizontalScroller>\r\n            </Grid>\r\n          </Grid>\r\n        </Card>\r\n      </Container>\r\n      {/* <Footer /> */}\r\n    </ThemeProvider>\r\n  );\r\n}\r\n","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\index.js",[],"D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\CustomAlert.js",[],"D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Second\\Footer.js",[],"D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Second\\Header.js",[],"D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\pages\\Error404.js",[],"D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Orders\\OrderDetails.js",["440","441","442","443","444","445"],"import React, { Fragment, useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { base_url, port } from \"../../../Consts\";\r\nimport { CBreadcrumb } from \"@coreui/react\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Card from \"@mui/material/Card\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport getSymbolFromCurrency from \"currency-symbol-map\";\r\nimport CustomAlert from \"../CustomAlert\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport ReactWhatsapp from \"react-whatsapp\";\r\nimport WhatsAppIcon from \"@mui/icons-material/WhatsApp\";\r\n\r\nconst OrderDetails = (props) => {\r\n  let message = \"\";\r\n\r\n  const { t } = useTranslation();\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const id = props.history.location.state.id;\r\n  const currency = getSymbolFromCurrency(fetchData[0]?.currency_code);\r\n  const [order, setOrder] = useState([]);\r\n  let [sum, setSum] = useState(0);\r\n  const [check, setCheck] = useState(false);\r\n  const [modalCentered, setModalCentered] = useState(false);\r\n  const dataLoad = () => {\r\n    axios.get(`/api/getOrder/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        let items = JSON.parse(res.data.fetchData.orderingItems);\r\n        setFetchData(items);\r\n        setOrder(res.data.fetchData);\r\n        let TotalSum = 0;\r\n        items.map(\r\n          (item) =>\r\n            (TotalSum +=\r\n              item.totalPrice === undefined\r\n                ? item.price * item.qty\r\n                : parseInt(item.totalPrice) + item.price * (item.qty - 1))\r\n        );\r\n        setSum(TotalSum);\r\n      }\r\n\r\n      setLoading(false);\r\n    });\r\n  };\r\n  useEffect(() => {\r\n    let unmounted = false;\r\n    dataLoad();\r\n    return () => {\r\n      unmounted = true;\r\n    };\r\n  }, [check]);\r\n\r\n  const initialValues = {\r\n    discardReason: \"\",\r\n  };\r\n  const validationSchema = () => {\r\n    return Yup.object().shape({\r\n      discardReason: Yup.string().required(\"Reason is required\"),\r\n    });\r\n  };\r\n  const [alert, setAlert] = useState({\r\n    open: false,\r\n    severity: \"success\",\r\n    message: \"\",\r\n  });\r\n  const setAlerts = (open, severity, message) => {\r\n    setAlert({\r\n      open: open,\r\n      severity: severity,\r\n      message: message,\r\n    });\r\n  };\r\n  const discardOrder = (data) => {\r\n    axios.post(`/api/discardOrder/${id}`, data).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setAlerts(true, \"success\", res.data.message);\r\n        setCheck(!check);\r\n        setModalCentered(false);\r\n      }\r\n    });\r\n  };\r\n  const completedOrder = () => {\r\n    axios.get(`/api/completedOrder/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setAlerts(true, \"success\", res.data.message);\r\n        setCheck(!check);\r\n      }\r\n    });\r\n  };\r\n  var viewOrders_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"spinner-border text-primary \" role=\"status\">\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewOrders_HTMLTABLE = fetchData.map((item, i) => {\r\n      return (\r\n        <Card key={i} className=\"m-1\">\r\n          <CardContent sx={{ flexGrow: 1 }}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12} lg={2} xl={3} sm={6} md={6}>\r\n                <img\r\n                  style={{\r\n                    height: \"100px\",\r\n                    width: \"100%\",\r\n                    borderRadius: \"15%\",\r\n                    objectFit: \"contain\",\r\n                  }}\r\n                  src={`http://${base_url}:${port}/images/products/${\r\n                    JSON.parse(item.image)[0]\r\n                  }`}\r\n                  alt=\"Image\"\r\n                  // className=\"h-100\"\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} lg={3} xl={3} sm={6} md={6}>\r\n                <Typography\r\n                  variant=\"body1\"\r\n                  style={{ textTransform: \"capitalize\" }}\r\n                >\r\n                  <b> Product:</b> {item.ProductName}\r\n                </Typography>\r\n                {item?.variantSKU === undefined ? null : (\r\n                  <Typography variant=\"body1\" gutterBottom>\r\n                    <b>Variants:</b>{\" \"}\r\n                    {item?.variantSKU?.map((val, i) => {\r\n                      if (item?.variantSKU.length === i + 1) {\r\n                        return val;\r\n                      } else {\r\n                        return val + \", \";\r\n                      }\r\n                    })}\r\n                  </Typography>\r\n                )}\r\n                <Typography variant=\"body1\" gutterBottom>\r\n                  <b>Price:</b>{\" \"}\r\n                  {parseInt(item.price).toFixed(2) + \"  \" + currency}\r\n                </Typography>\r\n                <Typography variant=\"body1\" gutterBottom>\r\n                  <b>Qty:</b> {item.qty + \" \" + item.UnitName}\r\n                </Typography>\r\n                <Typography variant=\"body1\" gutterBottom>\r\n                  <b>Description:</b> {item.Description}\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item xs={6} xs={12} lg={5} xl={5} sm={6} md={6}>\r\n                {item?.ingredients === undefined ? null : (\r\n                  <Typography variant=\"subtitle1\" gutterBottom>\r\n                    <b>Ingredients:</b>\r\n                    {item?.ingredients?.map((val, i) => {\r\n                      if (item?.ingredients.length === i + 1) {\r\n                        return val + \" - Not Included\";\r\n                      } else {\r\n                        return val + \", \";\r\n                      }\r\n                    })}\r\n                  </Typography>\r\n                )}\r\n                {item?.extras === undefined ? null : (\r\n                  <Typography variant=\"subtitle1\" gutterBottom>\r\n                    <b>Extras:</b>\r\n\r\n                    {item?.extras?.map((val, i) => {\r\n                      if (item?.extras.length == i + 1) {\r\n                        return val.value + \" - Included\";\r\n                      } else {\r\n                        return val.value + \" , \";\r\n                      }\r\n                    })}\r\n                  </Typography>\r\n                )}\r\n                {item?.recommendations === undefined ? null : (\r\n                  <Typography variant=\"subtitle1\" gutterBottom>\r\n                    <b>Recommendations:</b>\r\n\r\n                    {item?.recommendations?.map((val, i) => {\r\n                      if (val.show) {\r\n                        return (\r\n                          val.label +\r\n                          \" (Qty: \" +\r\n                          val.qty +\r\n                          \" * \" +\r\n                          val.price +\r\n                          \" = \" +\r\n                          (val.price * val.qty).toFixed(2) +\r\n                          \" \" +\r\n                          currency +\r\n                          \" )\"\r\n                        );\r\n                      }\r\n                    })}\r\n                  </Typography>\r\n                )}\r\n              </Grid>\r\n              <Grid item xs={12} lg={6} xl={6} sm={6} md={6}>\r\n                {item?.itemNote === undefined ? null : (\r\n                  <Typography variant=\"body1\" className=\"mx-1\">\r\n                    <b>Item Note: </b>\r\n                    {item.itemNote}\r\n                  </Typography>\r\n                )}\r\n              </Grid>\r\n              <Grid item xs={12} lg={6} xl={6} sm={6} md={6}>\r\n                <Typography\r\n                  variant=\"body1\"\r\n                  gutterBottom\r\n                  className=\"text-right mx-5\"\r\n                >\r\n                  <b>Total Price: </b>\r\n                  {item?.totalPrice !== undefined\r\n                    ? (\r\n                        parseInt(item.totalPrice) +\r\n                        item.price * (item.qty - 1)\r\n                      ).toFixed(2)\r\n                    : (parseInt(item.price) * item.qty).toFixed(2)}\r\n                  {\" \" + currency}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </CardContent>\r\n        </Card>\r\n      );\r\n    });\r\n  }\r\n  return (\r\n    <Fragment>\r\n      {alert.open ? (\r\n        <CustomAlert\r\n          open={alert.open}\r\n          severity={alert.severity}\r\n          message={alert.message}\r\n          setAlert={setAlert}\r\n        />\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <CBreadcrumb style={{ \"--cui-breadcrumb-divider\": \"'>'\" }}>\r\n        <Link\r\n          to={{\r\n            pathname: `/orders`,\r\n          }}\r\n          className=\"font-weight-bold\"\r\n        >\r\n          {t(\"orders\")}\r\n        </Link>\r\n        {\"  ->   \"}\r\n        <div className=\"font-weight-bold\">{t(\"details\")}</div>\r\n      </CBreadcrumb>\r\n      {viewOrders_HTMLTABLE}\r\n      <Card className=\"m-1\">\r\n        <CardContent sx={{ flexGrow: 1 }}>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12} lg={6} xl={6} sm={12} md={6}>\r\n              <Typography variant=\"body1\" gutterBottom>\r\n                <b>Prdering Method: </b>\r\n                {order.orderingMethod === \"whatsApp\"\r\n                  ? \" WhatsApp\"\r\n                  : order.orderingMethod === \"tbl_qrcode\"\r\n                  ? \" Table Reservation\"\r\n                  : \" Home Delivery\"}\r\n              </Typography>\r\n              {order.tableId !== null ? (\r\n                <>\r\n                  <Typography variant=\"body1\" gutterBottom>\r\n                    <b>Table Number: </b>\r\n                    {order.tableId}\r\n                  </Typography>\r\n                  <Typography variant=\"body1\" gutterBottom>\r\n                    <b>Reservation date and time: </b>\r\n                    {order.dateAndTime === null ? \"Now\" : order.dateAndTime}\r\n                  </Typography>\r\n                </>\r\n              ) : null}\r\n              <Typography variant=\"body1\" gutterBottom>\r\n                <b>General Note: </b>\r\n                {order.generalNote}\r\n              </Typography>\r\n              <Typography variant=\"body1\" gutterBottom>\r\n                <b>Phone Number: </b>\r\n                {order.phoneNumber}\r\n              </Typography>\r\n              <Typography variant=\"body1\" gutterBottom>\r\n                <b>Status: </b>\r\n                {order.status === 0\r\n                  ? \" Discarded\"\r\n                  : order.status === 1\r\n                  ? \" Completed\"\r\n                  : \" Pending\"}\r\n              </Typography>\r\n              {order.status === 0 ? (\r\n                <Typography variant=\"body1\" gutterBottom>\r\n                  <b>Discard Reason: </b>\r\n                  {order.discardReason}\r\n                </Typography>\r\n              ) : null}\r\n            </Grid>\r\n            <Grid item xs={12} lg={6} xl={6} sm={12} md={6}>\r\n              <Typography variant=\"body1\" gutterBottom>\r\n                <b>Address: </b> {order.address}\r\n              </Typography>\r\n              <Typography variant=\"body1\" gutterBottom>\r\n                <b>Building No: </b> {order.buildingNo}\r\n              </Typography>\r\n              <Typography variant=\"body1\" gutterBottom>\r\n                <b>Floor: </b> {order.floor}\r\n              </Typography>\r\n              <Typography variant=\"body1\" gutterBottom>\r\n                <b>Flat: </b> {order.flat}\r\n              </Typography>\r\n              <Typography variant=\"body1\" gutterBottom>\r\n                <b>Directions: </b> {order.directions}\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n      </Card>\r\n      <Card className=\"m-1\">\r\n        <CardContent sx={{ flexGrow: 1 }}>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12} lg={6} xl={6} sm={12} md={6}>\r\n              <Typography variant=\"body1\" gutterBottom>\r\n                <b>Delivery Fees: </b>\r\n                {order.deliveryFees + \"  \" + currency}\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item xs={12} lg={6} xl={6} sm={12} md={6}>\r\n              <Typography variant=\"body1\" gutterBottom>\r\n                <b>Grand Total: </b>\r\n                {(sum + order.deliveryFees).toFixed(2) + \"  \" + currency}\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n      </Card>\r\n      {order.status === 1 ? null : (\r\n        <div className=\"text-right m-1\">\r\n          <Button variant=\"success\" className=\"m-1\" onClick={completedOrder}>\r\n            Complete Order{\" \"}\r\n          </Button>\r\n          <Button\r\n            variant=\"danger\"\r\n            className=\"m-1\"\r\n            //  onClick={discardOrder}\r\n            onClick={() => setModalCentered(true)}\r\n          >\r\n            Discard Order{\" \"}\r\n          </Button>\r\n        </div>\r\n      )}\r\n      <Modal className=\"fade\" show={modalCentered}>\r\n        <Modal.Header>\r\n          <Modal.Title>Discard Order</Modal.Title>\r\n          <Button\r\n            onClick={() => setModalCentered(false)}\r\n            variant=\"\"\r\n            className=\"close\"\r\n          >\r\n            <span>&times;</span>\r\n          </Button>\r\n        </Modal.Header>\r\n        <Formik\r\n          initialValues={initialValues}\r\n          validationSchema={validationSchema}\r\n          onSubmit={discardOrder}\r\n        >\r\n          {({ errors, status, touched, values }) => (\r\n            <Form>\r\n              <Modal.Body>\r\n                <div className=\"form-group\">\r\n                  <label> Reason </label>\r\n                  <Field\r\n                    as=\"textarea\"\r\n                    name=\"discardReason\"\r\n                    className={\r\n                      \"form-control\" +\r\n                      (errors.discardReason && touched.discardReason\r\n                        ? \" is-invalid\"\r\n                        : \"\")\r\n                    }\r\n                    placeholder=\"Reason...\"\r\n                  />\r\n                  <ErrorMessage\r\n                    name=\"discardReason\"\r\n                    component=\"div\"\r\n                    className=\"invalid-feedback\"\r\n                  />\r\n                </div>\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                <Button\r\n                  onClick={() => setModalCentered(false)}\r\n                  variant=\"danger light\"\r\n                >\r\n                  {t(\"close\")}\r\n                </Button>\r\n                <p className=\"d-none\">\r\n                  {\r\n                    (message = `*Order Number*: ${order.id} \\n*Status*:* Discarded* \\n*Reason*: ${values?.discardReason} \\n`)\r\n                  }\r\n                </p>\r\n                {values?.discardReason === \"\" ? (\r\n                  <Button variant=\"primary\" type=\"submit\">\r\n                    {t(\"save\")}{\" \"}\r\n                  </Button>\r\n                ) : (\r\n                  <ReactWhatsapp\r\n                    className=\"btn btn-primary\"\r\n                    type=\"submit\"\r\n                    // style={buttonStyle}\r\n                    number={order.phoneNumber}\r\n                    message={message}\r\n                    max=\"4096\"\r\n                    onClick={() => discardOrder()}\r\n                  >\r\n                    <WhatsAppIcon fontSize=\"small\" /> {t(\"send_order\")}\r\n                  </ReactWhatsapp>\r\n                )}\r\n              </Modal.Footer>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </Modal>\r\n    </Fragment>\r\n  );\r\n};\r\nexport default OrderDetails;\r\n","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Areas\\Area.js",[],"D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Products\\Ingredients.js",[],"D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Orders\\Order.js",["446","447","448"],"import React, { Fragment, useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { base_url, port } from \"../../../Consts\";\r\nimport Chip from \"@mui/material/Chip\";\r\nimport MoreHorizIcon from \"@mui/icons-material/MoreHoriz\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Tooltip from \"@mui/material/Tooltip\";\r\nimport { CBreadcrumb } from \"@coreui/react\";\r\n\r\nconst Order = () => {\r\n  const { t } = useTranslation();\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const dataLoad = () => {\r\n    axios.get(`/api/getOrders`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setFetchData(res.data.fetchData);\r\n      }\r\n      setLoading(false);\r\n    });\r\n  };\r\n  useEffect(() => {\r\n    let unmounted = false;\r\n    dataLoad();\r\n    return () => {\r\n      unmounted = true;\r\n    };\r\n  }, []);\r\n\r\n  var viewOrders_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"spinner-border text-primary \" role=\"status\">\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewOrders_HTMLTABLE = fetchData.map((item, i) => {\r\n      return (\r\n        <tr key={i}>\r\n          <td>{item.id}</td>\r\n          <td>\r\n            {item.orderingMethod === \"whatsApp\" ? (\r\n              <Chip\r\n                label=\"WhatsApp\"\r\n                color=\"success\"\r\n                variant=\"outlined\"\r\n                size=\"small\"\r\n              />\r\n            ) : item.orderingMethod === \"tbl_qrcode\" ? (\r\n              <Chip\r\n                label=\"Table Reservation\"\r\n                color=\"primary\"\r\n                variant=\"outlined\"\r\n                size=\"small\"\r\n              />\r\n            ) : (\r\n              <Chip\r\n                label=\"Home Delivery\"\r\n                color=\"info\"\r\n                variant=\"outlined\"\r\n                size=\"small\"\r\n              />\r\n            )}\r\n          </td>\r\n          <td>{item.phoneNumber}</td>\r\n          <td>{item.generalNote}</td>\r\n          <td>{item.tableId}</td>\r\n          <td>{item.dateAndTime}</td>\r\n          <td>\r\n            {item.status === 1 ? (\r\n              <Chip\r\n                label=\"Completed\"\r\n                color=\"success\"\r\n                variant=\"outlined\"\r\n                size=\"small\"\r\n              />\r\n            ) : item.status === 0 ? (\r\n              <Chip\r\n                label=\"Discarded\"\r\n                color=\"warning\"\r\n                variant=\"outlined\"\r\n                size=\"small\"\r\n              />\r\n            ) : (\r\n              <Chip\r\n                label=\"Pending\"\r\n                color=\"info\"\r\n                variant=\"outlined\"\r\n                size=\"small\"\r\n              />\r\n            )}\r\n          </td>\r\n          <td>\r\n            <Link\r\n              to={{\r\n                pathname: `/orders/orders-details`,\r\n                state: { id: item.id },\r\n              }}\r\n            >\r\n              <Tooltip title=\"Details\">\r\n                <IconButton>\r\n                  <MoreHorizIcon />\r\n                </IconButton>\r\n              </Tooltip>\r\n            </Link>\r\n          </td>\r\n        </tr>\r\n      );\r\n    });\r\n  }\r\n  return (\r\n    <Fragment>\r\n      <CBreadcrumb style={{ \"--cui-breadcrumb-divider\": \"'>'\" }}>\r\n        <Link\r\n          to={{\r\n            pathname: `/orders`,\r\n          }}\r\n          className=\"font-weight-bold\"\r\n        >\r\n          {t(\"orders\")}\r\n        </Link>\r\n      </CBreadcrumb>\r\n\r\n      <div className=\"card\">\r\n        <div className=\"card-body\">\r\n          <div className=\"table-responsive \">\r\n            <table className=\"table text-center \">\r\n              <thead>\r\n                <tr className=\"card-title\">\r\n                  <th>{t(\"order_id\")}</th>\r\n                  <th>{t(\"ordering_methods\")}</th>\r\n                  <th>{t(\"phone_number\")}</th>\r\n                  <th>{t(\"note\")}</th>\r\n                  <th>{t(\"table_number\")}</th>\r\n                  <th>{t(\"dateAndTime\")}</th>\r\n                  <th>{t(\"status\")}</th>\r\n                  <th>{t(\"details\")}</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>{viewOrders_HTMLTABLE}</tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\nexport default Order;\r\n","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\utils\\index.js",[],"D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Attributes\\Attributes.js",[],"D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Branches\\Tables.js",["449"],"D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Branches\\Branches.js",["450"],"D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Branches\\Show.js",[],"D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\PrivateRoute.js",[],"D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Dashboard\\Profile\\Profile.js",[],"D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Services\\ServiceArea.js",["451","452","453","454","455"],"D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Companies\\Company.js",[],"D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Dashboard\\Home\\Home.js",[],"D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\layouts\\Footer.js",[],"D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\layouts\\PageTitle.js",[],"D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\layouts\\nav\\index.js",[],"D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Products\\Show.js",[],"D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Show.js",[],"D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\Customization.js",["456","457","458","459"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CRow,\r\n  CFormLabel,\r\n  CCol,\r\n} from \"@coreui/react\";\r\nimport { Form } from \"react-bootstrap\";\r\n\r\nimport { useTranslation } from \"react-i18next\";\r\n// import Switch from \"react-switch\";\r\n\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport { FormControlLabel, RadioGroup, Radio } from \"@mui/material\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport Select from \"@mui/material/Select\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardMedia from \"@mui/material/CardMedia\";\r\nimport { CardActionArea } from \"@mui/material\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Grid from \"@mui/material/Grid\";\r\n// import Switch from \"@mui/material/Switch\";\r\nconst Customization = (props) => {\r\n  const { t } = useTranslation();\r\n  // const templateId = atob(props.match.params.id);\r\n  const templateId = props.history.location.state.id;\r\n  const branchId = props.history.location.state.branchId;\r\n\r\n  const history = useHistory();\r\n\r\n  const [settings, setSettings] = useState([]);\r\n  const handleInput = (e) => {\r\n    setSettings({ ...settings, [e.target.name]: e.target.value });\r\n    // const formData = new FormData();\r\n    // formData.append(\r\n    //   \"settings\",\r\n    //   JSON.stringify({ ...settings, [e.target.name]: e.target.value })\r\n    // );\r\n    // axios\r\n    //   .post(`/api/InsertCustomization/${templateId}`, formData)\r\n    //   .then((res) => {\r\n    //     if (res.data.status === 200) {\r\n    //       setLoading(true);\r\n    //     }\r\n    //   });\r\n  };\r\n  const save = (e) => {\r\n    e.preventDefault();\r\n\r\n    const formData = new FormData();\r\n    formData.append(\"settings\", JSON.stringify(settings));\r\n    axios\r\n      .post(`/api/InsertCustomization/${templateId}`, formData)\r\n      .then((res) => {\r\n        if (res.data.status === 200) {\r\n          swal(\"Success\", res.data.message, \"success\");\r\n          setLoading(true);\r\n        }\r\n      });\r\n  };\r\n  const reset = (e) => {\r\n    e.preventDefault();\r\n    axios.get(`/api/ResetCustomization/${templateId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setSettings([]);\r\n        setLoading(true);\r\n        swal(\"Success\", res.data.message, \"success\");\r\n      }\r\n    });\r\n  };\r\n  const [template, setTemplate] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const dataLoad = () => {\r\n    axios.get(`/api/GetTemplate/${templateId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setSettings(res.data.fetchData.Customization);\r\n        setTemplate(res.data.fetchData);\r\n      }\r\n      setLoading(false);\r\n    });\r\n  };\r\n  useEffect(() => {\r\n    let unmounted = false;\r\n    dataLoad();\r\n    return () => {\r\n      unmounted = true;\r\n    };\r\n  }, [loading]);\r\n\r\n  var viewPreview_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    viewPreview_HTMLTABLE = (\r\n      <CCard>\r\n        <CCardHeader component=\"h5\">{t(\"preview\")}</CCardHeader>\r\n        <CCardBody>\r\n          <div\r\n            className=\"spinner-border text-primary\"\r\n            role=\"status\"\r\n            style={{ position: \"fixed\", top: \"0%\", left: \"50%\" }}\r\n          >\r\n            <span className=\"sr-only\">{t(\"loading\")}</span>\r\n          </div>\r\n        </CCardBody>\r\n      </CCard>\r\n    );\r\n  } else {\r\n    viewPreview_HTMLTABLE = (\r\n      <CCard>\r\n        <CCardHeader component=\"h5\">{t(\"preview\")}</CCardHeader>\r\n        <CCardBody>\r\n          <Card>\r\n            <CardActionArea>\r\n              <CardMedia\r\n                component=\"iframe\"\r\n                height=\"700px\"\r\n                image={`/filterSelection`}\r\n                // image={`/${template?.URL}/${btoa(branchId)}`}\r\n                alt=\"template\"\r\n              />\r\n            </CardActionArea>\r\n          </Card>\r\n        </CCardBody>\r\n      </CCard>\r\n    );\r\n  }\r\n  return (\r\n    <>\r\n      <Form onSubmit={save} method=\"POST\" encType=\"multipart/form-data\">\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={12} className=\"text-right\">\r\n            <button className=\"btn btn-success m-1\" type=\"submit\">\r\n              {t(\"save_and_preview\")}\r\n            </button>\r\n            <button\r\n              className=\"btn btn-info m-1\"\r\n              type=\"button\"\r\n              onClick={(e) => reset(e)}\r\n            >\r\n              {t(\"reset_to_default\")}\r\n            </button>\r\n            <div className=\"btn btn-light m-1\" onClick={() => history.goBack()}>\r\n              {t(\"back\")}\r\n            </div>\r\n          </Grid>\r\n          <Grid item xs={7}>\r\n            <CCard>\r\n              <CCardHeader component=\"h5\">{t(\"customization\")}</CCardHeader>\r\n              <CCardBody>\r\n                <CRow>\r\n                  <CCol sm={12} className=\"m-1 font-weight-bold text-primary\">\r\n                    BACKGROUND COLORS\r\n                  </CCol>\r\n                </CRow>\r\n                <section style={{ padding: 10, border: \"1px dashed grey\" }}>\r\n                  <CRow>\r\n                    <CCol sm={8}>\r\n                      <CFormLabel className=\"col-form-label font-weight-bold\">\r\n                        {t(\"Name\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                    <CCol sm={2}>\r\n                      <CFormLabel className=\"col-form-label font-weight-bold\">\r\n                        {t(\"value\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                    <CCol sm={2}>\r\n                      <CFormLabel className=\"col-form-label font-weight-bold\">\r\n                        {t(\"default\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                  </CRow>\r\n                  <CRow>\r\n                    <CCol sm={8}>\r\n                      <CFormLabel className=\"col-form-label\">\r\n                        {t(\"bgColor\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                    <CCol sm={2}>\r\n                      <input\r\n                        type=\"color\"\r\n                        onChange={handleInput}\r\n                        value={settings?.bgColor}\r\n                        name=\"bgColor\"\r\n                      />\r\n                    </CCol>\r\n                    <CCol sm={2}>\r\n                      <input type=\"color\" disabled value=\"#22252a\" />\r\n                    </CCol>\r\n                  </CRow>\r\n                  <CRow>\r\n                    <CCol sm={8}>\r\n                      <CFormLabel className=\"col-form-label\">\r\n                        {t(\"cardBgColor\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                    <CCol sm={2}>\r\n                      <input\r\n                        type=\"color\"\r\n                        onChange={handleInput}\r\n                        value={settings?.cardBgColor}\r\n                        name=\"cardBgColor\"\r\n                      />\r\n                    </CCol>\r\n                    <CCol sm={2}>\r\n                      <input type=\"color\" disabled value=\"#2d3134\" />\r\n                    </CCol>\r\n                  </CRow>\r\n                  <CRow>\r\n                    <CCol sm={8}>\r\n                      <CFormLabel className=\"col-form-label\">\r\n                        {t(\"button_background_color\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                    <CCol sm={2}>\r\n                      <input\r\n                        type=\"color\"\r\n                        onChange={handleInput}\r\n                        value={settings?.button_background_color}\r\n                        //   value={themes.TextColor}\r\n                        name=\"button_background_color\"\r\n                      />\r\n                    </CCol>\r\n                    <CCol sm={2}>\r\n                      <input\r\n                        type=\"color\"\r\n                        disabled\r\n                        // onChange={handleInput}\r\n                        value=\"#ff751d\"\r\n                      />\r\n                    </CCol>\r\n                  </CRow>\r\n                </section>\r\n                <CRow>\r\n                  <CCol sm={12} className=\"m-1 font-weight-bold text-primary\">\r\n                    COLORS\r\n                  </CCol>\r\n                </CRow>\r\n\r\n                <section style={{ padding: 10, border: \"1px dashed grey\" }}>\r\n                  <CRow>\r\n                    <CCol sm={8}>\r\n                      <CFormLabel className=\"col-form-label font-weight-bold\">\r\n                        {t(\"Name\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                    <CCol sm={2}>\r\n                      <CFormLabel className=\"col-form-label font-weight-bold\">\r\n                        {t(\"value\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                    <CCol sm={2}>\r\n                      <CFormLabel className=\"col-form-label font-weight-bold\">\r\n                        {t(\"default\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                  </CRow>\r\n\r\n                  <CRow>\r\n                    <CCol sm={8}>\r\n                      <CFormLabel className=\"col-form-label\">\r\n                        {t(\"menusAcriveColor\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                    <CCol sm={2}>\r\n                      <input\r\n                        type=\"color\"\r\n                        onChange={handleInput}\r\n                        value={settings?.menusAcriveColor}\r\n                        name=\"menusAcriveColor\"\r\n                      />\r\n                    </CCol>\r\n                    <CCol sm={2}>\r\n                      <input type=\"color\" disabled value=\"#ff751d\" />\r\n                    </CCol>\r\n                  </CRow>\r\n                  <CRow>\r\n                    <CCol sm={8}>\r\n                      <CFormLabel className=\"col-form-label\">\r\n                        {t(\"menusDeactiveColor\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                    <CCol sm={2}>\r\n                      <input\r\n                        type=\"color\"\r\n                        onChange={handleInput}\r\n                        value={settings?.menusDeactiveColor}\r\n                        name=\"menusDeactiveColor\"\r\n                      />\r\n                    </CCol>\r\n                    <CCol sm={2}>\r\n                      <input type=\"color\" disabled value=\"#ffffff\" />\r\n                    </CCol>\r\n                  </CRow>\r\n                  <CRow>\r\n                    <CCol sm={8}>\r\n                      <CFormLabel className=\"col-form-label\">\r\n                        {t(\"product_name_color\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                    <CCol sm={2}>\r\n                      <input\r\n                        type=\"color\"\r\n                        onChange={handleInput}\r\n                        value={settings?.product_name_color}\r\n                        name=\"product_name_color\"\r\n                      />\r\n                    </CCol>\r\n                    <CCol sm={2}>\r\n                      <input type=\"color\" disabled value=\"#ff751d\" />\r\n                    </CCol>\r\n                  </CRow>\r\n                  <CRow>\r\n                    <CCol sm={8}>\r\n                      <CFormLabel className=\"col-form-label\">\r\n                        {t(\"product_discription_color\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                    <CCol sm={2}>\r\n                      <input\r\n                        type=\"color\"\r\n                        onChange={handleInput}\r\n                        value={settings?.product_discription_color}\r\n                        name=\"product_discription_color\"\r\n                      />\r\n                    </CCol>\r\n                    <CCol sm={2}>\r\n                      <input type=\"color\" disabled value=\"#777\" />\r\n                    </CCol>\r\n                  </CRow>\r\n\r\n                  <CRow>\r\n                    <CCol sm={8}>\r\n                      <CFormLabel className=\"col-form-label\">\r\n                        {t(\"price_color\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                    <CCol sm={2}>\r\n                      <input\r\n                        type=\"color\"\r\n                        onChange={handleInput}\r\n                        value={settings?.price_color}\r\n                        name=\"price_color\"\r\n                      />\r\n                    </CCol>\r\n                    <CCol sm={2}>\r\n                      <input type=\"color\" disabled value=\"#ff751d\" />\r\n                    </CCol>\r\n                  </CRow>\r\n                  <CRow>\r\n                    <CCol sm={8}>\r\n                      <CFormLabel className=\"col-form-label\">\r\n                        {t(\"button_text_color\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                    <CCol sm={2}>\r\n                      <input\r\n                        type=\"color\"\r\n                        onChange={handleInput}\r\n                        value={settings?.button_text_color}\r\n                        // value={themes.TextColor}\r\n                        name=\"button_text_color\"\r\n                      />\r\n                    </CCol>\r\n                    <CCol sm={2}>\r\n                      <input\r\n                        type=\"color\"\r\n                        disabled\r\n                        // onChange={handleInput}\r\n                        value=\"#f1fcfe\"\r\n                      />\r\n                    </CCol>\r\n                  </CRow>\r\n                </section>\r\n                <CRow>\r\n                  <CCol sm={12} className=\"m-1 font-weight-bold text-primary\">\r\n                    FONT SIZE\r\n                  </CCol>\r\n                </CRow>\r\n                <section style={{ padding: 10, border: \"1px dashed grey\" }}>\r\n                  <CRow>\r\n                    <CCol sm={8}>\r\n                      <CFormLabel className=\"col-form-label font-weight-bold\">\r\n                        {t(\"Name\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                    <CCol sm={2}>\r\n                      <CFormLabel className=\"col-form-label font-weight-bold\">\r\n                        {t(\"value\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                    <CCol sm={2} className=\"text-center\">\r\n                      <CFormLabel className=\"col-form-label font-weight-bold\">\r\n                        {t(\"default\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                  </CRow>\r\n\r\n                  <CRow>\r\n                    <CCol sm={7} className=\"mt-2\">\r\n                      <CFormLabel className=\"col-form-label\">\r\n                        {t(\"menusSize\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                    <CCol sm={3}>\r\n                      <input\r\n                        type=\"number\"\r\n                        className=\"form-control m-1\"\r\n                        onChange={handleInput}\r\n                        value={settings?.menusSize}\r\n                        name=\"menusSize\"\r\n                        min=\"1\"\r\n                        max=\"5\"\r\n                        step=\"0.25\"\r\n                      />\r\n                    </CCol>\r\n                    <CCol sm={2} className=\"text-center mt-2\">\r\n                      1\r\n                    </CCol>\r\n                  </CRow>\r\n\r\n                  <CRow>\r\n                    <CCol sm={7} className=\"mt-2\">\r\n                      <CFormLabel className=\"col-form-label\">\r\n                        {t(\"pNameSize\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                    <CCol sm={3}>\r\n                      <input\r\n                        type=\"number\"\r\n                        className=\"form-control m-1\"\r\n                        onChange={handleInput}\r\n                        value={settings?.pNameSize}\r\n                        name=\"pNameSize\"\r\n                        min=\"1\"\r\n                        max=\"5\"\r\n                        step=\"0.25\"\r\n                      />\r\n                    </CCol>\r\n                    <CCol sm={2} className=\"text-center mt-2\">\r\n                      1\r\n                    </CCol>\r\n                  </CRow>\r\n                  <CRow>\r\n                    <CCol sm={7} className=\"mt-2\">\r\n                      <CFormLabel className=\"col-form-label\">\r\n                        {t(\"pDiscriptionSize\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                    <CCol sm={3}>\r\n                      <input\r\n                        type=\"number\"\r\n                        className=\"form-control m-1\"\r\n                        onChange={handleInput}\r\n                        value={settings?.pDiscriptionSize}\r\n                        name=\"pDiscriptionSize\"\r\n                        min=\"1\"\r\n                        max=\"5\"\r\n                        step=\"0.25\"\r\n                      />\r\n                    </CCol>\r\n                    <CCol sm={2} className=\"text-center mt-2\">\r\n                      0.75\r\n                    </CCol>\r\n                  </CRow>\r\n\r\n                  <CRow>\r\n                    <CCol sm={7} className=\"mt-2\">\r\n                      <CFormLabel className=\"col-form-label\">\r\n                        {t(\"priceSize\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                    <CCol sm={3}>\r\n                      <input\r\n                        type=\"number\"\r\n                        className=\"form-control m-1\"\r\n                        onChange={handleInput}\r\n                        value={settings?.priceSize}\r\n                        name=\"priceSize\"\r\n                        min=\"1\"\r\n                        max=\"5\"\r\n                        step=\"0.25\"\r\n                      />\r\n                    </CCol>\r\n                    <CCol sm={2} className=\"text-center mt-2\">\r\n                      1.25\r\n                    </CCol>\r\n                  </CRow>\r\n                  <CRow>\r\n                    <CCol sm={7} className=\"mt-2\">\r\n                      <CFormLabel className=\"col-form-label\">\r\n                        {t(\"bTextSize\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                    <CCol sm={3}>\r\n                      <input\r\n                        type=\"number\"\r\n                        className=\"form-control m-1\"\r\n                        onChange={handleInput}\r\n                        value={settings?.bTextSize}\r\n                        name=\"bTextSize\"\r\n                        min=\"1\"\r\n                        max=\"5\"\r\n                        step=\"0.25\"\r\n                      />\r\n                    </CCol>\r\n                    <CCol sm={2} className=\"text-center mt-2\">\r\n                      1\r\n                    </CCol>\r\n                  </CRow>\r\n                </section>\r\n\r\n                <CRow>\r\n                  <CCol sm={12} className=\"m-1 font-weight-bold text-primary\">\r\n                    FONTS\r\n                  </CCol>\r\n                </CRow>\r\n                <section style={{ padding: 10, border: \"1px dashed grey\" }}>\r\n                  <CRow>\r\n                    <CCol sm={4}>\r\n                      <CFormLabel className=\"col-form-label font-weight-bold\">\r\n                        {t(\"Name\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                    <CCol sm={4}>\r\n                      <CFormLabel className=\"col-form-label font-weight-bold\">\r\n                        {t(\"value\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                    <CCol sm={4}>\r\n                      <CFormLabel className=\"col-form-label font-weight-bold\">\r\n                        {t(\"default\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                  </CRow>\r\n                  <CRow>\r\n                    <CCol sm={4}>\r\n                      <CFormLabel className=\"col-form-label\">\r\n                        {t(\"font\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                    <CCol sm={4}>\r\n                      <FormControl fullWidth>\r\n                        <InputLabel id=\"demo-simple-select-label\">\r\n                          {t(\"fonts\")}\r\n                        </InputLabel>\r\n                        <Select\r\n                          labelId=\"demo-simple-select-label\"\r\n                          id=\"demo-simple-select\"\r\n                          //   value={age}\r\n                          label=\"fonts\"\r\n                          onChange={handleInput}\r\n                          name=\"font\"\r\n                          defaultValue={\r\n                            settings?.font ? settings.font : \"sans-serif\"\r\n                          }\r\n                        >\r\n                          <MenuItem value=\"-apple-system\">\r\n                            -apple-system\r\n                          </MenuItem>\r\n                          <MenuItem value=\"BlinkMacSystemFont\">\r\n                            BlinkMacSystemFont\r\n                          </MenuItem>\r\n                          <MenuItem value=\"Segoe UI\">Segoe UI</MenuItem>\r\n                          <MenuItem value=\"Roboto\">Roboto</MenuItem>\r\n                          <MenuItem value=\"Helvetica Neue\">\r\n                            Helvetica Neue\r\n                          </MenuItem>\r\n                          <MenuItem value=\"Arial\">Arial</MenuItem>\r\n                          <MenuItem value=\"sans-serif\">sans-serif</MenuItem>\r\n                          <MenuItem value=\"Apple Color Emoji\">\r\n                            Apple Color Emoji\r\n                          </MenuItem>\r\n                          <MenuItem value=\"Segoe UI Emoji\">\r\n                            Segoe UI Emoji\r\n                          </MenuItem>\r\n                          <MenuItem value=\"Segoe UI Symbol\">\r\n                            Segoe UI Symbol\r\n                          </MenuItem>\r\n                        </Select>\r\n                      </FormControl>\r\n                    </CCol>\r\n                    <CCol sm={4}>\r\n                      <CFormLabel className=\"col-form-label \">\r\n                        sans-serif\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                  </CRow>\r\n                </section>\r\n                <CRow>\r\n                  <CCol sm={12} className=\"m-1 font-weight-bold text-primary\">\r\n                    OTHERS\r\n                  </CCol>\r\n                </CRow>\r\n                <section style={{ padding: 10, border: \"1px dashed grey\" }}>\r\n                  <CRow>\r\n                    <CCol sm={6}>\r\n                      <CFormLabel className=\"col-form-label font-weight-bold\">\r\n                        {t(\"Name\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                    <CCol sm={3}>\r\n                      <CFormLabel className=\"col-form-label font-weight-bold\">\r\n                        {t(\"value\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                    <CCol sm={3}>\r\n                      <CFormLabel className=\"col-form-label font-weight-bold\">\r\n                        {t(\"default\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                  </CRow>\r\n                  <CRow>\r\n                    <CCol sm={6}>\r\n                      <CFormLabel className=\"col-form-label\">\r\n                        {t(\"number_of_products_in_each_row\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                    <CCol sm={3}>\r\n                      <input\r\n                        className=\"form-control m-1\"\r\n                        onChange={handleInput}\r\n                        type=\"number\"\r\n                        value={settings?.numberProductInRowMobile}\r\n                        name=\"numberProductInRowMobile\"\r\n                        min=\"1\"\r\n                        max=\"6\"\r\n                        step=\"1\"\r\n                      />\r\n                      <input\r\n                        className=\"form-control m-1\"\r\n                        onChange={handleInput}\r\n                        type=\"number\"\r\n                        value={settings?.numberProductInRowTablet}\r\n                        name=\"numberProductInRowTablet\"\r\n                        min=\"1\"\r\n                        max=\"6\"\r\n                        step=\"1\"\r\n                      />\r\n                      <input\r\n                        className=\"form-control m-1\"\r\n                        onChange={handleInput}\r\n                        type=\"number\"\r\n                        value={settings?.numberProductInRowComputer}\r\n                        name=\"numberProductInRowComputer\"\r\n                        min=\"1\"\r\n                        max=\"6\"\r\n                        step=\"1\"\r\n                      />\r\n                    </CCol>\r\n                    <CCol sm={3}>\r\n                      <CFormLabel\r\n                        htmlFor=\"inputPassword\"\r\n                        className=\"col-form-label\"\r\n                      >\r\n                        2 For Mobile <br></br>3 For tablet<br></br>4 For\r\n                        computer\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                  </CRow>\r\n                  <CRow>\r\n                    <CCol sm={5}>\r\n                      <CFormLabel className=\"col-form-label\">\r\n                        {t(\"show_preparation_time\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n\r\n                    <CCol sm={5}>\r\n                      <RadioGroup\r\n                        row\r\n                        value={\r\n                          settings?.preparation_time\r\n                            ? settings.preparation_time\r\n                            : \"1\"\r\n                        }\r\n                        name=\"preparation_time\"\r\n                        onChange={handleInput}\r\n                      >\r\n                        <FormControlLabel\r\n                          value=\"1\"\r\n                          control={<Radio />}\r\n                          label=\"Yes\"\r\n                        />\r\n                        <FormControlLabel\r\n                          value=\"0\"\r\n                          control={<Radio />}\r\n                          label=\"No\"\r\n                        />\r\n                      </RadioGroup>\r\n                    </CCol>\r\n                    <CCol sm={2}>\r\n                      <CFormLabel className=\" col-form-label \">Yes</CFormLabel>\r\n                    </CCol>\r\n                  </CRow>\r\n                  <CRow>\r\n                    <CCol sm={5}>\r\n                      <CFormLabel className=\"col-form-label\">\r\n                        {t(\"show_extras\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n\r\n                    <CCol sm={5}>\r\n                      <RadioGroup\r\n                        row\r\n                        value={\r\n                          settings?.show_extras ? settings.show_extras : \"1\"\r\n                        }\r\n                        name=\"show_extras\"\r\n                        onChange={handleInput}\r\n                      >\r\n                        <FormControlLabel\r\n                          value=\"1\"\r\n                          control={<Radio />}\r\n                          label=\"Yes\"\r\n                        />\r\n                        <FormControlLabel\r\n                          value=\"0\"\r\n                          control={<Radio />}\r\n                          label=\"No\"\r\n                        />\r\n                      </RadioGroup>\r\n                    </CCol>\r\n                    <CCol sm={2}>\r\n                      <CFormLabel className=\" col-form-label \">Yes</CFormLabel>\r\n                    </CCol>\r\n                  </CRow>\r\n                  <CRow>\r\n                    <CCol sm={5}>\r\n                      <CFormLabel className=\"col-form-label\">\r\n                        {t(\"show_ingredients\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n\r\n                    <CCol sm={5}>\r\n                      <RadioGroup\r\n                        row\r\n                        value={\r\n                          settings?.show_ingredients\r\n                            ? settings.show_ingredients\r\n                            : \"1\"\r\n                        }\r\n                        name=\"show_ingredients\"\r\n                        onChange={handleInput}\r\n                      >\r\n                        <FormControlLabel\r\n                          value=\"1\"\r\n                          control={<Radio />}\r\n                          label=\"Yes\"\r\n                        />\r\n                        <FormControlLabel\r\n                          value=\"0\"\r\n                          control={<Radio />}\r\n                          label=\"No\"\r\n                        />\r\n                      </RadioGroup>\r\n                    </CCol>\r\n                    <CCol sm={2}>\r\n                      <CFormLabel className=\" col-form-label \">Yes</CFormLabel>\r\n                    </CCol>\r\n                  </CRow>\r\n                  <CRow>\r\n                    <CCol sm={5}>\r\n                      <CFormLabel className=\"col-form-label\">\r\n                        {t(\"show_recommendation\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n\r\n                    <CCol sm={5}>\r\n                      <RadioGroup\r\n                        row\r\n                        value={\r\n                          settings?.show_recommendation\r\n                            ? settings.show_recommendation\r\n                            : \"1\"\r\n                        }\r\n                        name=\"show_recommendation\"\r\n                        onChange={handleInput}\r\n                      >\r\n                        <FormControlLabel\r\n                          value=\"1\"\r\n                          control={<Radio />}\r\n                          label=\"Yes\"\r\n                        />\r\n                        <FormControlLabel\r\n                          value=\"0\"\r\n                          control={<Radio />}\r\n                          label=\"No\"\r\n                        />\r\n                      </RadioGroup>\r\n                    </CCol>\r\n                    <CCol sm={2}>\r\n                      <CFormLabel className=\" col-form-label \">Yes</CFormLabel>\r\n                    </CCol>\r\n                  </CRow>\r\n                  <CRow>\r\n                    <CCol sm={5}>\r\n                      <CFormLabel className=\"col-form-label\">\r\n                        {t(\"show_variants\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                    {}\r\n                    <CCol sm={5}>\r\n                      <RadioGroup\r\n                        row\r\n                        value={\r\n                          settings?.show_variants ? settings.show_variants : \"1\"\r\n                        }\r\n                        name=\"show_variants\"\r\n                        onChange={handleInput}\r\n                      >\r\n                        <FormControlLabel\r\n                          value=\"1\"\r\n                          control={<Radio />}\r\n                          label=\"Yes\"\r\n                        />\r\n                        <FormControlLabel\r\n                          value=\"0\"\r\n                          control={<Radio />}\r\n                          label=\"No\"\r\n                        />\r\n                      </RadioGroup>\r\n                    </CCol>\r\n                    <CCol sm={2}>\r\n                      <CFormLabel className=\" col-form-label \">Yes</CFormLabel>\r\n                    </CCol>\r\n                  </CRow>\r\n                </section>\r\n              </CCardBody>\r\n            </CCard>\r\n          </Grid>\r\n          <Grid item xs={5}>\r\n            {viewPreview_HTMLTABLE}\r\n          </Grid>\r\n        </Grid>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Customization;\r\n","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Categories\\Category.js",["460"],"D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Categories\\SubCategory.js",["461"],"D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Categories\\Shared.js",["462"],"D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\layouts\\nav\\Header.js",["463"],"import React, { useRef, useState } from \"react\";\r\n// import {\r\n//   Link,\r\n//   // , useHistory\r\n// } from \"react-router-dom\";\r\n/// Image\r\nimport i18next from \"i18next\";\r\nimport profile from \"../../../images/hellomenu/logo.svg\";\r\nimport axios from \"axios\";\r\nimport \"flag-icon-css/css/flag-icons.min.css\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport IdleTimer from \"react-idle-timer\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Menu from \"@mui/material/Menu\";\r\nimport MoreVertIcon from \"@mui/icons-material/MoreVert\";\r\nconst Header = ({ toggle, onProfile, onNotification }) => {\r\n  const idleTimerRef = useRef(null);\r\n  const { t } = useTranslation();\r\n\r\n  // const history = useHistory();\r\n  const logoutUser = (e) => {\r\n    // e.preventDefault();\r\n    axios.post(\"/api/logout\").then((res) => {\r\n      if (res.data.status === 200) {\r\n        localStorage.removeItem(\"auth_token\");\r\n        localStorage.removeItem(\"auth_name\");\r\n        localStorage.removeItem(\"auth_company_id\");\r\n        localStorage.removeItem(\"auth_id\");\r\n        window.location = \"/page-login\";\r\n      }\r\n    });\r\n  };\r\n  const languages = [\r\n    {\r\n      code: \"en\",\r\n      name: \"English\",\r\n      country_code: \"gb\",\r\n    },\r\n    {\r\n      code: \"tr\",\r\n      name: \"Turkish\",\r\n      country_code: \"tr\",\r\n    },\r\n  ];\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const open = Boolean(anchorEl);\r\n  const handleClick = (event: MouseEvent<HTMLButtonElement>) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n  return (\r\n    <div className=\"header\">\r\n      <IdleTimer\r\n        ref={idleTimerRef}\r\n        timeout={1000 * 60 * 15}\r\n        onIdle={logoutUser}\r\n      />\r\n      <div className=\"header-content\">\r\n        <nav className=\"navbar navbar-expand\">\r\n          <div className=\"collapse navbar-collapse justify-content-between\">\r\n            <div className=\"header-left\"></div>\r\n\r\n            <ul className=\"navbar-nav header-right\">\r\n              <li className=\"nav-item dropdown notification_dropdown\">\r\n                <div>\r\n                  <Button\r\n                    id=\"basic-button\"\r\n                    aria-controls=\"basic-menu\"\r\n                    aria-haspopup=\"true\"\r\n                    aria-expanded={open ? \"true\" : undefined}\r\n                    onClick={handleClick}\r\n                  >\r\n                    <svg\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      fill=\"currentColor\"\r\n                      className=\"bi bi-globe\"\r\n                      width=\"32\"\r\n                      height=\"32\"\r\n                      viewBox=\"0 0 16 16\"\r\n                    >\r\n                      <path d=\"M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8zm7.5-6.923c-.67.204-1.335.82-1.887 1.855A7.97 7.97 0 0 0 5.145 4H7.5V1.077zM4.09 4a9.267 9.267 0 0 1 .64-1.539 6.7 6.7 0 0 1 .597-.933A7.025 7.025 0 0 0 2.255 4H4.09zm-.582 3.5c.03-.877.138-1.718.312-2.5H1.674a6.958 6.958 0 0 0-.656 2.5h2.49zM4.847 5a12.5 12.5 0 0 0-.338 2.5H7.5V5H4.847zM8.5 5v2.5h2.99a12.495 12.495 0 0 0-.337-2.5H8.5zM4.51 8.5a12.5 12.5 0 0 0 .337 2.5H7.5V8.5H4.51zm3.99 0V11h2.653c.187-.765.306-1.608.338-2.5H8.5zM5.145 12c.138.386.295.744.468 1.068.552 1.035 1.218 1.65 1.887 1.855V12H5.145zm.182 2.472a6.696 6.696 0 0 1-.597-.933A9.268 9.268 0 0 1 4.09 12H2.255a7.024 7.024 0 0 0 3.072 2.472zM3.82 11a13.652 13.652 0 0 1-.312-2.5h-2.49c.062.89.291 1.733.656 2.5H3.82zm6.853 3.472A7.024 7.024 0 0 0 13.745 12H11.91a9.27 9.27 0 0 1-.64 1.539 6.688 6.688 0 0 1-.597.933zM8.5 12v2.923c.67-.204 1.335-.82 1.887-1.855.173-.324.33-.682.468-1.068H8.5zm3.68-1h2.146c.365-.767.594-1.61.656-2.5h-2.49a13.65 13.65 0 0 1-.312 2.5zm2.802-3.5a6.959 6.959 0 0 0-.656-2.5H12.18c.174.782.282 1.623.312 2.5h2.49zM11.27 2.461c.247.464.462.98.64 1.539h1.835a7.024 7.024 0 0 0-3.072-2.472c.218.284.418.598.597.933zM10.855 4a7.966 7.966 0 0 0-.468-1.068C9.835 1.897 9.17 1.282 8.5 1.077V4h2.355z\" />\r\n                    </svg>\r\n                  </Button>\r\n                  <Menu\r\n                    id=\"basic-menu\"\r\n                    anchorEl={anchorEl}\r\n                    open={open}\r\n                    onClose={handleClose}\r\n                    MenuListProps={{\r\n                      \"aria-labelledby\": \"basic-button\",\r\n                    }}\r\n                  >\r\n                    <ul className=\"\">\r\n                      {languages.map(({ name, code, country_code }) => (\r\n                        <li key={country_code}>\r\n                          <div className=\"success\"></div>\r\n                          <button\r\n                            className=\"dropdown-item\"\r\n                            onClick={() => i18next.changeLanguage(code)}\r\n                          >\r\n                            <span\r\n                              className={`flag-icon flag-icon-${country_code} mx-2`}\r\n                            ></span>\r\n                            {name}\r\n                          </button>\r\n                        </li>\r\n                      ))}\r\n                    </ul>\r\n                  </Menu>\r\n                </div>\r\n              </li>\r\n              <li\r\n                className={`nav-item dropdown header-profile ${\r\n                  toggle === \"profile\" ? \"show\" : \"\"\r\n                }`}\r\n                onClick={() => onProfile()}\r\n              >\r\n                <a\r\n                  // to={\"#\"}\r\n                  className=\"nav-link\"\r\n                  role=\"button\"\r\n                  data-toggle=\"dropdown\"\r\n                >\r\n                  <div className=\"header-info\">\r\n                    <small>{t(\"hello_menu\")}</small>\r\n                    <span>\r\n                      {\" \"}\r\n                      {atob(localStorage.getItem(\"auth_name\"))}{\" \"}\r\n                      <MoreVertIcon sx={{ color: \"#f50b65\" }} />\r\n                    </span>\r\n                  </div>\r\n                  <img src={profile} width=\"10\" alt=\"\" />\r\n                </a>\r\n                <div\r\n                  className={`dropdown-menu dropdown-menu-right ${\r\n                    toggle === \"profile\" ? \"show\" : \"\"\r\n                  }`}\r\n                >\r\n                  {/* <Link to=\"/profile\" className=\"dropdown-item ai-icon\">\r\n                    <svg\r\n                      id=\"icon-user1\"\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      className=\"text-success\"\r\n                      width=\"18\"\r\n                      height=\"18\"\r\n                      viewBox=\"0 0 24 24\"\r\n                      fill=\"none\"\r\n                      stroke=\"currentColor\"\r\n                      strokeWidth=\"2\"\r\n                      strokeLinecap=\"round\"\r\n                      strokeLinejoin=\"round\"\r\n                    >\r\n                      <path d=\"M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2\"></path>\r\n                      <circle cx=\"12\" cy=\"7\" r=\"4\"></circle>\r\n                    </svg>\r\n                    <span className=\"ml-2\">{t(\"profile\")} </span>\r\n                  </Link> */}\r\n\r\n                  <button\r\n                    className=\"dropdown-item ai-icon\"\r\n                    onClick={logoutUser}\r\n                  >\r\n                    <svg\r\n                      id=\"icon-logout\"\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      className=\"text-danger\"\r\n                      width=\"18\"\r\n                      height=\"18\"\r\n                      viewBox=\"0 0 24 24\"\r\n                      fill=\"none\"\r\n                      stroke=\"currentColor\"\r\n                      strokeWidth=\"2\"\r\n                      strokeLinecap=\"round\"\r\n                      strokeLinejoin=\"round\"\r\n                    >\r\n                      <path d=\"M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4\"></path>\r\n                      <polyline points=\"16 17 21 12 16 7\"></polyline>\r\n                      <line x1=\"21\" y1=\"12\" x2=\"9\" y2=\"12\"></line>\r\n                    </svg>\r\n                    <span className=\"ml-2\">{t(\"logout\")} </span>\r\n                  </button>\r\n                </div>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </nav>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\layouts\\nav\\NavHader.js",[],"D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Default\\Customization.js",["464"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CRow,\r\n  CFormLabel,\r\n  CCol,\r\n} from \"@coreui/react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// import Switch from \"react-switch\";\r\n\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport { FormControlLabel, RadioGroup, Radio } from \"@mui/material\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport Select from \"@mui/material/Select\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardMedia from \"@mui/material/CardMedia\";\r\nimport { CardActionArea } from \"@mui/material\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst DefaultCustomization = (props) => {\r\n  const { t } = useTranslation();\r\n  // const templateId = atob(props.match.params.id);\r\n  const templateId = props.history.location.state.id;\r\n\r\n  const history = useHistory();\r\n\r\n  const [settings, setSettings] = useState([]);\r\n  const handleInput = (e) => {\r\n    setSettings({ ...settings, [e.target.name]: e.target.value });\r\n    const formData = new FormData();\r\n    formData.append(\r\n      \"settings\",\r\n      JSON.stringify({ ...settings, [e.target.name]: e.target.value })\r\n    );\r\n    axios\r\n      .post(`/api/InsertCustomization/${templateId}`, formData)\r\n      .then((res) => {\r\n        if (res.data.status === 200) {\r\n          setLoading(true);\r\n        }\r\n      });\r\n  };\r\n  const reset = (e) => {\r\n    e.preventDefault();\r\n    axios.get(`/api/ResetCustomization/${templateId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setSettings([]);\r\n        setLoading(true);\r\n        swal(\"Success\", res.data.message, \"success\");\r\n      }\r\n    });\r\n  };\r\n  const [template, setTemplate] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    axios.get(`/api/GetTemplate/${templateId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setSettings(res.data.fetchData.Customization);\r\n        setTemplate(res.data.fetchData);\r\n      }\r\n      setLoading(false);\r\n    });\r\n    // const interval = setInterval(() => {\r\n    //   save();\r\n    // }, 15000);\r\n    // return () => clearInterval(interval);\r\n  }, [loading]);\r\n\r\n  var viewPreview_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    viewPreview_HTMLTABLE = (\r\n      <CCard>\r\n        <CCardHeader component=\"h5\">{t(\"preview\")}</CCardHeader>\r\n        <CCardBody>\r\n          <div\r\n            className=\"spinner-border text-primary\"\r\n            role=\"status\"\r\n            style={{ position: \"fixed\", top: \"0%\", left: \"50%\" }}\r\n          >\r\n            <span className=\"sr-only\">{t(\"loading\")}</span>\r\n          </div>\r\n        </CCardBody>\r\n      </CCard>\r\n    );\r\n  } else {\r\n    viewPreview_HTMLTABLE = (\r\n      <CCard>\r\n        <CCardHeader component=\"h5\">{t(\"preview\")}</CCardHeader>\r\n        <CCardBody>\r\n          <Card>\r\n            <CardActionArea>\r\n              <CardMedia\r\n                component=\"iframe\"\r\n                height=\"600\"\r\n                image={`/${template?.URL}/${btoa(1)}`}\r\n                alt=\"template\"\r\n              />\r\n            </CardActionArea>\r\n          </Card>\r\n        </CCardBody>\r\n      </CCard>\r\n    );\r\n  }\r\n  return (\r\n    <>\r\n      <div className=\"row\">\r\n        <div className=\"col-7\">\r\n          <CCard>\r\n            <CCardHeader component=\"h5\">{t(\"customization\")}</CCardHeader>\r\n            <CCardBody>\r\n              <CRow className=\"mb-2\">\r\n                <CFormLabel className=\"col-sm-6 col-form-label font-weight-bold\">\r\n                  {t(\"Name\")}\r\n                </CFormLabel>\r\n                <CFormLabel className=\"col-sm-3 col-form-label font-weight-bold\">\r\n                  {t(\"value\")}\r\n                </CFormLabel>\r\n                <CFormLabel className=\"col-sm-3 col-form-label text-center font-weight-bold\">\r\n                  {t(\"default\")}\r\n                </CFormLabel>\r\n              </CRow>\r\n              <CRow className=\"mb-2\">\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"branch_name_color\")}\r\n                </CFormLabel>\r\n                <CCol sm={2} className=\"text-left\">\r\n                  <input\r\n                    type=\"color\"\r\n                    onChange={handleInput}\r\n                    value={settings?.branch_name_color}\r\n                    name=\"branch_name_color\"\r\n                  />\r\n                </CCol>\r\n                <CCol sm={4} className=\"text-center\">\r\n                  <input type=\"color\" disabled value=\"#ff751d\" />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"branch_name_font_size\")}\r\n                </CFormLabel>\r\n                <CCol sm={2}>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    onChange={handleInput}\r\n                    value={settings?.branch_name_font_size}\r\n                    type=\"number\"\r\n                    name=\"branch_name_font_size\"\r\n                  />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-4 col-form-label text-center\"\r\n                >\r\n                  {t(\"14\")}\r\n                </CFormLabel>\r\n              </CRow>\r\n\r\n              <CRow className=\"mb-2\">\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"categories_and_sub_categoies_color\")}\r\n                </CFormLabel>\r\n                <CCol sm={3} className=\"text-left\">\r\n                  <input\r\n                    type=\"color\"\r\n                    onChange={handleInput}\r\n                    value={settings?.categories_and_sub_categoies_color}\r\n                    name=\"categories_and_sub_categoies_color\"\r\n                  />\r\n                </CCol>\r\n                <CCol sm={2} className=\"text-center\">\r\n                  <input type=\"color\" disabled value=\"#f1fcfe\" />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"categories_and_sub_categoies_font_size\")}\r\n                </CFormLabel>\r\n                <CCol sm={2}>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    onChange={handleInput}\r\n                    value={settings?.categories_and_sub_categoies_font_size}\r\n                    type=\"number\"\r\n                    name=\"categories_and_sub_categoies_font_size\"\r\n                  />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-4 col-form-label text-center\"\r\n                >\r\n                  {t(\"12\")}\r\n                </CFormLabel>\r\n              </CRow>\r\n\r\n              <CRow className=\"mb-2\">\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"product_name_color\")}\r\n                </CFormLabel>\r\n                <CCol sm={3} className=\"text-left\">\r\n                  <input\r\n                    type=\"color\"\r\n                    onChange={handleInput}\r\n                    value={settings?.product_name_color}\r\n                    name=\"product_name_color\"\r\n                  />\r\n                </CCol>\r\n                <CCol sm={2} className=\"text-center\">\r\n                  <input type=\"color\" disabled value=\"#ff751d\" />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"product_name_font_size\")}\r\n                </CFormLabel>\r\n                <CCol sm={2}>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    onChange={handleInput}\r\n                    value={settings?.product_name_font_size}\r\n                    type=\"number\"\r\n                    name=\"product_name_font_size\"\r\n                  />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-4 col-form-label text-center\"\r\n                >\r\n                  {t(\"12\")}\r\n                </CFormLabel>\r\n              </CRow>\r\n              <CRow className=\"mb-2\">\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"product_discription_color\")}\r\n                </CFormLabel>\r\n                <CCol sm={3} className=\"text-left\">\r\n                  <input\r\n                    type=\"color\"\r\n                    onChange={handleInput}\r\n                    value={settings?.product_discription_color}\r\n                    name=\"product_discription_color\"\r\n                  />\r\n                </CCol>\r\n                <CCol sm={2} className=\"text-center\">\r\n                  <input type=\"color\" disabled value=\"#777\" />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"product_discription_font_size\")}\r\n                </CFormLabel>\r\n                <CCol sm={2}>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    onChange={handleInput}\r\n                    value={settings?.product_discription_font_size}\r\n                    type=\"number\"\r\n                    name=\"product_discription_font_size\"\r\n                  />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-4 col-form-label text-center\"\r\n                >\r\n                  {t(\"10\")}\r\n                </CFormLabel>\r\n              </CRow>\r\n              <CRow className=\"mb-2\">\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"price_color\")}\r\n                </CFormLabel>\r\n                <CCol sm={3} className=\"text-left\">\r\n                  <input\r\n                    type=\"color\"\r\n                    onChange={handleInput}\r\n                    value={settings?.price_color}\r\n                    name=\"price_color\"\r\n                  />\r\n                </CCol>\r\n                <CCol sm={2} className=\"text-center\">\r\n                  <input type=\"color\" disabled value=\"#ff751d\" />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"price_font_size\")}\r\n                </CFormLabel>\r\n                <CCol sm={2}>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    onChange={handleInput}\r\n                    value={settings?.price_font_size}\r\n                    type=\"number\"\r\n                    name=\"price_font_size\"\r\n                  />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-4 col-form-label text-center\"\r\n                >\r\n                  {t(\"12\")}\r\n                </CFormLabel>\r\n              </CRow>\r\n              <CRow className=\"mb-2\">\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"button_text_color\")}\r\n                </CFormLabel>\r\n                <CCol sm={2} className=\"text-left\">\r\n                  <input\r\n                    type=\"color\"\r\n                    onChange={handleInput}\r\n                    value={settings?.button_text_color}\r\n                    // value={themes.TextColor}\r\n                    name=\"button_text_color\"\r\n                  />\r\n                </CCol>\r\n                <CCol sm={4} className=\"text-center\">\r\n                  <input\r\n                    type=\"color\"\r\n                    disabled\r\n                    // onChange={handleInput}\r\n                    value=\"#f1fcfe\"\r\n                  />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"button_background_color\")}\r\n                </CFormLabel>\r\n                <CCol sm={2} className=\"text-left\">\r\n                  <input\r\n                    type=\"color\"\r\n                    onChange={handleInput}\r\n                    value={settings?.button_background_color}\r\n                    //   value={themes.TextColor}\r\n                    name=\"button_background_color\"\r\n                  />\r\n                </CCol>\r\n                <CCol sm={4} className=\"text-center\">\r\n                  <input\r\n                    type=\"color\"\r\n                    disabled\r\n                    // onChange={handleInput}\r\n                    value=\"#ff751d\"\r\n                  />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"button_text_font_size\")}\r\n                </CFormLabel>\r\n                <CCol sm={2}>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    onChange={handleInput}\r\n                    value={settings?.button_text_font_size}\r\n                    type=\"number\"\r\n                    name=\"button_text_font_size\"\r\n                  />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-4 col-form-label text-center\"\r\n                >\r\n                  {t(\"12\")}\r\n                </CFormLabel>\r\n              </CRow>\r\n              <CRow className=\"mb-2\">\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"number_of_products_in_each_row\")}\r\n                </CFormLabel>\r\n                <CCol sm={2}>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    onChange={handleInput}\r\n                    type=\"number\"\r\n                    value={settings?.number_of_products_in_each_row}\r\n                    name=\"number_of_products_in_each_row\"\r\n                  />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-4 col-form-label text-center\"\r\n                >\r\n                  {t(\"2\")}\r\n                </CFormLabel>\r\n              </CRow>\r\n              <CRow>\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"mode\")}\r\n                </CFormLabel>\r\n\r\n                <CCol sm={2} className=\"text-left\">\r\n                  <RadioGroup\r\n                    row\r\n                    aria-label=\"dark\"\r\n                    defaultValue={settings?.mode ? settings.mode : \"dark\"}\r\n                    name=\"mode\"\r\n                    onChange={handleInput}\r\n                  >\r\n                    <FormControlLabel\r\n                      value=\"light\"\r\n                      control={<Radio />}\r\n                      label=\"Light\"\r\n                    />\r\n                    <FormControlLabel\r\n                      value=\"dark\"\r\n                      control={<Radio />}\r\n                      label=\"Dark\"\r\n                    />\r\n                  </RadioGroup>\r\n                </CCol>\r\n                <CCol sm={4} className=\"text-center\">\r\n                  <CFormLabel\r\n                    htmlFor=\"staticEmail\"\r\n                    className=\"col-sm-6 col-form-label \"\r\n                  >\r\n                    Dark\r\n                  </CFormLabel>\r\n                </CCol>\r\n              </CRow>\r\n              <CRow>\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"font\")}\r\n                </CFormLabel>\r\n\r\n                <CCol sm={2} className=\"text-left\">\r\n                  <FormControl fullWidth>\r\n                    <InputLabel id=\"demo-simple-select-label\">\r\n                      {t(\"fonts\")}\r\n                    </InputLabel>\r\n                    <Select\r\n                      labelId=\"demo-simple-select-label\"\r\n                      id=\"demo-simple-select\"\r\n                      //   value={age}\r\n                      label=\"fonts\"\r\n                      onChange={handleInput}\r\n                      name=\"font\"\r\n                      defaultValue={\r\n                        settings?.font ? settings.font : \"sans-serif\"\r\n                      }\r\n                    >\r\n                      <MenuItem value=\"-apple-system\">-apple-system</MenuItem>\r\n                      <MenuItem value=\"BlinkMacSystemFont\">\r\n                        BlinkMacSystemFont\r\n                      </MenuItem>\r\n                      <MenuItem value=\"Segoe UI\">Segoe UI</MenuItem>\r\n                      <MenuItem value=\"Roboto\">Roboto</MenuItem>\r\n                      <MenuItem value=\"Helvetica Neue\">Helvetica Neue</MenuItem>\r\n                      <MenuItem value=\"Arial\">Arial</MenuItem>\r\n                      <MenuItem value=\"sans-serif\">sans-serif</MenuItem>\r\n                      <MenuItem value=\"Apple Color Emoji\">\r\n                        Apple Color Emoji\r\n                      </MenuItem>\r\n                      <MenuItem value=\"Segoe UI Emoji\">Segoe UI Emoji</MenuItem>\r\n                      <MenuItem value=\"Segoe UI Symbol\">\r\n                        Segoe UI Symbol\r\n                      </MenuItem>\r\n                    </Select>\r\n                  </FormControl>\r\n                </CCol>\r\n                <CCol sm={4} className=\"text-center\">\r\n                  <CFormLabel\r\n                    htmlFor=\"staticEmail\"\r\n                    className=\"col-sm-6 col-form-label \"\r\n                  >\r\n                    sans-serif\r\n                  </CFormLabel>\r\n                </CCol>\r\n              </CRow>\r\n              <CRow>\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"show_preparation_time\")}\r\n                </CFormLabel>\r\n\r\n                <CCol sm={2} className=\"text-left\">\r\n                  <RadioGroup\r\n                    row\r\n                    aria-label=\"dark\"\r\n                    defaultValue={\r\n                      settings?.preparation_time\r\n                        ? settings.preparation_time\r\n                        : \"1\"\r\n                    }\r\n                    name=\"preparation_time\"\r\n                    onChange={handleInput}\r\n                  >\r\n                    <FormControlLabel\r\n                      value=\"1\"\r\n                      control={<Radio />}\r\n                      label=\"Yes\"\r\n                    />\r\n                    <FormControlLabel\r\n                      value=\"0\"\r\n                      control={<Radio />}\r\n                      label=\"No\"\r\n                    />\r\n                  </RadioGroup>\r\n                </CCol>\r\n                <CCol sm={4} className=\"text-center\">\r\n                  <CFormLabel\r\n                    htmlFor=\"staticEmail\"\r\n                    className=\"col-sm-6 col-form-label \"\r\n                  >\r\n                    Yes\r\n                  </CFormLabel>\r\n                </CCol>\r\n              </CRow>\r\n            </CCardBody>\r\n          </CCard>\r\n        </div>\r\n        <div className=\"col-5\">{viewPreview_HTMLTABLE}</div>\r\n      </div>\r\n      <div className=\"text-center mx-4 mb-4\">\r\n        <button className=\"btn btn-info m-1\" onClick={(e) => reset(e)}>\r\n          {t(\"reset_to_default\")}\r\n        </button>\r\n        <button className=\"btn btn-light m-1\" onClick={() => history.goBack()}>\r\n          {t(\"back\")}\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DefaultCustomization;\r\n","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Products\\EditProduct.js",["465","466","467","468","469","470","471"],"D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\EditTheme.js",["472"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CRow,\r\n  CFormLabel,\r\n  CCol,\r\n} from \"@coreui/react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport circle_menu_button from \"../../../images/hellomenu/circle_menu_button.png\";\r\nimport pill_menu_button from \"../../../images/hellomenu/pill_menu_button.png\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport Switch from \"@mui/material/Switch\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { FormControlLabel, RadioGroup, Radio } from \"@mui/material\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst EditTheme = (props) => {\r\n  const { t } = useTranslation();\r\n  const history = useHistory();\r\n  const id = props.history.location.state.id;\r\n\r\n  const [homeScreen, setHomeScreen] = useState(false);\r\n  const [menuScreen, setMenuScreen] = useState(false);\r\n  const [buttonShow, setButtonShow] = useState(1);\r\n  const [imageState, setImageState] = useState([]);\r\n  const handleImage = (e) => {\r\n    setImageState({ ...imageState, HomeScreenBackground: e.target.files[0] });\r\n  };\r\n  const [imageStateMenu, setImageStateMenu] = useState([]);\r\n  const handleImageMenu = (e) => {\r\n    setImageStateMenu({\r\n      ...imageStateMenu,\r\n      MenuScreenBackground: e.target.files[0],\r\n    });\r\n  };\r\n  // update Start\r\n  const [themes, setThemes] = useState([]);\r\n  const handleInput = (e) => {\r\n    e.persist();\r\n    setThemes({ ...themes, [e.target.name]: e.target.value });\r\n  };\r\n  const update = (e) => {\r\n    e.preventDefault();\r\n    // console.log(themes);\r\n    const formData = new FormData();\r\n    formData.append(\"HomeScreenBackground\", imageState.HomeScreenBackground);\r\n    formData.append(\r\n      \"MenuScreenBackground\",\r\n      imageStateMenu.MenuScreenBackground\r\n    );\r\n    formData.append(\"ThemeName\", themes.ThemeName);\r\n    // formData.append(\"Orientation\", themes.Orientation);\r\n    // formData.append(\"MenuStructure\", themes.MenuStructure);\r\n    formData.append(\"TextColor\", themes.TextColor);\r\n    formData.append(\"BackgroundColor\", themes.BackgroundColor);\r\n    formData.append(\"HighlightColor\", themes.HighlightColor);\r\n    // formData.append(\"QRCodeColor\", themes.QRCodeColor);\r\n    // formData.append(\"QRCodeBackgroundColor\", themes.QRCodeBackgroundColor);\r\n    formData.append(\"HomeScreenBackground\", themes.HomeScreenBackground);\r\n    formData.append(\"MenuScreenBackground\", themes.MenuScreenBackground);\r\n    formData.append(\"ShowButton\", themes.ShowButton);\r\n    formData.append(\"ButtonShape\", themes.ButtonShape);\r\n    axios.post(`/api/UpdateTheme/${id}`, formData).then((res) => {\r\n      if (res.data.status === 200) {\r\n        swal(\"Success\", res.data.message, \"success\").then((check) => {\r\n          if (check) {\r\n            history.goBack();\r\n          }\r\n        });\r\n\r\n        // setThemes([]);\r\n        // setImageStateMenu([]);\r\n        // setImageState([]);\r\n      }\r\n    });\r\n  };\r\n  // update End\r\n  const dataLoad = async () => {\r\n    try {\r\n      const result = await axios.get(`/api/EditTheme/${id}`);\r\n      if (result.data.status === 200) {\r\n        setThemes(result.data.data);\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    dataLoad();\r\n  }, []);\r\n  return (\r\n    <>\r\n      {themes.length !== 0 ? (\r\n        <div className=\"\">\r\n          <Form onSubmit={update} method=\"POST\" encType=\"multipart/form-data\">\r\n            <div className=\"row\">\r\n              <div className=\"col-12 mb-2\">\r\n                <input\r\n                  type=\"text\"\r\n                  style={{ border: \"none\" }}\r\n                  className=\"form-control\"\r\n                  placeholder={t(\"theme_name\")}\r\n                  onChange={handleInput}\r\n                  value={themes.ThemeName}\r\n                  name=\"ThemeName\"\r\n                />\r\n              </div>\r\n              <div className=\"col-6\">\r\n                <CCard>\r\n                  <CCardHeader component=\"h5\">{t(\"theme_colors\")}</CCardHeader>\r\n                  <CCardBody>\r\n                    <CRow className=\"mb-3\">\r\n                      <CFormLabel\r\n                        htmlFor=\"staticEmail\"\r\n                        className=\"col-sm-6 col-form-label\"\r\n                      >\r\n                        {t(\"text_color\")}\r\n                      </CFormLabel>\r\n                      <CCol sm={6} className=\"text-center\">\r\n                        <input\r\n                          type=\"color\"\r\n                          onChange={handleInput}\r\n                          value={themes.TextColor}\r\n                          id=\"favcolor\"\r\n                          name=\"TextColor\"\r\n                        />\r\n                      </CCol>\r\n                    </CRow>\r\n                    <CRow className=\"mb-3\">\r\n                      <CFormLabel\r\n                        htmlFor=\"inputPassword\"\r\n                        className=\"col-sm-6 col-form-label\"\r\n                      >\r\n                        {t(\"background_color\")}\r\n                      </CFormLabel>\r\n                      <CCol sm={6} className=\"text-center\">\r\n                        <input\r\n                          type=\"color\"\r\n                          id=\"favcolor\"\r\n                          onChange={handleInput}\r\n                          value={themes.BackgroundColor}\r\n                          name=\"BackgroundColor\"\r\n                        />\r\n                      </CCol>\r\n                    </CRow>\r\n                    <CRow className=\"mb-3\">\r\n                      <CFormLabel\r\n                        htmlFor=\"inputPassword\"\r\n                        className=\"col-sm-6 col-form-label\"\r\n                      >\r\n                        {t(\"highlight_color\")}\r\n                      </CFormLabel>\r\n                      <CCol sm={6} className=\"text-center\">\r\n                        <input\r\n                          type=\"color\"\r\n                          id=\"favcolor\"\r\n                          onChange={handleInput}\r\n                          value={themes.HighlightColor}\r\n                          name=\"HighlightColor\"\r\n                        />\r\n                      </CCol>\r\n                    </CRow>\r\n                    <CRow className=\"mb-3\">\r\n                      <button className=\"btn btn-light m-1\" type=\"button\">\r\n                        {t(\"advanced_customization\")}\r\n                      </button>\r\n                    </CRow>\r\n                  </CCardBody>\r\n                </CCard>\r\n              </div>\r\n              <div className=\"col-6\">\r\n                <div className=\"row\">\r\n                  <div className=\"col-12\">\r\n                    <CCard>\r\n                      <CCardHeader component=\"h5\">\r\n                        {t(\"home_screen_background\")}\r\n                      </CCardHeader>\r\n                      <CCardBody>\r\n                        <RadioGroup\r\n                          aria-label=\"HomeScreen\"\r\n                          defaultValue=\"1\"\r\n                          name=\"radio-buttons-group\"\r\n                        >\r\n                          <FormControlLabel\r\n                            value=\"1\"\r\n                            control={\r\n                              <Radio\r\n                                onClick={() => setHomeScreen(false)}\r\n                                color=\"secondary\"\r\n                              />\r\n                            }\r\n                            label={t(\"solid_color\")}\r\n                          />\r\n                          <FormControlLabel\r\n                            value=\"0\"\r\n                            control={\r\n                              <Radio\r\n                                onClick={() => setHomeScreen(true)}\r\n                                color=\"secondary\"\r\n                              />\r\n                            }\r\n                            label={t(\"image_or_video\")}\r\n                          />\r\n                        </RadioGroup>\r\n                        <CRow className=\"mb-3\">\r\n                          <CCol sm={12} className=\"text-right\">\r\n                            {homeScreen ? (\r\n                              \" \"\r\n                            ) : (\r\n                              <input\r\n                                type=\"color\"\r\n                                id=\"favcolor\"\r\n                                onChange={handleInput}\r\n                                value={themes.HomeScreenBackground}\r\n                                name=\"HomeScreenBackground\"\r\n                              />\r\n                            )}\r\n                          </CCol>\r\n                        </CRow>\r\n                        {homeScreen ? (\r\n                          <div className=\"form-group\">\r\n                            <div className=\"input-group\">\r\n                              <div className=\"custom-file\">\r\n                                <input\r\n                                  type=\"file\"\r\n                                  className=\"form-control\"\r\n                                  name=\"HomeScreenBackground\"\r\n                                  required\r\n                                  onChange={handleImage}\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        ) : (\r\n                          \" \"\r\n                        )}\r\n                      </CCardBody>\r\n                    </CCard>\r\n                  </div>\r\n                  <div className=\"col-12\">\r\n                    <CCard>\r\n                      <CCardHeader component=\"h5\">\r\n                        {t(\"menu_screen_background\")}\r\n                      </CCardHeader>\r\n                      <CCardBody>\r\n                        <RadioGroup\r\n                          aria-label=\"MenuScreen\"\r\n                          defaultValue=\"1\"\r\n                          name=\"radio-buttons-group\"\r\n                        >\r\n                          <FormControlLabel\r\n                            value=\"1\"\r\n                            control={\r\n                              <Radio\r\n                                onClick={() => setMenuScreen(false)}\r\n                                color=\"secondary\"\r\n                              />\r\n                            }\r\n                            label={t(\"solid_color\")}\r\n                          />\r\n                          <FormControlLabel\r\n                            value=\"0\"\r\n                            control={\r\n                              <Radio\r\n                                onClick={() => setMenuScreen(true)}\r\n                                color=\"secondary\"\r\n                              />\r\n                            }\r\n                            label={t(\"image\")}\r\n                          />\r\n                        </RadioGroup>\r\n                        <CRow className=\"mb-3\">\r\n                          <CCol sm={12} className=\"text-right\">\r\n                            {menuScreen ? (\r\n                              \" \"\r\n                            ) : (\r\n                              <input\r\n                                type=\"color\"\r\n                                onChange={handleInput}\r\n                                value={themes.MenuScreenBackground}\r\n                                name=\"MenuScreenBackground\"\r\n                              />\r\n                            )}\r\n                          </CCol>\r\n                        </CRow>\r\n                        {menuScreen ? (\r\n                          <div className=\"form-group\">\r\n                            <div className=\"input-group\">\r\n                              <div className=\"custom-file\">\r\n                                <input\r\n                                  type=\"file\"\r\n                                  className=\"form-control\"\r\n                                  name=\"MenuScreenBackground\"\r\n                                  required\r\n                                  onChange={handleImageMenu}\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        ) : (\r\n                          \" \"\r\n                        )}\r\n                      </CCardBody>\r\n                    </CCard>\r\n                  </div>\r\n                  <div className=\"col-12\">\r\n                    <CCard>\r\n                      <CCardHeader component=\"h5\">\r\n                        {t(\"menu_button\")}\r\n                      </CCardHeader>\r\n                      <CCardBody>\r\n                        <CRow className=\"mb-3\">\r\n                          <CFormLabel\r\n                            htmlFor=\"staticEmail\"\r\n                            className=\"col-sm-6 col-form-label\"\r\n                          >\r\n                            {t(\"show_button\")}\r\n                          </CFormLabel>\r\n                          <CCol sm={6} className=\"text-center\">\r\n                            <Switch\r\n                              defaultChecked\r\n                              onChange={() => setButtonShow(!buttonShow)}\r\n                              value={buttonShow}\r\n                              name=\"ShowButton\"\r\n                              color=\"secondary\"\r\n                            />\r\n                          </CCol>\r\n                        </CRow>\r\n                        {buttonShow ? (\r\n                          <CRow className=\"mb-3\">\r\n                            <CFormLabel\r\n                              htmlFor=\"inputPassword\"\r\n                              className=\"col-sm-12 col-form-label\"\r\n                            >\r\n                              {t(\"button_shape\")}\r\n                            </CFormLabel>\r\n                            <CCol sm={12} className=\"text-center\">\r\n                              <RadioGroup\r\n                                aria-label=\"menu_button\"\r\n                                defaultValue=\"P\"\r\n                                name=\"ButtonShape\"\r\n                                onChange={handleInput}\r\n                                value={themes.ButtonShape}\r\n                              >\r\n                                <FormControlLabel\r\n                                  value=\"R\"\r\n                                  control={\r\n                                    <div>\r\n                                      <Radio value=\"R\" color=\"secondary\" />{\" \"}\r\n                                      <img\r\n                                        src={circle_menu_button}\r\n                                        alt=\"\"\r\n                                        width=\"80\"\r\n                                      />\r\n                                    </div>\r\n                                  }\r\n                                  label={t(\"round\")}\r\n                                />\r\n                                <FormControlLabel\r\n                                  value=\"P\"\r\n                                  control={\r\n                                    <div>\r\n                                      <Radio value=\"P\" color=\"secondary\" />{\" \"}\r\n                                      <img\r\n                                        src={pill_menu_button}\r\n                                        alt=\"\"\r\n                                        width=\"80\"\r\n                                      />\r\n                                    </div>\r\n                                  }\r\n                                  label={t(\"pill\")}\r\n                                />\r\n                              </RadioGroup>\r\n                            </CCol>\r\n                          </CRow>\r\n                        ) : null}\r\n                      </CCardBody>\r\n                    </CCard>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"text-center mx-4 mb-4\">\r\n              <button className=\"btn btn-primary\" type=\"submit\">\r\n                {t(\"update\")}\r\n              </button>\r\n              <Link\r\n                className=\"btn btn-light m-1\"\r\n                to=\"\"\r\n                onClick={() => history.goBack()}\r\n              >\r\n                {t(\"back\")}\r\n              </Link>\r\n            </div>\r\n          </Form>\r\n        </div>\r\n      ) : (\r\n        <div className=\"spinner-border text-primary \" role=\"status\">\r\n          <span className=\"sr-only\">{t(\"loading\")}</span>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EditTheme;\r\n","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Design.js",["473"],"D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Theme.js",["474","475","476"],"import React, { useState } from \"react\";\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CRow,\r\n  CFormLabel,\r\n  CCol,\r\n} from \"@coreui/react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// import Switch from \"react-switch\";\r\nimport circle_menu_button from \"../../../images/hellomenu/circle_menu_button.png\";\r\nimport pill_menu_button from \"../../../images/hellomenu/pill_menu_button.png\";\r\nimport Avatar from \"@mui/material/Avatar\";\r\nimport {\r\n  AvatarGroup,\r\n  Grid,\r\n  List,\r\n  ListItem,\r\n  ListItemButton,\r\n  ListItemText,\r\n} from \"@mui/material\";\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport Switch from \"@mui/material/Switch\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { FormControlLabel, RadioGroup, Radio } from \"@mui/material\";\r\nimport Accordion from \"@mui/material/Accordion\";\r\nimport AccordionDetails from \"@mui/material/AccordionDetails\";\r\nimport AccordionSummary from \"@mui/material/AccordionSummary\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Theme = (props) => {\r\n  const history = useHistory();\r\n\r\n  const { t } = useTranslation();\r\n  const branchId = props.history.location.state.id;\r\n\r\n  const [state, setState] = useState({ checked: false });\r\n  const [homeScreen, setHomeScreen] = useState(false);\r\n  const [menuScreen, setMenuScreen] = useState(false);\r\n  const [buttonShow, setButtonShow] = useState(1);\r\n  const handleChange = (checked) => {\r\n    setState({ checked });\r\n  };\r\n  const [imageState, setImageState] = useState([]);\r\n  const handleImage = (e) => {\r\n    setImageState({ ...imageState, HomeScreenBackground: e.target.files[0] });\r\n  };\r\n  const [imageStateMenu, setImageStateMenu] = useState([]);\r\n  const handleImageMenu = (e) => {\r\n    setImageStateMenu({\r\n      ...imageStateMenu,\r\n      MenuScreenBackground: e.target.files[0],\r\n    });\r\n  };\r\n  // Insert Start\r\n  const [themes, setThemes] = useState([]);\r\n  const handleInput = (e) => {\r\n    e.persist();\r\n    setThemes({ ...themes, [e.target.name]: e.target.value });\r\n  };\r\n  const changeColor = (first, second, thrid) => {\r\n    setThemes({\r\n      ...themes,\r\n      TextColor: first,\r\n      BackgroundColor: second,\r\n      HighlightColor: thrid,\r\n    });\r\n  };\r\n  const save = (e) => {\r\n    e.preventDefault();\r\n    // console.log(themes);\r\n    const formData = new FormData();\r\n    formData.append(\"HomeScreenBackground\", imageState.HomeScreenBackground);\r\n    formData.append(\r\n      \"MenuScreenBackground\",\r\n      imageStateMenu.MenuScreenBackground\r\n    );\r\n    formData.append(\"ThemeName\", themes.ThemeName);\r\n    // formData.append(\"Orientation\", themes.Orientation);\r\n    // formData.append(\"MenuStructure\", themes.MenuStructure);\r\n    formData.append(\"TextColor\", themes.TextColor);\r\n    formData.append(\"BackgroundColor\", themes.BackgroundColor);\r\n    formData.append(\"HighlightColor\", themes.HighlightColor);\r\n    // formData.append(\"QRCodeColor\", themes.QRCodeColor);\r\n    // formData.append(\"QRCodeBackgroundColor\", themes.QRCodeBackgroundColor);\r\n    formData.append(\"HomeScreenBackground\", themes.HomeScreenBackground);\r\n    formData.append(\"MenuScreenBackground\", themes.MenuScreenBackground);\r\n    formData.append(\"ShowButton\", themes.ShowButton);\r\n    formData.append(\"ButtonShape\", themes.ButtonShape);\r\n    axios.post(`/api/InsertTheme/${branchId}`, formData).then((res) => {\r\n      if (res.data.status === 200) {\r\n        swal(\"Success\", res.data.message, \"success\").then((check) => {\r\n          if (check) {\r\n            history.goBack();\r\n          }\r\n        });\r\n        // setThemes([]);\r\n        // setImageStateMenu([]);\r\n        // setImageState([]);\r\n      }\r\n    });\r\n  };\r\n  // insert End\r\n  const [expanded, setExpanded] = React.useState(false);\r\n\r\n  const handleChangePanel = (panel) => (event, isExpanded) => {\r\n    setExpanded(isExpanded ? panel : false);\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\" overflow-hidden border\">\r\n        <Form onSubmit={save} method=\"POST\" encType=\"multipart/form-data\">\r\n          <div className=\"row\">\r\n            <div className=\"col-12 mb-2\">\r\n              <div\r\n                className=\"col-6 mb-2\"\r\n                style={{ borderBottom: \"2px solid black\" }}\r\n              >\r\n                <input\r\n                  type=\"text\"\r\n                  style={{ border: \"none\" }}\r\n                  className=\"form-control\"\r\n                  placeholder={t(\"theme_name\")}\r\n                  onChange={handleInput}\r\n                  name=\"ThemeName\"\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"col-6\">\r\n              <CCard>\r\n                <CCardHeader component=\"h5\">{t(\"theme_colors\")}</CCardHeader>\r\n                <CCardBody>\r\n                  <div>\r\n                    <Accordion\r\n                      expanded={expanded === \"panel1\"}\r\n                      onChange={handleChangePanel(\"panel1\")}\r\n                      className=\"my-3\"\r\n                    >\r\n                      <AccordionSummary\r\n                        aria-controls=\"panel1bh-content\"\r\n                        id=\"panel1bh-header\"\r\n                      >\r\n                        <Grid container spacing={2}>\r\n                          <Grid item xs={6} md={8}>\r\n                            <Typography sx={{ width: \"33%\", flexShrink: 0 }}>\r\n                              {t(\"selected\")}\r\n                            </Typography>\r\n                          </Grid>\r\n                          <Grid item xs={6} md={4}>\r\n                            {/* <Typography sx={{ color: \"text.secondary\" }}> */}\r\n                            <AvatarGroup max={4}>\r\n                              <Avatar\r\n                                sx={{\r\n                                  bgcolor: themes.TextColor,\r\n                                  width: 20,\r\n                                  height: 20,\r\n                                }}\r\n                              >\r\n                                {\" \"}\r\n                              </Avatar>\r\n                              <Avatar\r\n                                sx={{\r\n                                  bgcolor: themes.BackgroundColor,\r\n                                  width: 20,\r\n                                  height: 20,\r\n                                }}\r\n                              >\r\n                                {\" \"}\r\n                              </Avatar>\r\n                              <Avatar\r\n                                sx={{\r\n                                  bgcolor: themes.HighlightColor,\r\n                                  width: 20,\r\n                                  height: 20,\r\n                                }}\r\n                              >\r\n                                {\" \"}\r\n                              </Avatar>\r\n                            </AvatarGroup>\r\n                            {/* </Typography> */}\r\n                          </Grid>\r\n                        </Grid>\r\n                      </AccordionSummary>\r\n                      <AccordionDetails>\r\n                        {/* <Typography> */}\r\n                        <List>\r\n                          <ListItem disablePadding>\r\n                            <ListItemButton\r\n                              onClick={() =>\r\n                                changeColor(\"red\", \"green\", \"black\")\r\n                              }\r\n                            >\r\n                              <Grid container spacing={2}>\r\n                                <Grid item xs={6} md={8}>\r\n                                  <ListItemText primary=\"First Color Theme\" />\r\n                                </Grid>\r\n                                <Grid item xs={6} md={4}>\r\n                                  {/* <Typography\r\n                                      sx={{ color: \"text.secondary\" }}\r\n                                    > */}\r\n                                  <AvatarGroup max={4}>\r\n                                    <Avatar\r\n                                      sx={{\r\n                                        bgcolor: \"red\",\r\n                                        width: 20,\r\n                                        height: 20,\r\n                                      }}\r\n                                    >\r\n                                      {\" \"}\r\n                                    </Avatar>\r\n                                    <Avatar\r\n                                      sx={{\r\n                                        bgcolor: \"green\",\r\n                                        width: 20,\r\n                                        height: 20,\r\n                                      }}\r\n                                    >\r\n                                      {\" \"}\r\n                                    </Avatar>\r\n                                    <Avatar\r\n                                      sx={{\r\n                                        bgcolor: \"black\",\r\n                                        width: 20,\r\n                                        height: 20,\r\n                                      }}\r\n                                    >\r\n                                      {\" \"}\r\n                                    </Avatar>\r\n                                  </AvatarGroup>\r\n                                  {/* </Typography> */}\r\n                                </Grid>\r\n                              </Grid>\r\n                            </ListItemButton>\r\n                          </ListItem>\r\n                        </List>\r\n                        {/* </Typography> */}\r\n                      </AccordionDetails>\r\n                    </Accordion>\r\n                  </div>\r\n                  <CRow className=\"mb-3\">\r\n                    <CFormLabel\r\n                      htmlFor=\"staticEmail\"\r\n                      className=\"col-sm-6 col-form-label\"\r\n                    >\r\n                      {t(\"text_color\")}\r\n                    </CFormLabel>\r\n                    <CCol sm={6} className=\"text-center\">\r\n                      <input\r\n                        type=\"color\"\r\n                        onChange={handleInput}\r\n                        value={themes.TextColor}\r\n                        name=\"TextColor\"\r\n                      />\r\n                    </CCol>\r\n                  </CRow>\r\n                  <CRow className=\"mb-3\">\r\n                    <CFormLabel\r\n                      htmlFor=\"inputPassword\"\r\n                      className=\"col-sm-6 col-form-label\"\r\n                    >\r\n                      {t(\"background_color\")}\r\n                    </CFormLabel>\r\n                    <CCol sm={6} className=\"text-center\">\r\n                      <input\r\n                        type=\"color\"\r\n                        onChange={handleInput}\r\n                        value={themes.BackgroundColor}\r\n                        name=\"BackgroundColor\"\r\n                      />\r\n                    </CCol>\r\n                  </CRow>\r\n                  <CRow className=\"mb-3\">\r\n                    <CFormLabel\r\n                      htmlFor=\"inputPassword\"\r\n                      className=\"col-sm-6 col-form-label\"\r\n                    >\r\n                      {t(\"highlight_color\")}\r\n                    </CFormLabel>\r\n                    <CCol sm={6} className=\"text-center\">\r\n                      <input\r\n                        type=\"color\"\r\n                        onChange={handleInput}\r\n                        value={themes.HighlightColor}\r\n                        name=\"HighlightColor\"\r\n                      />\r\n                    </CCol>\r\n                  </CRow>\r\n                  <CRow className=\"mb-3\">\r\n                    <button className=\"btn btn-light m-1\" type=\"button\">\r\n                      {t(\"advanced_customization\")}\r\n                    </button>\r\n                  </CRow>\r\n                </CCardBody>\r\n              </CCard>\r\n            </div>\r\n            <div className=\"col-6\">\r\n              <div className=\"row\">\r\n                <div className=\"col-12\">\r\n                  <CCard>\r\n                    <CCardHeader component=\"h5\">\r\n                      {t(\"home_screen_background\")}\r\n                    </CCardHeader>\r\n                    <CCardBody>\r\n                      <RadioGroup\r\n                        aria-label=\"HomeScreen\"\r\n                        defaultValue=\"1\"\r\n                        name=\"radio-buttons-group\"\r\n                      >\r\n                        <FormControlLabel\r\n                          value=\"1\"\r\n                          control={\r\n                            <Radio\r\n                              onClick={() => setHomeScreen(false)}\r\n                              color=\"secondary\"\r\n                            />\r\n                          }\r\n                          label={t(\"solid_color\")}\r\n                        />\r\n                        <FormControlLabel\r\n                          value=\"0\"\r\n                          control={\r\n                            <Radio\r\n                              onClick={() => setHomeScreen(true)}\r\n                              color=\"secondary\"\r\n                            />\r\n                          }\r\n                          label={t(\"image_or_video\")}\r\n                        />\r\n                      </RadioGroup>\r\n                      <CRow className=\"mb-3\">\r\n                        <CCol sm={12} className=\"text-right\">\r\n                          {homeScreen ? (\r\n                            \" \"\r\n                          ) : (\r\n                            <input\r\n                              type=\"color\"\r\n                              id=\"favcolor\"\r\n                              onChange={handleInput}\r\n                              value={themes.HomeScreenBackground}\r\n                              name=\"HomeScreenBackground\"\r\n                            />\r\n                          )}\r\n                        </CCol>\r\n                      </CRow>\r\n                      {homeScreen ? (\r\n                        <div className=\"form-group\">\r\n                          <div className=\"input-group\">\r\n                            <div className=\"custom-file\">\r\n                              <input\r\n                                type=\"file\"\r\n                                className=\"form-control\"\r\n                                name=\"HomeScreenBackground\"\r\n                                required\r\n                                onChange={handleImage}\r\n                              />\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      ) : (\r\n                        \" \"\r\n                      )}\r\n                    </CCardBody>\r\n                  </CCard>\r\n                </div>\r\n                <div className=\"col-12\">\r\n                  <CCard>\r\n                    <CCardHeader component=\"h5\">\r\n                      {t(\"menu_screen_background\")}\r\n                    </CCardHeader>\r\n                    <CCardBody>\r\n                      <RadioGroup\r\n                        aria-label=\"MenuScreen\"\r\n                        defaultValue=\"1\"\r\n                        name=\"radio-buttons-group\"\r\n                      >\r\n                        <FormControlLabel\r\n                          value=\"1\"\r\n                          control={\r\n                            <Radio\r\n                              onClick={() => setMenuScreen(false)}\r\n                              color=\"secondary\"\r\n                            />\r\n                          }\r\n                          label={t(\"solid_color\")}\r\n                        />\r\n                        <FormControlLabel\r\n                          value=\"0\"\r\n                          control={\r\n                            <Radio\r\n                              onClick={() => setMenuScreen(true)}\r\n                              color=\"secondary\"\r\n                            />\r\n                          }\r\n                          label={t(\"image\")}\r\n                        />\r\n                      </RadioGroup>\r\n                      <CRow className=\"mb-3\">\r\n                        <CCol sm={12} className=\"text-right\">\r\n                          {menuScreen ? (\r\n                            \" \"\r\n                          ) : (\r\n                            <input\r\n                              type=\"color\"\r\n                              onChange={handleInput}\r\n                              value={themes.MenuScreenBackground}\r\n                              name=\"MenuScreenBackground\"\r\n                            />\r\n                          )}\r\n                        </CCol>\r\n                      </CRow>\r\n                      {menuScreen ? (\r\n                        <div className=\"form-group\">\r\n                          <div className=\"input-group\">\r\n                            <div className=\"custom-file\">\r\n                              <input\r\n                                type=\"file\"\r\n                                className=\"form-control\"\r\n                                name=\"MenuScreenBackground\"\r\n                                required\r\n                                onChange={handleImageMenu}\r\n                              />\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      ) : (\r\n                        \" \"\r\n                      )}\r\n                    </CCardBody>\r\n                  </CCard>\r\n                </div>\r\n                <div className=\"col-12\">\r\n                  <CCard>\r\n                    <CCardHeader component=\"h5\">{t(\"menu_button\")}</CCardHeader>\r\n                    <CCardBody>\r\n                      <CRow className=\"mb-3\">\r\n                        <CFormLabel\r\n                          htmlFor=\"staticEmail\"\r\n                          className=\"col-sm-6 col-form-label\"\r\n                        >\r\n                          {t(\"show_button\")}\r\n                        </CFormLabel>\r\n                        <CCol sm={6} className=\"text-center\">\r\n                          <Switch\r\n                            defaultChecked\r\n                            onChange={() => setButtonShow(!buttonShow)}\r\n                            value={buttonShow}\r\n                            onChange={handleInput}\r\n                            name=\"ShowButton\"\r\n                            color=\"secondary\"\r\n                          />\r\n                        </CCol>\r\n                      </CRow>\r\n                      {buttonShow ? (\r\n                        <CRow className=\"mb-3\">\r\n                          <CFormLabel\r\n                            htmlFor=\"inputPassword\"\r\n                            className=\"col-sm-12 col-form-label\"\r\n                          >\r\n                            {t(\"button_shape\")}\r\n                          </CFormLabel>\r\n                          <CCol sm={12} className=\"text-center\">\r\n                            <RadioGroup\r\n                              aria-label=\"menu_button\"\r\n                              defaultValue=\"P\"\r\n                              name=\"radio-buttons-group\"\r\n                            >\r\n                              <FormControlLabel\r\n                                value=\"R\"\r\n                                control={\r\n                                  <div>\r\n                                    <Radio\r\n                                      onChange={handleInput}\r\n                                      name=\"ButtonShape\"\r\n                                      value=\"R\"\r\n                                      color=\"secondary\"\r\n                                    />{\" \"}\r\n                                    <img\r\n                                      src={circle_menu_button}\r\n                                      alt=\"\"\r\n                                      width=\"80\"\r\n                                    />\r\n                                  </div>\r\n                                }\r\n                                label={t(\"round\")}\r\n                              />\r\n                              <FormControlLabel\r\n                                value=\"P\"\r\n                                control={\r\n                                  <div>\r\n                                    <Radio\r\n                                      onChange={handleInput}\r\n                                      name=\"ButtonShape\"\r\n                                      value=\"P\"\r\n                                      color=\"secondary\"\r\n                                    />{\" \"}\r\n                                    <img\r\n                                      src={pill_menu_button}\r\n                                      alt=\"\"\r\n                                      width=\"80\"\r\n                                    />\r\n                                  </div>\r\n                                }\r\n                                label={t(\"pill\")}\r\n                              />\r\n                            </RadioGroup>\r\n                          </CCol>\r\n                        </CRow>\r\n                      ) : null}\r\n                    </CCardBody>\r\n                  </CCard>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"text-center mx-4 mb-4\">\r\n            <button className=\"btn btn-primary\" type=\"submit\">\r\n              {t(\"save\")}\r\n            </button>\r\n            <div\r\n              style={{ cursor: \"pointer\" }}\r\n              className=\"btn btn-light m-1\"\r\n              onClick={() => history.goBack()}\r\n            >\r\n              {t(\"back\")}\r\n            </div>\r\n          </div>\r\n        </Form>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Theme;\r\n","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Products\\Product.js",["477","478","479"],"D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Products\\AddProduct.js",["480","481","482","483","484","485"],"D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\layouts\\nav\\SideBar.js",["486"],"import React, { Component } from \"react\";\r\n\r\n/// Link\r\nimport { Link } from \"react-router-dom\";\r\n\r\n/// Scroll\r\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\r\n\r\n/// Menu\r\nimport MetisMenu from \"metismenujs\";\r\nimport { withTranslation } from \"react-i18next\";\r\n// const { t } = useTranslation();\r\n\r\nclass MM extends Component {\r\n  componentDidMount() {\r\n    this.$el = this.el;\r\n    this.mm = new MetisMenu(this.$el);\r\n  }\r\n  componentWillUnmount() {\r\n    this.mm(\"dispose\");\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"mm-wrapper\">\r\n        <ul className=\"metismenu\" ref={(el) => (this.el = el)}>\r\n          {this.props.children}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass SideBar extends Component {\r\n  /// Open menu\r\n  componentDidMount() {\r\n    // sidebar open/close\r\n    var btn = document.querySelector(\".nav-control\");\r\n    var aaa = document.querySelector(\"#main-wrapper\");\r\n\r\n    function toggleFunc() {\r\n      return aaa.classList.toggle(\"menu-toggle\");\r\n    }\r\n\r\n    btn.addEventListener(\"click\", toggleFunc);\r\n  }\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      path: window.location.pathname.replace(/^\\/([^\\/]*).*$/, \"$1\"),\r\n    };\r\n  }\r\n  render() {\r\n    const { t } = this.props;\r\n    return (\r\n      <div className=\"deznav\">\r\n        <PerfectScrollbar className=\"deznav-scroll\">\r\n          <MM className=\"metismenu\" id=\"menu\">\r\n            <li\r\n              className={`${\r\n                this.state.path === \"dashboard\" ? \"mm-active\" : \"\"\r\n              }`}\r\n            >\r\n              <Link\r\n                className=\"ai-icon\"\r\n                to=\"/dashboard\"\r\n                onClick={() => this.setState({ path: \"dashboard\" })}\r\n              >\r\n                <i className=\"flaticon-381-networking\"></i>\r\n                <span className=\"nav-text\">{t(\"dashboard\")}</span>\r\n              </Link>\r\n            </li>\r\n            <li\r\n              className={`${this.state.path === \"company\" ? \"mm-active\" : \"\"}`}\r\n            >\r\n              <Link\r\n                className=\"ai-icon\"\r\n                to=\"/company\"\r\n                onClick={() => this.setState({ path: \"company\" })}\r\n              >\r\n                <i className=\"flaticon-381-internet\"></i>\r\n                <span className=\"nav-text\">{t(\"company\")}</span>\r\n              </Link>\r\n            </li>\r\n            <li\r\n              className={`${this.state.path === \"branches\" ? \"mm-active\" : \"\"}`}\r\n            >\r\n              <Link\r\n                className=\"ai-icon\"\r\n                to=\"/branches\"\r\n                onClick={() => this.setState({ path: \"branches\" })}\r\n              >\r\n                <i className=\"flaticon-381-television\"></i>\r\n                <span className=\"nav-text\">{t(\"branches\")}</span>\r\n              </Link>\r\n            </li>\r\n            <li\r\n              className={`${\r\n                this.state.path === \"attributes\" ? \"mm-active\" : \"\"\r\n              }`}\r\n            >\r\n              <Link\r\n                className=\"ai-icon\"\r\n                to=\"/attributes\"\r\n                onClick={() => this.setState({ path: \"attributes\" })}\r\n              >\r\n                <i className=\"flaticon-381-list\"></i>\r\n                <span className=\"nav-text\">{t(\"attributes\")}</span>\r\n              </Link>\r\n            </li>\r\n            <li\r\n              className={`${\r\n                this.state.path === \"ingredients\" ? \"mm-active\" : \"\"\r\n              }`}\r\n            >\r\n              <Link\r\n                className=\"ai-icon\"\r\n                to=\"/ingredients\"\r\n                onClick={() => this.setState({ path: \"ingredients\" })}\r\n              >\r\n                <i className=\"flaticon-381-pad\"></i>\r\n                <span className=\"nav-text\">{t(\"ingredients\")}</span>\r\n              </Link>\r\n            </li>\r\n            <li className={`${this.state.path === \"areas\" ? \"mm-active\" : \"\"}`}>\r\n              <Link\r\n                className=\"ai-icon\"\r\n                to=\"/areas\"\r\n                onClick={() => this.setState({ path: \"areas\" })}\r\n              >\r\n                <i className=\"flaticon-381-location\"></i>\r\n                <span className=\"nav-text\">{t(\"areas\")}</span>\r\n              </Link>\r\n            </li>\r\n            {/* <li\r\n              className={`${this.state.path === \"extras\" ? \"mm-active\" : \"\"}`}\r\n            >\r\n              <Link\r\n                className=\"ai-icon\"\r\n                to=\"/extras\"\r\n                onClick={() => this.setState({ path: \"extras\" })}\r\n              >\r\n                <i className=\"flaticon-381-add-3\"></i>\r\n                <span className=\"nav-text\">{t(\"extras\")}</span>\r\n              </Link>\r\n            </li> */}\r\n            <li\r\n              className={`${this.state.path === \"orders\" ? \"mm-active\" : \"\"}`}\r\n            >\r\n              <Link\r\n                className=\"ai-icon\"\r\n                to=\"/orders\"\r\n                onClick={() => this.setState({ path: \"orders\" })}\r\n              >\r\n                <i className=\"flaticon-381-plus\"></i>\r\n                <span className=\"nav-text\">{t(\"orders\")}</span>\r\n              </Link>\r\n            </li>\r\n          </MM>\r\n        </PerfectScrollbar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withTranslation()(SideBar);\r\n","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Variants\\Variants.js",["487","488","489","490","491","492","493","494","495","496","497","498","499","500","501","502","503","504","505","506","507","508","509","510"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport NewGrid from \"./NewGrid\";\r\nimport { CBreadcrumb } from \"@coreui/react\";\r\nimport Select from \"react-select\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"@pathofdev/react-tag-input/build/index.css\";\r\nimport { TagsInput } from \"react-tag-input-component\";\r\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport CustomAlert from \"../CustomAlert\";\r\n\r\nconst Variants = (props) => {\r\n  // for localization\r\n  const { t } = useTranslation();\r\n  const id = props.history.location.state.p_id;\r\n  const branchId = props.history.location.state.id;\r\n\r\n  const [attributes, setAttributes] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [numberOfVar, setNumberOfVar] = useState([]);\r\n  const [check, setCheck] = useState(true);\r\n  const [variantsTags, setVariantsTage] = useState([]);\r\n  const [tags, setTags] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const getdata = async () => {\r\n      const jsonvar = await axios({\r\n        method: \"GET\",\r\n        url: `/api/Getvariations/${id}`,\r\n      });\r\n      const res = await axios({\r\n        method: \"GET\",\r\n        url: \"/api/GetAttributes\",\r\n      });\r\n\r\n      const nameAtter = {};\r\n      res.data.fetchData.map(\r\n        (fetchData) => (nameAtter[fetchData.attributeName] = \"\")\r\n      );\r\n\r\n      if (\r\n        res.data.fetchData.length !== attributes.length &&\r\n        jsonvar.data.fetchData === \"\"\r\n      ) {\r\n        setAttributes(res.data.fetchData);\r\n        // setTags(JSON.parse(jsonvar.data.fetchData.tags));\r\n      } else {\r\n        const recTags = JSON.parse(jsonvar.data.fetchData.tags);\r\n        setTags(recTags);\r\n\r\n        const varLines = [];\r\n\r\n        const arrayVar = JSON.parse(jsonvar.data.fetchData.variants);\r\n        const AttNames = {};\r\n\r\n        arrayVar.map((fetchData) => {\r\n          const attrFilterName = [];\r\n\r\n          let line = {};\r\n          let count = 0;\r\n          for (const [key, value] of Object.entries(fetchData)) {\r\n            if (\r\n              key == \"postion\" ||\r\n              key == \"sku\" ||\r\n              key == \"price\" ||\r\n              key == \"stock\" ||\r\n              key == \"image\"\r\n            ) {\r\n              line[key] = value;\r\n            } else if (nameAtter.hasOwnProperty(key)) {\r\n              attrFilterName.push({\r\n                value: key,\r\n                label: key,\r\n              });\r\n              line[key] = value;\r\n\r\n              AttNames[key] = \"\";\r\n            } else {\r\n              if (count < Object.keys(nameAtter).length) {\r\n                line[Object.keys(nameAtter)[count]] = value;\r\n              }\r\n              count++;\r\n            }\r\n          }\r\n          varLines.push(line);\r\n          setVariantsTage(attrFilterName);\r\n        });\r\n        setNumberOfVar(varLines);\r\n        setAttributes(res.data.fetchData);\r\n      }\r\n    };\r\n\r\n    getdata();\r\n    setLoading(false);\r\n  }, [check]);\r\n  const CreateNewVar = (tag) => {\r\n    if (variantsTags.length == 1) {\r\n      let sku = id + \"-\";\r\n      if (tag != 0) {\r\n        for (const [attr, values] of Object.entries(tag)) {\r\n          let count = -1;\r\n          setNumberOfVar((prevState) =>\r\n            prevState\r\n              .filter((item) => {\r\n                return values.includes(item[attr]);\r\n              })\r\n              .map((item) => {\r\n                count = count + 1;\r\n                return {\r\n                  ...item,\r\n                  postion: count,\r\n                };\r\n              })\r\n          );\r\n          values.map((item) => {\r\n            const check = numberOfVar.every((section) => {\r\n              return section.sku != sku + item;\r\n            });\r\n            if (check) {\r\n              setNumberOfVar((numberOfVar) => {\r\n                return [\r\n                  ...numberOfVar,\r\n                  {\r\n                    postion: numberOfVar.length,\r\n                    sku: sku + item,\r\n                    price: \"\",\r\n                    stock: \"\",\r\n                    image: [],\r\n                    [attr]: item,\r\n                  },\r\n                ];\r\n              });\r\n            }\r\n          });\r\n        }\r\n      }\r\n    } else {\r\n      let sku = id + \"-\";\r\n      let c = 1;\r\n      for (const [attr, values] of Object.entries(tag)) {\r\n        if (Object.keys(tag).length == c) {\r\n          sku += values;\r\n        } else {\r\n          sku += values + \"-\";\r\n        }\r\n        c++;\r\n      }\r\n      if (numberOfVar.length != 0) {\r\n        const check = numberOfVar.every((item) => {\r\n          return item.sku != sku;\r\n        });\r\n        if (check) {\r\n          setNumberOfVar((numberOfVar) => {\r\n            return [\r\n              ...numberOfVar,\r\n              {\r\n                postion: numberOfVar.length,\r\n                sku: sku,\r\n                price: \"\",\r\n                stock: \"\",\r\n                image: [],\r\n                ...tag,\r\n              },\r\n            ];\r\n          });\r\n        }\r\n      } else {\r\n        setNumberOfVar((numberOfVar) => {\r\n          return [\r\n            ...numberOfVar,\r\n            {\r\n              postion: numberOfVar.length,\r\n              sku: sku,\r\n              price: \"\",\r\n              stock: \"\",\r\n              image: [],\r\n              ...tag,\r\n            },\r\n          ];\r\n        });\r\n      }\r\n    }\r\n  };\r\n  const [change, setChange] = useState(false);\r\n  // select box\r\n  const handleSelectEvent = (e) => {\r\n    if (e == null) {\r\n      setVariantsTage([]);\r\n      setNumberOfVar([]);\r\n      setTags([]);\r\n    } else {\r\n      if (e.length < variantsTags.length) {\r\n        setNumberOfVar([]);\r\n        setTags([]);\r\n        setChange(!change);\r\n      }\r\n      setVariantsTage(e);\r\n    }\r\n  };\r\n  const handleEvent = (e, value) => {\r\n    if (e.length != 0) {\r\n      setTags({ ...tags, [value]: e });\r\n    }\r\n    if (variantsTags.length == 1) {\r\n      CreateNewVar({ ...tags, [value]: e });\r\n    } else {\r\n      if (e.length < tags[value]?.length) {\r\n        let count = -1;\r\n\r\n        setNumberOfVar(\r\n          numberOfVar\r\n            .filter((item) => {\r\n              if (e.includes(item[value])) {\r\n                return item;\r\n              }\r\n            })\r\n            .map((item) => {\r\n              count = count + 1;\r\n              return {\r\n                ...item,\r\n                postion: count,\r\n              };\r\n            })\r\n        );\r\n      } else {\r\n        let attrs = [];\r\n        let arrayAttr = [];\r\n        for (const [attr, values] of Object.entries({ ...tags, [value]: e })) {\r\n          attrs.push(values.map((v) => ({ [attr]: v })));\r\n          arrayAttr.push(attr);\r\n        }\r\n        attrs = attrs.reduce((a, b) =>\r\n          a.flatMap((d) => b.map((e) => ({ ...d, ...e })))\r\n        );\r\n        if (arrayAttr.length == variantsTags.length) {\r\n          attrs.map((tag) => {\r\n            CreateNewVar(tag);\r\n          });\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  // alert\r\n  const [alert, setAlert] = useState({\r\n    open: false,\r\n    severity: \"success\",\r\n    message: \"\",\r\n  });\r\n  const setAlerts = (open, severity, message) => {\r\n    setAlert({\r\n      open: open,\r\n      severity: severity,\r\n      message: message,\r\n    });\r\n  };\r\n  // delete\r\n  const deleteAll = (e) => {\r\n    e.preventDefault();\r\n    swal({\r\n      title: \"Are you sure?\",\r\n      text: \"Once deleted, you will not be able to recover this imaginary file!\",\r\n      icon: \"warning\",\r\n      buttons: [t(\"Cancel\"), t(\"Confirm\")],\r\n      dangerMode: true,\r\n    }).then((willDelete) => {\r\n      if (willDelete) {\r\n        axios.delete(`/api/Deletevariations/${id}`).then((res) => {\r\n          if (res.data.status === 200) {\r\n            setNumberOfVar([]);\r\n            setVariantsTage([]);\r\n            setTags([]);\r\n            setAlerts(true, \"success\", res.data.message);\r\n          } else if (res.data.status === 404) {\r\n            setNumberOfVar([]);\r\n            setVariantsTage([]);\r\n            setTags([]);\r\n            setAlerts(true, \"error\", res.data.message);\r\n          }\r\n        });\r\n      } else {\r\n        setAlerts(true, \"info\", \"Your Data is safe now!\");\r\n      }\r\n    });\r\n  };\r\n  const reset = (e) => {\r\n    e.preventDefault();\r\n    setNumberOfVar([]);\r\n    setVariantsTage([]);\r\n    setTags([]);\r\n    setAlerts(true, \"info\", \"Form Reseted!\");\r\n  };\r\n\r\n  // insert Attribute start\r\n  const initialValues = {\r\n    attributeName: \"\",\r\n  };\r\n  const validationSchema = () => {\r\n    return Yup.object().shape({\r\n      attributeName: Yup.string().required(\"Attribute Name is required\"),\r\n    });\r\n  };\r\n  const [modalCentered, setModalCentered] = useState(false);\r\n  const saveAttribute = (data) => {\r\n    axios.post(\"/api/InsertAttribute\", data).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setCheck(!check);\r\n        setModalCentered(false);\r\n        setAlerts(true, \"success\", res.data.message);\r\n      } else if (res.data.status === 304) {\r\n        setAlerts(true, \"warning\", res.data.message);\r\n      }\r\n    });\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"spinner-border text-primary \" role=\"status\">\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <Fragment>\r\n        {alert.open ? (\r\n          <CustomAlert\r\n            open={alert.open}\r\n            severity={alert.severity}\r\n            message={alert.message}\r\n            setAlert={setAlert}\r\n          />\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        <CBreadcrumb style={{ \"--cui-breadcrumb-divider\": \"'>'\" }}>\r\n          <Link\r\n            to={{\r\n              pathname: `/branches/show/products`,\r\n              state: { id: branchId },\r\n            }}\r\n            className=\"font-weight-bold\"\r\n          >\r\n            {t(\"back_to_products_list\")}\r\n          </Link>\r\n        </CBreadcrumb>\r\n\r\n        <div className=\"card\">\r\n          <div className=\"card-body\">\r\n            <div className=\"col-xl-12 col-lg-12 col-sm-12 \">\r\n              {\" \"}\r\n              <div className=\"d-flex justify-content-between\">\r\n                <label className=\"mb-1 \"></label>\r\n                <small\r\n                  style={{ cursor: \"pointer\" }}\r\n                  onClick={() => setModalCentered(true)}\r\n                >\r\n                  {t(\"add_attribute\")}\r\n                </small>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-xl-12 col-lg-12 col-sm-12 \">\r\n              <Select\r\n                value={variantsTags}\r\n                isMulti\r\n                options={attributes.map((o, i) => {\r\n                  return { value: o.attributeName, label: o.attributeName };\r\n                })}\r\n                onChange={handleSelectEvent}\r\n                // name=\"attributeName\"\r\n                className=\"basic-multi-select\"\r\n                classNamePrefix=\"select\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className={`card ${variantsTags.length == 0 ? \"d-none\" : \"\"}`}>\r\n          <div className=\"card-body\">\r\n            <div className=\"col-xl-12 col-lg-12 col-sm-12 \">\r\n              <div\r\n                className={`col-xl-12 col-lg-12 col-sm-12 ${\r\n                  variantsTags.length == 0 ? \"d-none\" : \"\"\r\n                }`}\r\n              >\r\n                {\" \"}\r\n                <div className=\"d-flex justify-content-between\">\r\n                  <label className=\"mb-1 \"></label>\r\n                  <small\r\n                    style={{ cursor: \"pointer\" }}\r\n                    onClick={(e) => reset(e)}\r\n                  >\r\n                    {t(\"reset_to_default\")}\r\n                  </small>\r\n                </div>\r\n              </div>\r\n              {variantsTags?.map((item, i) => {\r\n                return (\r\n                  <div className=\"row m-2\" key={i}>\r\n                    <div\r\n                      className=\"col-xl-3 col-lg-3 col-sm-3 font-weight-bold d-flex align-items-center justify-content-center\"\r\n                      style={{ backgroundColor: \"#f5f5f5\" }}\r\n                    >\r\n                      {item.label}\r\n                    </div>\r\n                    <div className=\"col-xl-9 col-lg-9 col-sm-9\">\r\n                      <TagsInput\r\n                        key={change}\r\n                        value={\r\n                          tags[item.label] == undefined\r\n                            ? (e) => (e = [])\r\n                            : tags[item.label]\r\n                        }\r\n                        onChange={(e) => handleEvent(e, item.label)}\r\n                        placeHolder=\"Please Enter A Value\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"card\">\r\n          <div className=\"card-body\">\r\n            <div\r\n              className={`col-xl-12 col-lg-12 col-sm-12 ${\r\n                numberOfVar.length == 0 ? \"d-none\" : \"\"\r\n              }`}\r\n            >\r\n              {\" \"}\r\n              <div className=\"d-flex justify-content-between\">\r\n                <label className=\"mb-1 \"></label>\r\n                <small\r\n                  style={{ cursor: \"pointer\" }}\r\n                  onClick={(e) => deleteAll(e)}\r\n                >\r\n                  {t(\"remove_all\")}\r\n                </small>\r\n              </div>\r\n            </div>\r\n\r\n            <NewGrid\r\n              numberOfVar={numberOfVar}\r\n              setNumberOfVar={setNumberOfVar}\r\n              tags={tags}\r\n              productid={id}\r\n            ></NewGrid>\r\n          </div>\r\n        </div>\r\n\r\n        <Modal className=\"fade\" show={modalCentered}>\r\n          <Modal.Header>\r\n            <Modal.Title>{t(\"add_attribute\")}</Modal.Title>\r\n            <Button\r\n              onClick={() => setModalCentered(false)}\r\n              variant=\"\"\r\n              className=\"close\"\r\n            >\r\n              <span>&times;</span>\r\n            </Button>\r\n          </Modal.Header>\r\n          <Formik\r\n            initialValues={initialValues}\r\n            validationSchema={validationSchema}\r\n            onSubmit={saveAttribute}\r\n          >\r\n            {({ errors, status, touched }) => (\r\n              <Form>\r\n                <Modal.Body>\r\n                  <div className=\"form-group\">\r\n                    <label> {t(\"attribute_name\")}</label>\r\n                    <Field\r\n                      name=\"attributeName\"\r\n                      type=\"text\"\r\n                      className={\r\n                        \"form-control\" +\r\n                        (errors.attributeName && touched.attributeName\r\n                          ? \" is-invalid\"\r\n                          : \"\")\r\n                      }\r\n                      placeholder=\"Name....\"\r\n                    />\r\n                    <ErrorMessage\r\n                      name=\"attributeName\"\r\n                      component=\"div\"\r\n                      className=\"invalid-feedback\"\r\n                    />\r\n                  </div>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                  <Button\r\n                    onClick={() => setModalCentered(false)}\r\n                    variant=\"danger light\"\r\n                  >\r\n                    {t(\"close\")}\r\n                  </Button>\r\n                  <Button variant=\"primary\" type=\"submit\">\r\n                    {t(\"save\")}{\" \"}\r\n                  </Button>\r\n                </Modal.Footer>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n        </Modal>\r\n      </Fragment>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Variants;\r\n","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Variants\\NewGrid.js",["511","512","513","514","515","516","517","518","519","520","521","522","523","524","525","526","527","528","529","530","531","532","533","534","535","536","537","538","539","540","541","542","543","544","545"],"import React, { Fragment, useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport axios from \"axios\";\r\nimport { base_url, port } from \"../../../Consts\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Tooltip from \"@mui/material/Tooltip\";\r\nimport swal from \"sweetalert\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport CustomAlert from \"../CustomAlert\";\r\n\r\nconst NewGrid = (props) => {\r\n  const { t } = useTranslation();\r\n\r\n  const { numberOfVar, productid, tags, setNumberOfVar } = props;\r\n  // alert\r\n  const [alert, setAlert] = useState({\r\n    open: false,\r\n    severity: \"success\",\r\n    message: \"\",\r\n  });\r\n  const setAlerts = (open, severity, message) => {\r\n    setAlert({\r\n      open: open,\r\n      severity: severity,\r\n      message: message,\r\n    });\r\n  };\r\n  const saveVaraiants = async () => {\r\n    let check = true;\r\n    numberOfVar.map((vars) => {\r\n      if (\r\n        vars.price < 0 ||\r\n        vars.stock < 0 ||\r\n        vars.stock == \"\" ||\r\n        vars.price == \"\"\r\n      ) {\r\n        check = false;\r\n      }\r\n    });\r\n    if (check) {\r\n      const formdata = new FormData();\r\n      formdata.append(\"product_id\", productid);\r\n      formdata.append(\"vars\", JSON.stringify(numberOfVar));\r\n      formdata.append(\"tags\", JSON.stringify(tags));\r\n      const res = await axios({\r\n        method: \"post\",\r\n        data: formdata,\r\n        url: \"/api/saveVars\",\r\n      });\r\n      if (res.data.status === 200) {\r\n        setAlerts(true, \"success\", res.data.message);\r\n      } else {\r\n        swal(\"error\", res.data.message, \"success\");\r\n      }\r\n    } else {\r\n      setAlerts(true, \"error\", \"Data Not Saved Please check the inputs\");\r\n    }\r\n  };\r\n  const Change = (event, item, index) => {\r\n    if (event.target.name == \"image\") {\r\n      uploadImage(event, index);\r\n    } else {\r\n      setNumberOfVar((prev) => {\r\n        return prev.map((item, i) => {\r\n          if (i !== index) {\r\n            return item;\r\n          }\r\n          return {\r\n            ...item,\r\n            [event.target.name]: event.target.value,\r\n          };\r\n        });\r\n      });\r\n    }\r\n  };\r\n  const uploadImage = (event, index) => {\r\n    const val = numberOfVar.filter((item, i) => {\r\n      if (i === index) {\r\n        return item;\r\n      }\r\n    });\r\n    const formData = new FormData();\r\n    for (let i = 0; i < event.target.files.length; i++) {\r\n      formData.append(\"file[]\", event.target.files[i]);\r\n    }\r\n    const images = [];\r\n    axios.post(\"/api/uploadImage\", formData).then((res) => {\r\n      if (res.data.status === 200) {\r\n        val[0].image.map((item) => {\r\n          images.push(item);\r\n        });\r\n        res.data.filenames.map((item) => {\r\n          images.push(item);\r\n        });\r\n        setNumberOfVar((prev) => {\r\n          return prev.map((item, i) => {\r\n            if (i !== index) {\r\n              return item;\r\n            }\r\n            return {\r\n              ...item,\r\n              image: images,\r\n            };\r\n          });\r\n        });\r\n      }\r\n    });\r\n  };\r\n  const removeImage = (e, image, index) => {\r\n    e.preventDefault();\r\n    if (index < numberOfVar.length) {\r\n      const imagesArray = numberOfVar.filter((item, i) => {\r\n        if (i === index) {\r\n          return item;\r\n        }\r\n      });\r\n      axios.post(`/api/removeImage/${image}`).then((res) => {\r\n        if (res.data.status === 200) {\r\n          setNumberOfVar((prev) => {\r\n            return prev.map((item, i) => {\r\n              if (i !== index) {\r\n                return item;\r\n              }\r\n              return {\r\n                ...item,\r\n                image: imagesArray[0].image.filter((item) => item !== image),\r\n              };\r\n            });\r\n          });\r\n        }\r\n      });\r\n    } else {\r\n      console.log(index);\r\n    }\r\n  };\r\n\r\n  const outputs = [];\r\n  let i = 0;\r\n\r\n  numberOfVar.map((item, x) => {\r\n    for (const [key, value] of Object.entries(item)) {\r\n      i++;\r\n      if (key == \"sku\" || key == \"price\" || key == \"stock\" || key == \"image\") {\r\n        outputs.push(\r\n          <div\r\n            className={`col-xl-${\r\n              key == \"sku\" || key == \"image\" ? 3 : 2\r\n            } col-lg-${key == \"sku\" || key == \"image\" ? 3 : 2} col-sm-${\r\n              key == \"sku\" || key == \"image\" ? 3 : 2\r\n            } my-2  `}\r\n            key={i}\r\n          >\r\n            <input\r\n              className={\r\n                key == \"price\" || key == \"stock\"\r\n                  ? value < 0 || value == \"\"\r\n                    ? \" form-control is-invalid\"\r\n                    : \"form-control\"\r\n                  : \"form-control\"\r\n              }\r\n              disabled={key == \"sku\"}\r\n              value={\r\n                key == \"image\"\r\n                  ? \"\"\r\n                  : // : key == \"price\" || key == \"stock\"\r\n                    // ? value == \"\"\r\n                    //   ? 0\r\n                    //   : value\r\n                    value\r\n              }\r\n              // onBlur={(event) => {\r\n              //   changeSku(event);\r\n              // }}\r\n              onChange={(event) => Change(event, item, x)}\r\n              name={key}\r\n              type={key == \"image\" ? \"file\" : key == \"sku\" ? \"text\" : \"number\"}\r\n              min=\"0\"\r\n              multiple\r\n            ></input>\r\n            {key == \"price\" || key == \"stock\" ? (\r\n              value < 0 || value == \"\" ? (\r\n                <div className=\"invalid-feedback\">\r\n                  Please Enter Positive Number\r\n                </div>\r\n              ) : null\r\n            ) : null}\r\n          </div>\r\n        );\r\n      } else if (key == \"postion\") {\r\n        outputs.push(\r\n          <div className={`col-xl-2 col-lg-2 col-sm-2 col-md-2`} key={i}>\r\n            <Tooltip title=\"Delete\">\r\n              <IconButton onClick={(e) => removeVar(e, value)}>\r\n                {/* {value} */}\r\n                <DeleteIcon sx={{ color: \"red\" }} />\r\n              </IconButton>\r\n            </Tooltip>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n    if (item.image.length != 0) {\r\n      outputs.push(\r\n        <div className=\"col-xl-12 col-lg-12 col-sm-12 \" key={i}>\r\n          <div className=\"row\">\r\n            {item.image?.map((photo, indexOfImage) => {\r\n              return (\r\n                <div className=\"col-xl-2 col-lg-2 col-sm-2\" key={photo}>\r\n                  <div className=\"card \">\r\n                    <div className=\"text-center\">\r\n                      <img\r\n                        className=\"w-100\"\r\n                        src={`http://${base_url}:${port}/images/variants_pics/${photo}`}\r\n                        alt=\"\"\r\n                        style={{\r\n                          // width: \"100px\",\r\n                          height: \"100px\",\r\n                          objectFit: \"contain\",\r\n                        }}\r\n                      />\r\n                    </div>\r\n\r\n                    <div className=\"card-footer pt-0 pb-0 text-center\">\r\n                      <div className=\"row\">\r\n                        <Tooltip title=\"Delete\">\r\n                          <IconButton\r\n                            onClick={(e) =>\r\n                              removeImage(e, photo, x, indexOfImage)\r\n                            }\r\n                          >\r\n                            <DeleteIcon fontSize=\"small\" />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  });\r\n\r\n  const removeVar = (e, val) => {\r\n    e.preventDefault();\r\n    let count = -1;\r\n    setNumberOfVar((prevState) =>\r\n      prevState\r\n        .filter((item) => {\r\n          return item.postion != val;\r\n        })\r\n        .map((item) => {\r\n          count = count + 1;\r\n          return {\r\n            ...item,\r\n            postion: count,\r\n          };\r\n        })\r\n    );\r\n  };\r\n  return (\r\n    <Fragment>\r\n      {alert.open ? (\r\n        <CustomAlert\r\n          open={alert.open}\r\n          severity={alert.severity}\r\n          message={alert.message}\r\n          setAlert={setAlert}\r\n        />\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <div className=\"card-header font-weight-bold\">\r\n        <div className=\"col-md-2\">{t(\"actions\")}</div>\r\n        <div className=\"col-md-3\">{t(\"sku\")}</div>\r\n        <div className=\"col-md-2\">{t(\"price\")}</div>\r\n        <div className=\"col-md-2\">{t(\"stock\")}</div>\r\n        <div className=\"col-md-3\">{t(\"image\")}</div>\r\n      </div>\r\n      <div className={`card-body ${numberOfVar.length == 0 ? \"d-none\" : \"\"}`}>\r\n        <div className=\"row\">{outputs}</div>\r\n      </div>\r\n\r\n      <div className={`card-footer ${numberOfVar.length == 0 ? \"d-none\" : \"\"}`}>\r\n        <Button\r\n          onClick={saveVaraiants}\r\n          disabled={numberOfVar.length == 0 ? \"disabled\" : \"\"}\r\n        >\r\n          {\" \"}\r\n          Save Variants\r\n        </Button>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\nexport default NewGrid;\r\n","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\Header.js",[],"D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\First\\Header.js",["546","547"],"import React, { useState } from \"react\";\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport axios from \"axios\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\nimport ArrowBackIosIcon from \"@mui/icons-material/ArrowBackIos\";\r\nfunction Header(props) {\r\n  const history = useHistory();\r\n  const { t } = useTranslation();\r\n\r\n  const {\r\n    title,\r\n    subcategories,\r\n    activeSubCategory,\r\n    setProducts,\r\n    setActiveSubCategory,\r\n  } = props;\r\n  // console.log(subcategories);\r\n\r\n  const filterProducts = (subCateID) => {\r\n    axios.get(`/api/GetProductsBasedOnSubCategory/${subCateID}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        // console.log(res.data.data);\r\n        setProducts(res.data.data);\r\n      }\r\n    });\r\n    setActiveSubCategory(subCateID);\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <Toolbar\r\n        sx={{ borderBottom: 1, borderColor: \"divider\", position: \"sticky\" }}\r\n        className=\"top-0 \"\r\n      >\r\n        <IconButton onClick={() => history.goBack()}>\r\n          <ArrowBackIosIcon />\r\n        </IconButton>\r\n        <Typography\r\n          component=\"h2\"\r\n          variant=\"h6\"\r\n          align=\"center\"\r\n          noWrap\r\n          sx={{ flex: 1 }}\r\n        >\r\n          {title}\r\n        </Typography>\r\n        <IconButton>\r\n          <SearchIcon />\r\n        </IconButton>\r\n      </Toolbar>\r\n\r\n      {subcategories === 0 ? (\r\n        \" \"\r\n      ) : (\r\n        <div>\r\n          <Toolbar\r\n            component=\"nav\"\r\n            variant=\"dense\"\r\n            className=\"border mb-2\"\r\n            sx={{ justifyContent: \"space-between\", overflowX: \"auto\" }}\r\n          >\r\n            {subcategories?.map((section, i) => (\r\n              <div\r\n                style={\r\n                  activeSubCategory === section.sub_id\r\n                    ? {\r\n                        cursor: \"pointer\",\r\n                        background: \"black\",\r\n                        margin: \"2px\",\r\n                        padding: \"5px\",\r\n                        border: \"1px solid\",\r\n                        textAlign: \"center\",\r\n                        borderRadius: \"10px\",\r\n                        color: \"#fff\",\r\n                      }\r\n                    : {\r\n                        cursor: \"pointer\",\r\n                        color: \"black\",\r\n                        margin: \"2px\",\r\n                        padding: \"5px\",\r\n                        textAlign: \"center\",\r\n                        borderRadius: \"10px\",\r\n                      }\r\n                }\r\n                key={i}\r\n                underline=\"hover\"\r\n                variant=\"body2\"\r\n                sx={{ p: 1, flexShrink: 0, cursor: \"pointer\" }}\r\n                onClick={() => filterProducts(section.sub_id)}\r\n              >\r\n                {section.SubCategoryName}\r\n              </div>\r\n            ))}\r\n          </Toolbar>\r\n        </div>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\First\\Footer.js",[],"D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\Footer.js",["548","549"],"import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Box from \"@mui/material/Box\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport getSymbolFromCurrency from \"currency-symbol-map\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport Cart from \"./Cart\";\r\nfunction Footer(props) {\r\n  const {\r\n    title,\r\n    url,\r\n    theme,\r\n    stock,\r\n    cart,\r\n    branchId,\r\n    setCart,\r\n    deliveryFees,\r\n    branch,\r\n  } = props;\r\n  const { t } = useTranslation();\r\n\r\n  let [sum, setSum] = useState(0);\r\n  const dataLoad = () => {\r\n    let count = 0;\r\n    cart.map(\r\n      (item) =>\r\n        (count +=\r\n          item.totalPrice === undefined\r\n            ? item.price * item.qty\r\n            : parseInt(item.totalPrice) + item.price * (item.qty - 1))\r\n    );\r\n    setSum(count);\r\n  };\r\n  useEffect(() => {\r\n    let unmounted = false;\r\n    dataLoad();\r\n    return () => {\r\n      unmounted = true;\r\n    };\r\n  }, [cart]);\r\n  const [modalCentered, setModalCentered] = useState(false);\r\n\r\n  const buttonStyle = {\r\n    textTransform: \"capitalize\",\r\n    backgroundColor: theme?.button_background_color\r\n      ? theme.button_background_color\r\n      : \"#ff751d\",\r\n    color: theme?.button_text_color ? theme.button_text_color : \"#f1fcfe\",\r\n    fontSize: theme?.bTextSize ? theme.bTextSize + \"rem\" : \"1rem\",\r\n  };\r\n  return (\r\n    <>\r\n      <Box\r\n        component=\"footer\"\r\n        style={{ position: \"fixed\" }}\r\n        sx={{\r\n          bgcolor: theme?.cardBgColor ? theme.cardBgColor : \"#2d3134\",\r\n          position: \"sticky\",\r\n          bottom: 0,\r\n          width: \"100%\",\r\n        }}\r\n        className=\"bottom-0 mt-5\"\r\n      >\r\n        <Grid container spacing={2} className=\"text-center\">\r\n          <Grid item xs={6} lg={4} xl={4} sm={4} md={4}>\r\n            <Typography variant=\"subtitle1\">\r\n              Sub Total\r\n              <p>\r\n                {sum.toFixed(2) +\r\n                  \"  \" +\r\n                  (getSymbolFromCurrency(cart[0]?.currency_code) === undefined\r\n                    ? \" \"\r\n                    : getSymbolFromCurrency(cart[0]?.currency_code))}\r\n              </p>\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={6} lg={4} xl={4} sm={4} md={4}>\r\n            <Typography variant=\"subtitle1\">\r\n              Delivery Fee\r\n              <p>\r\n                {deliveryFees.toFixed(2) +\r\n                  \"  \" +\r\n                  (getSymbolFromCurrency(cart[0]?.currency_code) === undefined\r\n                    ? \" \"\r\n                    : getSymbolFromCurrency(cart[0]?.currency_code))}\r\n              </p>\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={12} lg={4} xl={4} sm={4} md={4}>\r\n            {url !== undefined ? (\r\n              <Link\r\n                className={`col-12 btn ${\r\n                  stock === \"No Stock\" || stock === 0 ? \"disabled\" : \"\"\r\n                } `}\r\n                style={buttonStyle}\r\n                to={url}\r\n              >\r\n                {title}\r\n              </Link>\r\n            ) : (\r\n              <button\r\n                className=\"col-12 btn\"\r\n                onClick={() => setModalCentered(true)}\r\n                style={buttonStyle}\r\n              >\r\n                {title}\r\n              </button>\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n\r\n      <Modal\r\n        className=\"fade bd-example-modal-lg\"\r\n        size=\"lg\"\r\n        show={modalCentered}\r\n        onHide={() => setModalCentered(false)}\r\n      >\r\n        <Modal.Header\r\n          style={{\r\n            backgroundColor: theme?.bgColor ? theme.bgColor : \"#22252a\",\r\n            borderColor: theme?.cardBgColor ? theme.cardBgColor : \"#2d3134\",\r\n          }}\r\n        >\r\n          <Modal.Title>\r\n            <Typography variant=\"h6\">{t(\"order_details\")}</Typography>\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body\r\n          style={{\r\n            backgroundColor: theme?.bgColor ? theme.bgColor : \"#22252a\",\r\n          }}\r\n        >\r\n          <Cart\r\n            custom={theme}\r\n            checkBit={true}\r\n            branch={branch}\r\n            cart={cart}\r\n            setCart={setCart}\r\n            deliveryFees={deliveryFees}\r\n            branchId={branchId}\r\n          />\r\n        </Modal.Body>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nFooter.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Footer;\r\n","D:\\fineDine\\codes\\last version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\Counter.js",[],{"ruleId":"550","replacedBy":"551"},{"ruleId":"552","replacedBy":"553"},{"ruleId":"554","severity":1,"message":"555","line":49,"column":19,"nodeType":"556","endLine":49,"endColumn":49},{"ruleId":"557","severity":1,"message":"558","line":63,"column":21,"nodeType":"559","messageId":"560","endLine":63,"endColumn":23},{"ruleId":"557","severity":1,"message":"558","line":70,"column":13,"nodeType":"559","messageId":"560","endLine":70,"endColumn":15},{"ruleId":"557","severity":1,"message":"558","line":78,"column":43,"nodeType":"559","messageId":"560","endLine":78,"endColumn":45},{"ruleId":"557","severity":1,"message":"558","line":106,"column":46,"nodeType":"559","messageId":"560","endLine":106,"endColumn":48},{"ruleId":"557","severity":1,"message":"561","line":116,"column":24,"nodeType":"559","messageId":"560","endLine":116,"endColumn":26},{"ruleId":"562","severity":1,"message":"563","line":120,"column":38,"nodeType":"564","messageId":"565","endLine":120,"endColumn":40},{"ruleId":"566","severity":1,"message":"567","line":154,"column":5,"nodeType":"568","messageId":"560","endLine":154,"endColumn":15},{"ruleId":"569","severity":1,"message":"570","line":156,"column":9,"nodeType":"571","endLine":165,"endColumn":11},{"ruleId":"557","severity":1,"message":"561","line":248,"column":41,"nodeType":"559","messageId":"560","endLine":248,"endColumn":43},{"ruleId":"572","severity":1,"message":"573","line":334,"column":72,"nodeType":"559","messageId":"574","endLine":334,"endColumn":73},{"ruleId":"557","severity":1,"message":"558","line":364,"column":47,"nodeType":"559","messageId":"560","endLine":364,"endColumn":49},{"ruleId":"554","severity":1,"message":"575","line":74,"column":6,"nodeType":"576","endLine":74,"endColumn":8,"suggestions":"577"},{"ruleId":"578","severity":1,"message":"579","line":1,"column":17,"nodeType":"580","messageId":"581","endLine":1,"endColumn":25},{"ruleId":"578","severity":1,"message":"582","line":1,"column":48,"nodeType":"580","messageId":"581","endLine":1,"endColumn":62},{"ruleId":"578","severity":1,"message":"583","line":3,"column":10,"nodeType":"580","messageId":"581","endLine":3,"endColumn":14},{"ruleId":"578","severity":1,"message":"584","line":17,"column":8,"nodeType":"580","messageId":"581","endLine":17,"endColumn":19},{"ruleId":"578","severity":1,"message":"585","line":18,"column":8,"nodeType":"580","messageId":"581","endLine":18,"endColumn":17},{"ruleId":"578","severity":1,"message":"586","line":20,"column":8,"nodeType":"580","messageId":"581","endLine":20,"endColumn":12},{"ruleId":"578","severity":1,"message":"587","line":21,"column":8,"nodeType":"580","messageId":"581","endLine":21,"endColumn":11},{"ruleId":"578","severity":1,"message":"588","line":22,"column":8,"nodeType":"580","messageId":"581","endLine":22,"endColumn":11},{"ruleId":"578","severity":1,"message":"589","line":35,"column":30,"nodeType":"580","messageId":"581","endLine":35,"endColumn":51},{"ruleId":"554","severity":1,"message":"555","line":145,"column":19,"nodeType":"556","endLine":145,"endColumn":49},{"ruleId":"557","severity":1,"message":"558","line":159,"column":21,"nodeType":"559","messageId":"560","endLine":159,"endColumn":23},{"ruleId":"557","severity":1,"message":"558","line":166,"column":13,"nodeType":"559","messageId":"560","endLine":166,"endColumn":15},{"ruleId":"557","severity":1,"message":"558","line":174,"column":43,"nodeType":"559","messageId":"560","endLine":174,"endColumn":45},{"ruleId":"557","severity":1,"message":"558","line":202,"column":46,"nodeType":"559","messageId":"560","endLine":202,"endColumn":48},{"ruleId":"557","severity":1,"message":"561","line":212,"column":24,"nodeType":"559","messageId":"560","endLine":212,"endColumn":26},{"ruleId":"562","severity":1,"message":"563","line":216,"column":38,"nodeType":"564","messageId":"565","endLine":216,"endColumn":40},{"ruleId":"566","severity":1,"message":"567","line":250,"column":5,"nodeType":"568","messageId":"560","endLine":250,"endColumn":15},{"ruleId":"569","severity":1,"message":"570","line":252,"column":9,"nodeType":"571","endLine":261,"endColumn":11},{"ruleId":"557","severity":1,"message":"561","line":351,"column":41,"nodeType":"559","messageId":"560","endLine":351,"endColumn":43},{"ruleId":"572","severity":1,"message":"573","line":446,"column":73,"nodeType":"559","messageId":"574","endLine":446,"endColumn":74},{"ruleId":"557","severity":1,"message":"558","line":478,"column":47,"nodeType":"559","messageId":"560","endLine":478,"endColumn":49},{"ruleId":"578","severity":1,"message":"590","line":86,"column":9,"nodeType":"580","messageId":"581","endLine":86,"endColumn":18},{"ruleId":"554","severity":1,"message":"591","line":91,"column":6,"nodeType":"576","endLine":91,"endColumn":19,"suggestions":"592"},{"ruleId":"557","severity":1,"message":"558","line":197,"column":24,"nodeType":"559","messageId":"560","endLine":197,"endColumn":26},{"ruleId":"557","severity":1,"message":"558","line":207,"column":49,"nodeType":"559","messageId":"560","endLine":207,"endColumn":51},{"ruleId":"557","severity":1,"message":"558","line":209,"column":51,"nodeType":"559","messageId":"560","endLine":209,"endColumn":53},{"ruleId":"557","severity":1,"message":"558","line":211,"column":51,"nodeType":"559","messageId":"560","endLine":211,"endColumn":53},{"ruleId":"557","severity":1,"message":"558","line":213,"column":51,"nodeType":"559","messageId":"560","endLine":213,"endColumn":53},{"ruleId":"557","severity":1,"message":"558","line":214,"column":51,"nodeType":"559","messageId":"560","endLine":214,"endColumn":53},{"ruleId":"557","severity":1,"message":"558","line":216,"column":51,"nodeType":"559","messageId":"560","endLine":216,"endColumn":53},{"ruleId":"557","severity":1,"message":"558","line":223,"column":49,"nodeType":"559","messageId":"560","endLine":223,"endColumn":51},{"ruleId":"557","severity":1,"message":"558","line":225,"column":51,"nodeType":"559","messageId":"560","endLine":225,"endColumn":53},{"ruleId":"557","severity":1,"message":"558","line":227,"column":51,"nodeType":"559","messageId":"560","endLine":227,"endColumn":53},{"ruleId":"557","severity":1,"message":"558","line":229,"column":51,"nodeType":"559","messageId":"560","endLine":229,"endColumn":53},{"ruleId":"557","severity":1,"message":"558","line":230,"column":51,"nodeType":"559","messageId":"560","endLine":230,"endColumn":53},{"ruleId":"557","severity":1,"message":"558","line":232,"column":51,"nodeType":"559","messageId":"560","endLine":232,"endColumn":53},{"ruleId":"557","severity":1,"message":"558","line":239,"column":51,"nodeType":"559","messageId":"560","endLine":239,"endColumn":53},{"ruleId":"557","severity":1,"message":"558","line":241,"column":53,"nodeType":"559","messageId":"560","endLine":241,"endColumn":55},{"ruleId":"557","severity":1,"message":"558","line":243,"column":53,"nodeType":"559","messageId":"560","endLine":243,"endColumn":55},{"ruleId":"557","severity":1,"message":"558","line":245,"column":53,"nodeType":"559","messageId":"560","endLine":245,"endColumn":55},{"ruleId":"557","severity":1,"message":"558","line":246,"column":53,"nodeType":"559","messageId":"560","endLine":246,"endColumn":55},{"ruleId":"557","severity":1,"message":"558","line":248,"column":53,"nodeType":"559","messageId":"560","endLine":248,"endColumn":55},{"ruleId":"593","severity":1,"message":"594","line":301,"column":19,"nodeType":"571","endLine":312,"endColumn":21},{"ruleId":"554","severity":1,"message":"555","line":106,"column":19,"nodeType":"556","endLine":106,"endColumn":58},{"ruleId":"557","severity":1,"message":"558","line":122,"column":21,"nodeType":"559","messageId":"560","endLine":122,"endColumn":23},{"ruleId":"557","severity":1,"message":"558","line":130,"column":13,"nodeType":"559","messageId":"560","endLine":130,"endColumn":15},{"ruleId":"557","severity":1,"message":"558","line":138,"column":43,"nodeType":"559","messageId":"560","endLine":138,"endColumn":45},{"ruleId":"562","severity":1,"message":"563","line":164,"column":29,"nodeType":"564","messageId":"565","endLine":164,"endColumn":31},{"ruleId":"562","severity":1,"message":"563","line":165,"column":38,"nodeType":"564","messageId":"565","endLine":165,"endColumn":40},{"ruleId":"557","severity":1,"message":"558","line":186,"column":46,"nodeType":"559","messageId":"560","endLine":186,"endColumn":48},{"ruleId":"557","severity":1,"message":"561","line":196,"column":24,"nodeType":"559","messageId":"560","endLine":196,"endColumn":26},{"ruleId":"562","severity":1,"message":"563","line":200,"column":38,"nodeType":"564","messageId":"565","endLine":200,"endColumn":40},{"ruleId":"557","severity":1,"message":"561","line":232,"column":60,"nodeType":"559","messageId":"560","endLine":232,"endColumn":62},{"ruleId":"557","severity":1,"message":"561","line":259,"column":32,"nodeType":"559","messageId":"560","endLine":259,"endColumn":34},{"ruleId":"572","severity":1,"message":"573","line":559,"column":72,"nodeType":"559","messageId":"574","endLine":559,"endColumn":73},{"ruleId":"572","severity":1,"message":"573","line":565,"column":71,"nodeType":"559","messageId":"574","endLine":565,"endColumn":72},{"ruleId":"557","severity":1,"message":"558","line":608,"column":49,"nodeType":"559","messageId":"560","endLine":608,"endColumn":51},{"ruleId":"595","severity":1,"message":"596","line":673,"column":9,"nodeType":"597","messageId":"598","endLine":673,"endColumn":23},{"ruleId":"578","severity":1,"message":"599","line":73,"column":9,"nodeType":"580","messageId":"581","endLine":73,"endColumn":17},{"ruleId":"562","severity":1,"message":"563","line":99,"column":54,"nodeType":"564","messageId":"565","endLine":99,"endColumn":56},{"ruleId":"557","severity":1,"message":"558","line":122,"column":14,"nodeType":"559","messageId":"560","endLine":122,"endColumn":16},{"ruleId":"557","severity":1,"message":"558","line":129,"column":14,"nodeType":"559","messageId":"560","endLine":129,"endColumn":16},{"ruleId":"557","severity":1,"message":"558","line":140,"column":14,"nodeType":"559","messageId":"560","endLine":140,"endColumn":16},{"ruleId":"557","severity":1,"message":"558","line":153,"column":14,"nodeType":"559","messageId":"560","endLine":153,"endColumn":16},{"ruleId":"557","severity":1,"message":"558","line":439,"column":46,"nodeType":"559","messageId":"560","endLine":439,"endColumn":48},{"ruleId":"557","severity":1,"message":"558","line":448,"column":45,"nodeType":"559","messageId":"560","endLine":448,"endColumn":47},{"ruleId":"557","severity":1,"message":"558","line":455,"column":48,"nodeType":"559","messageId":"560","endLine":455,"endColumn":50},{"ruleId":"578","severity":1,"message":"585","line":8,"column":8,"nodeType":"580","messageId":"581","endLine":8,"endColumn":17},{"ruleId":"578","severity":1,"message":"600","line":18,"column":8,"nodeType":"580","messageId":"581","endLine":18,"endColumn":29},{"ruleId":"578","severity":1,"message":"601","line":20,"column":5,"nodeType":"580","messageId":"581","endLine":20,"endColumn":9},{"ruleId":"578","severity":1,"message":"602","line":32,"column":10,"nodeType":"580","messageId":"581","endLine":32,"endColumn":18},{"ruleId":"578","severity":1,"message":"603","line":32,"column":20,"nodeType":"580","messageId":"581","endLine":32,"endColumn":31},{"ruleId":"554","severity":1,"message":"575","line":58,"column":6,"nodeType":"576","endLine":58,"endColumn":8,"suggestions":"604"},{"ruleId":"569","severity":1,"message":"570","line":198,"column":17,"nodeType":"571","endLine":207,"endColumn":19},{"ruleId":"557","severity":1,"message":"558","line":273,"column":38,"nodeType":"559","messageId":"560","endLine":273,"endColumn":40},{"ruleId":"569","severity":1,"message":"570","line":293,"column":23,"nodeType":"571","endLine":300,"endColumn":25},{"ruleId":"557","severity":1,"message":"558","line":305,"column":42,"nodeType":"559","messageId":"560","endLine":305,"endColumn":44},{"ruleId":"578","severity":1,"message":"605","line":7,"column":8,"nodeType":"580","messageId":"581","endLine":7,"endColumn":14},{"ruleId":"578","severity":1,"message":"606","line":25,"column":10,"nodeType":"580","messageId":"581","endLine":25,"endColumn":20},{"ruleId":"554","severity":1,"message":"575","line":66,"column":6,"nodeType":"576","endLine":66,"endColumn":8,"suggestions":"607"},{"ruleId":"557","severity":1,"message":"558","line":197,"column":64,"nodeType":"559","messageId":"560","endLine":197,"endColumn":66},{"ruleId":"557","severity":1,"message":"558","line":199,"column":68,"nodeType":"559","messageId":"560","endLine":199,"endColumn":70},{"ruleId":"557","severity":1,"message":"558","line":201,"column":68,"nodeType":"559","messageId":"560","endLine":201,"endColumn":70},{"ruleId":"557","severity":1,"message":"558","line":203,"column":68,"nodeType":"559","messageId":"560","endLine":203,"endColumn":70},{"ruleId":"557","severity":1,"message":"558","line":205,"column":68,"nodeType":"559","messageId":"560","endLine":205,"endColumn":70},{"ruleId":"557","severity":1,"message":"558","line":207,"column":68,"nodeType":"559","messageId":"560","endLine":207,"endColumn":70},{"ruleId":"578","severity":1,"message":"589","line":25,"column":30,"nodeType":"580","messageId":"581","endLine":25,"endColumn":51},{"ruleId":"554","severity":1,"message":"608","line":35,"column":6,"nodeType":"576","endLine":35,"endColumn":8,"suggestions":"609"},{"ruleId":"578","severity":1,"message":"579","line":1,"column":17,"nodeType":"580","messageId":"581","endLine":1,"endColumn":25},{"ruleId":"578","severity":1,"message":"582","line":1,"column":48,"nodeType":"580","messageId":"581","endLine":1,"endColumn":62},{"ruleId":"578","severity":1,"message":"583","line":3,"column":10,"nodeType":"580","messageId":"581","endLine":3,"endColumn":14},{"ruleId":"578","severity":1,"message":"605","line":8,"column":8,"nodeType":"580","messageId":"581","endLine":8,"endColumn":14},{"ruleId":"578","severity":1,"message":"584","line":17,"column":8,"nodeType":"580","messageId":"581","endLine":17,"endColumn":19},{"ruleId":"578","severity":1,"message":"585","line":18,"column":8,"nodeType":"580","messageId":"581","endLine":18,"endColumn":17},{"ruleId":"578","severity":1,"message":"586","line":20,"column":8,"nodeType":"580","messageId":"581","endLine":20,"endColumn":12},{"ruleId":"578","severity":1,"message":"587","line":21,"column":8,"nodeType":"580","messageId":"581","endLine":21,"endColumn":11},{"ruleId":"578","severity":1,"message":"588","line":22,"column":8,"nodeType":"580","messageId":"581","endLine":22,"endColumn":11},{"ruleId":"578","severity":1,"message":"589","line":35,"column":30,"nodeType":"580","messageId":"581","endLine":35,"endColumn":51},{"ruleId":"554","severity":1,"message":"555","line":145,"column":19,"nodeType":"556","endLine":145,"endColumn":49},{"ruleId":"557","severity":1,"message":"558","line":159,"column":21,"nodeType":"559","messageId":"560","endLine":159,"endColumn":23},{"ruleId":"557","severity":1,"message":"558","line":166,"column":13,"nodeType":"559","messageId":"560","endLine":166,"endColumn":15},{"ruleId":"557","severity":1,"message":"558","line":174,"column":43,"nodeType":"559","messageId":"560","endLine":174,"endColumn":45},{"ruleId":"557","severity":1,"message":"558","line":202,"column":46,"nodeType":"559","messageId":"560","endLine":202,"endColumn":48},{"ruleId":"557","severity":1,"message":"561","line":212,"column":24,"nodeType":"559","messageId":"560","endLine":212,"endColumn":26},{"ruleId":"562","severity":1,"message":"563","line":216,"column":38,"nodeType":"564","messageId":"565","endLine":216,"endColumn":40},{"ruleId":"566","severity":1,"message":"567","line":250,"column":5,"nodeType":"568","messageId":"560","endLine":250,"endColumn":15},{"ruleId":"569","severity":1,"message":"570","line":252,"column":9,"nodeType":"571","endLine":261,"endColumn":11},{"ruleId":"557","severity":1,"message":"561","line":351,"column":41,"nodeType":"559","messageId":"560","endLine":351,"endColumn":43},{"ruleId":"572","severity":1,"message":"573","line":446,"column":73,"nodeType":"559","messageId":"574","endLine":446,"endColumn":74},{"ruleId":"557","severity":1,"message":"558","line":478,"column":47,"nodeType":"559","messageId":"560","endLine":478,"endColumn":49},{"ruleId":"578","severity":1,"message":"589","line":27,"column":30,"nodeType":"580","messageId":"581","endLine":27,"endColumn":51},{"ruleId":"554","severity":1,"message":"555","line":137,"column":19,"nodeType":"556","endLine":137,"endColumn":49},{"ruleId":"557","severity":1,"message":"558","line":151,"column":21,"nodeType":"559","messageId":"560","endLine":151,"endColumn":23},{"ruleId":"557","severity":1,"message":"558","line":158,"column":13,"nodeType":"559","messageId":"560","endLine":158,"endColumn":15},{"ruleId":"557","severity":1,"message":"558","line":166,"column":43,"nodeType":"559","messageId":"560","endLine":166,"endColumn":45},{"ruleId":"557","severity":1,"message":"558","line":194,"column":46,"nodeType":"559","messageId":"560","endLine":194,"endColumn":48},{"ruleId":"557","severity":1,"message":"561","line":204,"column":24,"nodeType":"559","messageId":"560","endLine":204,"endColumn":26},{"ruleId":"562","severity":1,"message":"563","line":208,"column":38,"nodeType":"564","messageId":"565","endLine":208,"endColumn":40},{"ruleId":"566","severity":1,"message":"567","line":242,"column":5,"nodeType":"568","messageId":"560","endLine":242,"endColumn":15},{"ruleId":"569","severity":1,"message":"570","line":244,"column":9,"nodeType":"571","endLine":253,"endColumn":11},{"ruleId":"557","severity":1,"message":"561","line":343,"column":41,"nodeType":"559","messageId":"560","endLine":343,"endColumn":43},{"ruleId":"572","severity":1,"message":"573","line":438,"column":73,"nodeType":"559","messageId":"574","endLine":438,"endColumn":74},{"ruleId":"557","severity":1,"message":"558","line":470,"column":47,"nodeType":"559","messageId":"560","endLine":470,"endColumn":49},{"ruleId":"578","severity":1,"message":"590","line":125,"column":9,"nodeType":"580","messageId":"581","endLine":125,"endColumn":18},{"ruleId":"554","severity":1,"message":"591","line":130,"column":6,"nodeType":"576","endLine":130,"endColumn":8,"suggestions":"610"},{"ruleId":"593","severity":1,"message":"594","line":388,"column":17,"nodeType":"571","endLine":400,"endColumn":19},{"ruleId":"578","severity":1,"message":"611","line":6,"column":8,"nodeType":"580","messageId":"581","endLine":6,"endColumn":14},{"ruleId":"578","severity":1,"message":"605","line":7,"column":8,"nodeType":"580","messageId":"581","endLine":7,"endColumn":14},{"ruleId":"578","severity":1,"message":"601","line":23,"column":5,"nodeType":"580","messageId":"581","endLine":23,"endColumn":9},{"ruleId":"554","severity":1,"message":"575","line":64,"column":6,"nodeType":"576","endLine":64,"endColumn":8,"suggestions":"612"},{"ruleId":"557","severity":1,"message":"558","line":286,"column":43,"nodeType":"559","messageId":"560","endLine":286,"endColumn":45},{"ruleId":"569","severity":1,"message":"570","line":306,"column":25,"nodeType":"571","endLine":313,"endColumn":27},{"ruleId":"557","severity":1,"message":"558","line":318,"column":47,"nodeType":"559","messageId":"560","endLine":318,"endColumn":49},{"ruleId":"578","severity":1,"message":"590","line":52,"column":9,"nodeType":"580","messageId":"581","endLine":52,"endColumn":18},{"ruleId":"554","severity":1,"message":"591","line":57,"column":6,"nodeType":"576","endLine":57,"endColumn":13,"suggestions":"613"},{"ruleId":"593","severity":1,"message":"594","line":110,"column":17,"nodeType":"571","endLine":122,"endColumn":19},{"ruleId":"595","severity":1,"message":"596","line":154,"column":33,"nodeType":"597","messageId":"598","endLine":154,"endColumn":40},{"ruleId":"557","severity":1,"message":"558","line":172,"column":47,"nodeType":"559","messageId":"560","endLine":172,"endColumn":49},{"ruleId":"562","severity":1,"message":"614","line":184,"column":58,"nodeType":"564","messageId":"615","endLine":184,"endColumn":60},{"ruleId":"578","severity":1,"message":"616","line":5,"column":10,"nodeType":"580","messageId":"581","endLine":5,"endColumn":18},{"ruleId":"578","severity":1,"message":"617","line":5,"column":20,"nodeType":"580","messageId":"581","endLine":5,"endColumn":24},{"ruleId":"578","severity":1,"message":"590","line":25,"column":9,"nodeType":"580","messageId":"581","endLine":25,"endColumn":18},{"ruleId":"554","severity":1,"message":"591","line":147,"column":6,"nodeType":"576","endLine":147,"endColumn":13,"suggestions":"618"},{"ruleId":"578","severity":1,"message":"619","line":110,"column":17,"nodeType":"580","messageId":"581","endLine":110,"endColumn":20},{"ruleId":"554","severity":1,"message":"591","line":154,"column":6,"nodeType":"576","endLine":154,"endColumn":13,"suggestions":"620"},{"ruleId":"557","severity":1,"message":"558","line":166,"column":22,"nodeType":"559","messageId":"560","endLine":166,"endColumn":24},{"ruleId":"578","severity":1,"message":"621","line":197,"column":10,"nodeType":"580","messageId":"581","endLine":197,"endColumn":20},{"ruleId":"578","severity":1,"message":"622","line":198,"column":10,"nodeType":"580","messageId":"581","endLine":198,"endColumn":23},{"ruleId":"578","severity":1,"message":"623","line":207,"column":9,"nodeType":"580","messageId":"581","endLine":207,"endColumn":21},{"ruleId":"578","severity":1,"message":"599","line":32,"column":9,"nodeType":"580","messageId":"581","endLine":32,"endColumn":17},{"ruleId":"578","severity":1,"message":"624","line":76,"column":10,"nodeType":"580","messageId":"581","endLine":76,"endColumn":18},{"ruleId":"578","severity":1,"message":"590","line":88,"column":9,"nodeType":"580","messageId":"581","endLine":88,"endColumn":18},{"ruleId":"554","severity":1,"message":"591","line":93,"column":6,"nodeType":"576","endLine":93,"endColumn":15,"suggestions":"625"},{"ruleId":"554","severity":1,"message":"591","line":207,"column":6,"nodeType":"576","endLine":207,"endColumn":13,"suggestions":"626"},{"ruleId":"554","severity":1,"message":"591","line":159,"column":6,"nodeType":"576","endLine":159,"endColumn":13,"suggestions":"627"},{"ruleId":"554","severity":1,"message":"628","line":29,"column":6,"nodeType":"576","endLine":29,"endColumn":8,"suggestions":"629"},{"ruleId":"630","severity":1,"message":"631","line":120,"column":17,"nodeType":"571","endLine":125,"endColumn":18},{"ruleId":"554","severity":1,"message":"632","line":73,"column":6,"nodeType":"576","endLine":73,"endColumn":15,"suggestions":"633"},{"ruleId":"578","severity":1,"message":"634","line":20,"column":11,"nodeType":"580","messageId":"581","endLine":20,"endColumn":15},{"ruleId":"578","severity":1,"message":"635","line":20,"column":17,"nodeType":"580","messageId":"581","endLine":20,"endColumn":20},{"ruleId":"557","severity":1,"message":"558","line":128,"column":19,"nodeType":"559","messageId":"560","endLine":128,"endColumn":21},{"ruleId":"554","severity":1,"message":"591","line":177,"column":6,"nodeType":"576","endLine":177,"endColumn":13,"suggestions":"636"},{"ruleId":"557","severity":1,"message":"558","line":182,"column":49,"nodeType":"559","messageId":"560","endLine":182,"endColumn":51},{"ruleId":"562","severity":1,"message":"563","line":200,"column":50,"nodeType":"564","messageId":"565","endLine":200,"endColumn":52},{"ruleId":"562","severity":1,"message":"563","line":203,"column":39,"nodeType":"564","messageId":"565","endLine":203,"endColumn":41},{"ruleId":"578","severity":1,"message":"637","line":1,"column":27,"nodeType":"580","messageId":"581","endLine":1,"endColumn":36},{"ruleId":"554","severity":1,"message":"591","line":140,"column":6,"nodeType":"576","endLine":140,"endColumn":13,"suggestions":"638"},{"ruleId":"578","severity":1,"message":"639","line":40,"column":10,"nodeType":"580","messageId":"581","endLine":40,"endColumn":15},{"ruleId":"578","severity":1,"message":"623","line":44,"column":9,"nodeType":"580","messageId":"581","endLine":44,"endColumn":21},{"ruleId":"595","severity":1,"message":"596","line":450,"column":29,"nodeType":"597","messageId":"598","endLine":450,"endColumn":51},{"ruleId":"578","severity":1,"message":"634","line":20,"column":11,"nodeType":"580","messageId":"581","endLine":20,"endColumn":15},{"ruleId":"554","severity":1,"message":"591","line":69,"column":6,"nodeType":"576","endLine":69,"endColumn":13,"suggestions":"640"},{"ruleId":"572","severity":1,"message":"573","line":176,"column":74,"nodeType":"559","messageId":"574","endLine":176,"endColumn":75},{"ruleId":"562","severity":1,"message":"563","line":82,"column":32,"nodeType":"564","messageId":"565","endLine":82,"endColumn":34},{"ruleId":"557","severity":1,"message":"561","line":149,"column":28,"nodeType":"559","messageId":"560","endLine":149,"endColumn":30},{"ruleId":"554","severity":1,"message":"591","line":160,"column":6,"nodeType":"576","endLine":160,"endColumn":13,"suggestions":"641"},{"ruleId":"557","severity":1,"message":"558","line":173,"column":19,"nodeType":"559","messageId":"560","endLine":173,"endColumn":21},{"ruleId":"562","severity":1,"message":"563","line":189,"column":19,"nodeType":"564","messageId":"565","endLine":189,"endColumn":21},{"ruleId":"557","severity":1,"message":"558","line":210,"column":49,"nodeType":"559","messageId":"560","endLine":210,"endColumn":51},{"ruleId":"642","severity":1,"message":"643","line":49,"column":53,"nodeType":"644","messageId":"645","endLine":49,"endColumn":54,"suggestions":"646"},{"ruleId":"562","severity":1,"message":"563","line":60,"column":34,"nodeType":"564","messageId":"565","endLine":60,"endColumn":36},{"ruleId":"557","severity":1,"message":"558","line":67,"column":19,"nodeType":"559","messageId":"560","endLine":67,"endColumn":21},{"ruleId":"557","severity":1,"message":"558","line":68,"column":19,"nodeType":"559","messageId":"560","endLine":68,"endColumn":21},{"ruleId":"557","severity":1,"message":"558","line":69,"column":19,"nodeType":"559","messageId":"560","endLine":69,"endColumn":21},{"ruleId":"557","severity":1,"message":"558","line":70,"column":19,"nodeType":"559","messageId":"560","endLine":70,"endColumn":21},{"ruleId":"557","severity":1,"message":"558","line":71,"column":19,"nodeType":"559","messageId":"560","endLine":71,"endColumn":21},{"ruleId":"554","severity":1,"message":"647","line":99,"column":6,"nodeType":"576","endLine":99,"endColumn":13,"suggestions":"648"},{"ruleId":"557","severity":1,"message":"558","line":101,"column":29,"nodeType":"559","messageId":"560","endLine":101,"endColumn":31},{"ruleId":"557","severity":1,"message":"561","line":103,"column":15,"nodeType":"559","messageId":"560","endLine":103,"endColumn":17},{"ruleId":"562","severity":1,"message":"563","line":119,"column":29,"nodeType":"564","messageId":"565","endLine":119,"endColumn":31},{"ruleId":"557","severity":1,"message":"561","line":121,"column":34,"nodeType":"559","messageId":"560","endLine":121,"endColumn":36},{"ruleId":"578","severity":1,"message":"649","line":144,"column":19,"nodeType":"580","messageId":"581","endLine":144,"endColumn":23},{"ruleId":"557","severity":1,"message":"558","line":145,"column":37,"nodeType":"559","messageId":"560","endLine":145,"endColumn":39},{"ruleId":"557","severity":1,"message":"561","line":152,"column":30,"nodeType":"559","messageId":"560","endLine":152,"endColumn":32},{"ruleId":"557","severity":1,"message":"561","line":154,"column":27,"nodeType":"559","messageId":"560","endLine":154,"endColumn":29},{"ruleId":"557","severity":1,"message":"561","line":205,"column":18,"nodeType":"559","messageId":"560","endLine":205,"endColumn":20},{"ruleId":"557","severity":1,"message":"558","line":208,"column":29,"nodeType":"559","messageId":"560","endLine":208,"endColumn":31},{"ruleId":"562","severity":1,"message":"650","line":216,"column":28,"nodeType":"564","messageId":"615","endLine":216,"endColumn":30},{"ruleId":"557","severity":1,"message":"558","line":239,"column":30,"nodeType":"559","messageId":"560","endLine":239,"endColumn":32},{"ruleId":"562","severity":1,"message":"563","line":240,"column":27,"nodeType":"564","messageId":"565","endLine":240,"endColumn":29},{"ruleId":"557","severity":1,"message":"558","line":381,"column":53,"nodeType":"559","messageId":"560","endLine":381,"endColumn":55},{"ruleId":"557","severity":1,"message":"558","line":386,"column":39,"nodeType":"559","messageId":"560","endLine":386,"endColumn":41},{"ruleId":"557","severity":1,"message":"558","line":413,"column":44,"nodeType":"559","messageId":"560","endLine":413,"endColumn":46},{"ruleId":"557","severity":1,"message":"558","line":431,"column":36,"nodeType":"559","messageId":"560","endLine":431,"endColumn":38},{"ruleId":"562","severity":1,"message":"563","line":31,"column":28,"nodeType":"564","messageId":"565","endLine":31,"endColumn":30},{"ruleId":"557","severity":1,"message":"558","line":35,"column":20,"nodeType":"559","messageId":"560","endLine":35,"endColumn":22},{"ruleId":"557","severity":1,"message":"558","line":36,"column":20,"nodeType":"559","messageId":"560","endLine":36,"endColumn":22},{"ruleId":"557","severity":1,"message":"558","line":61,"column":27,"nodeType":"559","messageId":"560","endLine":61,"endColumn":29},{"ruleId":"562","severity":1,"message":"650","line":78,"column":46,"nodeType":"564","messageId":"615","endLine":78,"endColumn":48},{"ruleId":"562","severity":1,"message":"563","line":90,"column":33,"nodeType":"564","messageId":"565","endLine":90,"endColumn":35},{"ruleId":"562","severity":1,"message":"563","line":93,"column":39,"nodeType":"564","messageId":"565","endLine":93,"endColumn":41},{"ruleId":"562","severity":1,"message":"650","line":113,"column":56,"nodeType":"564","messageId":"615","endLine":113,"endColumn":58},{"ruleId":"562","severity":1,"message":"563","line":141,"column":29,"nodeType":"564","messageId":"565","endLine":141,"endColumn":31},{"ruleId":"557","severity":1,"message":"558","line":144,"column":15,"nodeType":"559","messageId":"560","endLine":144,"endColumn":17},{"ruleId":"557","severity":1,"message":"558","line":144,"column":31,"nodeType":"559","messageId":"560","endLine":144,"endColumn":33},{"ruleId":"557","severity":1,"message":"558","line":144,"column":49,"nodeType":"559","messageId":"560","endLine":144,"endColumn":51},{"ruleId":"557","severity":1,"message":"558","line":144,"column":67,"nodeType":"559","messageId":"560","endLine":144,"endColumn":69},{"ruleId":"557","severity":1,"message":"558","line":148,"column":19,"nodeType":"559","messageId":"560","endLine":148,"endColumn":21},{"ruleId":"557","severity":1,"message":"558","line":148,"column":35,"nodeType":"559","messageId":"560","endLine":148,"endColumn":37},{"ruleId":"557","severity":1,"message":"558","line":149,"column":28,"nodeType":"559","messageId":"560","endLine":149,"endColumn":30},{"ruleId":"557","severity":1,"message":"558","line":149,"column":44,"nodeType":"559","messageId":"560","endLine":149,"endColumn":46},{"ruleId":"557","severity":1,"message":"558","line":150,"column":19,"nodeType":"559","messageId":"560","endLine":150,"endColumn":21},{"ruleId":"557","severity":1,"message":"558","line":150,"column":35,"nodeType":"559","messageId":"560","endLine":150,"endColumn":37},{"ruleId":"557","severity":1,"message":"558","line":156,"column":21,"nodeType":"559","messageId":"560","endLine":156,"endColumn":23},{"ruleId":"557","severity":1,"message":"558","line":156,"column":39,"nodeType":"559","messageId":"560","endLine":156,"endColumn":41},{"ruleId":"557","severity":1,"message":"558","line":157,"column":40,"nodeType":"559","messageId":"560","endLine":157,"endColumn":42},{"ruleId":"557","severity":1,"message":"558","line":162,"column":29,"nodeType":"559","messageId":"560","endLine":162,"endColumn":31},{"ruleId":"557","severity":1,"message":"558","line":164,"column":21,"nodeType":"559","messageId":"560","endLine":164,"endColumn":23},{"ruleId":"557","severity":1,"message":"558","line":177,"column":25,"nodeType":"559","messageId":"560","endLine":177,"endColumn":27},{"ruleId":"557","severity":1,"message":"558","line":177,"column":51,"nodeType":"559","messageId":"560","endLine":177,"endColumn":53},{"ruleId":"557","severity":1,"message":"558","line":181,"column":18,"nodeType":"559","messageId":"560","endLine":181,"endColumn":20},{"ruleId":"557","severity":1,"message":"558","line":181,"column":36,"nodeType":"559","messageId":"560","endLine":181,"endColumn":38},{"ruleId":"557","severity":1,"message":"558","line":182,"column":34,"nodeType":"559","messageId":"560","endLine":182,"endColumn":36},{"ruleId":"557","severity":1,"message":"558","line":190,"column":22,"nodeType":"559","messageId":"560","endLine":190,"endColumn":24},{"ruleId":"557","severity":1,"message":"561","line":203,"column":27,"nodeType":"559","messageId":"560","endLine":203,"endColumn":29},{"ruleId":"557","severity":1,"message":"561","line":253,"column":31,"nodeType":"559","messageId":"560","endLine":253,"endColumn":33},{"ruleId":"557","severity":1,"message":"558","line":283,"column":55,"nodeType":"559","messageId":"560","endLine":283,"endColumn":57},{"ruleId":"557","severity":1,"message":"558","line":287,"column":57,"nodeType":"559","messageId":"560","endLine":287,"endColumn":59},{"ruleId":"557","severity":1,"message":"558","line":290,"column":40,"nodeType":"559","messageId":"560","endLine":290,"endColumn":42},{"ruleId":"578","severity":1,"message":"651","line":1,"column":17,"nodeType":"580","messageId":"581","endLine":1,"endColumn":25},{"ruleId":"578","severity":1,"message":"652","line":12,"column":11,"nodeType":"580","messageId":"581","endLine":12,"endColumn":12},{"ruleId":"578","severity":1,"message":"590","line":38,"column":9,"nodeType":"580","messageId":"581","endLine":38,"endColumn":18},{"ruleId":"554","severity":1,"message":"591","line":43,"column":6,"nodeType":"576","endLine":43,"endColumn":12,"suggestions":"653"},"no-native-reassign",["654"],"no-negated-in-lhs",["655"],"react-hooks/exhaustive-deps","Assignments to the 'varData' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-dupe-keys","Duplicate key 'indicators'.","ObjectExpression","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","React Hook useEffect has a missing dependency: 'branchId'. Either include it or remove the dependency array.","ArrayExpression",["656"],"no-unused-vars","'Fragment' is defined but never used.","Identifier","unusedVar","'SyntheticEvent' is defined but never used.","'Link' is defined but never used.","'CardContent' is defined but never used.","'CardMedia' is defined but never used.","'Tabs' is defined but never used.","'Tab' is defined but never used.","'Box' is defined but never used.","'setThemeCustomization' is assigned a value but never used.","'unmounted' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'dataLoad'. Either include it or remove the dependency array.",["657"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'branchId' is assigned a value but never used.","'getSymbolFromCurrency' is defined but never used.","'hold' is assigned a value but never used.","'products' is assigned a value but never used.","'setProducts' is assigned a value but never used.",["658"],"'Footer' is defined but never used.","'categories' is assigned a value but never used.",["659"],"React Hook useEffect has a missing dependency: 'cateId'. Either include it or remove the dependency array.",["660"],["661"],"'Header' is defined but never used.",["662"],["663"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'base_url' is defined but never used.","'port' is defined but never used.",["664"],"'key' is assigned a value but never used.",["665"],"'inputValue' is assigned a value but never used.","'selectedValue' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'template' is assigned a value but never used.",["666"],["667"],["668"],"React Hook useEffect has a missing dependency: 'sub_id'. Either include it or remove the dependency array.",["669"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","React Hook useEffect has a missing dependency: 'templateId'. Either include it or remove the dependency array.",["670"],"'path' is assigned a value but never used.","'url' is assigned a value but never used.",["671"],"'useEffect' is defined but never used.",["672"],"'state' is assigned a value but never used.",["673"],["674"],"no-useless-escape","Unnecessary escape character: \\/.","Literal","unnecessaryEscape",["675","676"],"React Hook useEffect has missing dependencies: 'attributes.length' and 'id'. Either include them or remove the dependency array.",["677"],"'attr' is assigned a value but never used.","Array.prototype.filter() expects a value to be returned at the end of arrow function.","'useState' is defined but never used.","'t' is assigned a value but never used.",["678"],"no-global-assign","no-unsafe-negation",{"desc":"679","fix":"680"},{"desc":"681","fix":"682"},{"desc":"679","fix":"683"},{"desc":"679","fix":"684"},{"desc":"685","fix":"686"},{"desc":"687","fix":"688"},{"desc":"679","fix":"689"},{"desc":"690","fix":"691"},{"desc":"690","fix":"692"},{"desc":"690","fix":"693"},{"desc":"694","fix":"695"},{"desc":"690","fix":"696"},{"desc":"690","fix":"697"},{"desc":"698","fix":"699"},{"desc":"700","fix":"701"},{"desc":"690","fix":"702"},{"desc":"690","fix":"703"},{"desc":"690","fix":"704"},{"desc":"690","fix":"705"},{"messageId":"706","fix":"707","desc":"708"},{"messageId":"709","fix":"710","desc":"711"},{"desc":"712","fix":"713"},{"desc":"714","fix":"715"},"Update the dependencies array to be: [branchId]",{"range":"716","text":"717"},"Update the dependencies array to be: [cart.length, dataLoad]",{"range":"718","text":"719"},{"range":"720","text":"717"},{"range":"721","text":"717"},"Update the dependencies array to be: [cateId]",{"range":"722","text":"723"},"Update the dependencies array to be: [dataLoad]",{"range":"724","text":"725"},{"range":"726","text":"717"},"Update the dependencies array to be: [check, dataLoad]",{"range":"727","text":"728"},{"range":"729","text":"728"},{"range":"730","text":"728"},"Update the dependencies array to be: [dataLoad, loading]",{"range":"731","text":"732"},{"range":"733","text":"728"},{"range":"734","text":"728"},"Update the dependencies array to be: [sub_id]",{"range":"735","text":"736"},"Update the dependencies array to be: [loading, templateId]",{"range":"737","text":"738"},{"range":"739","text":"728"},{"range":"740","text":"728"},{"range":"741","text":"728"},{"range":"742","text":"728"},"removeEscape",{"range":"743","text":"744"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"745","text":"746"},"Replace the `\\` with `\\\\` to include the actual backslash character.","Update the dependencies array to be: [attributes.length, check, id]",{"range":"747","text":"748"},"Update the dependencies array to be: [cart, dataLoad]",{"range":"749","text":"750"},[2540,2542],"[branchId]",[3246,3259],"[cart.length, dataLoad]",[2270,2272],[2505,2507],[1371,1373],"[cateId]",[4600,4602],"[dataLoad]",[2446,2448],[2037,2044],"[check, dataLoad]",[4540,4547],[4884,4891],[2911,2920],"[dataLoad, loading]",[6916,6923],[5230,5237],[864,866],"[sub_id]",[2289,2298],"[loading, templateId]",[6227,6234],[4648,4655],[2453,2460],[5350,5357],[1172,1173],"",[1172,1172],"\\",[3124,3131],"[attributes.length, check, id]",[1088,1094],"[cart, dataLoad]"]