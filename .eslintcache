[{"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\index.js":"1","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\App.js":"2","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\Consts.js":"3","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\PublicRoute.js":"4","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\pages\\Registration.js":"5","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Public Link\\BranchDetails.js":"6","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\pages\\Login.js":"7","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Public Link\\VariantDetails.js":"8","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Public Link\\ShowProducts.js":"9","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\index.js":"10","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Attributes\\Attributes.js":"11","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Attributes\\Options.js":"12","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\utils\\index.js":"13","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Branches\\Tables.js":"14","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Variants\\VariantDetails.js":"15","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Variants\\Gallary.js":"16","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Variants\\Variants.js":"17","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Branches\\Branches.js":"18","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\PrivateRoute.js":"19","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Orders\\Order.js":"20","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Categories\\SubCategory.js":"21","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Orders\\Basket.js":"22","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Services\\ServiceArea.js":"23","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Units\\Unit.js":"24","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Inventories\\Inventory.js":"25","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Categories\\Category.js":"26","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Companies\\Company.js":"27","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Products\\Product.js":"28","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\layouts\\Footer.js":"29","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Dashboard\\Profile\\Profile.js":"30","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Dashboard\\Home\\Home.js":"31","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\layouts\\nav\\index.js":"32","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Variants\\Grid.js":"33","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\layouts\\PageTitle.js":"34","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\layouts\\nav\\Header.js":"35","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\layouts\\nav\\NavHader.js":"36","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\layouts\\nav\\SideBar.js":"37","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Thrid\\Main.js":"38","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\First\\Main.js":"39","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\EditTheme.js":"40","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Design.js":"41","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Theme.js":"42","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\SingleFileAutoSubmit.js":"43","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Branches\\Show.js":"44","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\ProductDetails.js":"45","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\Main.js":"46","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\OrderDetails.js":"47","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\Customization.js":"48","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\Header.js":"49","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\Footer.js":"50","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Second\\OrderDetails.js":"51","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Second\\ProductDetails.js":"52","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Second\\Main.js":"53","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Second\\Footer.js":"54","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Second\\Header.js":"55","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Second\\Customization.js":"56","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Branches\\CreateRoute].js":"57","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\pages\\Error404.js":"58"},{"size":1386,"mtime":1638895851471,"results":"59","hashOfConfig":"60"},{"size":4002,"mtime":1638903940710,"results":"61","hashOfConfig":"60"},{"size":67,"mtime":1638620992553,"results":"62","hashOfConfig":"60"},{"size":432,"mtime":1638620673189,"results":"63","hashOfConfig":"60"},{"size":7743,"mtime":1638620673216,"results":"64","hashOfConfig":"60"},{"size":28285,"mtime":1638789912736,"results":"65","hashOfConfig":"60"},{"size":5827,"mtime":1638620673216,"results":"66","hashOfConfig":"60"},{"size":14868,"mtime":1638620673189,"results":"67","hashOfConfig":"60"},{"size":8500,"mtime":1638804773609,"results":"68","hashOfConfig":"60"},{"size":4539,"mtime":1638907725238,"results":"69","hashOfConfig":"60"},{"size":9717,"mtime":1638620673178,"results":"70","hashOfConfig":"60"},{"size":13297,"mtime":1638620673178,"results":"71","hashOfConfig":"60"},{"size":214,"mtime":1638620673216,"results":"72","hashOfConfig":"60"},{"size":12649,"mtime":1638899923989,"results":"73","hashOfConfig":"60"},{"size":14187,"mtime":1638620673202,"results":"74","hashOfConfig":"60"},{"size":7877,"mtime":1638620673201,"results":"75","hashOfConfig":"60"},{"size":8341,"mtime":1638899936860,"results":"76","hashOfConfig":"60"},{"size":27920,"mtime":1638899994405,"results":"77","hashOfConfig":"60"},{"size":542,"mtime":1638620673187,"results":"78","hashOfConfig":"60"},{"size":4048,"mtime":1638620673187,"results":"79","hashOfConfig":"60"},{"size":13910,"mtime":1638909326852,"results":"80","hashOfConfig":"60"},{"size":7016,"mtime":1638620673187,"results":"81","hashOfConfig":"60"},{"size":10082,"mtime":1638898475436,"results":"82","hashOfConfig":"60"},{"size":9487,"mtime":1638898442533,"results":"83","hashOfConfig":"60"},{"size":10702,"mtime":1638898417002,"results":"84","hashOfConfig":"60"},{"size":17405,"mtime":1638907353221,"results":"85","hashOfConfig":"60"},{"size":10439,"mtime":1638899930618,"results":"86","hashOfConfig":"60"},{"size":18140,"mtime":1638899943518,"results":"87","hashOfConfig":"60"},{"size":489,"mtime":1638620673203,"results":"88","hashOfConfig":"60"},{"size":23716,"mtime":1638620673183,"results":"89","hashOfConfig":"60"},{"size":1852,"mtime":1638620673183,"results":"90","hashOfConfig":"60"},{"size":688,"mtime":1638620673212,"results":"91","hashOfConfig":"60"},{"size":4994,"mtime":1638890120253,"results":"92","hashOfConfig":"60"},{"size":823,"mtime":1638620673204,"results":"93","hashOfConfig":"60"},{"size":7127,"mtime":1638788489340,"results":"94","hashOfConfig":"60"},{"size":953,"mtime":1638620673212,"results":"95","hashOfConfig":"60"},{"size":5315,"mtime":1638620673212,"results":"96","hashOfConfig":"60"},{"size":7913,"mtime":1638254819501,"results":"97","hashOfConfig":"60"},{"size":4609,"mtime":1638266053579,"results":"98","hashOfConfig":"60"},{"size":14336,"mtime":1638560569411,"results":"99","hashOfConfig":"60"},{"size":27635,"mtime":1638894603822,"results":"100","hashOfConfig":"60"},{"size":21427,"mtime":1638560544206,"results":"101","hashOfConfig":"60"},{"size":1238,"mtime":1637869031777,"results":"102","hashOfConfig":"60"},{"size":7574,"mtime":1638909800321,"results":"103","hashOfConfig":"60"},{"size":10486,"mtime":1638444404212,"results":"104","hashOfConfig":"60"},{"size":8989,"mtime":1638710078545,"results":"105","hashOfConfig":"60"},{"size":7727,"mtime":1638444355633,"results":"106","hashOfConfig":"60"},{"size":19651,"mtime":1638794571493,"results":"107","hashOfConfig":"60"},{"size":3705,"mtime":1638724209556,"results":"108","hashOfConfig":"60"},{"size":632,"mtime":1638384229571,"results":"109","hashOfConfig":"60"},{"size":7727,"mtime":1638444355633,"results":"110","hashOfConfig":"60"},{"size":10486,"mtime":1638444404212,"results":"111","hashOfConfig":"60"},{"size":9068,"mtime":1638732575237,"results":"112","hashOfConfig":"60"},{"size":543,"mtime":1638722701769,"results":"113","hashOfConfig":"60"},{"size":1002,"mtime":1638732075181,"results":"114","hashOfConfig":"60"},{"size":19591,"mtime":1638720548083,"results":"115","hashOfConfig":"60"},{"size":1729,"mtime":1638905730624,"results":"116","hashOfConfig":"60"},{"size":891,"mtime":1638903859046,"results":"117","hashOfConfig":"60"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},"i7z6n9",{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"120"},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"120"},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"120"},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"120"},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"120"},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"120"},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"120"},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"120"},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"167","messages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"169","messages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"171","messages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"120"},{"filePath":"174","messages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"120"},{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"120"},{"filePath":"180","messages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"182","messages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"184","messages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"120"},{"filePath":"187","messages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"189","messages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"191","messages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"193","messages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"195","messages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"120"},{"filePath":"198","messages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"200","messages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"202","messages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"204","messages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"206","messages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"208","messages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"210","messages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"120"},{"filePath":"213","messages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"120"},{"filePath":"216","messages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"120"},{"filePath":"219","messages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"221","messages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"223","messages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"120"},{"filePath":"226","messages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"120"},{"filePath":"229","messages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"120"},{"filePath":"232","messages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"120"},{"filePath":"235","messages":"236","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"120"},{"filePath":"238","messages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"240","messages":"241","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"242"},{"filePath":"243","messages":"244","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"242"},{"filePath":"245","messages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"120"},{"filePath":"248","messages":"249","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"250","messages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"252","messages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"254","messages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"256","messages":"257","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\index.js",[],["258","259"],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\App.js",["260"],"import React from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\nimport Registration from \"./jsx/pages/Registration\";\r\n/// Components\r\nimport Markup from \"./jsx\";\r\nimport Login from \"./jsx/pages/Login\";\r\n/// Style\r\nimport \"./css/style.css\";\r\nimport \"./vendor/bootstrap-select/dist/css/bootstrap-select.min.css\";\r\n// import PrivateRoute from './jsx/components/PrivateRoute';\r\nimport PublicRoute from \"./jsx/components/PublicRoute\";\r\nimport axios from \"axios\";\r\nimport StandardTemplate from \"./jsx/components/Public Link/BranchDetails\";\r\n// import Variants from \"./jsx/components/Variants/Variants\";\r\nimport VariantDetails from \"./jsx/components/Public Link/VariantDetails\";\r\nimport ShowProducts from \"./jsx/components/Public Link/ShowProducts\";\r\nimport { base_url, port } from \"./Consts\";\r\nimport Main from \"./jsx/components/Design/Templates/First/Main\";\r\nimport DarkTemplate from \"./jsx/components/Design/Templates/Dark/Main\";\r\nimport Thrid from \"./jsx/components/Design/Templates/Thrid/Main\";\r\nimport ProductDetails from \"./jsx/components/Design/Templates/Dark/ProductDetails\";\r\nimport OrderDetails from \"./jsx/components/Design/Templates/Dark/OrderDetails\";\r\nimport SecondTemplate from \"./jsx/components/Design/Templates/Second/Main\";\r\nimport Error404 from \"./jsx/pages/Error404\";\r\n\r\naxios.defaults.baseURL = \"http://\" + base_url + \":\" + port;\r\n// axios.defaults.baseURL=\"http://192.168.1.103/yesilik1/public/\";\r\naxios.defaults.headers.post[\"Content-Type\"] = \"application/json\";\r\naxios.defaults.headers.get[\"Content-Type\"] = \"application/json\";\r\naxios.defaults.headers.post[\"Accept\"] = \"application/json\";\r\naxios.defaults.headers.get[\"Accept\"] = \"application/json\";\r\naxios.defaults.headers.get[\"Access-Control-Allow-Origin\"] = \"*\";\r\naxios.defaults.headers.post[\"Access-control-Allow-Origin\"] = \"*\";\r\naxios.defaults.withcredentials = true;\r\naxios.interceptors.request.use(function (config) {\r\n  const token = localStorage.getItem(\"auth_token\");\r\n  config.headers.Authorization = token ? `Bearer ${token}` : \"\";\r\n  return config;\r\n});\r\n//rember if there no user redriect them to login page\r\n\r\naxios.interceptors.response.use(\r\n  function (response) {\r\n    return response;\r\n  },\r\n  function (error) {\r\n    if (401 === error.response.status) {\r\n      localStorage.removeItem(\"auth_token\");\r\n      localStorage.removeItem(\"auth_name\");\r\n      localStorage.removeItem(\"auth_id\");\r\n      window.location = \"/\";\r\n\r\n      return error.response;\r\n    }\r\n  }\r\n);\r\n\r\nconst App = () => {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n          <Redirect to=\"/page-login\" />\r\n        </Route>\r\n        <PublicRoute\r\n          restricted={true}\r\n          component={Login}\r\n          path=\"/page-login\"\r\n          exact\r\n        />\r\n\r\n        <PublicRoute\r\n          restricted={false}\r\n          component={Registration}\r\n          path=\"/user-register\"\r\n          exact\r\n        />\r\n        <PublicRoute\r\n          exact\r\n          component={StandardTemplate}\r\n          path=\"/standard-template/:id\"\r\n        />\r\n        <PublicRoute component={DarkTemplate} path=\"/dark-template/:id\" exact />\r\n        <PublicRoute\r\n          component={SecondTemplate}\r\n          path=\"/second-template/:id\"\r\n          exact\r\n        />\r\n\r\n        <PublicRoute\r\n          exact\r\n          component={VariantDetails}\r\n          path=\"/variant-details/:id\"\r\n        />\r\n        <PublicRoute exact component={OrderDetails} path=\"/order-details/:id\" />\r\n        <PublicRoute exact component={ShowProducts} path=\"/product/:id\" />\r\n        <PublicRoute\r\n          exact\r\n          component={ProductDetails}\r\n          path=\"/product-details/:id\"\r\n        />\r\n        <PublicRoute component={Main} path=\"/template-first\" exact />\r\n        <PublicRoute component={Thrid} path=\"/template-thrid\" exact />\r\n        {/* <Route component={Error404} /> */}\r\n\r\n        <Markup />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\Consts.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\PublicRoute.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\pages\\Registration.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Public Link\\BranchDetails.js",["261","262","263","264","265"],"import React, { useEffect, useState, Fragment } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Nav } from \"react-bootstrap\";\r\nimport { Link as RLink } from \"react-router-dom\";\r\nimport \"react-awesome-slider/dist/styles.css\";\r\nimport { Modal, Form, Col, Card, Button } from \"react-bootstrap\";\r\nimport {\r\n  CContainer,\r\n  CNavbar,\r\n  CNavbarBrand,\r\n  CNavbarToggler,\r\n  CCollapse,\r\n  CNavbarNav,\r\n  CNavItem,\r\n  CNavLink,\r\n} from \"@coreui/react\";\r\n// Import css files\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\n// import InfiniteScroll from 'react-infinite-scroller';\r\nimport Slider from \"react-slick\";\r\nimport { Link } from \"react-scroll\";\r\n// import Counter from './Counter'\r\nimport swal from \"sweetalert\";\r\nimport ReactWhatsapp from \"react-whatsapp\";\r\nimport { base_url, port } from \"../../../Consts\";\r\nvar hold = 1;\r\n\r\nconst BranchDetails = (props) => {\r\n  const { t } = useTranslation();\r\n  const branchId = atob(props.match.params.id);\r\n  const [modalCentered, setModalCentered] = useState(false);\r\n\r\n  // atob(branchNameId)\r\n  const [loading, setLoading] = useState(true);\r\n  const [data, setData] = useState([]);\r\n  const [categories, setCategories] = useState([]);\r\n  const [subcategories, setSubCategories] = useState([]);\r\n  // const [products, setProducts]= useState([])\r\n  const [products, setProducts] = useState([]);\r\n  const [activeCategory, setActiveCategory] = useState(0);\r\n  const [activeSubCategory, setActiveSubCategory] = useState(0);\r\n  const [activeVariant, setActiveVariant] = useState(0);\r\n  const [grandTotal, setGrandTotal] = useState(0);\r\n\r\n  useEffect(() => {\r\n    axios.get(`/api/GetBranchForShow/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setData(res.data.data);\r\n      }\r\n      setLoading(false);\r\n    });\r\n    axios.get(`/api/GetCategories/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setCategories(res.data.fetchData);\r\n        // setActiveCategory(res.data.fetchData[0].id);\r\n      }\r\n    });\r\n    axios.get(`/api/getSubCateBasedOnBranch/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        // console.log(res.data.fetchData);\r\n        axios\r\n          .get(\r\n            `/api/GetProductsBasedOnSubCategory/${res.data.fetchData[0]?.sub_id}`\r\n          )\r\n          .then((res) => {\r\n            if (res.data.status === 200) {\r\n              setProducts(res.data.data);\r\n              setActiveSubCategory(res.data.data[0]?.sub_category_id);\r\n            }\r\n          });\r\n        setSubCategories(res.data.fetchData);\r\n        // setProducts([]);\r\n        // setVariants([]);\r\n      }\r\n    });\r\n  }, [branchId]);\r\n  const [changeState, setChangeState] = useState(true);\r\n  const fetchMoreData = () => {\r\n    if (hold < subcategories.length) {\r\n      axios.get(`/api/getSubCateBasedOnBranch/${branchId}`).then((res) => {\r\n        if (res.data.status === 200) {\r\n          // console.log(res.data.fetchData);\r\n          setActiveSubCategory(res.data.fetchData[hold].sub_id);\r\n          axios\r\n            .get(\r\n              `/api/GetProductsBasedOnSubCategory/${res.data.fetchData[hold].sub_id}`\r\n            )\r\n            .then((res) => {\r\n              if (res.data.status === 200) {\r\n                if (res.data.data.length === 0) {\r\n                  hold = hold + 1;\r\n                  // console.log(res.data.fetchData);\r\n                  fetchMoreData();\r\n                } else {\r\n                  hold = hold + 1;\r\n                  setProducts(products.concat(res.data.data));\r\n                }\r\n              }\r\n            });\r\n\r\n          setSubCategories(res.data.fetchData);\r\n        }\r\n      });\r\n    } else {\r\n      setChangeState(false);\r\n    }\r\n    // console.log(hold);\r\n  };\r\n  const filterCategory = (cateId) => {\r\n    axios.get(`/api/GetSubCategories/${cateId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        // console.log(res.data.fetchData);\r\n        setSubCategories(res.data.fetchData);\r\n        // console.log(subcategories.length);\r\n        // setProducts([]);\r\n        // setVariants([]);\r\n      }\r\n    });\r\n    setActiveCategory(cateId);\r\n  };\r\n  // this function called by child (counter)\r\n  const filterProducts = (subCateID) => {\r\n    //  const updateItem=variants.filter((curElem) => {\r\n    //    return curElem.sub_category_id===subCateID;\r\n    // })\r\n    // setVariants(updateItem);\r\n\r\n    // axios.get(`/api/GetProductsBasedOnSubCategory/${subCateID}`).then(res => {\r\n    //    if (res.data.status === 200) {\r\n    //       setVariants(res.data.fetchData)\r\n    //    }\r\n    // });\r\n    setActiveSubCategory(subCateID);\r\n  };\r\n  // this function called by child (counter)\r\n\r\n  const activeVariants = (item) => {\r\n    setActiveVariant(item);\r\n  };\r\n  const getGrandTotal = (item) => {\r\n    setGrandTotal(grandTotal + item);\r\n  };\r\n  const clearSession = (e) => {\r\n    swal({\r\n      title: \"Are you sure?\",\r\n      text: \"Once cleared, you will not be able to recover this files!\",\r\n      icon: \"warning\",\r\n      buttons: [t(\"cancel\"), t(\"confirm\")],\r\n      dangerMode: true,\r\n    }).then((willDelete) => {\r\n      if (willDelete) {\r\n        sessionStorage.clear();\r\n        setModalCentered(false);\r\n      } else {\r\n        swal(\"Your Data is safe now!\");\r\n      }\r\n    });\r\n  };\r\n  const [orderInsert, setOrderInsert] = useState([]);\r\n  // const [orderDetails, setOrderDetails ]= useState([])\r\n  const handleInput = (e) => {\r\n    e.persist();\r\n    setOrderInsert({ ...orderInsert, [e.target.name]: e.target.value });\r\n  };\r\n  //   const handleOrderDetails= (vID,e) => {\r\n  //    e.persist();\r\n  //    setOrderDetails({ ...orderDetails,\r\n\r\n  //          [e.target.name]: e.target.value\r\n  //       });\r\n  //   }\r\n  const saveOrder = (e) => {\r\n    e.preventDefault();\r\n    axios.post(`/api/InsertOrder`, orderInsert).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setOrderInsert([]);\r\n        setModalCentered(false);\r\n        swal(\"Success\", res.data.message, \"success\");\r\n      } else if (res.data.status === 404) {\r\n        swal(\"Success\", res.data.message, \"success\");\r\n      }\r\n    });\r\n  };\r\n\r\n  // const filterVariants = (productID)=>{\r\n  //    axios.get(`/api/Getvariations/${productID}`).then(res => {\r\n  //       if(res.data.status === 200){\r\n  //          setVariants(res.data.fetchData);\r\n  //       }\r\n  //     });\r\n\r\n  // }\r\n\r\n  // const [quantity, setQuantity] = useState(1);\r\n  // const [show, setShow] = useState(false);\r\n  // const showFunction = (e, variant_id)=>{\r\n\r\n  //    setShow(!show);\r\n  //    console.log(e.currentTarget.id);\r\n  // }\r\n  // const handleDecrement = (e,variant_id) => {\r\n  //    e.preventDefault();\r\n\r\n  //    if (quantity > 1) {\r\n  //       setQuantity(prevCount => prevCount - 1);\r\n  //    } else if (quantity === 1) {\r\n  //       setShow(false)\r\n  //    }\r\n  // }\r\n  // const handelIncrement = (e,variant_id) => {\r\n  //    e.preventDefault();\r\n  //       variants.map((item) =>{\r\n  //        return (item.variantID === variant_id ? setQuantity(prevCount => prevCount + 1): item)\r\n  //       }\r\n  //    )\r\n\r\n  //    // setQuantity(prevCount => prevCount + 1);\r\n  // }\r\n\r\n  const [visible, setVisible] = useState(false);\r\n  var viewShow_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div\r\n        className=\"spinner-border text-primary \"\r\n        role=\"status\"\r\n        style={{ position: \"fixed\", top: \"50%\", left: \"50%\" }}\r\n      >\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    var value;\r\n    viewShow_HTMLTABLE = products.map((item, i) => {\r\n      return (\r\n        <div\r\n          className=\"col-xl-3 col-lg-3 col-md-4 col-sm-4 col-xs-4 col-half-offset\"\r\n          key={i}\r\n          id={item.SubCategoryName}\r\n        >\r\n          {item.ProductName === value ? (\r\n            <h5 className=\"row mt-2 mx-3 invisible\">{item.ProductName}</h5>\r\n          ) : (\r\n            <h5 className=\"row mt-2 mx-3 text-uppercase font-weight-bold text-black\">\r\n              {item.ProductName}\r\n            </h5>\r\n          )}\r\n          <h6 className=\"d-none\">{(value = item.ProductName)}</h6>\r\n          <div>\r\n            <div\r\n              className={`card ${\r\n                activeVariant === item.variantID ? \"border border-success\" : \"\"\r\n              } `}\r\n            >\r\n              <div className=\"card-body\">\r\n                <div className=\"new-arrival-product\">\r\n                  <div className=\"text-center bg-white\">\r\n                    <img\r\n                      className=\"img-fluid w-100 img-thumbnail\"\r\n                      style={{ height: \"100px\", objectFit: \"contain\" }}\r\n                      src={`http://${base_url}:${port}/images/products/${item.image}`}\r\n                      alt=\"\"\r\n                    />\r\n                  </div>\r\n                  {/* <Counter item={item} activeVariants={activeVariant => setActiveVariant(activeVariant)}\r\n                                 // getGrandTotal={grandTotal => setGrandTotal(grandTotal)} \r\n                                 /> */}\r\n                  <RLink\r\n                    to={`/product/${item.product_id}`}\r\n                    className=\"text-black\"\r\n                  >\r\n                    <div className=\"new-arrival-content text-center mt-3\">\r\n                      <h4>\r\n                        {item.ProductName}\r\n                        <p className=\"text-success\">{item.UnitName}</p>\r\n                      </h4>\r\n\r\n                      {/* <span className=\"price\">{item.CurrentPrice + ' ' + item.currency_code}</span>\r\n                                    <s className=\"ms-2\">{item.OldPrice + ' ' + item.currency_code}</s> */}\r\n                    </div>\r\n                  </RLink>\r\n\r\n                  {/* <div id={item.variantID}  className={`input-group`}>\r\n                                 <RLink  onClick={(e)=>handleDecrement(e,item.variantID)} className=\"input-group-text \">{quantity === 1 ? <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-trash\" viewBox=\"0 0 16 16\">\r\n                                    <path d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z\" />\r\n                                    <path fillRule=\"evenodd\" d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\" />\r\n                                 </svg> : t('minus')} </RLink>\r\n                                 <div className=\"input-group-text bg-white \"> {quantity}</div>\r\n                                 <RLink  onClick={(e)=>handelIncrement(e,item.variantID)} className=\"input-group-text\" disabled={item.Buyingquantity - item.SellingQuantity === quantity ? 'disabled' : ''}>{t('plus')} </RLink>\r\n                              </div>\r\n                              \r\n                              {item.Buyingquantity - item.SellingQuantity === quantity\r\n                                 ?\r\n                                 <div className=\"text-danger\">\r\n                                    {t('not_available')}\r\n                                 </div>\r\n                                 : \"\"\r\n                              } */}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    });\r\n  }\r\n\r\n  const settings = {\r\n    dots: false,\r\n    // className: \"center\",\r\n    centerMode: true,\r\n    infinite: true,\r\n    swipeToSlide: true,\r\n    centerPadding: \"10px\",\r\n    slidesToShow: subcategories.length >= 7 ? 7 : subcategories.length,\r\n    slidesToScroll: 1,\r\n    speed: 1000,\r\n    responsive: [\r\n      {\r\n        breakpoint: 1024,\r\n        settings: {\r\n          slidesToShow: subcategories.length >= 5 ? 5 : subcategories.length,\r\n          slidesToScroll: 1,\r\n          infinite: true,\r\n          dots: true,\r\n          speed: 1000,\r\n        },\r\n      },\r\n      {\r\n        breakpoint: 600,\r\n        settings: {\r\n          slidesToShow: subcategories.length >= 2 ? 2 : 1,\r\n          slidesToScroll: 1,\r\n          initialSlide: 1,\r\n          speed: 1000,\r\n        },\r\n      },\r\n      {\r\n        breakpoint: 480,\r\n        settings: {\r\n          speed: 1000,\r\n\r\n          slidesToShow: subcategories.length >= 1 ? 1 : 1,\r\n          slidesToScroll: 1,\r\n        },\r\n      },\r\n    ],\r\n  };\r\n\r\n  var sum = 0;\r\n  var message = \"\";\r\n\r\n  return (\r\n    <div style={{ marginTop: 5 }}>\r\n      <Fragment>\r\n        <CNavbar\r\n          expand=\"lg\"\r\n          colorScheme=\"light\"\r\n          className=\"bg-light\"\r\n          placement=\"sticky-top\"\r\n        >\r\n          {/* <Row> */}\r\n          {/* <Col lg={12}> */}\r\n          <CContainer fluid>\r\n            {data.map((item, i) => (\r\n              <CNavbarBrand\r\n                className=\"text-center text-uppercase font-weight-bold text-primary\"\r\n                key={i}\r\n              >\r\n                {item.BrancheName}\r\n              </CNavbarBrand>\r\n            ))}\r\n            <CNavbarToggler\r\n              aria-label=\"Toggle navigation\"\r\n              aria-expanded={visible}\r\n              onClick={() => setVisible(!visible)}\r\n            />\r\n            <CCollapse className=\"navbar-collapse\" visible={visible}>\r\n              <CNavbarNav>\r\n                {categories.map((data, i) => (\r\n                  <CNavItem as=\"li\" key={i}>\r\n                    <CNavLink\r\n                      href=\"#\"\r\n                      onClick={() => filterCategory(data.id)}\r\n                      className={`text-capitalize font-weight-bold ${\r\n                        activeCategory === data.id\r\n                          ? \"active bg-primary text-white\"\r\n                          : \" \"\r\n                      }`}\r\n                    >\r\n                      {data.CategoryName}\r\n                    </CNavLink>\r\n                  </CNavItem>\r\n                ))}\r\n              </CNavbarNav>\r\n            </CCollapse>\r\n          </CContainer>\r\n          {/* </Col> */}\r\n\r\n          {/* </Row> */}\r\n        </CNavbar>\r\n        <CNavbar\r\n          colorScheme=\"light\"\r\n          className=\"bg-white\"\r\n          placement=\"sticky-top\"\r\n        >\r\n          <Col lg={12}>\r\n            <Card>\r\n              <Card.Body>\r\n                <Slider {...settings}>\r\n                  {subcategories.map((item, i) => (\r\n                    <div key={i} className=\"px-1 text-center text-capitalize\">\r\n                      <Nav.Item as=\"li\">\r\n                        <Link\r\n                          onClick={() => filterProducts(item.sub_id)}\r\n                          smooth={true}\r\n                          duration={1000}\r\n                          to={`${item.SubCategoryName}`}\r\n                          // eventKey={item.SubCategoryName.toLowerCase()}\r\n                          className={`text-capitalize font-weight-bold ${\r\n                            activeSubCategory === item.sub_id\r\n                              ? \"active border border-primary text-primary   \"\r\n                              : \" \"\r\n                          }`}\r\n                        >\r\n                          <div>\r\n                            <img\r\n                              className={`w-100 img-thumbnail mt-1 mx-1 ${\r\n                                activeSubCategory === item.sub_id\r\n                                  ? \"border border-primary\"\r\n                                  : \" \"\r\n                              }`}\r\n                              style={{ height: \"60px\", objectFit: \"contain\" }}\r\n                              src={`http://${base_url}:${port}/images/sub_catagories/${item.SubCategoryIcon}`}\r\n                              alt=\"\"\r\n                            />\r\n                          </div>\r\n                          <div className=\"mt-2\">{item.SubCategoryName}</div>\r\n                        </Link>\r\n                      </Nav.Item>\r\n                    </div>\r\n                  ))}\r\n                </Slider>\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n        </CNavbar>\r\n      </Fragment>\r\n      <div className=\"row mt-2 mx-2\">{viewShow_HTMLTABLE}</div>\r\n      <InfiniteScroll\r\n        dataLength={products.length} //This is important field to render the next data\r\n        next={fetchMoreData}\r\n        hasMore={changeState}\r\n        loader={\r\n          <p className=\"text-center pt-5\" style={{ height: 120 }}>\r\n            <b>{t(\"loading\")}</b>\r\n          </p>\r\n        }\r\n        endMessage={\r\n          <p style={{ textAlign: \"center \", height: 120 }}>\r\n            <b>{t(\"yay_you_have_seen_it_all\")}</b>\r\n          </p>\r\n        }\r\n      ></InfiniteScroll>\r\n\r\n      <Modal\r\n        className=\"fade bd-example-modal-lg\"\r\n        show={modalCentered}\r\n        size=\"lg\"\r\n      >\r\n        <Form onSubmit={saveOrder} method=\"POST\">\r\n          <Modal.Header>\r\n            <Modal.Title>{t(\"basket\")}</Modal.Title>\r\n            <Button\r\n              onClick={() => setModalCentered(false)}\r\n              variant=\"\"\r\n              className=\"close\"\r\n            >\r\n              <span>&times;</span>\r\n            </Button>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            {products.map((item, i) => {\r\n              {\r\n                var variant = JSON.parse(\r\n                  sessionStorage.getItem(`variant${item.variantID}`)\r\n                );\r\n              }\r\n              if (variant != null) {\r\n                {\r\n                  var quantity = sessionStorage.getItem(\r\n                    `quantity${item.variantID}`\r\n                  );\r\n                }\r\n                sum = sum + variant?.CurrentPrice * quantity;\r\n                message = `${message} *Product Name*: ${\r\n                  variant.ProductName\r\n                } \\n *Variant Name*: ${\r\n                  variant.VariationName\r\n                } \\n *QTY*: ${quantity} \\n *Unit*: ${\r\n                  variant.UnitName\r\n                } \\n *Price*: ${variant.CurrentPrice} \\n *Total Price*: ${\r\n                  quantity * variant.CurrentPrice\r\n                } *${variant.currency_code}* \\n\\n\\n`;\r\n                return (\r\n                  <div\r\n                    className=\"row border-bottom text-capitalize my-2\"\r\n                    key={i}\r\n                    style={{ color: \"black\" }}\r\n                  >\r\n                    <div className=\"col-xl-2 col-lg-2 col-md-4 col-sm-4 col-xs-4 mb-2 align-self-center \">\r\n                      <div className=\"text-center bg-white\">\r\n                        <img\r\n                          className=\"img-fluid w-100 img-thumbnail\"\r\n                          style={{ height: \"100px\", objectFit: \"contain\" }}\r\n                          src={`http://${base_url}:${port}/images/variants_pics/${variant?.PicturesLocation}`}\r\n                          alt=\"\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"col-xl-3 col-lg-3 col-md-4 col-sm-4 col-xs-4 align-self-center font-weight-bold\">\r\n                      <span>{variant?.VariationName}</span>\r\n                    </div>\r\n\r\n                    <div className=\"col-xl-2 col-lg-2 col-md-4 col-sm-4 col-xs-4 align-self-center\">\r\n                      {variant?.CurrentPrice} {variant?.currency_code}\r\n                    </div>\r\n                    <div className=\"col-xl-3 col-lg-2 col-md-4 col-sm-4 col-xs-4 align-self-center\">\r\n                      {/* <Counter item={item} show={true} quantity={quantity} activeVariants={activeVariant => setActiveVariant(activeVariant)}\r\n                              /> */}\r\n                      {quantity}\r\n                    </div>\r\n                    <div className=\"col-xl-2 col-lg-2 col-md-4 col-sm-4 col-xs-4 align-self-center font-weight-bold\">\r\n                      {variant?.CurrentPrice * quantity}{\" \"}\r\n                      {variant?.currency_code}\r\n                    </div>\r\n                    {/* <div className=\"col-xl-2 col-lg-2 col-md-4 col-sm-4 col-xs-4 align-self-center\">\r\n                             \r\n                              </div>\r\n                              <div className=\"col-xl-10 col-lg-10 col-md-4 col-sm-4 col-xs-4 mb-3\">\r\n                                 <textarea className=\"form-control col-xl-12\" type=\"text\"\r\n\r\n                                    name=\"note\" placeholder={t('note')} onChange={(e)=>handleOrderDetails(variant.variantID,e)}\r\n                                    value={orderDetails.note}\r\n                                    ></textarea>\r\n                              </div> */}\r\n                  </div>\r\n                );\r\n              }\r\n            })}\r\n\r\n            <p className=\"d-none\">\r\n              {(message = `\\n\\n\\n${message} *Grand Total*: ${sum}`)}\r\n            </p>\r\n            <div className=\"row\" style={{ color: \"black\" }}>\r\n              <div className=\"col-xl-12 col-lg-12 col-md-4 col-sm-4 col-xs-4 mb-3 align-self-center text-center font-weight-bolder \">\r\n                <p> {t(\"grand_total\")}</p>\r\n                <span>{sum}</span>\r\n              </div>\r\n              <div className=\"col-xl-12 col-lg-12 col-md-4 col-sm-4 col-xs-4 mb-3\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1\"> {t(\"phone_number\")} </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    placeholder={t(\"phone_number\")}\r\n                    name=\"phoneNumber\"\r\n                    onChange={handleInput}\r\n                    value={orderInsert.phoneNumber}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"col-xl-12 col-lg-12 col-md-4 col-sm-4 col-xs-4\">\r\n                <div className=\"form-group\">\r\n                  <textarea\r\n                    className=\"form-control col-xl-12\"\r\n                    type=\"text\"\r\n                    name=\"generalNote\"\r\n                    placeholder={t(\"general_note\")}\r\n                    onChange={handleInput}\r\n                    value={orderInsert.generalNote}\r\n                  ></textarea>\r\n                </div>\r\n              </div>\r\n              <div className=\"col-xl-12 col-lg-12 col-md-4 col-sm-4 col-xs-4 mb-3 align-self-center text-center font-weight-bolder \">\r\n                <p> {t(\"Address\")}</p>\r\n              </div>\r\n              <div className=\"col-xl-12 col-lg-12 col-md-4 col-sm-4 col-xs-4\">\r\n                <div className=\"form-group\">\r\n                  <textarea\r\n                    className=\"form-control col-xl-12\"\r\n                    type=\"text\"\r\n                    name=\"address\"\r\n                    placeholder={t(\"address\")}\r\n                    onChange={handleInput}\r\n                    value={orderInsert.address}\r\n                  ></textarea>\r\n                </div>\r\n              </div>\r\n              <div className=\"col-xl-4 col-lg-4 col-md-4 col-sm-4 col-xs-4 mb-3\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1\"> {t(\"buildingNo\")} </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    placeholder={t(\"buildingNo\")}\r\n                    name=\"buildingNo\"\r\n                    onChange={handleInput}\r\n                    value={orderInsert.buildingNo}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"col-xl-4 col-lg-4 col-md-4 col-sm-4 col-xs-4 mb-3\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1\"> {t(\"floor\")} </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    placeholder={t(\"floor\")}\r\n                    name=\"floor\"\r\n                    onChange={handleInput}\r\n                    value={orderInsert.floor}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"col-xl-4 col-lg-4 col-md-4 col-sm-4 col-xs-4 mb-3\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1\"> {t(\"flat\")} </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    placeholder={t(\"flat\")}\r\n                    name=\"flat\"\r\n                    onChange={handleInput}\r\n                    value={orderInsert.flat}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"col-xl-12 col-lg-12 col-md-4 col-sm-4 col-xs-4\">\r\n                <div className=\"form-group\">\r\n                  <textarea\r\n                    className=\"form-control col-xl-12\"\r\n                    type=\"text\"\r\n                    name=\"directions\"\r\n                    placeholder={t(\"directions\")}\r\n                    onChange={handleInput}\r\n                    value={orderInsert.directions}\r\n                  ></textarea>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button\r\n              onClick={() => setModalCentered(false)}\r\n              variant=\"danger light\"\r\n            >\r\n              {t(\"close\")}\r\n            </Button>\r\n            <Button variant=\"danger\" onClick={(e) => clearSession(e)}>\r\n              {\" \"}\r\n              {t(\"clear_basket\")}{\" \"}\r\n            </Button>\r\n            {/* <Button variant=\"success\" type=\"submit\"> {t('send_order')} </Button> */}\r\n            <ReactWhatsapp\r\n              className=\"btn btn-success\"\r\n              number=\"905411251310\"\r\n              message={message}\r\n              type=\"submit\"\r\n            >\r\n              {t(\"send_order\")}{\" \"}\r\n            </ReactWhatsapp>\r\n          </Modal.Footer>\r\n        </Form>\r\n      </Modal>\r\n      <CNavbar\r\n        expand=\"lg\"\r\n        colorScheme=\"light\"\r\n        className=\"row bg-light text-center\"\r\n        placement=\"fixed-bottom\"\r\n      >\r\n        {/* <div className=\"col-xl-4 col-xxl-4 col-lg-4 col-sm-4 \">\r\n               <strong>{t('grand_total')}</strong>\r\n               <p className=\"text-dark\">{sum}</p>\r\n\r\n            </div>\r\n            <div className=\"col-xl-4 col-xxl-4 col-lg-4 col-sm-4 \">\r\n               <strong>{t('delivery_fee')}</strong>\r\n               <p className=\"text-dark\">Free</p>\r\n            </div> */}\r\n        <div className=\"col-xl-12 col-xxl-12 col-lg-12 col-sm-12 \">\r\n          <Button\r\n            variant=\"outline-success\"\r\n            onClick={() => setModalCentered(true)}\r\n          >\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              width=\"16\"\r\n              height=\"16\"\r\n              fill=\"currentColor\"\r\n              className=\"bi bi-whatsapp\"\r\n              viewBox=\"0 0 16 16\"\r\n            >\r\n              <path d=\"M13.601 2.326A7.854 7.854 0 0 0 7.994 0C3.627 0 .068 3.558.064 7.926c0 1.399.366 2.76 1.057 3.965L0 16l4.204-1.102a7.933 7.933 0 0 0 3.79.965h.004c4.368 0 7.926-3.558 7.93-7.93A7.898 7.898 0 0 0 13.6 2.326zM7.994 14.521a6.573 6.573 0 0 1-3.356-.92l-.24-.144-2.494.654.666-2.433-.156-.251a6.56 6.56 0 0 1-1.007-3.505c0-3.626 2.957-6.584 6.591-6.584a6.56 6.56 0 0 1 4.66 1.931 6.557 6.557 0 0 1 1.928 4.66c-.004 3.639-2.961 6.592-6.592 6.592zm3.615-4.934c-.197-.099-1.17-.578-1.353-.646-.182-.065-.315-.099-.445.099-.133.197-.513.646-.627.775-.114.133-.232.148-.43.05-.197-.1-.836-.308-1.592-.985-.59-.525-.985-1.175-1.103-1.372-.114-.198-.011-.304.088-.403.087-.088.197-.232.296-.346.1-.114.133-.198.198-.33.065-.134.034-.248-.015-.347-.05-.099-.445-1.076-.612-1.47-.16-.389-.323-.335-.445-.34-.114-.007-.247-.007-.38-.007a.729.729 0 0 0-.529.247c-.182.198-.691.677-.691 1.654 0 .977.71 1.916.81 2.049.098.133 1.394 2.132 3.383 2.992.47.205.84.326 1.129.418.475.152.904.129 1.246.08.38-.058 1.171-.48 1.338-.943.164-.464.164-.86.114-.943-.049-.084-.182-.133-.38-.232z\" />\r\n            </svg>\r\n            {t(\"order_now_by_whatsapp\")}\r\n          </Button>\r\n        </div>\r\n      </CNavbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BranchDetails;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\pages\\Login.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Public Link\\VariantDetails.js",["266","267","268","269","270"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\"\r\nimport { Link } from \"react-router-dom\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport Slider from \"react-slick\";\r\nimport { Table } from \"react-bootstrap\";\r\n\r\nconst VariantDetails = (props) => {\r\n    // for localization\r\n    const { t } = useTranslation();\r\n    // let { id } = useParams();\r\n    const id = props.match.params.id;\r\n    //for retriving data using laravel API\r\n    const [fetchData, setFetchData] = useState([]);\r\n    const [variantData, setVariantData] = useState([]);\r\n    const [variantDetails, setVariantDetails] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    // Quantity increment/decrement using hooks start\r\n    const [quantity, setQuantity] = useState(1);\r\n    const handleDecrement = () => {\r\n        if (quantity > 1) {\r\n            setQuantity(prevCount => prevCount - 1);\r\n        }\r\n    }\r\n    const handelIncrement = () => {\r\n\r\n        setQuantity(prevCount => prevCount + 1);\r\n    }\r\n    const [variants, setVariants] = useState([])\r\n\r\n    // Quantity increment/decrement using hooks end\r\n    useEffect(() => {\r\n        axios.get(`/api/GetPictures/${id}`).then(res => {\r\n            if (res.data.status === 200) {\r\n                setFetchData(res.data.fetchData);\r\n            }\r\n            setLoading(false);\r\n        });\r\n\r\n        axios.get(`/api/Getvariant/${id}`).then(res => {\r\n            if (res.data.status === 200) {\r\n                setVariantData(res.data.variantdata);\r\n                axios.get(`/api/Getvariations/${res.data.variantdata[0].product_id}`).then(res => {\r\n                    if (res.data.status === 200) {\r\n                        setVariants(res.data.fetchData);\r\n                        // console.log(res.data.fetchData);\r\n\r\n                    }\r\n                });\r\n            }\r\n        });\r\n        axios.get(`/api/GetVarinatDetails/${id}`).then(res => {\r\n            if (res.data.status === 200) {\r\n                // console.log(res.data.fetchData);\r\n                setVariantDetails(res.data.fetchData);\r\n            }\r\n        });\r\n    }, [quantity, id]);\r\n\r\n    var viewImages_HTMLTABLE = \"\";\r\n    if (loading) {\r\n        return <div className=\"container \"><div className=\"spinner-border text-primary \" role=\"status\" style={{ position: 'fixed', top: '50%', left: '50%' }}><span className=\"sr-only\">{t('loading')}</span></div></div>\r\n    } else {\r\n        viewImages_HTMLTABLE =\r\n            fetchData.map((item, i) => {\r\n                return (\r\n                    <div className=\"col-xl-12 col-lg-12 col-sm-12 my-2\" key={item.id}>\r\n                        <div className=\"card overflow-hidden\">\r\n                            {/* <div className=\"card-body\"> */}\r\n                            <div className=\"text-center\">\r\n                                <div className=\"profile-photo\">\r\n                                    <img\r\n                                        style={{ height: '200px', objectFit: 'contain' }}\r\n                                        src={`http://192.168.1.103/yesilik1/public/images/variants_pics/${item.PicturesLocation}`}\r\n                                        className=\"d-block w-100 img-thumbnail\"\r\n                                        alt=\"\"\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            {/* </div> */}\r\n                        </div>\r\n                    </div>\r\n                )\r\n            })\r\n\r\n    }\r\n    // add to basket start   \r\n    const addBaskets = (e) => {\r\n        e.preventDefault();\r\n        const basket = {\r\n            VariantQuantity: quantity,\r\n        }\r\n        axios.post(`/api/InsertBasket/${id}`, basket).then(res => {\r\n            if (res.data.status === 200) {\r\n                setQuantity(1);\r\n                // setVariantData([]);\r\n                swal(\"Success\", res.data.message, \"success\");\r\n                // thisClicked.closest(\"tr\").remove();\r\n            } else if (res.data.status === 404) {\r\n                swal(\"Success\", res.data.message, \"success\");\r\n            }\r\n        });\r\n\r\n    }\r\n    // add to basket end   \r\n    return (\r\n        <div className=\"container\">\r\n            <Fragment>\r\n                {/* <PageTItle headingPara={t('variants')} activeMenu={t('variant_details')} motherMenu={t('variants')} /> */}\r\n                {/* <!-- Insert  Modal --> */}\r\n                <div className=\"row\" >\r\n                    <div className=\"col-xl-12 col-xxl-12 col-lg-12 col-sm-12 \">\r\n                        <div className=\"row\" >\r\n                            {/* <div > */}\r\n                            <Slider dots={false} infinite={true} slidesToShow={1} slidesToScroll={1}>\r\n                                {viewImages_HTMLTABLE}\r\n                            </Slider>\r\n                            {/* </div> */}\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                    <div className=\"col-xl-12 col-xxl-12 col-lg-12 col-sm-12 mt-4\">\r\n                        <div >\r\n                            {t('availability')} {variants.length}\r\n                        </div>\r\n                        <Slider dots={false} infinite={true} slidesToShow={variants.length >= 4 ? 4 : variants.length} slidesToScroll={1}>\r\n                            {variants.map((item, i) => (\r\n                                <div key={i} className=\"px-1 text-center text-capitalize \" >\r\n                                    {/* <Item as=\"li\" > */}\r\n                                    <Link\r\n                                        to={`/variant-details/${item.variantID}`}\r\n                                        // eventKey={item.SubCategoryName.toLowerCase()}\r\n                                        className={`text-capitalize font-weight-bold ${id == item.variantID ? \"active text-primary\" : \" \"}`}\r\n                                    >\r\n                                        <div>\r\n                                            <img className={`w-100 img-thumbnail mt-1 mx-1 ${id == item.variantID ? \"border border-primary\" : \" \"}`} style={{ height: '80px', objectFit: 'contain' }} src={`http://192.168.1.103/yesilik1/public/images/variants_pics/${item.PicturesLocation}`} alt=\"\" />\r\n                                        </div>\r\n                                        {/* <div className=\"\">\r\n                                        {item.VariationName}\r\n                                    </div> */}\r\n                                    </Link>\r\n                                    {/* </Item> */}\r\n                                </div>\r\n                            )\r\n                            )}\r\n                        </Slider>\r\n                    </div>\r\n\r\n                    <div className=\"col-xl-12 col-xxl-12 col-lg-12 col-sm-12\">\r\n                        {variantData.map((item, i) => {\r\n                            return (\r\n                                <div className=\"card\" key={i}>\r\n                                    <div className=\"card-header font-weight-bold\">\r\n                                        Product Variation Details\r\n                                    </div>\r\n                                    <div className=\"card-body\">\r\n                                        <div className=\"row\">\r\n                                            <div className=\"col-xl-12 col-lg-12  col-md-12 col-xxl-12 col-sm-12\">\r\n                                                <div className=\"product-detail-content\">\r\n                                                    <div className=\"new-arrival-content pr\">\r\n                                                        <h4 >{item.VariationName}</h4>\r\n                                                        <div className=\"star-rating d-inline mb-2\">\r\n                                                            {item.ProductName}\r\n                                                        </div>\r\n                                                        <br></br>\r\n                                                        <p className=\"price\">{item.CurrentPrice + ' ' + item.currency_code}</p>\r\n                                                        <br></br>\r\n                                                        <br></br>\r\n                                                        <p>\r\n                                                            {t('availability')}:\r\n                                                            <span className=\"item\">\r\n                                                                {item.IsAvailable === 0 ? ' Yes ' : ' No '}\r\n                                                                <i className=\"fa fa-shopping-basket\"></i>\r\n                                                            </span>\r\n\r\n                                                        </p>\r\n\r\n                                                        <p>\r\n                                                            {t('variant_code')}:\r\n                                                            <span className=\"item\">{id}</span>\r\n                                                        </p>\r\n                                                        <p>\r\n                                                            {t('unit')}: <span className=\"item\">{item.UnitName}</span>\r\n                                                        </p>\r\n                                                        <h4 className=\"m-b-15\">{t('description')}</h4>\r\n                                                        <p className=\"text-content\"> {item.productDescription}</p>\r\n                                                        <h4 className=\"m-b-15\">{t('advice')}</h4>\r\n                                                        <p className=\"text-content\"> {item.productAdvice}</p>\r\n                                                        <p>{t('variant_details')} </p>\r\n                                                        <Table responsive striped bordered hover>\r\n                                                            <thead>\r\n                                                                <tr>\r\n                                                                    <th>{t('name')}</th>\r\n                                                                    <th>{t('value')}</th>\r\n                                                                </tr>\r\n                                                            </thead>\r\n                                                            <tbody>\r\n                                                                {\r\n                                                                    variantDetails.map((item) => {\r\n                                                                        return (\r\n                                                                            <tr key={item.id}>\r\n                                                                                <td>{item.name}</td>\r\n                                                                                <td>{item.value}</td>\r\n                                                                            </tr>\r\n                                                                        )\r\n                                                                    })\r\n                                                                }\r\n                                                            </tbody>\r\n                                                        </Table>\r\n\r\n                                                        {/* <div className=\"col-2 px-0 mt-2\">\r\n                                                            <div className=\"input-group\">\r\n                                                                <button type=\"button\" onClick={handleDecrement} className=\"input-group-text \">{t('minus')}</button>\r\n                                                                    <div className=\"input-group-text bg-white \"> {quantity}</div>\r\n                                                                <button type=\"button\" onClick={handelIncrement} className=\"input-group-text\" disabled={item.Buyingquantity - item.SellingQuantity === quantity ? 'disabled' : ''}>{t('plus')} </button>\r\n                                                            </div>\r\n                                                            {item.Buyingquantity - item.SellingQuantity === quantity\r\n                                                                ?\r\n                                                                <div className=\"text-danger\">\r\n                                                                    {t('not_available')}\r\n                                                                </div>\r\n                                                                : \"\"\r\n                                                            }\r\n                                                        </div> */}\r\n                                                        {/* <div className=\"shopping-cart mt-5\"> */}\r\n                                                        {/* <Link\r\n                                                                to=\"/page-login\"\r\n                                                                className=\"btn btn-primary btn-lg\">\r\n                                                                <i className=\"fa fa-shopping-basket mr-2\"></i>\r\n                                                                {t('add_to_basket')}\r\n                                                            </Link> */}\r\n                                                        {/* <button\r\n                                                type=\"button\"\r\n                                                onClick={addBaskets}\r\n                                                className=\"btn btn-primary btn-lg\">\r\n                                                <i className=\"fa fa-shopping-basket mr-2\"></i>\r\n                                                    {t('add_to_basket')}\r\n                                            </button>\r\n                                         */}\r\n                                                        {/* </div> */}\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </Fragment>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VariantDetails;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Public Link\\ShowProducts.js",["271","272","273","274","275","276","277","278","279","280","281","282"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// Import css files\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport { base_url, port } from \"../../../Consts\";\r\n\r\n// import Slider from \"react-slick\";\r\n\r\nconst ShowProducts = (props) => {\r\n  // for localization\r\n  const { t } = useTranslation();\r\n  const id = props.match.params.id;\r\n  let varData = [];\r\n  //for retriving data using laravel API\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [variantData, setVariantData] = useState([]);\r\n  const [showVaralint, setShowVarlist] = useState([]);\r\n  const [variantsWithPictures, setVariantsWithPictures] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [skuarray, setSkuArray] = useState([]);\r\n  const [productDetails, setProductDetails] = useState({ price: 0, stock: 0,image:fetchData.image });\r\n  useEffect(() => {\r\n    const getdata = async () => {\r\n      const product = await axios({\r\n        method: \"GET\",\r\n        url: `/api/GetProduct/${id}`,\r\n      });\r\n      const data = product.data.fetchData;\r\n      const res = await axios({\r\n        method: \"GET\",\r\n        url: `/api/Getvariations/${id}`,\r\n      });\r\n      setFetchData(data[0]);\r\n      if (res.data.fetchData !== \"\") {\r\n        varData = JSON.parse(res.data.fetchData);\r\n        parseVariants(varData);\r\n      }\r\n\r\n      setLoading(false);\r\n    };\r\n    getdata(); // axios\r\n    //   .get(`/api/GetVariantsBasedOnProductWithPictures/${id}`)\r\n    //   .then((res) => {\r\n    //     if (res.data.status === 200) {\r\n    //       setVariantsWithPictures(res.data.fetchData);\r\n    //       // console.log(res.data.fetchData);\r\n    //     }\r\n    //   });\r\n  }, [id]);\r\n  const changePrice = (varName, variant) => {\r\n    const keys = Object.keys(showVaralint);\r\n    const varlineindex = keys.indexOf(varName);\r\n    const newSkuArray = skuarray;\r\n    newSkuArray[varlineindex] = variant;\r\n    setSkuArray(newSkuArray);\r\n    if (keys.length == newSkuArray.length) {\r\n      caluclatePrice(newSkuArray, variantData);\r\n    }\r\n  };\r\n  const caluclatePrice = (newSkuArray, variantData) => {\r\n    let sku = id + \"-\";\r\n    for (let i = 0; i < newSkuArray.length; i++) {\r\n      if (i == newSkuArray.length - 1) {\r\n        sku += newSkuArray[i];\r\n      } else {\r\n        sku += newSkuArray[i] + \"-\";\r\n      }\r\n    }\r\n\r\n    const priceList = variantData.filter((item) => {\r\n      return item.sku.replace(/\\s+/g, \"\") == sku.replace(/\\s+/g, \"\");\r\n    });\r\n    console.log(newSkuArray);\r\n    let productdetails = { price: 0, stock: 0 };\r\n    if (priceList.length !== 0) {\r\n      const line = priceList.pop();\r\n      const newProductDetails = { price: line.price, stock: line.stock, image: line.image };\r\n      productdetails = newProductDetails;\r\n    } else {\r\n      const newProductDetails = { price: 0, stock: \"No Stock\", image: fetchData.image  };\r\n      productdetails = newProductDetails;\r\n    }\r\n    // console.log(productdetails);\r\n    setProductDetails({ ...productdetails });\r\n  };\r\n  const parseVariants = (variantData) => {\r\n    const variants = [];\r\n    const savePostion = [\"postion\", \"sku\", \"price\", \"stock\",\"image\"];\r\n    const varLine = variantData[0];\r\n    const varlinekey = Object.keys(varLine);\r\n    for (let i = 0; i < varlinekey.length; i++) {\r\n      if (savePostion.indexOf(varlinekey[i]) == -1) {\r\n        let listvar = variantData.map((item) => {\r\n          return item[varlinekey[i]];\r\n        });\r\n        // get unique variants\r\n        listvar = listvar.filter(\r\n          (thing, index, self) =>\r\n            index ===\r\n            self.findIndex((t) => t.place === listvar.place && t === thing)\r\n        );\r\n        if (listvar[0] != 0) variants[varlinekey[i]] = listvar;\r\n      }\r\n    }\r\n    let def = [];\r\n    Object.keys(variants).map((item) => {\r\n      def.push(variants[item][0]);\r\n    });\r\n    setSkuArray(def);\r\n    caluclatePrice(def, variantData);\r\n    setShowVarlist(variants);\r\n    setVariantData(variantData);\r\n  };\r\n  var viewImages_HTMLTABLE = \"\";\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"container \">\r\n        <div\r\n          className=\"spinner-border text-primary \"\r\n          role=\"status\"\r\n          style={{ position: \"fixed\", top: \"50%\", left: \"50%\" }}\r\n        >\r\n          <span className=\"sr-only\">{t(\"loading\")}</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    var att;\r\n    viewImages_HTMLTABLE = (\r\n      <>\r\n        <div className=\"col-xl-12 col-lg-12 col-sm-12 my-2\">\r\n          <div className=\"card overflow-hidden\">\r\n            <div className=\"text-center\">\r\n              <div className=\"profile-photo\">\r\n                <img\r\n                  style={{ height: \"200px\", objectFit: \"contain\" }}\r\n                  src={productDetails.stock===\"No Stock\"? `http://${base_url}:${port}/images/products/${productDetails.image}` : `http://${base_url}:${port}/images/variants_pics/${productDetails.image}`}\r\n                  className=\"d-block w-100 img-thumbnail\"\r\n                  alt=\"\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-xl-12 col-lg-12 col-sm-12\">\r\n          <div className=\"card border\">\r\n            <div className=\"row mx-3 mt-3\">\r\n              <h4>\r\n                {t(\"product_name\")}: {fetchData.ProductName}\r\n              </h4>\r\n              <p>\r\n                {t(\"description\")}: {fetchData.Description}\r\n              </p>\r\n              <p>\r\n                {t(\"unit\")}: {fetchData.UnitName}\r\n              </p>\r\n              <p>Price : {productDetails.price}</p>\r\n              <p>Stock: {productDetails.stock}</p>\r\n            </div>\r\n            <div className=\"row m-3\">\r\n              <h4> {t(\"vatiants\")}</h4>\r\n            </div>\r\n            <div class=\"row \">\r\n              <>\r\n                {Object.keys(showVaralint).map((list, i) => {\r\n                  return (\r\n                    <div className=\"row\">\r\n                      <div className=\"col md-12\">\r\n                        {list}\r\n                        <div className=\"row\">\r\n                          {showVaralint[list].map((variant) => {\r\n                            return (\r\n                              <div className=\"col-md-1 \">\r\n                                <div\r\n                                  onClick={() => {\r\n                                    changePrice(list, variant);\r\n                                  }}\r\n                                  style={\r\n                                    skuarray[i] == variant\r\n                                      ? {\r\n                                          padding: \"10px\",\r\n                                          border: \"1px solid\",\r\n                                          textAlign: \"center\",\r\n                                          borderRadius: \"10px\",\r\n                                          borderColor: \"red\",\r\n                                        }\r\n                                      : {\r\n                                          padding: \"10px\",\r\n                                          border: \"1px solid\",\r\n                                          textAlign: \"center\",\r\n                                          borderRadius: \"10px\",\r\n                                          borderColor: \"black\",\r\n                                        }\r\n                                  }\r\n                                >\r\n                                  {variant}\r\n                                </div>\r\n                              </div>\r\n                            );\r\n                          })}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n  return (\r\n    <div className=\"container\">\r\n      <Fragment>\r\n        {/* <PageTItle headingPara={t('variants')} activeMenu={t('variant_details')} motherMenu={t('variants')} /> */}\r\n        {/* <!-- Insert  Modal --> */}\r\n        <div className=\"row\">\r\n          <div className=\"col-xl-12 col-xxl-12 col-lg-12 col-sm-12 \">\r\n            <div className=\"row\">{viewImages_HTMLTABLE}</div>\r\n            <div className=\"row\"></div>\r\n          </div>\r\n        </div>\r\n      </Fragment>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ShowProducts;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\index.js",["283","284","285"],"import React from \"react\";\r\n/// React router dom\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Redirect,\r\n  Route,\r\n} from \"react-router-dom\";\r\nimport PrivateRoute from \"./components/PrivateRoute\";\r\n// import PublicRoute from './components/PublicRoute';\r\n/// Css\r\nimport \"./index.css\";\r\nimport \"./chart.css\";\r\n/// Layout\r\nimport Nav from \"./layouts/nav\";\r\nimport Footer from \"./layouts/Footer\";\r\n/// Deshboard\r\nimport Home from \"./components/Dashboard/Home/Home\";\r\nimport Branches from \"./components/Branches/Branches\";\r\nimport BranchShow from \"./components/Branches/Show\";\r\n\r\nimport Category from \"./components/Categories/Category\";\r\nimport Company from \"./components/Companies/Company\";\r\n// import Product from \"./components/Products/Product\";\r\nimport SubMenu from \"./components/Categories/SubCategory\";\r\nimport ServiceArea from \"./components/Services/ServiceArea\";\r\nimport Unit from \"./components/Units/Unit\";\r\nimport Inventory from \"./components/Inventories/Inventory\";\r\nimport Profile from \"./components/Dashboard/Profile/Profile\";\r\nimport Order from \"./components/Orders/Order\";\r\nimport Variants from \"./components/Variants/Variants\";\r\nimport Gallery from \"./components/Variants/Gallary\";\r\nimport Basket from \"./components/Orders/Basket\";\r\n// import VariantDetails from \"./components/Variants/VariantDetails\";\r\n// import ShowBranchDetails from \"./components/Public Link/ShowBranchDetails\";\r\nimport VariantDetails from \"./components/Variants/VariantDetails\";\r\nimport Tables from \"./components/Branches/Tables\";\r\nimport Attributes from \"./components/Attributes/Attributes\";\r\n// import AddProduct from \"./components/Products/AddProduct\";\r\nimport Options from \"./components/Attributes/Options\";\r\n// import Design from \"./components/Design/Design\";\r\nimport Theme from \"./components/Design/Theme\";\r\nimport EditTheme from \"./components/Design/EditTheme\";\r\n// import Customization from \"./components/Design/Templates/Dark/Customization\";\r\nimport CreateRoute from \"./components/Branches/CreateRoute]\";\r\nimport Error404 from \"./pages/Error404\";\r\n\r\nconst Markup = () => {\r\n  const routes = [\r\n    /// Login\r\n    { url: \"dashboard\", component: Home },\r\n    { url: \"branches\", component: Branches },\r\n    { url: \"branches/show\", component: BranchShow },\r\n\r\n    // { url: \"branches/category\", component: Category },\r\n    { url: \"companies\", component: Company },\r\n    // { url: \"branches/category/sub-category/products\", component: Product },\r\n    {\r\n      url: \"branches/category/sub-category/products/variants\",\r\n      component: Variants,\r\n    },\r\n\r\n    // { url: \"branches/category/sub-category\", component: SubMenu },\r\n    { url: \"branches/service-area\", component: ServiceArea },\r\n    { url: \"branches/unit\", component: Unit },\r\n    { url: \"branches/inventory\", component: Inventory },\r\n    { url: \"profile\", component: Profile },\r\n    { url: \"orders\", component: Order },\r\n    { url: \"baskets\", component: Basket },\r\n    { url: \"gallery/:id\", component: Gallery },\r\n    // { url: \"variant-details/:id\", component: VariantDetails },\r\n    // { url: \"show-branch-details/:id\", component: ShowBranchDetails },\r\n    { url: \"show_variant_detials/:id\", component: VariantDetails },\r\n    { url: \"branches/tables\", component: Tables },\r\n    { url: \"attributes\", component: Attributes },\r\n    // { url: \"add-product/:id\", component: AddProduct },\r\n    { url: \"add-option/:id\", component: Options },\r\n    { url: \"branches/design/edit-theme/:id\", component: EditTheme },\r\n    // { url: \"branches/design\", component: Design },\r\n    { url: \"branches/design/add-theme/:id\", component: Theme },\r\n    // { url: \"branches/design/dark-template-customization\", component: Customization },\r\n  ];\r\n\r\n  return (\r\n    <Router>\r\n      <div id=\"main-wrapper\" className=\"show\">\r\n        {localStorage.getItem(\"auth_token\") ? (\r\n          <Nav />\r\n        ) : (\r\n          <Redirect to=\"/page-login\" />\r\n        )}\r\n        <div className=\"content-body\">\r\n          <div className=\"container-fluid\">\r\n            <Switch>\r\n              {routes.map((data, i) => (\r\n                <PrivateRoute\r\n                  key={i}\r\n                  exact\r\n                  path={`/${data.url}`}\r\n                  component={data.component}\r\n                />\r\n              ))}\r\n              <Route component={Error404} />\r\n            </Switch>\r\n\r\n            {/* <CreateRoute /> */}\r\n          </div>\r\n        </div>\r\n        {localStorage.getItem(\"auth_token\") ? <Footer /> : <Redirect to=\"/\" />}\r\n      </div>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default Markup;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Attributes\\Attributes.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Attributes\\Options.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\utils\\index.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Branches\\Tables.js",["286","287"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { Button, Modal, Form } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport { Link } from \"react-router-dom\";\r\nimport * as yup from \"yup\";\r\nimport QRCode from \"qrcode.react\";\r\nimport { CBreadcrumb, CBreadcrumbItem } from \"@coreui/react\";\r\n\r\nconst Tables = (props) => {\r\n  // validation start\r\n  const schema = yup\r\n    .object()\r\n    .shape({\r\n      tableId: yup.string().required(\"This field is a required field\"),\r\n      tableName: yup.string().required(\"This field is a required field\"),\r\n    })\r\n    .required();\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors },\r\n  } = useForm({\r\n    resolver: yupResolver(schema),\r\n  });\r\n  // validation end\r\n\r\n  // for localization\r\n  const { t } = useTranslation();\r\n  // ID\r\n  const id = props.history.location.state.id;\r\n\r\n  // insert modal\r\n  const [modalCentered, setModalCentered] = useState(false);\r\n  const [tableInsert, setTableInsert] = useState({\r\n    branchId: id,\r\n  });\r\n  const handleInput = (e) => {\r\n    e.persist();\r\n    setTableInsert({ ...tableInsert, [e.target.name]: e.target.value });\r\n  };\r\n  const saveTable = (e) => {\r\n    // e.preventDefault();\r\n    axios.post(\"/api/InsertTable\", tableInsert).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setTableInsert({\r\n          branchId: id,\r\n        });\r\n        reset();\r\n\r\n        swal(\"Success\", res.data.message, \"success\");\r\n        setModalCentered(false);\r\n        //  this.props.history.push(\"/\")\r\n      }\r\n    });\r\n  };\r\n  // insert end\r\n\r\n  // edit modal\r\n  const [editmodalCentered, setEditModalCentered] = useState(false);\r\n  const [editTable, setEditTable] = useState([]);\r\n  const editHandleInput = (e) => {\r\n    e.persist();\r\n    setEditTable({ ...editTable, [e.target.name]: e.target.value });\r\n  };\r\n  const fetchTable = (e, id) => {\r\n    e.preventDefault();\r\n    axios.get(`/api/EditTable/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setEditTable(res.data.Details);\r\n        setEditModalCentered(true);\r\n      } else if (res.data.status === 404) {\r\n        swal(\"Error\", res.data.message, \"error\");\r\n      }\r\n    });\r\n  };\r\n  const updateTable = (e) => {\r\n    e.preventDefault();\r\n    axios.post(\"/api/UpdateTable\", editTable).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setEditTable(\"\");\r\n        swal(\"Success\", res.data.message, \"success\");\r\n        setEditModalCentered(false);\r\n        //  this.props.history.push(\"/\")\r\n      } else if (res.data.status === 404) {\r\n        swal(\"Error\", res.data.message, \"error\");\r\n      }\r\n    });\r\n  };\r\n  // edit end\r\n  // delete section\r\n  const deleteTable = (e, id) => {\r\n    e.preventDefault();\r\n    swal({\r\n      title: \"Are you sure?\",\r\n      text: \"Once deleted, you will not be able to recover this imaginary file!\",\r\n      icon: \"warning\",\r\n      buttons: [t(\"cancel\"), t(\"confirm\")],\r\n      dangerMode: true,\r\n    }).then((willDelete) => {\r\n      if (willDelete) {\r\n        axios.delete(`/api/DeleteTable/${id}`).then((res) => {\r\n          if (res.data.status === 200) {\r\n            swal(\"Success\", res.data.message, \"success\");\r\n            setTableInsert({\r\n              branchId: id,\r\n            });\r\n          } else if (res.data.status === 404) {\r\n            swal(\"Error\", res.data.message, \"error\");\r\n          }\r\n        });\r\n      } else {\r\n        swal(\"Your Data is safe now!\");\r\n      }\r\n    });\r\n  };\r\n  // delete end\r\n  //for retriving data using laravel API\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  useEffect(() => {\r\n    axios.get(`/api/GetTables/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        // console.log(res.data.fetchData);\r\n        setFetchData(res.data.fetchData);\r\n      }\r\n      setLoading(false);\r\n    });\r\n  }, [tableInsert, editTable, id]);\r\n  // download QRcode\r\n  const downloadQRCode = (e, id) => {\r\n    e.preventDefault();\r\n    // console.log(id)\r\n\r\n    const qrCodeURL = document\r\n      .getElementById(id)\r\n      .toDataURL(\"image/png\")\r\n      .replace(\"image/png\", \"image/octet-stream\");\r\n    let aEl = document.createElement(\"a\");\r\n    aEl.href = qrCodeURL;\r\n    aEl.download = \"Branch_QR_Code.png\";\r\n    document.body.appendChild(aEl);\r\n    aEl.click();\r\n    document.body.removeChild(aEl);\r\n  };\r\n  var viewProducts_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"spinner-border text-primary \" role=\"status\">\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewProducts_HTMLTABLE = fetchData.map((item, i) => {\r\n      return (\r\n        <tr key={item.id}>\r\n          <td> {item.tableId}</td>\r\n          <td> {item.tableName}</td>\r\n          <td>\r\n            <QRCode\r\n              id={btoa(item.id)}\r\n              level={\"H\"}\r\n              size={256}\r\n              fgColor=\"red\"\r\n              value={`http://192.168.1.103:3000/show-branch-details/${btoa(\r\n                item.id\r\n              )}`}\r\n              className=\"primary d-none\"\r\n            />\r\n            <Link to=\"\" onClick={(e) => downloadQRCode(e, btoa(item.id))}>\r\n              {\" \"}\r\n              {t(\"download_qr_code\")}\r\n            </Link>\r\n          </td>\r\n          <td>\r\n            <button\r\n              type=\"button\"\r\n              onClick={(e) => fetchTable(e, item.id)}\r\n              className=\"btn btn-outline-danger btn-sm\"\r\n            >\r\n              {t(\"edit\")}\r\n            </button>\r\n            &nbsp;&nbsp;&nbsp;\r\n            <button\r\n              type=\"button\"\r\n              onClick={(e) => deleteTable(e, item.id)}\r\n              className=\"btn btn-outline-warning btn-sm\"\r\n            >\r\n              {t(\"delete\")}\r\n            </button>\r\n          </td>\r\n        </tr>\r\n      );\r\n    });\r\n  }\r\n  return (\r\n    <Fragment>\r\n      <Modal className=\"fade\" show={modalCentered}>\r\n        <Form\r\n          onSubmit={handleSubmit(saveTable)}\r\n          method=\"POST\"\r\n          encType=\"multipart/form-data\"\r\n        >\r\n          <Modal.Header>\r\n            <Modal.Title>{t(\"add_table\")}</Modal.Title>\r\n            <Button\r\n              onClick={() => setModalCentered(false)}\r\n              variant=\"\"\r\n              className=\"close\"\r\n            >\r\n              <span>&times;</span>\r\n            </Button>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>{t(\"table_id\")} </strong>{\" \"}\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                {...register(\"tableId\")}\r\n                className={\r\n                  errors.tableId?.message\r\n                    ? \"form-control  is-invalid\"\r\n                    : \"form-control\"\r\n                }\r\n                placeholder={t(\"table_id\")}\r\n                name=\"tableId\"\r\n                onChange={handleInput}\r\n                value={tableInsert.tableId}\r\n              />\r\n              {errors.tableId?.message && (\r\n                <div className=\"invalid-feedback\">\r\n                  {errors.tableId?.message}\r\n                </div>\r\n              )}\r\n              {/* <div className=\"text-danger\">\r\n                                {errors.name?.message}\r\n                            </div> */}\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>{t(\"table_name\")} </strong>{\" \"}\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                {...register(\"tableName\")}\r\n                className={\r\n                  errors.tableName?.message\r\n                    ? \"form-control  is-invalid\"\r\n                    : \"form-control\"\r\n                }\r\n                placeholder={t(\"table_name\")}\r\n                name=\"tableName\"\r\n                onChange={handleInput}\r\n                value={tableInsert.tableName}\r\n              />\r\n              {errors.tableName?.message && (\r\n                <div className=\"invalid-feedback\">\r\n                  {errors.tableName?.message}\r\n                </div>\r\n              )}\r\n              {/* <div className=\"text-danger\">\r\n                                {errors.value?.message}\r\n                            </div> */}\r\n            </div>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button\r\n              onClick={() => setModalCentered(false)}\r\n              variant=\"danger light\"\r\n            >\r\n              {t(\"close\")}\r\n            </Button>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              {t(\"save\")}\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Form>\r\n      </Modal>\r\n      {/* Edit Modal */}\r\n      <Modal className=\"fade\" show={editmodalCentered}>\r\n        <Form onSubmit={updateTable} method=\"POST\">\r\n          <Modal.Header>\r\n            <Modal.Title>{t(\"edit_table\")} </Modal.Title>\r\n            <Button\r\n              onClick={() => setEditModalCentered(false)}\r\n              variant=\"\"\r\n              className=\"close\"\r\n            >\r\n              <span>&times;</span>\r\n            </Button>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <div className=\"form-group text-center\">\r\n              <QRCode\r\n                level={\"H\"}\r\n                size={256}\r\n                fgColor=\"#f50b65\"\r\n                value={`http://192.168.1.103:3000/show-branch-details/${btoa(\r\n                  editTable.tableId\r\n                )}`}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>{t(\"table_id\")}</strong>{\" \"}\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                placeholder={t(\"table_id\")}\r\n                name=\"tableId\"\r\n                required\r\n                onChange={editHandleInput}\r\n                value={editTable.tableId}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>{t(\"table_name\")}</strong>{\" \"}\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                placeholder={t(\"table_name\")}\r\n                name=\"tableName\"\r\n                required\r\n                onChange={editHandleInput}\r\n                value={editTable.tableName}\r\n              />\r\n            </div>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button\r\n              onClick={() => setEditModalCentered(false)}\r\n              variant=\"danger light\"\r\n            >\r\n              {t(\"close\")}\r\n            </Button>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              {t(\"update\")}{\" \"}\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Form>\r\n      </Modal>\r\n      <div className=\"row\">\r\n        <div className=\"col-xl-12 col-xxl-12 col-lg-12 col-sm-12\">\r\n          <div className=\"card\">\r\n            <div className=\"card-header border-0\">\r\n              <div>\r\n                <h4 className=\"card-title mb-2\">{t(\"tables\")}</h4>\r\n              </div>\r\n              <div className=\"dropdown\">\r\n                <Button\r\n                  variant=\"primary\"\r\n                  type=\"button\"\r\n                  className=\"mb-2 mr-2\"\r\n                  onClick={() => setModalCentered(true)}\r\n                >\r\n                  {t(\"add_table\")}\r\n                </Button>\r\n              </div>\r\n            </div>\r\n            <div className=\"card-body p-0\">\r\n              <div className=\"table-responsive \">\r\n                <table className=\"table text-center \">\r\n                  <thead>\r\n                    <tr className=\"card-title\">\r\n                      {/* <th>{t('number')}</th> */}\r\n                      <th>{t(\"table_id\")}</th>\r\n                      <th>{t(\"table_name\")}</th>\r\n                      <th>{t(\"download\")}</th>\r\n                      <th>{t(\"actions\")}</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>{viewProducts_HTMLTABLE}</tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Tables;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Variants\\VariantDetails.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Variants\\Gallary.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Variants\\Variants.js",["288","289","290","291","292","293","294","295","296","297","298","299","300","301","302","303","304","305","306"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport Grid from \"./Grid\";\r\nimport { CBreadcrumb, CBreadcrumbItem } from \"@coreui/react\";\r\nimport { base_url, port } from \"../../../Consts\";\r\nimport Select from \"react-select\";\r\n\r\nconst Variants = (props) => {\r\n  // for localization\r\n  const { t } = useTranslation();\r\n  const id = props.history.location.state.id;\r\n\r\n  const [nameAttr, setNameAtter] = useState({});\r\n  const [attributes, setAttributes] = useState([]);\r\n  const [filerAttributes, setfilerAttributes] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [numberOfVar, setNumberOfVar] = useState([]);\r\n  const [jsonVaraints, setJsonVaratis] = useState(\"\");\r\n  const [check, setCheck] = useState(false);\r\n  useEffect(() => {\r\n    const getdata = async () => {\r\n      const jsonvar = await axios({\r\n        method: \"GET\",\r\n        url: `/api/Getvariations/${id}`,\r\n      });\r\n      if (jsonvar.data.status == 200) {\r\n        setJsonVaratis(jsonvar.data.fetchData);\r\n      }\r\n\r\n      const res = await axios({\r\n        method: \"POST\",\r\n        url: \"/api/GetAttributes\",\r\n      });\r\n      const nameAtter = {};\r\n      res.data.fetchData.map((fetchData) => {\r\n        nameAtter[fetchData.attributeName] = \"\";\r\n      });\r\n      if (\r\n        res.data.fetchData.length !== attributes.length &&\r\n        jsonvar.data.fetchData == \"\"\r\n      ) {\r\n        const varLines = [];\r\n\r\n        res.data.fetchData.map((fetchData) => {\r\n          nameAtter[fetchData.attributeName] = \"\";\r\n        });\r\n\r\n        varLines.push({\r\n          postion: 0,\r\n          sku: \"\",\r\n          price: \"\",\r\n          stock: \"\",\r\n          image: \"\",\r\n          // ...nameAtter,\r\n        });\r\n        // setNameAtter(nameAtter);\r\n\r\n        setNumberOfVar(varLines);\r\n        setAttributes(res.data.fetchData);\r\n      } else {\r\n        const varLines = [];\r\n\r\n        const arrayVar = JSON.parse(jsonvar.data.fetchData);\r\n        const AttNames = {};\r\n\r\n        arrayVar.map((fetchData) => {\r\n          const attrFilterName = [];\r\n\r\n          let line = {};\r\n          let count = 0;\r\n          for (const [key, value] of Object.entries(fetchData)) {\r\n            if (\r\n              key == \"postion\" ||\r\n              key == \"sku\" ||\r\n              key == \"price\" ||\r\n              key == \"stock\" ||\r\n              key == \"image\"\r\n            ) {\r\n              line[key] = value;\r\n            } else if (nameAtter.hasOwnProperty(key)) {\r\n              line[key] = value;\r\n              attrFilterName.push({\r\n                id: count,\r\n                value: value,\r\n                label: key,\r\n              });\r\n              AttNames[key] = \"\";\r\n            } else {\r\n              if (count < Object.keys(nameAtter).length) {\r\n                line[Object.keys(nameAtter)[count]] = value;\r\n              }\r\n              count++;\r\n            }\r\n          }\r\n\r\n          varLines.push(line);\r\n          setfilerAttributes(attrFilterName);\r\n        });\r\n        // console.log(AttNames);\r\n        setNameAtter(AttNames);\r\n\r\n        setNumberOfVar(varLines);\r\n        setAttributes(res.data.fetchData);\r\n      }\r\n    };\r\n\r\n    getdata();\r\n    setLoading(false);\r\n  }, []);\r\n  const CreateNewVar = () => {\r\n    let postion = 0;\r\n    if (numberOfVar.length > 0) {\r\n      postion = numberOfVar.length;\r\n    }\r\n    setNumberOfVar([\r\n      ...numberOfVar,\r\n      {\r\n        postion: postion,\r\n        sku: \"\",\r\n        price: \"\",\r\n        stock: \"\",\r\n        image: \"\",\r\n        ...nameAttr,\r\n      },\r\n    ]);\r\n  };\r\n  const removeVar = () => {\r\n    const varsLines = numberOfVar;\r\n    varsLines.pop();\r\n    setNumberOfVar([...varsLines]);\r\n  };\r\n  // select box\r\n  const getJSONVaraints = (items) => {\r\n    setJsonVaratis(items);\r\n  };\r\n  const saveVaraiants = async () => {\r\n    if (numberOfVar.length === JSON.parse(jsonVaraints).length) {\r\n      const formdata = new FormData();\r\n      formdata.append(\"product_id\", id);\r\n      formdata.append(\"vars\", jsonVaraints);\r\n      const res = await axios({\r\n        method: \"post\",\r\n        data: formdata,\r\n        url: \"/api/saveVars\",\r\n      });\r\n      if (res.data.status === 200) {\r\n        swal(\"Success\", res.data.message, \"success\");\r\n      } else {\r\n        swal(\"error\", res.data.message, \"error\");\r\n      }\r\n    } else {\r\n      console.log(jsonVaraints);\r\n      return;\r\n    }\r\n  };\r\n  const recheckitem = (item) => {\r\n    console.log(item);\r\n  };\r\n\r\n  // select box\r\n  const handleSelectEvent = (e) => {\r\n    // e.map((item) =>\r\n    // {\r\n    setfilerAttributes(e);\r\n\r\n    // });\r\n    // console.log(filerAttributes);\r\n    // console.log(attributes);\r\n    const nameAtter = {};\r\n    e?.map((item) => {\r\n      nameAtter[item.label] = \"\";\r\n    });\r\n    const varLines = [];\r\n    varLines.push({\r\n      postion: 0,\r\n      sku: \"\",\r\n      price: \"\",\r\n      stock: \"\",\r\n      image: \"\",\r\n      ...nameAtter,\r\n    });\r\n    // console.log(nameAtter);\r\n    setNameAtter(nameAtter);\r\n\r\n    setNumberOfVar(varLines);\r\n  };\r\n\r\n  var branchID = 0;\r\n  var CategoryID = 0;\r\n  var sub_category_id = 0;\r\n  if (loading) {\r\n    return (\r\n      <div className=\"spinner-border text-primary \" role=\"status\">\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <Fragment>\r\n        <CBreadcrumb style={{ \"--cui-breadcrumb-divider\": \"'>'\" }}>\r\n          <CBreadcrumbItem\r\n            className=\"font-weight-bold\"\r\n            // href=\"/branches\"\r\n          >\r\n            {t(\"Branches\")}\r\n          </CBreadcrumbItem>\r\n          <CBreadcrumbItem\r\n            className=\"font-weight-bold\"\r\n            // href={`/category/${branchID}`}\r\n          >\r\n            {t(\"categories\")}\r\n          </CBreadcrumbItem>\r\n          <CBreadcrumbItem\r\n            className=\"font-weight-bold\"\r\n            // href={`/sub-category/${CategoryID}`}\r\n          >\r\n            {t(\"sub_category\")}\r\n          </CBreadcrumbItem>\r\n          <CBreadcrumbItem\r\n            className=\"font-weight-bold\"\r\n            // href={`/products/${sub_category_id}`}\r\n          >\r\n            {t(\"products\")}{\" \"}\r\n          </CBreadcrumbItem>\r\n          <CBreadcrumbItem active> {t(\"variants\")} </CBreadcrumbItem>\r\n        </CBreadcrumb>\r\n\r\n        <div className=\"row\">\r\n          <div className=\"col-xl-12 col-lg-12 col-sm-12 \">\r\n            <div className=\"card \">\r\n              <Select\r\n                defaultValue={filerAttributes?.map((sec) => {\r\n                  return sec.label;\r\n                })}\r\n                isMulti\r\n                options={attributes.map((o, i) => {\r\n                  return { id: i, value: o.id, label: o.attributeName };\r\n                })}\r\n                onChange={handleSelectEvent}\r\n                name=\"attributeName\"\r\n                className=\"basic-multi-select\"\r\n                classNamePrefix=\"select\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"row\">\r\n          <div className=\"col-xl-12 col-lg-12 col-sm-12 \">\r\n            <div className=\"card \">\r\n              <div className=\"col-xl-12 col-lg-12 col-sm-12 \">\r\n                <Grid\r\n                  recheck={(item) => {\r\n                    recheckitem(item);\r\n                  }}\r\n                  getJSONVaraints={(items) => getJSONVaraints(items)}\r\n                  numberOfVar={numberOfVar}\r\n                  filerAttributes={filerAttributes}\r\n                  productid={id}\r\n                ></Grid>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-xl-12 col-lg-12 col-sm-12\">\r\n            <div className=\"row \">\r\n              <div className=\"col-xl-1 col-lg-1 col-sm-1\">\r\n                <Button onClick={CreateNewVar}> Add Variant</Button>\r\n              </div>\r\n              <div className=\"col-xl-1 col-lg-1 col-sm-1\">\r\n                <Button onClick={removeVar}>Remove Variant</Button>\r\n              </div>\r\n              <div className=\"col-xl-1 col-lg-1 col-sm-1\">\r\n                <Button onClick={saveVaraiants}> Save Variants</Button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Variants;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Branches\\Branches.js",["307"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { Button, Modal, Form } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport QRCode from \"qrcode.react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as yup from \"yup\";\r\nimport {\r\n  CBreadcrumb,\r\n  CDropdownMenu,\r\n  CDropdown,\r\n  CDropdownToggle,\r\n  CBreadcrumbItem,\r\n  CCloseButton,\r\n  COffcanvas,\r\n  COffcanvasBody,\r\n  COffcanvasHeader,\r\n  COffcanvasTitle,\r\n} from \"@coreui/react\";\r\n// import ReactWhatsapp from 'react-whatsapp';\r\n// import FloatingWhatsApp from 'react-floating-whatsapp'\r\n\r\nconst Branches = () => {\r\n  // validation start\r\n  const schema = yup\r\n    .object()\r\n    .shape({\r\n      BrancheName: yup.string().required(\"This field is a required field\"),\r\n      currencyID: yup.string().required(\"This field is a required field\"),\r\n    })\r\n    .required();\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors },\r\n  } = useForm({\r\n    resolver: yupResolver(schema),\r\n  });\r\n  // validation end\r\n\r\n  // localization\r\n  const { t } = useTranslation();\r\n\r\n  // insert start\r\n  const [modalCentered, setModalCentered] = useState(false);\r\n  const [branchstate, setBranchstate] = useState([]);\r\n  const handleInput = (e) => {\r\n    e.preventDefault();\r\n    setBranchstate({ ...branchstate, [e.target.name]: e.target.value });\r\n  };\r\n  const saveBranch = (e) => {\r\n    // e.preventDefault();\r\n    axios.post(\"/api/InsertBranches\", branchstate).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setBranchstate([]);\r\n        reset();\r\n        swal(\"Success\", res.data.message, \"success\");\r\n        setModalCentered(false);\r\n      }\r\n    });\r\n  };\r\n  // insert end\r\n\r\n  // edit start\r\n  const [editmodalCentered, setEditModalCentered] = useState(false);\r\n\r\n  const [editBranchstate, setEditBranchstate] = useState([]);\r\n  const editHandleInput = (e) => {\r\n    e.persist();\r\n    setEditBranchstate({ ...editBranchstate, [e.target.name]: e.target.value });\r\n  };\r\n  const editBranch = (e, id) => {\r\n    e.preventDefault();\r\n    axios.get(`/api/EditBranches/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setEditBranchstate(res.data.branch);\r\n        setEditModalCentered(true);\r\n      } else if (res.data.status === 404) {\r\n        swal(\"Error\", res.data.message, \"error\");\r\n      }\r\n    });\r\n  };\r\n  const updateBranch = (e) => {\r\n    e.preventDefault();\r\n    console.log(editBranchstate);\r\n\r\n    axios.post(\"/api/UpdateBranches\", editBranchstate).then((res) => {\r\n      if (res.data.status === 200) {\r\n        // console.log(res.data.status);\r\n        setEditBranchstate([]);\r\n        swal(\"Success\", res.data.message, \"success\");\r\n        setEditModalCentered(false);\r\n        //  this.props.history.push(\"/\")\r\n      }\r\n    });\r\n  };\r\n  // edit end\r\n  // delete start\r\n  const deleteBranch = (e, id) => {\r\n    e.preventDefault();\r\n    swal({\r\n      title: \"Are you sure?\",\r\n      text: \"Once deleted, you will not be able to recover this imaginary file!\",\r\n      icon: \"warning\",\r\n      buttons: [t(\"cancel\"), t(\"confirm\")],\r\n      dangerMode: true,\r\n    }).then((willDelete) => {\r\n      if (willDelete) {\r\n        axios.delete(`/api/DeleteBranches/${id}`).then((res) => {\r\n          if (res.data.status === 200) {\r\n            swal(\"Success\", res.data.message, \"success\");\r\n            // thisClicked.closest(\"tr\").remove();\r\n          } else if (res.data.status === 404) {\r\n            swal(\"Success\", res.data.message, \"success\");\r\n          }\r\n          setBranchstate([]);\r\n        });\r\n      } else {\r\n        swal(\"Your Data is safe now!\");\r\n      }\r\n    });\r\n  };\r\n  // delete end\r\n  //for retriving data using laravel API\r\n  const [branchdata, setBranchdata] = useState([]);\r\n  const [currency, setCurrency] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  // for mobile\r\n  const [visible, setVisible] = useState(false);\r\n  useEffect(() => {\r\n    axios.get(\"/api/GetBranches\").then((res) => {\r\n      if (res.data.status === 200) {\r\n        setBranchdata(res.data.branches);\r\n      }\r\n      setLoading(false);\r\n    });\r\n    axios.get(\"/api/GetCurrencies\").then((res) => {\r\n      if (res.data.status === 200) {\r\n        setCurrency(res.data.fetchData);\r\n      }\r\n    });\r\n  }, [branchstate, editBranchstate]);\r\n  // to display public link inside phone\r\n  const [destinationLink, setDestinationLink] = useState(\"\");\r\n  const phone = (e, srcLink) => {\r\n    e.preventDefault();\r\n    setDestinationLink(srcLink);\r\n    setVisible(true);\r\n  };\r\n\r\n  // for download QRCode\r\n  const downloadQRCode = (e, id) => {\r\n    e.preventDefault();\r\n    // console.log(id)\r\n\r\n    const qrCodeURL = document\r\n      .getElementById(id)\r\n      .toDataURL(\"image/png\")\r\n      .replace(\"image/png\", \"image/octet-stream\");\r\n    let aEl = document.createElement(\"a\");\r\n    aEl.href = qrCodeURL;\r\n    aEl.download = \"Branch_QR_Code.png\";\r\n    document.body.appendChild(aEl);\r\n    aEl.click();\r\n    document.body.removeChild(aEl);\r\n  };\r\n\r\n  var viewBranches_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"spinner-border text-primary \" role=\"status\">\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewBranches_HTMLTABLE = branchdata.map((item, i) => {\r\n      return (\r\n        <div className=\"col-xl-4 col-lg-6 col-sm-6\" key={item.id}>\r\n          <div className=\"card overflow-hidden\">\r\n            <div className=\"card-body\">\r\n              <div className=\"text-center\">\r\n                <Link\r\n                  // to={`branches/category/${btoa(item.id)}`}\r\n                  // // to={`/branches/show/${btoa(item.id)}`}\r\n                  to={{\r\n                    pathname: `/branches/show`,\r\n                    state: { id: item.id, BrancheName: item.BrancheName },\r\n                  }}\r\n                  // to={{\r\n                  //   pathname: `/branches/category`,\r\n                  //   state: { id: item.id,BrancheName: item.BrancheName },\r\n                  // }}\r\n                >\r\n                  <QRCode\r\n                    id={btoa(item.id)}\r\n                    level={\"H\"}\r\n                    size={256}\r\n                    fgColor=\"#f50b65\"\r\n                    value={`http://192.168.1.103:3000/show-branch-details/${btoa(\r\n                      item.id\r\n                    )}`}\r\n                    className=\"primary\"\r\n                  />\r\n                  <Link to=\"\" onClick={(e) => downloadQRCode(e, btoa(item.id))}>\r\n                    {\" \"}\r\n                    <p>{t(\"download_qr_code\")}</p>\r\n                  </Link>\r\n                  <h3 className=\"mt-4 mb-1\"> {item.BrancheName}</h3>\r\n                </Link>\r\n                <CDropdown variant=\"btn-group\">\r\n                  {/* <CButton color=\"primary\" size=\"sm\"></CButton> */}\r\n                  <CDropdownToggle\r\n                    color=\"primary\"\r\n                    size=\"lg\"\r\n                    split\r\n                    shape=\"rounded\"\r\n                    caret={false}\r\n                  >\r\n                    <svg\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      width=\"32\"\r\n                      height=\"32\"\r\n                      fill=\"currentColor\"\r\n                      className=\"bi bi-three-dots\"\r\n                      viewBox=\"0 0 16 16\"\r\n                    >\r\n                      <path d=\"M3 9.5a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm5 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm5 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3z\" />\r\n                    </svg>\r\n                  </CDropdownToggle>\r\n                  <CDropdownMenu>\r\n                    <div className=\"mx-3 my-2\">\r\n                      <Link to=\"\" onClick={(e) => editBranch(e, item.id)}>\r\n                        <svg\r\n                          xmlns=\"http://www.w3.org/2000/svg\"\r\n                          width=\"16\"\r\n                          height=\"16\"\r\n                          fill=\"currentColor\"\r\n                          className=\"bi bi-pencil-square\"\r\n                          viewBox=\"0 0 16 16\"\r\n                        >\r\n                          <path d=\"M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z\" />\r\n                          <path\r\n                            fillRule=\"evenodd\"\r\n                            d=\"M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z\"\r\n                          />\r\n                        </svg>\r\n                        <span> {t(\"edit\")}</span>\r\n                      </Link>\r\n                    </div>\r\n                    <div className=\"mx-3 my-2\">\r\n                      <Link to=\"\" onClick={(e) => deleteBranch(e, item.id)}>\r\n                        <svg\r\n                          xmlns=\"http://www.w3.org/2000/svg\"\r\n                          width=\"16\"\r\n                          height=\"16\"\r\n                          fill=\"currentColor\"\r\n                          className=\"bi bi-trash\"\r\n                          viewBox=\"0 0 16 16\"\r\n                        >\r\n                          <path d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z\" />\r\n                          <path\r\n                            fillRule=\"evenodd\"\r\n                            d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\"\r\n                          />\r\n                        </svg>\r\n                        <span> {t(\"delete\")}</span>\r\n                      </Link>\r\n                    </div>\r\n                    {/* <div className=\"mx-3 my-2\">\r\n                      <Link\r\n                        to=\"\"\r\n                        data-toggle=\"tooltip\"\r\n                        data-placement=\"right\"\r\n                        title=\"To perview on mobile click this.\"\r\n                        onClick={(e) =>\r\n                          phone(\r\n                            e,\r\n                            `/standard-template/${btoa(item.id)}`\r\n                          )\r\n                        }\r\n                      >\r\n                        <svg\r\n                          xmlns=\"http://www.w3.org/2000/svg\"\r\n                          width=\"16\"\r\n                          height=\"16\"\r\n                          fill=\"currentColor\"\r\n                          className=\"bi bi-phone-fill\"\r\n                          viewBox=\"0 0 16 16\"\r\n                        >\r\n                          <path d=\"M3 2a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V2zm6 11a1 1 0 1 0-2 0 1 1 0 0 0 2 0z\" />\r\n                        </svg>\r\n                        <span> {t(\"preview\")}</span>\r\n                      </Link>\r\n                    </div>\r\n\r\n                    <div className=\"mx-3 my-2\">\r\n                      <Link\r\n                        to={{\r\n                          pathname: `/branches/service-area`,\r\n                          state: { id: item.id, BrancheName: item.BrancheName },\r\n                        }}\r\n                      >\r\n                        <svg\r\n                          xmlns=\"http://www.w3.org/2000/svg\"\r\n                          width=\"16\"\r\n                          height=\"16\"\r\n                          fill=\"currentColor\"\r\n                          className=\"bi bi-bounding-box\"\r\n                          viewBox=\"0 0 16 16\"\r\n                        >\r\n                          <path d=\"M5 2V0H0v5h2v6H0v5h5v-2h6v2h5v-5h-2V5h2V0h-5v2H5zm6 1v2h2v6h-2v2H5v-2H3V5h2V3h6zm1-2h3v3h-3V1zm3 11v3h-3v-3h3zM4 15H1v-3h3v3zM1 4V1h3v3H1z\" />\r\n                        </svg>\r\n                        <span> {t(\"services\")}</span>\r\n                      </Link>\r\n                    </div>\r\n                    <div className=\"mx-3 my-2\">\r\n                      <Link\r\n                        to={{\r\n                          pathname: `/branches/unit`,\r\n                          state: { id: item.id, BrancheName: item.BrancheName },\r\n                        }}\r\n                      >\r\n                        <svg\r\n                          xmlns=\"http://www.w3.org/2000/svg\"\r\n                          width=\"16\"\r\n                          height=\"16\"\r\n                          fill=\"currentColor\"\r\n                          className=\"bi bi-border-style\"\r\n                          viewBox=\"0 0 16 16\"\r\n                        >\r\n                          <path d=\"M1 3.5a.5.5 0 0 1 .5-.5h13a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-13a.5.5 0 0 1-.5-.5v-1zm0 4a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-5a.5.5 0 0 1-.5-.5v-1zm0 4a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1zm8 0a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1zm-4 0a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1zm8 0a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1zm-4-4a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-5a.5.5 0 0 1-.5-.5v-1z\" />\r\n                        </svg>\r\n                        <span> {t(\"units\")}</span>\r\n                      </Link>\r\n                    </div>\r\n\r\n                    <div className=\"mx-3 my-2\">\r\n                      <Link\r\n                        to={{\r\n                          pathname: `/branches/inventory`,\r\n                          state: { id: item.id, BrancheName: item.BrancheName },\r\n                        }}\r\n                      >\r\n                        <svg\r\n                          xmlns=\"http://www.w3.org/2000/svg\"\r\n                          width=\"16\"\r\n                          height=\"16\"\r\n                          fill=\"currentColor\"\r\n                          className=\"bi bi-stack-overflow\"\r\n                          viewBox=\"0 0 16 16\"\r\n                        >\r\n                          <path d=\"M12.412 14.572V10.29h1.428V16H1v-5.71h1.428v4.282h9.984z\" />\r\n                          <path d=\"M3.857 13.145h7.137v-1.428H3.857v1.428zM10.254 0 9.108.852l4.26 5.727 1.146-.852L10.254 0zm-3.54 3.377 5.484 4.567.913-1.097L7.627 2.28l-.914 1.097zM4.922 6.55l6.47 3.013.603-1.294-6.47-3.013-.603 1.294zm-.925 3.344 6.985 1.469.294-1.398-6.985-1.468-.294 1.397z\" />\r\n                        </svg>\r\n                        <span> {t(\"inventory\")}</span>\r\n                      </Link>\r\n                    </div>\r\n                    <div className=\"mx-3 my-2\">\r\n                      <Link\r\n                        to={{\r\n                          pathname: `/branches/tables`,\r\n                          state: { id: item.id, BrancheName: item.BrancheName },\r\n                        }}\r\n                      >\r\n                        <svg\r\n                          xmlns=\"http://www.w3.org/2000/svg\"\r\n                          width=\"16\"\r\n                          height=\"16\"\r\n                          fill=\"currentColor\"\r\n                          className=\"bi bi-tablet\"\r\n                          viewBox=\"0 0 16 16\"\r\n                        >\r\n                          <path d=\"M12 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h8zM4 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H4z\" />\r\n                          <path d=\"M8 14a1 1 0 1 0 0-2 1 1 0 0 0 0 2z\" />\r\n                        </svg>\r\n                        <span> {t(\"tables\")}</span>\r\n                      </Link>\r\n                    </div>\r\n                    <span className=\"mx-3 my-2\">\r\n                      <Link\r\n                        to={`/standard-template/${btoa(item.id)}`}\r\n                        // to={`/dark-template/${btoa(item.id)}`}\r\n                        target=\"_blank\"\r\n                      >\r\n                        <svg\r\n                          xmlns=\"http://www.w3.org/2000/svg\"\r\n                          width=\"16\"\r\n                          height=\"16\"\r\n                          fill=\"currentColor\"\r\n                          className=\"bi bi-plus-square-dotted\"\r\n                          viewBox=\"0 0 16 16\"\r\n                        >\r\n                          <path d=\"M2.5 0c-.166 0-.33.016-.487.048l.194.98A1.51 1.51 0 0 1 2.5 1h.458V0H2.5zm2.292 0h-.917v1h.917V0zm1.833 0h-.917v1h.917V0zm1.833 0h-.916v1h.916V0zm1.834 0h-.917v1h.917V0zm1.833 0h-.917v1h.917V0zM13.5 0h-.458v1h.458c.1 0 .199.01.293.029l.194-.981A2.51 2.51 0 0 0 13.5 0zm2.079 1.11a2.511 2.511 0 0 0-.69-.689l-.556.831c.164.11.305.251.415.415l.83-.556zM1.11.421a2.511 2.511 0 0 0-.689.69l.831.556c.11-.164.251-.305.415-.415L1.11.422zM16 2.5c0-.166-.016-.33-.048-.487l-.98.194c.018.094.028.192.028.293v.458h1V2.5zM.048 2.013A2.51 2.51 0 0 0 0 2.5v.458h1V2.5c0-.1.01-.199.029-.293l-.981-.194zM0 3.875v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zM0 5.708v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zM0 7.542v.916h1v-.916H0zm15 .916h1v-.916h-1v.916zM0 9.375v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zm-16 .916v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zm-16 .917v.458c0 .166.016.33.048.487l.98-.194A1.51 1.51 0 0 1 1 13.5v-.458H0zm16 .458v-.458h-1v.458c0 .1-.01.199-.029.293l.981.194c.032-.158.048-.32.048-.487zM.421 14.89c.183.272.417.506.69.689l.556-.831a1.51 1.51 0 0 1-.415-.415l-.83.556zm14.469.689c.272-.183.506-.417.689-.69l-.831-.556c-.11.164-.251.305-.415.415l.556.83zm-12.877.373c.158.032.32.048.487.048h.458v-1H2.5c-.1 0-.199-.01-.293-.029l-.194.981zM13.5 16c.166 0 .33-.016.487-.048l-.194-.98A1.51 1.51 0 0 1 13.5 15h-.458v1h.458zm-9.625 0h.917v-1h-.917v1zm1.833 0h.917v-1h-.917v1zm1.834-1v1h.916v-1h-.916zm1.833 1h.917v-1h-.917v1zm1.833 0h.917v-1h-.917v1zM8.5 4.5a.5.5 0 0 0-1 0v3h-3a.5.5 0 0 0 0 1h3v3a.5.5 0 0 0 1 0v-3h3a.5.5 0 0 0 0-1h-3v-3z\" />\r\n                        </svg>\r\n                        <span> {t(\"public_link\")} </span>\r\n                      </Link>\r\n                    </span>\r\n                    <span className=\"mx-3 my-2\">\r\n                      <Link\r\n                        // to={`show-branch-details/${btoa(item.id)}`}\r\n                        to={`branches/design/${btoa(item.id)}`}\r\n                      >\r\n                        <i className=\"flaticon-381-notepad\"></i>\r\n\r\n                        <span> {t(\"design\")} </span>\r\n                      </Link>\r\n                    </span> */}\r\n                  </CDropdownMenu>\r\n                </CDropdown>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <CBreadcrumb style={{ \"--cui-breadcrumb-divider\": \"'>'\" }}>\r\n        <CBreadcrumbItem active>{t(\"Branches\")}</CBreadcrumbItem>\r\n      </CBreadcrumb>\r\n      {/* <PageTItle headingPara={t('Branches')} activeMenu={t('add_branch')} motherMenu={t('Branches')} /> */}\r\n      {/* <!-- Insert  Modal --> */}\r\n      <Modal className=\"fade\" show={modalCentered}>\r\n        <Form onSubmit={handleSubmit(saveBranch)} method=\"POST\">\r\n          <Modal.Header>\r\n            <Modal.Title>{t(\"add_branch\")}</Modal.Title>\r\n            <Button\r\n              onClick={() => setModalCentered(false)}\r\n              variant=\"\"\r\n              className=\"close\"\r\n            >\r\n              <span>&times;</span>\r\n            </Button>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>{t(\"branch_name\")}</strong>{\" \"}\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                {...register(\"BrancheName\")}\r\n                className={\r\n                  errors.BrancheName?.message\r\n                    ? \"form-control  is-invalid\"\r\n                    : \"form-control\"\r\n                }\r\n                placeholder={t(\"branch_name\")}\r\n                name=\"BrancheName\"\r\n                onChange={handleInput}\r\n                value={branchstate.BrancheName}\r\n              />\r\n              {errors.BrancheName?.message && (\r\n                <div className=\"invalid-feedback\">\r\n                  {errors.BrancheName?.message}\r\n                </div>\r\n              )}\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>{t(\"currency\")}</strong>{\" \"}\r\n              </label>\r\n              <select\r\n                type=\"text\"\r\n                {...register(\"currencyID\")}\r\n                className={\r\n                  errors.currencyID?.message\r\n                    ? \"form-control  is-invalid\"\r\n                    : \"form-control\"\r\n                }\r\n                placeholder=\"currencyID\"\r\n                name=\"currencyID\"\r\n                onChange={handleInput}\r\n                value={branchstate.currencyID}\r\n              >\r\n                <option value=\"\">{t(\"select_currency\")}</option> )\r\n                {currency.map((item) => (\r\n                  <option value={item.id} key={item.id}>\r\n                    {item.currency_name + \" / \" + item.currency_code}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n              {errors.currencyID?.message && (\r\n                <div className=\"invalid-feedback\">\r\n                  {errors.currencyID?.message}\r\n                </div>\r\n              )}\r\n            </div>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button\r\n              onClick={() => setModalCentered(false)}\r\n              variant=\"danger light\"\r\n            >\r\n              {t(\"close\")}\r\n            </Button>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              {t(\"save\")}{\" \"}\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Form>\r\n      </Modal>\r\n      {/* Edit Modal */}\r\n      <Modal className=\"fade\" show={editmodalCentered}>\r\n        <Form onSubmit={updateBranch} method=\"POST\">\r\n          <Modal.Header>\r\n            <Modal.Title>{t(\"edit_branch\")}</Modal.Title>\r\n            <Button\r\n              onClick={() => setEditModalCentered(false)}\r\n              variant=\"\"\r\n              className=\"close\"\r\n            >\r\n              <span>&times;</span>\r\n            </Button>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>{t(\"id\")}</strong>{\" \"}\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                disabled=\"disabled\"\r\n                className=\"form-control\"\r\n                // placeholder=\"Branch Name\"\r\n                name=\"id\"\r\n                required\r\n                onChange={editHandleInput}\r\n                value={editBranchstate.id}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>{t(\"branch_name\")}</strong>{\" \"}\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                placeholder={t(\"branch_name\")}\r\n                name=\"BrancheName\"\r\n                required\r\n                onChange={editHandleInput}\r\n                value={editBranchstate.BrancheName}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>{t(\"currency\")}</strong>{\" \"}\r\n              </label>\r\n              <select\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                placeholder=\"currencyID\"\r\n                name=\"currencyID\"\r\n                required\r\n                onChange={editHandleInput}\r\n                value={editBranchstate.currencyID}\r\n              >\r\n                <option value=\"\">{t(\"select_currency\")}</option> )\r\n                {currency.map((item) => (\r\n                  <option value={item.id} key={item.id}>\r\n                    {item.currency_name + \" / \" + item.currency_code}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button\r\n              onClick={() => setEditModalCentered(false)}\r\n              variant=\"danger light\"\r\n            >\r\n              {t(\"close\")}\r\n            </Button>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              {t(\"update\")}{\" \"}\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Form>\r\n      </Modal>\r\n\r\n      {/* <CButton onClick={() =>}>Toggle offcanvas</CButton> */}\r\n      <COffcanvas\r\n        placement=\"end\"\r\n        className=\"fade bd-example-modal-lg\"\r\n        scroll\r\n        visible={visible}\r\n        onHide={() => setVisible(false)}\r\n      >\r\n        <COffcanvasHeader>\r\n          <COffcanvasTitle>{t(\"display_mobile\")}</COffcanvasTitle>\r\n          <CCloseButton\r\n            className=\"text-reset\"\r\n            onClick={() => setVisible(false)}\r\n          />\r\n        </COffcanvasHeader>\r\n        <COffcanvasBody>\r\n          <div className=\"wrapper\">\r\n            <div className=\"iphone\">\r\n              <div className=\"power\"></div>\r\n              <div className=\"lock\"></div>\r\n              <div className=\"volume up\"></div>\r\n              <div className=\"volume down\"></div>\r\n              <div className=\"camera\"></div>\r\n              <div className=\"speaker\"></div>\r\n              <div className=\"screen\">\r\n                <iframe\r\n                  src={destinationLink}\r\n                  height=\"100%\"\r\n                  width=\"100%\"\r\n                  title=\"Devices\"\r\n                ></iframe>\r\n              </div>\r\n              <div className=\"button\">\r\n                <div className=\"square\"></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </COffcanvasBody>\r\n      </COffcanvas>\r\n      <div className=\"row\">\r\n        {viewBranches_HTMLTABLE}\r\n        <div className=\"col-xl-4 col-lg-6 col-sm-6 \">\r\n          <div className=\"card overflow-hidden \">\r\n            <div\r\n              className=\"card-body d-flex justify-content-center text-center\"\r\n              style={{ border: \"2px dashed red\" }}\r\n            >\r\n              <div className=\"align-self-center text-center\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-outline-primary\"\r\n                  onClick={() => setModalCentered(true)}\r\n                >\r\n                  <svg\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    width=\"32\"\r\n                    height=\"32\"\r\n                    fill=\"currentColor\"\r\n                    className=\"bi bi-plus\"\r\n                    viewBox=\"0 0 16 16\"\r\n                  >\r\n                    <path d=\"M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z\" />\r\n                  </svg>\r\n                  {t(\"add_branch\")}\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* <div className=\"App\">\r\n                <FloatingWhatsApp\r\n                    phoneNumber=\"93744647067\"\r\n                    accountName=\"Mohammad Faiq\"\r\n                    allowClickAway\r\n                    // notification\r\n                    // notificationDelay={60000} // 1 minute\r\n                    // notificationSound\r\n                />\r\n            </div> */}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Branches;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\PrivateRoute.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Orders\\Order.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Categories\\SubCategory.js",["308","309","310","311"],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Orders\\Basket.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Services\\ServiceArea.js",["312","313"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { Button, Modal, Form } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as yup from \"yup\";\r\nimport { CBreadcrumb, CBreadcrumbItem } from \"@coreui/react\";\r\n\r\nconst ServiceArea = (props) => {\r\n  // Validation Start\r\n  const schema = yup\r\n    .object()\r\n    .shape({\r\n      AreaName: yup.string().required(\"This field is a required field\"),\r\n    })\r\n    .required();\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors },\r\n  } = useForm({\r\n    resolver: yupResolver(schema),\r\n  });\r\n  // Validation End\r\n  // for localization\r\n  const { t } = useTranslation();\r\n  //ID\r\n  const id = props.history.location.state.id;\r\n\r\n  // insert Start\r\n  const [modalCentered, setModalCentered] = useState(false);\r\n  const [serviceAreaInsert, setServiceAreaInsert] = useState({\r\n    AreaName: \"\",\r\n    BranchID: id,\r\n  });\r\n  const handleInput = (e) => {\r\n    e.persist();\r\n    setServiceAreaInsert({\r\n      ...serviceAreaInsert,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n  const saveServiceAreas = (e) => {\r\n    // e.preventDefault();\r\n    axios.post(\"/api/InsertServicAreas\", serviceAreaInsert).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setServiceAreaInsert({\r\n          AreaName: \"\",\r\n          BranchID: id,\r\n        });\r\n        reset();\r\n        swal(\"Success\", res.data.message, \"success\");\r\n        setModalCentered(false);\r\n        //  this.props.history.push(\"/\")\r\n      }\r\n    });\r\n  };\r\n  // insert End\r\n  // edit Start\r\n  const [editmodalCentered, setEditModalCentered] = useState(false);\r\n  const [editServiceAreas, setEditServiceAreas] = useState([]);\r\n  const editHandleInput = (e) => {\r\n    e.persist();\r\n    setEditServiceAreas({\r\n      ...editServiceAreas,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n  const fetchServiceArea = (e, id) => {\r\n    e.preventDefault();\r\n    axios.get(`/api/EditServiceAreas/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setEditServiceAreas(res.data.menu);\r\n        setEditModalCentered(true);\r\n      } else if (res.data.status === 404) {\r\n        swal(\"Error\", res.data.message, \"error\");\r\n      }\r\n    });\r\n  };\r\n  const updateServiceArea = (e) => {\r\n    e.preventDefault();\r\n    axios.post(\"/api/UpdateServiceAreas\", editServiceAreas).then((res) => {\r\n      if (res.data.status === 200) {\r\n        console.log(res.data.status);\r\n        setEditServiceAreas(\"\");\r\n        swal(\"Success\", res.data.message, \"success\");\r\n        setEditModalCentered(false);\r\n        //  this.props.history.push(\"/\")\r\n      } else if (res.data.status === 404) {\r\n        swal(\"Error\", res.data.message, \"error\");\r\n      }\r\n    });\r\n  };\r\n  // Edit End\r\n\r\n  // delete Start\r\n  const deleteServiceArea = (e, id) => {\r\n    swal({\r\n      title: \"Are you sure?\",\r\n      text: \"Once deleted, you will not be able to recover this imaginary file!\",\r\n      icon: \"warning\",\r\n      buttons: [t(\"cancel\"), t(\"confirm\")],\r\n      dangerMode: true,\r\n    }).then((willDelete) => {\r\n      if (willDelete) {\r\n        axios.delete(`/api/DeleteServiceAreas/${id}`).then((res) => {\r\n          if (res.data.status === 200) {\r\n            swal(\"Success\", res.data.message, \"success\");\r\n            setServiceAreaInsert({\r\n              AreaName: \"\",\r\n              BranchID: id,\r\n            });\r\n          } else if (res.data.status === 404) {\r\n            swal(\"Error\", res.data.message, \"error\");\r\n          }\r\n        });\r\n      } else {\r\n        swal(\"Your Data is safe now!\");\r\n      }\r\n    });\r\n  };\r\n  // delete End\r\n\r\n  //for retriving data using laravel API\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    axios.get(`/api/GetServiceAreas/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setFetchData(res.data.fetchData);\r\n      }\r\n      setLoading(false);\r\n    });\r\n  }, [serviceAreaInsert, editServiceAreas, id]);\r\n\r\n  var viewProducts_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"spinner-border text-primary \" role=\"status\">\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewProducts_HTMLTABLE = fetchData.map((item, i) => {\r\n      return (\r\n        <tr key={item.id}>\r\n          <td>{i + 1}</td>\r\n\r\n          <td> {item.AreaName}</td>\r\n          <td>\r\n            <button\r\n              type=\"button\"\r\n              onClick={(e) => fetchServiceArea(e, item.id)}\r\n              className=\"btn btn-outline-danger btn-sm\"\r\n            >\r\n              {t(\"edit\")}\r\n            </button>\r\n            &nbsp;&nbsp;&nbsp;\r\n            <button\r\n              type=\"button\"\r\n              onClick={(e) => deleteServiceArea(e, item.id)}\r\n              className=\"btn btn-outline-warning btn-sm\"\r\n            >\r\n              {t(\"delete\")}\r\n            </button>\r\n          </td>\r\n        </tr>\r\n      );\r\n    });\r\n  }\r\n  return (\r\n    <Fragment>\r\n      {/* <CBreadcrumb style={{ \"--cui-breadcrumb-divider\": \"'>'\" }}>\r\n                <CBreadcrumbItem className=\"font-weight-bold\" href=\"/branches\" >{t('Branches')}</CBreadcrumbItem>\r\n                <CBreadcrumbItem active>{t('services_area')}</CBreadcrumbItem>\r\n            </CBreadcrumb> */}\r\n      {/* <!-- Insert  Modal --> */}\r\n      <Modal className=\"fade\" show={modalCentered}>\r\n        <Form\r\n          onSubmit={handleSubmit(saveServiceAreas)}\r\n          method=\"POST\"\r\n          encType=\"multipart/form-data\"\r\n        >\r\n          <Modal.Header>\r\n            <Modal.Title>{t(\"add_service_area\")}</Modal.Title>\r\n            <Button\r\n              onClick={() => setModalCentered(false)}\r\n              variant=\"\"\r\n              className=\"close\"\r\n            >\r\n              <span>&times;</span>\r\n            </Button>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>\r\n                  {t(\"branch_name\")}: {props.location.branchName}\r\n                </strong>{\" \"}\r\n              </label>\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>{t(\"service_area\")}</strong>{\" \"}\r\n              </label>\r\n              <textarea\r\n                type=\"text\"\r\n                {...register(\"AreaName\")}\r\n                className=\"form-control\"\r\n                placeholder={t(\"service_area\")}\r\n                name=\"AreaName\"\r\n                onChange={handleInput}\r\n                value={serviceAreaInsert.AreaName}\r\n              />\r\n              <div className=\"text-danger\">{errors.AreaName?.message}</div>\r\n            </div>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button\r\n              onClick={() => setModalCentered(false)}\r\n              variant=\"danger light\"\r\n            >\r\n              {t(\"close\")}\r\n            </Button>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              {t(\"save\")}\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Form>\r\n      </Modal>\r\n      {/* Edit Modal */}\r\n      <Modal className=\"fade\" show={editmodalCentered}>\r\n        <Form onSubmit={updateServiceArea} method=\"POST\">\r\n          <Modal.Header>\r\n            <Modal.Title>{t(\"edit_service_area\")}</Modal.Title>\r\n            <Button\r\n              onClick={() => setEditModalCentered(false)}\r\n              variant=\"\"\r\n              className=\"close\"\r\n            >\r\n              <span>&times;</span>\r\n            </Button>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>{t(\"service_area\")}</strong>{\" \"}\r\n              </label>\r\n              <textarea\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                placeholder={t(\"service_area\")}\r\n                name=\"AreaName\"\r\n                required\r\n                onChange={editHandleInput}\r\n                value={editServiceAreas.AreaName}\r\n              />\r\n            </div>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button\r\n              onClick={() => setEditModalCentered(false)}\r\n              variant=\"danger light\"\r\n            >\r\n              {t(\"close\")}\r\n            </Button>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              {t(\"update\")}{\" \"}\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Form>\r\n      </Modal>\r\n      <div className=\"row\">\r\n        <div className=\"col-xl-12 col-xxl-12 col-lg-12 col-sm-12\">\r\n          <div className=\"card\">\r\n            <div className=\"card-header border-0\">\r\n              <div>\r\n                <h4 className=\"card-title mb-2\">{t(\"service_area\")}</h4>\r\n              </div>\r\n              <div className=\"dropdown\">\r\n                <Button\r\n                  variant=\"primary\"\r\n                  type=\"button\"\r\n                  className=\"mb-2 mr-2\"\r\n                  onClick={() => setModalCentered(true)}\r\n                >\r\n                  {t(\"add_service_area\")}\r\n                </Button>\r\n              </div>\r\n            </div>\r\n            <div className=\"card-body p-0\">\r\n              <div className=\"table-responsive \">\r\n                <table className=\"table \">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>{t(\"number\")}</th>\r\n                      <th>{t(\"service_area\")}</th>\r\n                      <th>{t(\"actions\")}</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>{viewProducts_HTMLTABLE}</tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default ServiceArea;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Units\\Unit.js",["314","315"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { Button, Modal, Form } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as yup from \"yup\";\r\nimport { CBreadcrumb, CBreadcrumbItem } from \"@coreui/react\";\r\n\r\nconst Unit = (props) => {\r\n  // validation Start\r\n  const schema = yup\r\n    .object()\r\n    .shape({\r\n      UnitName: yup.string().required(\"This field is a required field\"),\r\n    })\r\n    .required();\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors },\r\n  } = useForm({\r\n    resolver: yupResolver(schema),\r\n  });\r\n  // Validation End\r\n  // for localization\r\n  const { t } = useTranslation();\r\n  // ID\r\n  const id = props.history.location.state.id;\r\n\r\n  // Insert Start\r\n  const [modalCentered, setModalCentered] = useState(false);\r\n  const [unitInsert, setUnitInsert] = useState({\r\n    UnitName: \"\",\r\n    brancheID: id,\r\n  });\r\n  const handleInput = (e) => {\r\n    e.persist();\r\n    setUnitInsert({ ...unitInsert, [e.target.name]: e.target.value });\r\n  };\r\n  const saveUnit = (e) => {\r\n    // e.preventDefault();\r\n    axios.post(\"/api/InsertUnits\", unitInsert).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setUnitInsert({\r\n          UnitName: \"\",\r\n          brancheID: id,\r\n        });\r\n        reset();\r\n\r\n        swal(\"Success\", res.data.message, \"success\");\r\n        setModalCentered(false);\r\n        //  this.props.history.push(\"/\")\r\n      }\r\n    });\r\n  };\r\n  // insert End\r\n  // edit Start\r\n  const [editmodalCentered, setEditModalCentered] = useState(false);\r\n  const [editUnit, setEditUnit] = useState([]);\r\n  const editHandleInput = (e) => {\r\n    e.persist();\r\n    setEditUnit({ ...editUnit, [e.target.name]: e.target.value });\r\n  };\r\n  const fetchUnit = (e, id) => {\r\n    e.preventDefault();\r\n    axios.get(`/api/EditUnits/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setEditUnit(res.data.unit);\r\n        setEditModalCentered(true);\r\n      } else if (res.data.status === 404) {\r\n        swal(\"Error\", res.data.message, \"error\");\r\n      }\r\n    });\r\n  };\r\n  const updateUnit = (e) => {\r\n    e.preventDefault();\r\n    axios.post(\"/api/UpdateUnit\", editUnit).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setEditUnit(\"\");\r\n        swal(\"Success\", res.data.message, \"success\");\r\n        setEditModalCentered(false);\r\n        //  this.props.history.push(\"/\")\r\n      } else if (res.data.status === 404) {\r\n        swal(\"Error\", res.data.message, \"error\");\r\n      }\r\n    });\r\n  };\r\n  // Edit End\r\n  // delete Start\r\n  const deleteUnit = (e, id) => {\r\n    e.preventDefault();\r\n    swal({\r\n      title: \"Are you sure?\",\r\n      text: \"Once deleted, you will not be able to recover this imaginary file!\",\r\n      icon: \"warning\",\r\n      buttons: [t(\"cancel\"), t(\"confirm\")],\r\n      dangerMode: true,\r\n    }).then((willDelete) => {\r\n      if (willDelete) {\r\n        axios.delete(`/api/DeleteUnits/${id}`).then((res) => {\r\n          if (res.data.status === 200) {\r\n            swal(\"Success\", res.data.message, \"success\");\r\n            setUnitInsert({\r\n              UnitName: \"\",\r\n              brancheID: id,\r\n            });\r\n          } else if (res.data.status === 404) {\r\n            swal(\"Error\", res.data.message, \"error\");\r\n          }\r\n        });\r\n      } else {\r\n        swal(\"Your Data is safe now!\");\r\n      }\r\n    });\r\n  };\r\n  // delete End\r\n  //for retriving data using laravel API\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    axios.get(`/api/GetUnits/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        // console.log(res.data.fetchData);\r\n        setFetchData(res.data.fetchData);\r\n      }\r\n      setLoading(false);\r\n    });\r\n  }, [unitInsert, editUnit, id]);\r\n\r\n  var viewProducts_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"spinner-border text-primary \" role=\"status\">\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewProducts_HTMLTABLE = fetchData.map((item, i) => {\r\n      return (\r\n        <tr key={item.id}>\r\n          <td>{i + 1}</td>\r\n\r\n          <td> {item.UnitName}</td>\r\n          <td>\r\n            <button\r\n              type=\"button\"\r\n              onClick={(e) => fetchUnit(e, item.id)}\r\n              className=\"btn btn-outline-danger btn-sm\"\r\n            >\r\n              {t(\"edit\")}\r\n            </button>\r\n            &nbsp;&nbsp;&nbsp;\r\n            <button\r\n              type=\"button\"\r\n              onClick={(e) => deleteUnit(e, item.id)}\r\n              className=\"btn btn-outline-warning btn-sm\"\r\n            >\r\n              {t(\"delete\")}\r\n            </button>\r\n          </td>\r\n        </tr>\r\n      );\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      {/* <!-- Insert  Modal --> */}\r\n      <Modal className=\"fade\" show={modalCentered}>\r\n        <Form\r\n          onSubmit={handleSubmit(saveUnit)}\r\n          method=\"POST\"\r\n          encType=\"multipart/form-data\"\r\n        >\r\n          <Modal.Header>\r\n            <Modal.Title>{t(\"add_unit\")}</Modal.Title>\r\n            <Button\r\n              onClick={() => setModalCentered(false)}\r\n              variant=\"\"\r\n              className=\"close\"\r\n            >\r\n              <span>&times;</span>\r\n            </Button>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>\r\n                  {t(\"branch_name\")}: {props.location.branchName}\r\n                </strong>{\" \"}\r\n              </label>\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>{t(\"unit_name\")} </strong>{\" \"}\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                {...register(\"UnitName\")}\r\n                className=\"form-control\"\r\n                placeholder={t(\"unit_name\")}\r\n                name=\"UnitName\"\r\n                onChange={handleInput}\r\n                value={unitInsert.UnitName}\r\n              />\r\n              <div className=\"text-danger\">{errors.UnitName?.message}</div>\r\n            </div>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button\r\n              onClick={() => setModalCentered(false)}\r\n              variant=\"danger light\"\r\n            >\r\n              {t(\"close\")}\r\n            </Button>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              {t(\"save\")}\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Form>\r\n      </Modal>\r\n      {/* Edit Modal */}\r\n      <Modal className=\"fade\" show={editmodalCentered}>\r\n        <Form onSubmit={updateUnit} method=\"POST\">\r\n          <Modal.Header>\r\n            <Modal.Title>{t(\"edit_unit\")} </Modal.Title>\r\n            <Button\r\n              onClick={() => setEditModalCentered(false)}\r\n              variant=\"\"\r\n              className=\"close\"\r\n            >\r\n              <span>&times;</span>\r\n            </Button>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>{t(\"unit_name\")}</strong>{\" \"}\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                placeholder={t(\"unit_name\")}\r\n                name=\"UnitName\"\r\n                required\r\n                onChange={editHandleInput}\r\n                value={editUnit.UnitName}\r\n              />\r\n            </div>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button\r\n              onClick={() => setEditModalCentered(false)}\r\n              variant=\"danger light\"\r\n            >\r\n              {t(\"close\")}\r\n            </Button>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              {t(\"update\")}{\" \"}\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Form>\r\n      </Modal>\r\n      <div className=\"row\">\r\n        <div className=\"col-xl-12 col-xxl-12 col-lg-12 col-sm-12\">\r\n          <div className=\"card\">\r\n            <div className=\"card-header border-0\">\r\n              <div>\r\n                <h4 className=\"card-title mb-2\">{t(\"units\")}</h4>\r\n              </div>\r\n              <div className=\"dropdown\">\r\n                <Button\r\n                  variant=\"primary\"\r\n                  type=\"button\"\r\n                  className=\"mb-2 mr-2\"\r\n                  onClick={() => setModalCentered(true)}\r\n                >\r\n                  {t(\"add_unit\")}\r\n                </Button>\r\n              </div>\r\n            </div>\r\n            <div className=\"card-body p-0\">\r\n              <div className=\"table-responsive \">\r\n                <table className=\"table \">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>{t(\"number\")}</th>\r\n                      <th>{t(\"unit_name\")}</th>\r\n                      <th>{t(\"actions\")}</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>{viewProducts_HTMLTABLE}</tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Unit;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Inventories\\Inventory.js",["316","317"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { Button, Modal, Form } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { CBreadcrumb, CBreadcrumbItem } from \"@coreui/react\";\r\nimport { CSmartTable } from \"@coreui/react-pro\";\r\nconst Inventory = (props) => {\r\n  // for localization\r\n  const { t } = useTranslation();\r\n\r\n  const id = props.history.location.state.id;\r\n\r\n  // edit modal\r\n  const [editmodalCentered, setEditModalCentered] = useState(false);\r\n  const [editIventory, setEditInventory] = useState([]);\r\n  const editHandleInput = (e) => {\r\n    e.persist();\r\n    setEditInventory({ ...editIventory, [e.target.name]: e.target.value });\r\n  };\r\n  const fetchUnit = (e, id) => {\r\n    e.preventDefault();\r\n    axios.get(`/api/EditInventory/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setEditInventory(res.data.intenvtory);\r\n        setEditModalCentered(true);\r\n      } else if (res.data.status === 404) {\r\n        swal(\"Error\", res.data.message, \"error\");\r\n      }\r\n    });\r\n  };\r\n  const updateInventory = (e) => {\r\n    e.preventDefault();\r\n    axios.post(\"/api/UpdateInventory\", editIventory).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setEditInventory(\"\");\r\n        swal(\"Success\", res.data.message, \"success\");\r\n        setEditModalCentered(false);\r\n        //  this.props.history.push(\"/\")\r\n      } else if (res.data.status === 404) {\r\n        swal(\"Error\", res.data.message, \"error\");\r\n      }\r\n    });\r\n  };\r\n  // edit End\r\n  // delete start\r\n  const deleteInventory = (e, id) => {\r\n    e.preventDefault();\r\n    swal({\r\n      title: \"Are you sure?\",\r\n      text: \"Once deleted, you will not be able to recover this imaginary file!\",\r\n      icon: \"warning\",\r\n      buttons: [t(\"cancel\"), t(\"confirm\")],\r\n      dangerMode: true,\r\n    }).then((willDelete) => {\r\n      if (willDelete) {\r\n        axios.delete(`/api/DeleteInventory/${id}`).then((res) => {\r\n          if (res.data.status === 200) {\r\n            setEditInventory([]);\r\n            swal(\"Success\", res.data.message, \"success\");\r\n          } else if (res.data.status === 404) {\r\n            swal(\"Error\", res.data.message, \"error\");\r\n          }\r\n        });\r\n      } else {\r\n        swal(\"Your Data is safe now!\");\r\n      }\r\n    });\r\n  };\r\n  // delete end\r\n  //for retriving data using laravel API\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    axios.get(`/api/GetInventory/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setFetchData(res.data.fetchData);\r\n      }\r\n      setLoading(false);\r\n    });\r\n  }, [editIventory, id]);\r\n  const columns = [\r\n    {\r\n      key: \"variant_name\",\r\n    },\r\n    {\r\n      key: \"Buyingquantity\",\r\n    },\r\n    {\r\n      key: \"SellingQuantity\",\r\n    },\r\n    {\r\n      key: \"buyingPrice\",\r\n    },\r\n    {\r\n      key: \"sellingPrice\",\r\n    },\r\n    {\r\n      key: \"actions\",\r\n    },\r\n  ];\r\n\r\n  var viewInventory_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"spinner-border text-primary \" role=\"status\">\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewInventory_HTMLTABLE = (\r\n      // fetchData.map((item, i) => {\r\n      // return (\r\n      <CSmartTable\r\n        activePage={1}\r\n        cleaner\r\n        // clickableRows\r\n        columns={columns}\r\n        // columnFilter\r\n        columnSorter\r\n        // footer\r\n        items={fetchData}\r\n        itemsPerPageSelect\r\n        itemsPerPage={10}\r\n        pagination\r\n        scopedColumns={{\r\n          actions: (item) => {\r\n            return (\r\n              <td>\r\n                <Link to=\"\" onClick={(e) => fetchUnit(e, item.id)}>\r\n                  <svg\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    width=\"16\"\r\n                    height=\"16\"\r\n                    fill=\"currentColor\"\r\n                    className=\"bi bi-pencil-square\"\r\n                    viewBox=\"0 0 16 16\"\r\n                  >\r\n                    <path d=\"M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z\" />\r\n                    <path\r\n                      fill-rule=\"evenodd\"\r\n                      d=\"M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z\"\r\n                    />\r\n                  </svg>\r\n                </Link>\r\n                <span> | </span>\r\n                <Link to=\"\" onClick={(e) => deleteInventory(e, item.id)}>\r\n                  <svg\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    width=\"16\"\r\n                    height=\"16\"\r\n                    fill=\"currentColor\"\r\n                    className=\"bi bi-trash\"\r\n                    viewBox=\"0 0 16 16\"\r\n                  >\r\n                    <path d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z\" />\r\n                    <path\r\n                      fill-rule=\"evenodd\"\r\n                      d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\"\r\n                    />\r\n                  </svg>\r\n                </Link>\r\n              </td>\r\n            );\r\n          },\r\n        }}\r\n        // selectable\r\n        // sorterValue={{ column: 'name', state: 'asc' }}\r\n        tableFilter\r\n        // tableHeadProps={{\r\n        //   color: 'primary',\r\n        // }}\r\n        tableProps={{\r\n          striped: true,\r\n          hover: true,\r\n        }}\r\n      />\r\n    );\r\n    //     )\r\n    // })\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      {/* Edit Modal */}\r\n      <Modal\r\n        className=\"fade bd-example-modal-lg\"\r\n        show={editmodalCentered}\r\n        size=\"lg\"\r\n      >\r\n        <Form onSubmit={updateInventory} method=\"POST\">\r\n          <Modal.Header>\r\n            <Modal.Title> {t(\"edit_inventory\")} </Modal.Title>\r\n            <Button\r\n              onClick={() => setEditModalCentered(false)}\r\n              variant=\"\"\r\n              className=\"close\"\r\n            >\r\n              <span>&times;</span>\r\n            </Button>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <div className=\"row\">\r\n              <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    {\" \"}\r\n                    <strong>{t(\"variant_name\")}</strong>{\" \"}\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    placeholder={t(\"variant_name\")}\r\n                    name=\"variant_name\"\r\n                    required\r\n                    onChange={editHandleInput}\r\n                    value={editIventory.variant_name}\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    {\" \"}\r\n                    <strong>{t(\"buying_quantity\")}</strong>{\" \"}\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    placeholder={t(\"buying_quantity\")}\r\n                    name=\"Buyingquantity\"\r\n                    required\r\n                    onChange={editHandleInput}\r\n                    value={editIventory.Buyingquantity}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    {\" \"}\r\n                    <strong>{t(\"buying_price\")}</strong>{\" \"}\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    placeholder={t(\"buying_price\")}\r\n                    name=\"buyingPrice\"\r\n                    required\r\n                    onChange={editHandleInput}\r\n                    value={editIventory.buyingPrice}\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    {\" \"}\r\n                    <strong>{t(\"selling_price\")}</strong>{\" \"}\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    placeholder={t(\"selling_price\")}\r\n                    name=\"sellingPrice\"\r\n                    required\r\n                    onChange={editHandleInput}\r\n                    value={editIventory.sellingPrice}\r\n                  />\r\n                </div>\r\n              </div>\r\n              {/* <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                                <div className=\"form-group\">\r\n                                    <label className=\"mb-1 \"> <strong>SellingQuantity</strong> </label>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        className=\"form-control\"\r\n                                        placeholder=\"SellingQuantity\"\r\n                                        name=\"SellingQuantity\"\r\n                                        required\r\n                                        onChange={editHandleInput}  \r\n                                        value={editIventory.SellingQuantity}\r\n                                    />\r\n                                </div>\r\n                            </div> */}\r\n            </div>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button\r\n              onClick={() => setEditModalCentered(false)}\r\n              variant=\"danger light\"\r\n            >\r\n              {t(\"close\")}\r\n            </Button>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              {\" \"}\r\n              {t(\"update\")}{\" \"}\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Form>\r\n      </Modal>\r\n\r\n      {viewInventory_HTMLTABLE}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Inventory;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Categories\\Category.js",["318","319","320","321","322","323","324"],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Companies\\Company.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Products\\Product.js",["325","326"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { Button, Modal, Form } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as yup from \"yup\";\r\nimport { CBreadcrumb, CBreadcrumbItem } from \"@coreui/react\";\r\nimport { base_url, port } from \"../../../Consts\";\r\nconst Product = (props) => {\r\n  // validation start\r\n  const schema = yup\r\n    .object()\r\n    .shape({\r\n      Description: yup.string().required(\"This field is a required field\"),\r\n      ProductName: yup.string().required(\"This field is a required field\"),\r\n      UnitID: yup.string().required(\"This field is a required field\"),\r\n    })\r\n    .required();\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors },\r\n  } = useForm({\r\n    resolver: yupResolver(schema),\r\n  });\r\n  // validation End\r\n\r\n  // for localization\r\n  const { t } = useTranslation();\r\n  // ID\r\n  // const subMenuId = atob(props.match.params.id)\r\n  const subMenuId = props.history.location.state.id;\r\n\r\n  // insert modal\r\n  const [modalCentered, setModalCentered] = useState(false);\r\n\r\n  const [imageState, setImageState] = useState([]);\r\n\r\n  const handleImage = (e) => {\r\n    setImageState({ ...imageState, photo: e.target.files[0] });\r\n  };\r\n  const [productInsert, setProductInsert] = useState(\"\");\r\n  const handleInput = (e) => {\r\n    e.persist();\r\n    setProductInsert({ ...productInsert, [e.target.name]: e.target.value });\r\n  };\r\n  const saveProduct = (e) => {\r\n    // e.preventDefault();\r\n    const formData = new FormData();\r\n    // formData.append('image', subCategoryInsert.SubCategoryName);\r\n    formData.append(\"image\", imageState.photo);\r\n\r\n    // formData.append('image', imageState.image);\r\n    formData.append(\"Description\", productInsert.Description);\r\n    formData.append(\"ProductName\", productInsert.ProductName);\r\n    formData.append(\"UnitID\", productInsert.UnitID);\r\n\r\n    axios.post(`/api/InsertProducts/${subMenuId}`, formData).then((res) => {\r\n      if (res.data.status === 200) {\r\n        // console.log(res.data.status);\r\n        setProductInsert({\r\n          Description: \"\",\r\n          ProductName: \"\",\r\n          UnitID: \"\",\r\n        });\r\n        reset();\r\n        swal(\"Success\", res.data.message, \"success\");\r\n        setModalCentered(false);\r\n        //  this.props.history.push(\"/\")\r\n      }\r\n    });\r\n  };\r\n  // insert End\r\n  // edit Start\r\n  const [editmodalCentered, setEditModalCentered] = useState(false);\r\n  const [editProduct, setEditProduct] = useState([]);\r\n  const editHandleInput = (e) => {\r\n    e.persist();\r\n    setEditProduct({ ...editProduct, [e.target.name]: e.target.value });\r\n  };\r\n  const fetchProduct = (e, id) => {\r\n    e.preventDefault();\r\n    axios.get(`/api/EditProducts/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setEditProduct(res.data.product);\r\n        setEditModalCentered(true);\r\n      } else if (res.data.status === 404) {\r\n        swal(\"Error\", res.data.message, \"error\");\r\n      }\r\n    });\r\n  };\r\n  const updateProduct = (e) => {\r\n    e.preventDefault();\r\n    const formData = new FormData();\r\n    // formData.append('image', subCategoryInsert.SubCategoryName);\r\n    formData.append(\"image\", imageState.photo);\r\n\r\n    // formData.append('image', imageState.image);\r\n    formData.append(\"Description\", editProduct.Description);\r\n    formData.append(\"ProductName\", editProduct.ProductName);\r\n    formData.append(\"UnitID\", editProduct.UnitID);\r\n    formData.append(\"id\", editProduct.id);\r\n    axios.post(\"/api/UpdateProduct\", formData).then((res) => {\r\n      if (res.data.status === 200) {\r\n        // console.log(res.data.status);\r\n        setEditProduct(\"\");\r\n        swal(\"Success\", res.data.message, \"success\");\r\n        setEditModalCentered(false);\r\n        //  this.props.history.push(\"/\")\r\n      }\r\n    });\r\n  };\r\n  // edit ENd\r\n  // delete section\r\n  const deleteProduct = (e, id) => {\r\n    e.preventDefault();\r\n    swal({\r\n      title: \"Are you sure?\",\r\n      text: \"Once deleted, you will not be able to recover this imaginary file!\",\r\n      icon: \"warning\",\r\n      buttons: [t(\"cancel\"), t(\"confirm\")],\r\n      dangerMode: true,\r\n    }).then((willDelete) => {\r\n      if (willDelete) {\r\n        axios.delete(`/api/DeleteProducts/${id}`).then((res) => {\r\n          if (res.data.status === 200) {\r\n            swal(\"Success\", res.data.message, \"success\");\r\n            setProductInsert([]);\r\n            // thisClicked.closest(\"tr\").remove();\r\n          } else if (res.data.status === 404) {\r\n            swal(\"Error\", res.data.message, \"error\");\r\n          }\r\n        });\r\n      } else {\r\n        swal(\"Your Data is safe now!\");\r\n      }\r\n    });\r\n  };\r\n  // delete End\r\n  //for retriving data using laravel API\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [unitData, setUnitData] = useState([]);\r\n  useEffect(() => {\r\n    axios.get(\"/api/GetUnitsAll\").then((res) => {\r\n      if (res.data.status === 200) {\r\n        setUnitData(res.data.fetchData);\r\n      }\r\n    });\r\n    axios.get(`/api/GetProducts/${subMenuId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setFetchData(res.data.fetchData);\r\n        // console.log(res.data.fetchData);\r\n      }\r\n      setLoading(false);\r\n    });\r\n  }, [productInsert, editProduct, subMenuId]);\r\n  var branchID = 0;\r\n  var CategoryID = 0;\r\n  var viewProducts_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"spinner-border text-primary \" role=\"status\">\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewProducts_HTMLTABLE = fetchData.map((item, i) => {\r\n      branchID = item.branchID;\r\n      CategoryID = item.CategoryID;\r\n      return (\r\n        <div className=\"col-xl-4 col-lg-6 col-sm-6\" key={i}>\r\n          <div className=\"card overflow-hidden\">\r\n            <div className=\"card-body\">\r\n              <div className=\"text-center\">\r\n                <div className=\"profile-photo\">\r\n                  <img\r\n                    src={`http://${base_url}:${port}/images/products/${item.image}`}\r\n                    className=\"d-block w-100\"\r\n                    alt=\"\"\r\n                  />\r\n                </div>\r\n                <h3 className=\"mt-4 mb-1\">{item.ProductName}</h3>\r\n                <p className=\"text-muted\"></p>\r\n                {/* <p className=\"text-muted\">{item.SubCategoryName}</p> */}\r\n              </div>\r\n            </div>\r\n            <div className=\"card-footer pt-0 pb-0 text-center\">\r\n              <div className=\"row\">\r\n                <div className=\"col-4 pt-3 pb-3 border-right\">\r\n                  <Link to=\"\" onClick={(e) => fetchProduct(e, item.product_id)}>\r\n                    <span>{t(\"edit\")}</span>\r\n                  </Link>\r\n                </div>\r\n                <div className=\"col-4 pt-3 pb-3 border-right\">\r\n                  <Link\r\n                    to=\"\"\r\n                    onClick={(e) => deleteProduct(e, item.product_id)}\r\n                  >\r\n                    <span>{t(\"delete\")}</span>\r\n                  </Link>\r\n                </div>\r\n                <div className=\"col-4 pt-3 pb-3\">\r\n                  <Link\r\n                    to={{\r\n                      pathname: `products/variants`,\r\n                      id: item.id,\r\n                      ProductName: item.ProductName,\r\n                      state: { id: item.product_id },\r\n                    }}\r\n                  >\r\n                    <span>{t(\"variants\")} </span>\r\n                  </Link>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <CBreadcrumb style={{ \"--cui-breadcrumb-divider\": \"'>'\" }}>\r\n        <CBreadcrumbItem\r\n          className=\"font-weight-bold\"\r\n          // href=\"/branches\"\r\n        >\r\n          {t(\"Branches\")}\r\n        </CBreadcrumbItem>\r\n        <CBreadcrumbItem\r\n          className=\"font-weight-bold\"\r\n          // href={`category`}\r\n        >\r\n          {t(\"categories\")}\r\n        </CBreadcrumbItem>\r\n        <CBreadcrumbItem\r\n          className=\"font-weight-bold\"\r\n          // href={`/sub-category`}\r\n        >\r\n          {t(\"sub_category\")}\r\n        </CBreadcrumbItem>\r\n        <CBreadcrumbItem active>{t(\"products\")} </CBreadcrumbItem>\r\n      </CBreadcrumb>\r\n      {/* <!-- Insert  Modal --> */}\r\n      <Modal className=\"fade\" show={modalCentered}>\r\n        <Form onSubmit={handleSubmit(saveProduct)} method=\"POST\">\r\n          <Modal.Header>\r\n            <Modal.Title>{t(\"add_product\")}</Modal.Title>\r\n            <Button\r\n              onClick={() => setModalCentered(false)}\r\n              variant=\"\"\r\n              className=\"close\"\r\n            >\r\n              <span>&times;</span>\r\n            </Button>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>{t(\"product_name\")}</strong>{\" \"}\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                {...register(\"ProductName\")}\r\n                className={\r\n                  errors.ProductName?.message\r\n                    ? \"form-control  is-invalid\"\r\n                    : \"form-control\"\r\n                }\r\n                placeholder={t(\"product_name\")}\r\n                name=\"ProductName\"\r\n                onChange={handleInput}\r\n                value={productInsert.ProductName}\r\n              />\r\n              {errors.ProductName?.message && (\r\n                <div className=\"invalid-feedback\">\r\n                  {errors.ProductName?.message}\r\n                </div>\r\n              )}\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>{t(\"unit\")}</strong>{\" \"}\r\n              </label>\r\n              <select\r\n                type=\"text\"\r\n                {...register(\"UnitID\")}\r\n                className={\r\n                  errors.UnitID?.message\r\n                    ? \"form-control  is-invalid\"\r\n                    : \"form-control\"\r\n                }\r\n                placeholder=\"UnitID\"\r\n                name=\"UnitID\"\r\n                onChange={handleInput}\r\n                value={productInsert.UnitID}\r\n              >\r\n                <option value=\"\">{t(\"select_a_unit\")}</option> )\r\n                {unitData.map((item) => (\r\n                  <option value={item.id} key={item.id}>\r\n                    {item.UnitName}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n              {errors.UnitID?.message && (\r\n                <div className=\"invalid-feedback\">{errors.UnitID?.message}</div>\r\n              )}\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>{t(\"description\")}</strong>{\" \"}\r\n              </label>\r\n              <textarea\r\n                type=\"text\"\r\n                {...register(\"Description\")}\r\n                className={\r\n                  errors.Description?.message\r\n                    ? \"form-control  is-invalid\"\r\n                    : \"form-control\"\r\n                }\r\n                placeholder={t(\"description\")}\r\n                name=\"Description\"\r\n                onChange={handleInput}\r\n                value={productInsert.Description}\r\n              />\r\n              {errors.Description?.message && (\r\n                <div className=\"invalid-feedback\">\r\n                  {errors.Description?.message}\r\n                </div>\r\n              )}\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>{t(\"image\")}</strong>{\" \"}\r\n              </label>\r\n              {/* <div className=\"file-loading\"> */}\r\n              <input\r\n                type=\"file\"\r\n                className=\"form-control\"\r\n                placeholder={t(\"image\")}\r\n                name=\"photo\"\r\n                required\r\n                onChange={handleImage}\r\n              />\r\n              {/* </div> */}\r\n            </div>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button\r\n              onClick={() => setModalCentered(false)}\r\n              variant=\"danger light\"\r\n            >\r\n              {t(\"close\")}\r\n            </Button>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              {t(\"save\")}{\" \"}\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Form>\r\n      </Modal>\r\n      {/* Edit Modal */}\r\n      <Modal className=\"fade\" show={editmodalCentered}>\r\n        <Form onSubmit={updateProduct} method=\"POST\">\r\n          <Modal.Header>\r\n            <Modal.Title>{t(\"edit_product\")}</Modal.Title>\r\n            <Button\r\n              onClick={() => setEditModalCentered(false)}\r\n              variant=\"\"\r\n              className=\"close\"\r\n            >\r\n              <span>&times;</span>\r\n            </Button>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>{t(\"ID\")}</strong>{\" \"}\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                disabled=\"disabled\"\r\n                className=\"form-control\"\r\n                name=\"id\"\r\n                required\r\n                onChange={editHandleInput}\r\n                value={editProduct.id}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>{t(\"product_name\")}</strong>{\" \"}\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                placeholder={t(\"product_name\")}\r\n                name=\"ProductName\"\r\n                required\r\n                onChange={editHandleInput}\r\n                value={editProduct.ProductName}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>{t(\"unit\")}</strong>{\" \"}\r\n              </label>\r\n              <select\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                placeholder=\"UnitID\"\r\n                name=\"UnitID\"\r\n                onChange={editHandleInput}\r\n                value={editProduct.UnitID}\r\n              >\r\n                <option value=\"\">{t(\"select_a_unit\")}</option> )\r\n                {unitData.map((item) => (\r\n                  <option value={item.id} key={item.id}>\r\n                    {item.UnitName}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>{t(\"description\")}</strong>{\" \"}\r\n              </label>\r\n              <textarea\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                placeholder={t(\"description\")}\r\n                name=\"Description\"\r\n                onChange={editHandleInput}\r\n                value={editProduct.Description}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>{t(\"image\")}</strong>{\" \"}\r\n              </label>\r\n              <div className=\"input-group\">\r\n                <div className=\"custom-file\">\r\n                  <input\r\n                    type=\"file\"\r\n                    className=\"form-control\"\r\n                    placeholder={t(\"image\")}\r\n                    name=\"photo\"\r\n                    onChange={handleImage}\r\n                  />\r\n                  <img\r\n                    src={`http://${base_url}:${port}/images/products/${editProduct.image}`}\r\n                    width=\"70\"\r\n                    alt=\" \"\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button\r\n              onClick={() => setEditModalCentered(false)}\r\n              variant=\"danger light\"\r\n            >\r\n              {t(\"close\")}\r\n            </Button>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              {t(\"update\")}{\" \"}\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Form>\r\n      </Modal>\r\n      <div className=\"row\">\r\n        {viewProducts_HTMLTABLE}\r\n        <div className=\"col-xl-4 col-lg-4 col-sm-4 \">\r\n          <div className=\"card overflow-hidden \">\r\n            <div\r\n              className=\"card-body d-flex justify-content-center text-center\"\r\n              style={{ border: \"2px dashed red\" }}\r\n            >\r\n              <div className=\"align-self-center text-center\">\r\n                {/* why use Use Link here you can use anything and just add a\r\n                onClick Event if you use Link with out to property the system\r\n                will crash */}\r\n                <div\r\n                  className=\"btn btn-outline-primary\"\r\n                  onClick={() => setModalCentered(true)}\r\n                >\r\n                  <svg\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    width=\"32\"\r\n                    height=\"32\"\r\n                    fill=\"currentColor\"\r\n                    className=\"bi bi-plus\"\r\n                    viewBox=\"0 0 16 16\"\r\n                  >\r\n                    <path d=\"M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z\" />\r\n                  </svg>\r\n                  {t(\"add_product\")}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Product;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\layouts\\Footer.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Dashboard\\Profile\\Profile.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Dashboard\\Home\\Home.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\layouts\\nav\\index.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Variants\\Grid.js",["327","328","329","330","331","332","333","334","335","336"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport axios from \"axios\";\r\n\r\nconst VariantsLine = (props) => {\r\n\r\n  const { items, filerAttributes, productid, setVarantGrid } = props;\r\n  const [values, setValues] = useState(items);\r\n  if (Object.keys(items).length !== Object.keys(values).length) {\r\n    setValues(items);\r\n  }\r\n\r\n  let [errors, setErrors] = useState({});\r\n  useEffect(() => {\r\n    setVarantGrid({\r\n      ...values,\r\n    });\r\n    // setValues(items);\r\n  }, [values]);\r\n  const genrateSku = () => {\r\n    let sku = productid + \"-\";\r\n    let c = 1;\r\n    filerAttributes.map((atter) => {\r\n      if (values[atter.label] != \"\") {\r\n        if (c == filerAttributes.length) {\r\n          sku += values[atter.label];\r\n        } else {\r\n          sku += values[atter.label] + \"-\";\r\n        }\r\n      }\r\n      c++;\r\n    });\r\n\r\n    return sku;\r\n  };\r\n  const Change = (event) => {\r\n    if (event.target.name == \"image\") {\r\n      uploadImage(event, event.target.files[0]);\r\n      // console.log(event.target.files[0]);\r\n      // setValues({\r\n      //   ...values,\r\n      //   [event.target.name]: 'image',\r\n      // });\r\n    } else {\r\n      setValues({\r\n        ...values,\r\n        [event.target.name]: event.target.value,\r\n      });\r\n    }\r\n    console.log(values);\r\n  };\r\n  const uploadImage = (event, image) => {\r\n    const formData = new FormData();\r\n    formData.append(\"image\", image);\r\n    axios.post(\"/api/uploadImage\", formData).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setValues({\r\n          ...values,\r\n          [event.target.name]: res.data.filename,\r\n        });\r\n      }\r\n    });\r\n  };\r\n  const changeSku = (event) => {\r\n    const name = event.target.name;\r\n    const check = filerAttributes.some((attribute) => {\r\n      return attribute.label === name;\r\n    });\r\n\r\n    if (!check) {\r\n      const error = {};\r\n      if (isNaN(event.target.value)) {\r\n        error[name] = true;\r\n        error[name + \"message\"] = \"Please Enter A Real Number\";\r\n        setErrors({ ...errors, ...error });\r\n      } else {\r\n        error[name] = false;\r\n        error[name + \"message\"] = \"\";\r\n        setErrors({ ...errors, ...error });\r\n      }\r\n    }\r\n    let sku = genrateSku();\r\n\r\n    if (sku != \"\") {\r\n      setValues({\r\n        ...values,\r\n        sku: sku,\r\n      });\r\n    }\r\n    console.log({\r\n      [event.target.name]: event.target.value,\r\n      ...values,\r\n      sku: sku,\r\n    });\r\n  };\r\n\r\n  // console.log(items);\r\n  // console.log(values);\r\n  const outputs = [];\r\n  for (const [key, value] of Object.entries(values)) {\r\n    if (key != \"postion\") {\r\n      outputs.push(\r\n        <div className=\"col-xl-2 col-lg-2 col-sm-2 p-4  \">\r\n          <input\r\n            className={\r\n              errors[key] ? \" form-control is-invalid\" : \"form-control\"\r\n            }\r\n            disabled={key == \"sku\"}\r\n            value={key == \"image\" ? \"\" : value}\r\n            onBlur={(event) => {\r\n              changeSku(event);\r\n            }}\r\n            onChange={(event) => Change(event)}\r\n            name={key}\r\n            type={key == \"image\" ? \"file\" : \"\"}\r\n          ></input>\r\n          {errors[key] ? (\r\n            <div className=\"invalid-feedback\">{errors[key + \"message\"]}</div>\r\n          ) : null}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  return (\r\n    <div className=\"col-xl-12 col-lg-12 col-sm-12 \">\r\n      <div className=\"row\">{outputs}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst VariantsGrid = (props) => {\r\n  const { t } = useTranslation();\r\n\r\n  const { filerAttributes, numberOfVar, productid, getJSONVaraints, recheck } =\r\n    props;\r\n  const [varintGrid, setVariantGrid] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (numberOfVar.length !== 0) {\r\n      setVariantGrid(numberOfVar);\r\n    }\r\n  }, [numberOfVar]);\r\n  const vars = numberOfVar.map((item) => (\r\n    <VariantsLine\r\n      recheck={recheck}\r\n      key={item.postion}\r\n      setVarantGrid={(item) => setVarantGrid(item)}\r\n      items={item}\r\n      productid={productid}\r\n      filerAttributes={filerAttributes}\r\n    ></VariantsLine>\r\n  ));\r\n\r\n  const setVarantGrid = (item) => {\r\n    if (item.sku !== \"\") {\r\n      let modifyVariant = varintGrid;\r\n\r\n      modifyVariant[item.postion] = item;\r\n      setVariantGrid(modifyVariant);\r\n      getJSONVaraints(JSON.stringify(varintGrid));\r\n    } else {\r\n      console.log(\"fssds\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n    \r\n      <div class=\"col-xl-12 col-lg-12 col-sm-12 \">\r\n      \r\n        <div className=\"row\">\r\n        \r\n          <div class=\"col-md-2  p-4\">{t('sku')}</div>\r\n          <div class=\"col-md-2  p-4\">{t('price')}</div>\r\n          <div class=\"col-md-2  p-4\">{t('stock')}</div>\r\n          <div class=\"col-md-2  p-4\">{t('image')}</div>\r\n\r\n          {filerAttributes?.map((sec) => (\r\n            <div class=\"col-md-2  p-4\">{sec.label}</div>\r\n          ))}\r\n       \r\n\r\n        </div>\r\n        {vars}\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\nexport default VariantsGrid;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\layouts\\PageTitle.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\layouts\\nav\\Header.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\layouts\\nav\\NavHader.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\layouts\\nav\\SideBar.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Thrid\\Main.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\First\\Main.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\EditTheme.js",["337","338"],"import React, { useState, useEffect } from \"react\";\r\nimport { CBreadcrumb, CCard, CCardBody, CCardHeader, CRow, CFormLabel, CCol } from '@coreui/react'\r\nimport { useTranslation } from \"react-i18next\";\r\nimport circle_menu_button from \"../../../images/hellomenu/circle_menu_button.png\";\r\nimport pill_menu_button from \"../../../images/hellomenu/pill_menu_button.png\";\r\nimport { Link } from \"react-router-dom\"\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\"\r\nimport Switch from '@mui/material/Switch';\r\nimport { Form } from \"react-bootstrap\";\r\nimport { FormControlLabel, RadioGroup, Radio } from '@mui/material';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst EditTheme = (props) => {\r\n    const { t } = useTranslation();\r\n    const id = atob(props.match.params.id);\r\n    const history = useHistory();\r\n\r\n    const [homeScreen, setHomeScreen] = useState(false);\r\n    const [menuScreen, setMenuScreen] = useState(false);\r\n    const [buttonShow, setButtonShow] = useState(1);\r\n    const [imageState, setImageState] = useState([]);\r\n    const handleImage = (e) => {\r\n        setImageState({ ...imageState, HomeScreenBackground: e.target.files[0] });\r\n    };\r\n    const [imageStateMenu, setImageStateMenu] = useState([]);\r\n    const handleImageMenu = (e) => {\r\n        setImageStateMenu({ ...imageStateMenu, MenuScreenBackground: e.target.files[0] });\r\n    };\r\n    // update Start\r\n    const [themes, setThemes] = useState([]);\r\n    const handleInput = (e) => {\r\n        e.persist();\r\n        setThemes({ ...themes, [e.target.name]: e.target.value });\r\n    };\r\n    const update = (e) => {\r\n        e.preventDefault();\r\n        // console.log(themes);\r\n        const formData = new FormData();\r\n        formData.append(\"HomeScreenBackground\", imageState.HomeScreenBackground);\r\n        formData.append(\"MenuScreenBackground\", imageStateMenu.MenuScreenBackground);\r\n        formData.append(\"ThemeName\", themes.ThemeName);\r\n        // formData.append(\"Orientation\", themes.Orientation);\r\n        // formData.append(\"MenuStructure\", themes.MenuStructure);\r\n        formData.append(\"TextColor\", themes.TextColor);\r\n        formData.append(\"BackgroundColor\", themes.BackgroundColor);\r\n        formData.append(\"HighlightColor\", themes.HighlightColor);\r\n        // formData.append(\"QRCodeColor\", themes.QRCodeColor);\r\n        // formData.append(\"QRCodeBackgroundColor\", themes.QRCodeBackgroundColor);\r\n        formData.append(\"HomeScreenBackground\", themes.HomeScreenBackground);\r\n        formData.append(\"MenuScreenBackground\", themes.MenuScreenBackground);\r\n        formData.append(\"ShowButton\", themes.ShowButton);\r\n        formData.append(\"ButtonShape\", themes.ButtonShape);\r\n        axios.post(`/api/UpdateTheme/${id}`, formData).then(res => {\r\n            if (res.data.status === 200) {\r\n                swal(\"Success\", res.data.message, \"success\");\r\n                // setThemes([]);\r\n                // setImageStateMenu([]);\r\n                // setImageState([]);\r\n            }\r\n        });\r\n    };\r\n    // update End\r\n\r\n    useEffect(() => {\r\n        axios.get(`/api/EditTheme/${id}`).then((res) => {\r\n            if (res.data.status === 200) {\r\n                setThemes(res.data.data)\r\n            }\r\n        });\r\n    }, []);\r\n    return (\r\n        <>\r\n            <CBreadcrumb style={{ \"--cui-breadcrumb-divider\": \"'>'\" }}>\r\n                <Link to=\"/design\">{t('design')}</Link>\r\n            </CBreadcrumb>\r\n            <div className=\"container overflow-hidden border\">\r\n                <Form onSubmit={update} method=\"POST\" encType=\"multipart/form-data\">\r\n\r\n                    <div className=\"row\">\r\n\r\n                        <div className=\"col-12 mb-2\">\r\n                            <input type=\"text\" style={{ border: 'none' }} value={themes.ThemeName} className=\"form-control\" placeholder={t('theme_name')} onChange={handleInput} value={themes.ThemeName} name=\"ThemeName\" />\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                            <CCard>\r\n                                <CCardHeader component=\"h5\">{t('theme_colors')}</CCardHeader>\r\n                                <CCardBody>\r\n                                    <CRow className=\"mb-3\">\r\n                                        <CFormLabel htmlFor=\"staticEmail\" className=\"col-sm-6 col-form-label\">{t('text_color')}</CFormLabel>\r\n                                        <CCol sm={6} className=\"text-center\">\r\n                                            <input type=\"color\" onChange={handleInput} value={themes.TextColor} id=\"favcolor\" name=\"TextColor\" />\r\n                                        </CCol>\r\n                                    </CRow>\r\n                                    <CRow className=\"mb-3\">\r\n                                        <CFormLabel htmlFor=\"inputPassword\" className=\"col-sm-6 col-form-label\">{t('background_color')}</CFormLabel>\r\n                                        <CCol sm={6} className=\"text-center\">\r\n                                            <input type=\"color\" id=\"favcolor\" onChange={handleInput} value={themes.BackgroundColor} name=\"BackgroundColor\" />\r\n                                        </CCol>\r\n                                    </CRow>\r\n                                    <CRow className=\"mb-3\">\r\n                                        <CFormLabel htmlFor=\"inputPassword\" className=\"col-sm-6 col-form-label\">{t('highlight_color')}</CFormLabel>\r\n                                        <CCol sm={6} className=\"text-center\">\r\n                                            <input type=\"color\" id=\"favcolor\" onChange={handleInput} value={themes.HighlightColor} name=\"HighlightColor\" />\r\n                                        </CCol>\r\n                                    </CRow>\r\n                                    <CRow className=\"mb-3\">\r\n                                        <button className=\"btn btn-light m-1\" type=\"button\">{t('advanced_customization')}</button>\r\n                                    </CRow>\r\n                                </CCardBody>\r\n                            </CCard>\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-12\">\r\n                                    <CCard>\r\n                                        <CCardHeader component=\"h5\">{t('home_screen_background')}</CCardHeader>\r\n                                        <CCardBody>\r\n                                            <RadioGroup\r\n                                                aria-label=\"HomeScreen\"\r\n                                                defaultValue=\"1\"\r\n                                                name=\"radio-buttons-group\"\r\n                                            >\r\n                                                <FormControlLabel value=\"1\" control={<Radio onClick={() => setHomeScreen(false)} color=\"secondary\" />} label={t('solid_color')} />\r\n                                                <FormControlLabel value=\"0\" control={<Radio onClick={() => setHomeScreen(true)} color=\"secondary\" />} label={t('image_or_video')} />\r\n                                            </RadioGroup>\r\n                                            <CRow className=\"mb-3\">\r\n                                                <CCol sm={12} className=\"text-right\">\r\n                                                    {homeScreen ? \" \" : <input type=\"color\" id=\"favcolor\" onChange={handleInput} value={themes.HomeScreenBackground} name=\"HomeScreenBackground\" />}\r\n                                                </CCol>\r\n                                            </CRow>\r\n                                            {homeScreen ? <div className=\"form-group\">\r\n\r\n                                                <div className=\"input-group\">\r\n                                                    <div className=\"custom-file\">\r\n                                                        <input\r\n                                                            type=\"file\"\r\n                                                            className=\"form-control\"\r\n                                                            name=\"HomeScreenBackground\"\r\n                                                            required\r\n                                                            onChange={handleImage}\r\n                                                        />\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div> : \" \"}\r\n                                        </CCardBody>\r\n                                    </CCard>\r\n                                </div>\r\n                                <div className=\"col-12\">\r\n                                    <CCard>\r\n                                        <CCardHeader component=\"h5\">{t('menu_screen_background')}</CCardHeader>\r\n                                        <CCardBody>\r\n                                            <RadioGroup\r\n                                                aria-label=\"MenuScreen\"\r\n                                                defaultValue=\"1\"\r\n                                                name=\"radio-buttons-group\"\r\n                                            >\r\n                                                <FormControlLabel value=\"1\" control={<Radio onClick={() => setMenuScreen(false)} color=\"secondary\" />} label={t('solid_color')} />\r\n                                                <FormControlLabel value=\"0\" control={<Radio onClick={() => setMenuScreen(true)} color=\"secondary\" />} label={t('image')} />\r\n                                            </RadioGroup>\r\n                                            <CRow className=\"mb-3\">\r\n                                                <CCol sm={12} className=\"text-right\">\r\n                                                    {menuScreen ? \" \" : <input type=\"color\" onChange={handleInput} value={themes.MenuScreenBackground} name=\"MenuScreenBackground\" />}\r\n                                                </CCol>\r\n                                            </CRow>\r\n                                            {menuScreen ? <div className=\"form-group\">\r\n                                                <div className=\"input-group\">\r\n                                                    <div className=\"custom-file\">\r\n                                                        <input\r\n                                                            type=\"file\"\r\n                                                            className=\"form-control\"\r\n                                                            name=\"MenuScreenBackground\"\r\n                                                            required\r\n                                                            onChange={handleImageMenu}\r\n                                                        />\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div> : \" \"}\r\n                                        </CCardBody>\r\n                                    </CCard>\r\n                                </div>\r\n                                <div className=\"col-12\">\r\n                                    <CCard>\r\n                                        <CCardHeader component=\"h5\">{t('menu_button')}</CCardHeader>\r\n                                        <CCardBody>\r\n                                            <CRow className=\"mb-3\">\r\n                                                <CFormLabel htmlFor=\"staticEmail\" className=\"col-sm-6 col-form-label\">{t('show_button')}</CFormLabel>\r\n                                                <CCol sm={6} className=\"text-center\">\r\n                                                    <Switch defaultChecked onChange={() => setButtonShow(!buttonShow)} value={buttonShow} name=\"ShowButton\" color=\"secondary\" />\r\n                                                </CCol>\r\n                                            </CRow>\r\n                                            {buttonShow ? <CRow className=\"mb-3\">\r\n                                                <CFormLabel htmlFor=\"inputPassword\" className=\"col-sm-12 col-form-label\">{t('button_shape')}</CFormLabel>\r\n                                                <CCol sm={12} className=\"text-center\">\r\n                                                    <RadioGroup\r\n                                                        aria-label=\"menu_button\"\r\n                                                        defaultValue=\"P\"\r\n                                                        name=\"ButtonShape\"\r\n                                                        onChange={handleInput}\r\n                                                        value={themes.ButtonShape}\r\n                                                    >\r\n                                                        <FormControlLabel value=\"R\" control={<div ><Radio value=\"R\" color=\"secondary\" />  <img src={circle_menu_button} alt=\"\" width=\"80\" /></div>} label={t('round')} />\r\n                                                        <FormControlLabel value=\"P\" control={<div ><Radio value=\"P\" color=\"secondary\" /> <img src={pill_menu_button} alt=\"\" width=\"80\" /></div>} label={t('pill')} />\r\n                                                    </RadioGroup>\r\n                                                </CCol>\r\n                                            </CRow>\r\n                                                : null}\r\n                                        </CCardBody>\r\n                                    </CCard>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"text-center mx-4 mb-4\">\r\n                        <button className=\"btn btn-primary\" type=\"submit\">{t('update')}</button>\r\n                        <Link className=\"btn btn-light m-1\" to='' onClick={() => history.goBack()}>{t('back')}</Link>\r\n                    </div>\r\n                </Form>\r\n            </div>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default EditTheme;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Design.js",["339","340","341","342","343","344","345","346","347","348"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  CNav,\r\n  CNavItem,\r\n  CNavLink,\r\n  CTabContent,\r\n  CTabPane,\r\n  CCard,\r\n  CCardText,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCardImage,\r\n  CRow,\r\n  CFormLabel,\r\n  CCol,\r\n} from \"@coreui/react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport palette from \"../../../images/hellomenu/palette.svg\";\r\nimport SingleFileAutoSubmit from \"./SingleFileAutoSubmit\";\r\nimport { Link } from \"react-router-dom\";\r\nimport QRCode from \"qrcode.react\";\r\nimport axios from \"axios\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport swal from \"sweetalert\";\r\nimport Switch from \"@mui/material/Switch\";\r\nimport { FormControlLabel, RadioGroup, Radio } from \"@mui/material\";\r\nimport { base_url, port } from \"../../../Consts\";\r\nimport logo from \"../../../images/hellomenu/logo.svg\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardMedia from \"@mui/material/CardMedia\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { CardActionArea } from \"@mui/material\";\r\nimport Button from \"@mui/material/Button\";\r\nimport CardActions from \"@mui/material/CardActions\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Box, { BoxProps } from \"@mui/material/Box\";\r\nconst Design = (props) => {\r\n  const { t } = useTranslation();\r\n  // const branchId = atob(props.match.params.id);\r\n  const branchId = props.history.location.state.id;\r\n\r\n  const [activeKey, setActiveKey] = useState(1);\r\n  // Insert Start\r\n  const [themes, setThemes] = useState([]);\r\n  const [activeThemeId, setActiveThemeId] = useState([]);\r\n  const handleInput = (e) => {\r\n    e.persist();\r\n    setThemes({ ...themes, [e.target.name]: e.target.value });\r\n  };\r\n  const [imageState, setImageState] = useState([]);\r\n  const handleImage = (e) => {\r\n    setImageState({ ...imageState, Logo: e.target.files[0] });\r\n  };\r\n  const save = (e) => {\r\n    e.preventDefault();\r\n    // console.log(themes);\r\n    const formData = new FormData();\r\n    formData.append(\"Logo\", imageState.Logo);\r\n    formData.append(\"Orientation\", themes.Orientation);\r\n    formData.append(\"MenuStructure\", themes.MenuStructure);\r\n    formData.append(\"TextColor\", themes.TextColor);\r\n    formData.append(\"BackgroundColor\", themes.BackgroundColor);\r\n    formData.append(\"HighlightColor\", themes.HighlightColor);\r\n    formData.append(\"QRCodeColor\", themes.QRCodeColor);\r\n    formData.append(\"QRCodeBackgroundColor\", themes.QRCodeBackgroundColor);\r\n    // console.log(activeThemeId);\r\n    axios.post(`/api/UpdateTheme/${activeThemeId}`, formData).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setLoading(true);\r\n        swal(\"Success\", res.data.message, \"success\");\r\n      }\r\n    });\r\n  };\r\n\r\n  // insert End\r\n  // change the active theme\r\n  const changeTheActiveTheme = (e, id) => {\r\n    axios.post(`/api/ThemeStatus/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setLoading(true);\r\n        swal(\"Success\", res.data.message, \"success\");\r\n      }\r\n    });\r\n  };\r\n  // change the active template\r\n  const changeTheActiveTemplate = (e, id) => {\r\n    axios.post(`/api/TemplateStatus/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setLoading(true);\r\n        swal(\"Success\", res.data.message, \"success\");\r\n      }\r\n    });\r\n  };\r\n  //for retriving data using laravel API\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [templates, setTemplates] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios.get(`/api/GetThemes/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setFetchData(res.data.fetchData);\r\n        res.data.fetchData.map((item, i) => {\r\n          if (item.Status == 1) {\r\n            setActiveThemeId(item.id);\r\n            setThemes(item);\r\n          }\r\n        });\r\n      }\r\n      setLoading(false);\r\n    });\r\n    axios.get(`/api/GetTemplates/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setTemplates(res.data.data);\r\n      }\r\n    });\r\n  }, [loading]);\r\n  // delete start\r\n  const deleteTheme = (e, id) => {\r\n    e.preventDefault();\r\n    swal({\r\n      title: \"Are you sure?\",\r\n      text: \"Once deleted, you will not be able to recover this imaginary file!\",\r\n      icon: \"warning\",\r\n      buttons: [t(\"cancel\"), t(\"confirm\")],\r\n      dangerMode: true,\r\n    }).then((willDelete) => {\r\n      if (willDelete) {\r\n        axios.delete(`/api/DeleteTheme/${id}`).then((res) => {\r\n          if (res.data.status === 200) {\r\n            setLoading(true);\r\n            swal(\"Success\", res.data.message, \"success\");\r\n            // thisClicked.closest(\"tr\").remove();\r\n          } else if (res.data.status === 404) {\r\n            swal(\"Error\", res.data.message, \"error\");\r\n          }\r\n        });\r\n      } else {\r\n        swal(\"Your Data is safe now!\");\r\n      }\r\n    });\r\n  };\r\n  // delete end\r\n  //   duplicate Theme\r\n  const duplicateTheme = (e, id) => {\r\n    e.preventDefault();\r\n    axios.get(`/api/duplicateTheme/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setLoading(true);\r\n        swal(\"Success\", res.data.message, \"success\");\r\n      }\r\n    });\r\n  };\r\n  var viewThemes_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"spinner-border text-primary \" role=\"status\">\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewThemes_HTMLTABLE = fetchData.map((item, i) => {\r\n      return (\r\n        <div className=\"col-xl-4 col-lg-4 col-sm-6\" key={i}>\r\n          <CCard>\r\n            <CCardImage\r\n              orientation=\"top\"\r\n              src={\r\n                item.Logo\r\n                  ? `http://${base_url}:${port}/images/Themes/${item.Logo}`\r\n                  : palette\r\n              }\r\n              style={{ height: \"250px\", objectFit: \"contain\" }}\r\n            />\r\n            <CCardBody>\r\n              <CCardText>\r\n                {/* <div className=\"row\"> */}\r\n                <Link to={`edit-theme/${btoa(item.id)}`}>\r\n                  <svg\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    width=\"16\"\r\n                    height=\"16\"\r\n                    fill=\"currentColor\"\r\n                    className=\"bi bi-pencil-square mx-2\"\r\n                    viewBox=\"0 0 16 16\"\r\n                  >\r\n                    <path d=\"M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z\" />\r\n                    <path\r\n                      fillRule=\"evenodd\"\r\n                      d=\"M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z\"\r\n                    />\r\n                  </svg>\r\n                  {t(\"edit\")}\r\n                </Link>\r\n                {item.Status == 1 ? (\r\n                  \" \"\r\n                ) : (\r\n                  <Link to=\"\" onClick={(e) => deleteTheme(e, item.id)}>\r\n                    <svg\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      width=\"16\"\r\n                      height=\"16\"\r\n                      fill=\"currentColor\"\r\n                      className=\"bi bi-trash mx-2\"\r\n                      viewBox=\"0 0 16 16\"\r\n                    >\r\n                      <path d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z\" />\r\n                      <path\r\n                        fillRule=\"evenodd\"\r\n                        d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\"\r\n                      />\r\n                    </svg>\r\n                    <span> {t(\"delete\")}</span>\r\n                  </Link>\r\n                )}\r\n                <Link to=\"\" onClick={(e) => duplicateTheme(e, item.id)}>\r\n                  <svg\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    width=\"16\"\r\n                    height=\"16\"\r\n                    fill=\"currentColor\"\r\n                    className=\"bi bi-front mx-2\"\r\n                    viewBox=\"0 0 16 16\"\r\n                  >\r\n                    <path d=\"M0 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v2h2a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2v-2H2a2 2 0 0 1-2-2V2zm5 10v2a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1h-2v5a2 2 0 0 1-2 2H5z\" />\r\n                  </svg>\r\n                  <span> {t(\"duplicate\")}</span>\r\n                </Link>\r\n                {/* </div> */}\r\n                <div className=\"row \">\r\n                  <div className=\"col-8 mt-2 text-primary font-weight-bold\">\r\n                    {item.ThemeName}\r\n                  </div>\r\n                  <div className=\"col-4 text-right\">\r\n                    {item.Status == 1 ? (\r\n                      <Switch checked disabled color=\"secondary\" />\r\n                    ) : (\r\n                      <Switch\r\n                        onChange={(e) => changeTheActiveTheme(e, item.id)}\r\n                        color=\"secondary\"\r\n                      />\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </CCardText>\r\n            </CCardBody>\r\n          </CCard>\r\n        </div>\r\n      );\r\n    });\r\n  }\r\n  return (\r\n    <>\r\n      <CNav variant=\"pills\" role=\"tablist\">\r\n        <CNavItem>\r\n          <CNavLink\r\n            // href=\"#\"\r\n            active={activeKey === 1}\r\n            onClick={() => setActiveKey(1)}\r\n          >\r\n            {t(\"default_templates\")}\r\n          </CNavLink>\r\n        </CNavItem>\r\n        <CNavItem>\r\n          <CNavLink\r\n            // href=\"#\"\r\n            active={activeKey === 2}\r\n            onClick={() => setActiveKey(2)}\r\n          >\r\n            {t(\"custom_design\")}\r\n          </CNavLink>\r\n        </CNavItem>\r\n      </CNav>\r\n      <CTabContent>\r\n        <CTabPane\r\n          role=\"tabpanel\"\r\n          aria-labelledby=\"profile-tab\"\r\n          visible={activeKey === 1}\r\n        >\r\n          <div className=\"container overflow-hidden border\">\r\n            <Grid container spacing={2}>\r\n              {templates.map((item) => {\r\n                return (\r\n                  <Grid item xs={6} sm={4} md={4} key={item.id}>\r\n                    <Card>\r\n                      <CardActionArea>\r\n                        <CardMedia\r\n                          component=\"iframe\"\r\n                          height=\"400\"\r\n                          image={`/${item.URL}/${btoa(branchId)}`}\r\n                          alt=\"template\"\r\n                        />\r\n                        <CardContent>\r\n                          <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n                            {item.TemplateName}\r\n                          </Typography>\r\n                        </CardContent>\r\n                        <CardActions>\r\n                          <Grid container spacing={2}>\r\n                            <Grid item xs={8} className=\"mt-2\">\r\n                              <Link\r\n\r\n                                to={{ \r\n                                  pathname: `/branches/design/${item.CustomizationURL}`,\r\n                                  state: { id: item.id },\r\n                                  }}\r\n                              >\r\n                                Customization\r\n                              </Link>\r\n                            </Grid>\r\n                            <Grid item xs={4}>\r\n                              {item.Status == 1 ? (\r\n                                <Switch checked disabled color=\"secondary\" />\r\n                              ) : (\r\n                                <Switch\r\n                                  onChange={(e) =>\r\n                                    changeTheActiveTemplate(e, item.id)\r\n                                  }\r\n                                  color=\"secondary\"\r\n                                />\r\n                              )}\r\n                            </Grid>\r\n                          </Grid>\r\n                        </CardActions>\r\n                      </CardActionArea>\r\n                    </Card>\r\n                  </Grid>\r\n                );\r\n              })}\r\n            </Grid>\r\n          </div>\r\n        </CTabPane>\r\n        <CTabPane\r\n          role=\"tabpanel\"\r\n          aria-labelledby=\"home-tab\"\r\n          visible={activeKey === 2}\r\n        >\r\n          <div className=\"container overflow-hidden border\">\r\n            {/* {fetchData.map((item, i) => { \r\n                         if(item.Status == '1'){\r\n                        return ( */}\r\n            <Form onSubmit={save} method=\"POST\" encType=\"multipart/form-data\">\r\n              <div className=\"row\">\r\n                <div className=\"col-6\">\r\n                  <CCard>\r\n                    <CCardHeader component=\"h5\">{t(\"logo\")}</CCardHeader>\r\n                    <CCardBody>\r\n                      <div className=\"mb-3\">{t(\"note_for_logo\")}</div>\r\n                      <div className=\"p-2\">\r\n                        <input\r\n                          type=\"file\"\r\n                          className=\"form-control\"\r\n                          name=\"Logo\"\r\n                          onChange={handleImage}\r\n                        />\r\n                        <img\r\n                          style={{ height: \"50px\", objectFit: \"contain\" }}\r\n                          src={\r\n                            themes.Logo\r\n                              ? `http://${base_url}:${port}/images/Themes/${themes.Logo}`\r\n                              : logo\r\n                          }\r\n                          // src={`http://${base_url}:${port}/images/Themes/${theme[0].Logo}`}\r\n                          className=\"w-40 mr-2\"\r\n                          alt=\"Menu\"\r\n                        />\r\n                      </div>\r\n                    </CCardBody>\r\n                  </CCard>\r\n                </div>\r\n                <div className=\"col-6\">\r\n                  <div className=\"row\">\r\n                    <div className=\"col-12\">\r\n                      <CCard>\r\n                        <CCardHeader component=\"h5\">\r\n                          {t(\"screen_orientation\")}\r\n                        </CCardHeader>\r\n                        <CCardBody>\r\n                          <RadioGroup\r\n                            row\r\n                            aria-label=\"Orientation\"\r\n                            defaultValue={themes.Orientation}\r\n                            name=\"Orientation\"\r\n                            onChange={handleInput}\r\n                          >\r\n                            <FormControlLabel\r\n                              value=\"P\"\r\n                              control={\r\n                                <div>\r\n                                  <Radio\r\n                                    value=\"P\"\r\n                                    name=\"Orientation\"\r\n                                    color=\"secondary\"\r\n                                  />\r\n                                  <svg\r\n                                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                                    width=\"64\"\r\n                                    height=\"64\"\r\n                                    fill=\"currentColor\"\r\n                                    className=\"bi bi-phone\"\r\n                                    viewBox=\"0 0 16 16\"\r\n                                  >\r\n                                    <path d=\"M11 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h6zM5 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H5z\" />\r\n                                    <path d=\"M8 14a1 1 0 1 0 0-2 1 1 0 0 0 0 2z\" />\r\n                                  </svg>\r\n                                </div>\r\n                              }\r\n                              label={t(\"portrait\")}\r\n                            />\r\n                            <FormControlLabel\r\n                              value=\"L\"\r\n                              control={\r\n                                <div>\r\n                                  <Radio\r\n                                    value=\"L\"\r\n                                    name=\"Orientation\"\r\n                                    color=\"secondary\"\r\n                                  />{\" \"}\r\n                                  <svg\r\n                                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                                    width=\"64\"\r\n                                    height=\"64\"\r\n                                    fill=\"currentColor\"\r\n                                    className=\"bi bi-phone-landscape mr-2\"\r\n                                    viewBox=\"0 0 16 16\"\r\n                                  >\r\n                                    <path d=\"M1 4.5a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1v6a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1v-6zm-1 6a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-6a2 2 0 0 0-2-2H2a2 2 0 0 0-2 2v6z\" />\r\n                                    <path d=\"M14 7.5a1 1 0 1 0-2 0 1 1 0 0 0 2 0z\" />\r\n                                  </svg>\r\n                                </div>\r\n                              }\r\n                              label={t(\"landscape\")}\r\n                            />\r\n                          </RadioGroup>\r\n                        </CCardBody>\r\n                      </CCard>\r\n                    </div>\r\n\r\n                    <div className=\"col-12\">\r\n                      <CCard>\r\n                        <CCardHeader component=\"h5\">\r\n                          {t(\"menu_structure\")}\r\n                        </CCardHeader>\r\n                        <CCardBody>\r\n                          <RadioGroup\r\n                            row\r\n                            aria-label=\"MenuStructure\"\r\n                            defaultValue={themes.MenuStructure}\r\n                            name=\"MenuStructure\"\r\n                            onChange={handleInput}\r\n                          >\r\n                            <FormControlLabel\r\n                              value=\"I\"\r\n                              control={\r\n                                <div>\r\n                                  <Radio\r\n                                    value=\"I\"\r\n                                    name=\"MenuStructure\"\r\n                                    color=\"secondary\"\r\n                                  />{\" \"}\r\n                                  <svg\r\n                                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                                    width=\"64\"\r\n                                    height=\"64\"\r\n                                    fill=\"currentColor\"\r\n                                    className=\"bi bi-file-post\"\r\n                                    viewBox=\"0 0 16 16\"\r\n                                  >\r\n                                    <path d=\"M4 3.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5zm0 2a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 .5.5v8a.5.5 0 0 1-.5.5h-7a.5.5 0 0 1-.5-.5v-8z\" />\r\n                                    <path d=\"M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2zm10-1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1z\" />\r\n                                  </svg>\r\n                                </div>\r\n                              }\r\n                              label={t(\"infinite_scroll\")}\r\n                            />\r\n                            <FormControlLabel\r\n                              value=\"C\"\r\n                              control={\r\n                                <div>\r\n                                  <Radio\r\n                                    value=\"C\"\r\n                                    name=\"MenuStructure\"\r\n                                    color=\"secondary\"\r\n                                  />{\" \"}\r\n                                  <svg\r\n                                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                                    width=\"64\"\r\n                                    height=\"64\"\r\n                                    fill=\"currentColor\"\r\n                                    className=\"bi bi-file-spreadsheet\"\r\n                                    viewBox=\"0 0 16 16\"\r\n                                  >\r\n                                    <path d=\"M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2zm2-1a1 1 0 0 0-1 1v4h10V2a1 1 0 0 0-1-1H4zm9 6h-3v2h3V7zm0 3h-3v2h3v-2zm0 3h-3v2h2a1 1 0 0 0 1-1v-1zm-4 2v-2H6v2h3zm-4 0v-2H3v1a1 1 0 0 0 1 1h1zm-2-3h2v-2H3v2zm0-3h2V7H3v2zm3-2v2h3V7H6zm3 3H6v2h3v-2z\" />\r\n                                  </svg>\r\n                                </div>\r\n                              }\r\n                              label={t(\"classic_layout\")}\r\n                            />\r\n                          </RadioGroup>\r\n                        </CCardBody>\r\n                      </CCard>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-6\">\r\n                  <CCard>\r\n                    <CCardHeader component=\"h5\">\r\n                      {t(\"theme_colors\")}\r\n                    </CCardHeader>\r\n                    <CCardBody>\r\n                      {/* <SketchPicker /> */}\r\n                      <CRow className=\"mb-3\">\r\n                        <CFormLabel\r\n                          htmlFor=\"staticEmail\"\r\n                          className=\"col-sm-6 col-form-label\"\r\n                        >\r\n                          {t(\"text_color\")}\r\n                        </CFormLabel>\r\n                        <CCol sm={6} className=\"text-center\">\r\n                          <input\r\n                            type=\"color\"\r\n                            onChange={handleInput}\r\n                            value={themes.TextColor}\r\n                            id=\"favcolor\"\r\n                            name=\"TextColor\"\r\n                          />\r\n                        </CCol>\r\n                      </CRow>\r\n                      <CRow className=\"mb-3\">\r\n                        <CFormLabel\r\n                          htmlFor=\"inputPassword\"\r\n                          className=\"col-sm-6 col-form-label\"\r\n                        >\r\n                          {t(\"background_color\")}\r\n                        </CFormLabel>\r\n                        <CCol sm={6} className=\"text-center\">\r\n                          <input\r\n                            type=\"color\"\r\n                            onChange={handleInput}\r\n                            value={themes.BackgroundColor}\r\n                            id=\"favcolor\"\r\n                            name=\"BackgroundColor\"\r\n                          />\r\n                        </CCol>\r\n                      </CRow>\r\n                      <CRow className=\"mb-3\">\r\n                        <CFormLabel\r\n                          htmlFor=\"inputPassword\"\r\n                          className=\"col-sm-6 col-form-label\"\r\n                        >\r\n                          {t(\"highlight_color\")}\r\n                        </CFormLabel>\r\n                        <CCol sm={6} className=\"text-center\">\r\n                          <input\r\n                            type=\"color\"\r\n                            onChange={handleInput}\r\n                            value={themes.HighlightColor}\r\n                            id=\"favcolor\"\r\n                            name=\"HighlightColor\"\r\n                          />\r\n                        </CCol>\r\n                      </CRow>\r\n                    </CCardBody>\r\n                  </CCard>\r\n                </div>\r\n                <div className=\"col-6\">\r\n                  <CCard>\r\n                    <CCardHeader component=\"h5\">\r\n                      {t(\"your_helloMenu_QR\")}\r\n                    </CCardHeader>\r\n                    <CCardBody>\r\n                      <div className=\"text-center mb-3\">\r\n                        <QRCode\r\n                          level={\"H\"}\r\n                          size={256}\r\n                          bgColor={themes.QRCodeBackgroundColor}\r\n                          fgColor={themes.QRCodeColor}\r\n                          value={`http://192.168.1.103:3000/show-branch-details`}\r\n                          className=\"primary\"\r\n                        />\r\n                      </div>\r\n                      <CRow className=\"mb-3\">\r\n                        <CFormLabel\r\n                          htmlFor=\"staticEmail\"\r\n                          className=\"col-sm-6 col-form-label\"\r\n                        >\r\n                          {t(\"QR_code_color\")}\r\n                        </CFormLabel>\r\n                        <CCol sm={6} className=\"text-center\">\r\n                          <input\r\n                            type=\"color\"\r\n                            onChange={handleInput}\r\n                            value={themes.QRCodeColor}\r\n                            id=\"favcolor\"\r\n                            name=\"QRCodeColor\"\r\n                          />\r\n                        </CCol>\r\n                      </CRow>\r\n                      <CRow className=\"mb-3\">\r\n                        <CFormLabel\r\n                          htmlFor=\"inputPassword\"\r\n                          className=\"col-sm-6 col-form-label\"\r\n                        >\r\n                          {t(\"QR_code_background_color\")}\r\n                        </CFormLabel>\r\n                        <CCol sm={6} className=\"text-center\">\r\n                          <input\r\n                            type=\"color\"\r\n                            onChange={handleInput}\r\n                            value={themes.QRCodeBackgroundColor}\r\n                            id=\"favcolor\"\r\n                            name=\"QRCodeBackgroundColor\"\r\n                          />\r\n                        </CCol>\r\n                      </CRow>\r\n                    </CCardBody>\r\n                  </CCard>\r\n                </div>\r\n              </div>\r\n              <div className=\"text-right mx-4 mb-4\">\r\n                <button className=\"btn btn-primary\" type=\"submit\">\r\n                  {t(\"save\")}\r\n                </button>\r\n              </div>\r\n            </Form>\r\n            {/* // )\r\n                        // }\r\n                        // })} */}\r\n\r\n          </div>\r\n          <div className=\"container overflow-hidden border\">\r\n              {viewThemes_HTMLTABLE}\r\n\r\n              <div className=\"col-xl-4 col-lg-4 col-sm-6\">\r\n                <div className=\"card overflow-hidden \">\r\n                  <div\r\n                    className=\"card-body d-flex justify-content-center text-center\"\r\n                    style={{ border: \"2px dashed pink\" }}\r\n                  >\r\n                    <div className=\"align-self-center text-center\">\r\n                      <div>\r\n                        <img src={palette} alt=\"\" />\r\n                      </div>\r\n                      <div className=\"pt-3\">\r\n                        <Link\r\n                          className=\"btn btn-outline-primary\"\r\n                          to={`add-theme/${btoa(branchId)}`}\r\n                        >\r\n                          {t(\"new_theme\")}\r\n                        </Link>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n        </CTabPane>\r\n        \r\n      </CTabContent>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Design;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Theme.js",["349","350","351","352","353","354","355","356","357","358"],"import React, { useState } from \"react\";\r\nimport {\r\n  CBreadcrumb,\r\n  CCard,\r\n  CCardBody,\r\n  CAccordionBody,\r\n  CListGroupItem,\r\n  CListGroup,\r\n  CCardHeader,\r\n  CAccordion,\r\n  CAccordionHeader,\r\n  CAccordionItem,\r\n  CRow,\r\n  CFormLabel,\r\n  CCol,\r\n} from \"@coreui/react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// import Switch from \"react-switch\";\r\nimport circle_menu_button from \"../../../images/hellomenu/circle_menu_button.png\";\r\nimport pill_menu_button from \"../../../images/hellomenu/pill_menu_button.png\";\r\nimport SingleFileAutoSubmit from \"./SingleFileAutoSubmit\";\r\nimport Avatar from \"@mui/material/Avatar\";\r\nimport {\r\n  AvatarGroup,\r\n  Grid,\r\n  List,\r\n  ListItem,\r\n  ListItemButton,\r\n  ListItemText,\r\n} from \"@mui/material\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport Switch from \"@mui/material/Switch\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { FormControlLabel, RadioGroup, Radio } from \"@mui/material\";\r\nimport Accordion from \"@mui/material/Accordion\";\r\nimport AccordionDetails from \"@mui/material/AccordionDetails\";\r\nimport AccordionSummary from \"@mui/material/AccordionSummary\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Theme = (props) => {\r\n  const history = useHistory();\r\n\r\n  const { t } = useTranslation();\r\n  const branchId = atob(props.match.params.id);\r\n\r\n  const [state, setState] = useState({ checked: false });\r\n  const [homeScreen, setHomeScreen] = useState(false);\r\n  const [menuScreen, setMenuScreen] = useState(false);\r\n  const [buttonShow, setButtonShow] = useState(1);\r\n  const handleChange = (checked) => {\r\n    setState({ checked });\r\n  };\r\n  const [imageState, setImageState] = useState([]);\r\n  const handleImage = (e) => {\r\n    setImageState({ ...imageState, HomeScreenBackground: e.target.files[0] });\r\n  };\r\n  const [imageStateMenu, setImageStateMenu] = useState([]);\r\n  const handleImageMenu = (e) => {\r\n    setImageStateMenu({\r\n      ...imageStateMenu,\r\n      MenuScreenBackground: e.target.files[0],\r\n    });\r\n  };\r\n  // Insert Start\r\n  const [themes, setThemes] = useState([]);\r\n  const handleInput = (e) => {\r\n    e.persist();\r\n    setThemes({ ...themes, [e.target.name]: e.target.value });\r\n  };\r\n  const changeColor = (first, second, thrid) => {\r\n    setThemes({ ...themes, TextColor: first, BackgroundColor: second, HighlightColor: thrid });\r\n  };\r\n  const save = (e) => {\r\n    e.preventDefault();\r\n    // console.log(themes);\r\n    const formData = new FormData();\r\n    formData.append(\"HomeScreenBackground\", imageState.HomeScreenBackground);\r\n    formData.append(\r\n      \"MenuScreenBackground\",\r\n      imageStateMenu.MenuScreenBackground\r\n    );\r\n    formData.append(\"ThemeName\", themes.ThemeName);\r\n    // formData.append(\"Orientation\", themes.Orientation);\r\n    // formData.append(\"MenuStructure\", themes.MenuStructure);\r\n    formData.append(\"TextColor\", themes.TextColor);\r\n    formData.append(\"BackgroundColor\", themes.BackgroundColor);\r\n    formData.append(\"HighlightColor\", themes.HighlightColor);\r\n    // formData.append(\"QRCodeColor\", themes.QRCodeColor);\r\n    // formData.append(\"QRCodeBackgroundColor\", themes.QRCodeBackgroundColor);\r\n    formData.append(\"HomeScreenBackground\", themes.HomeScreenBackground);\r\n    formData.append(\"MenuScreenBackground\", themes.MenuScreenBackground);\r\n    formData.append(\"ShowButton\", themes.ShowButton);\r\n    formData.append(\"ButtonShape\", themes.ButtonShape);\r\n    axios.post(`/api/InsertTheme/${branchId}`, formData).then((res) => {\r\n      if (res.data.status === 200) {\r\n        swal(\"Success\", res.data.message, \"success\");\r\n        // setThemes([]);\r\n        // setImageStateMenu([]);\r\n        // setImageState([]);\r\n      }\r\n    });\r\n  };\r\n  // insert End\r\n  const [expanded, setExpanded] = React.useState(false);\r\n\r\n  const handleChangePanel = (panel) => (event, isExpanded) => {\r\n    setExpanded(isExpanded ? panel : false);\r\n  };\r\n  return (\r\n    <>\r\n      <CBreadcrumb style={{ \"--cui-breadcrumb-divider\": \"'>'\" }}>\r\n        <Link to=\"/design\">{t(\"design\")}</Link>\r\n      </CBreadcrumb>\r\n      <div className=\"container overflow-hidden border\">\r\n        <Form onSubmit={save} method=\"POST\" encType=\"multipart/form-data\">\r\n          <div className=\"row\">\r\n            <div className=\"col-12 mb-2\">\r\n              <div\r\n                className=\"col-6 mb-2\"\r\n                style={{ borderBottom: \"2px solid black\" }}\r\n              >\r\n                <input\r\n                  type=\"text\"\r\n                  style={{ border: \"none\" }}\r\n                  className=\"form-control\"\r\n                  placeholder={t(\"theme_name\")}\r\n                  onChange={handleInput}\r\n                  name=\"ThemeName\"\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"col-6\">\r\n              <CCard>\r\n                <CCardHeader component=\"h5\">{t(\"theme_colors\")}</CCardHeader>\r\n                <CCardBody>\r\n                  <div>\r\n                    <Accordion\r\n                      expanded={expanded === \"panel1\"}\r\n                      onChange={handleChangePanel(\"panel1\")}\r\n                      className=\"my-3\"\r\n                    >\r\n                      <AccordionSummary\r\n                        aria-controls=\"panel1bh-content\"\r\n                        id=\"panel1bh-header\"\r\n                      >\r\n                        <Grid container spacing={2}>\r\n                          <Grid item xs={6} md={8}>\r\n                            <Typography sx={{ width: \"33%\", flexShrink: 0 }}>\r\n                              {t(\"selected\")}\r\n                            </Typography>\r\n                          </Grid>\r\n                          <Grid item xs={6} md={4}>\r\n                            <Typography sx={{ color: \"text.secondary\" }}>\r\n                              <AvatarGroup max={4}>\r\n                                <Avatar\r\n                                  sx={{ bgcolor: themes.TextColor, width: 20, height: 20 }}\r\n                                >\r\n                                  {\" \"}\r\n                                </Avatar>\r\n                                <Avatar\r\n                                  sx={{ bgcolor: themes.BackgroundColor, width: 20, height: 20 }}\r\n                                >\r\n                                  {\" \"}\r\n                                </Avatar>\r\n                                <Avatar\r\n                                  sx={{ bgcolor:themes.HighlightColor, width: 20, height: 20 }}\r\n                                >\r\n                                  {\" \"}\r\n                                </Avatar>\r\n                              </AvatarGroup>\r\n                            </Typography>\r\n                          </Grid>\r\n                        </Grid>\r\n                      </AccordionSummary>\r\n                      <AccordionDetails>\r\n                        <Typography>\r\n                          <List>\r\n                            <ListItem disablePadding>\r\n                              <ListItemButton  onClick={()=>changeColor('red','green','black')}>\r\n                                <Grid container spacing={2}>\r\n                                  <Grid item xs={6} md={8}>\r\n                                    <ListItemText primary=\"First Color Theme\" />\r\n                                  </Grid>\r\n                                  <Grid item xs={6} md={4}>\r\n                                    <Typography\r\n                                      sx={{ color: \"text.secondary\" }}\r\n                                    >\r\n                                      <AvatarGroup max={4} >\r\n                                        <Avatar\r\n                                          sx={{\r\n                                            bgcolor: \"red\",\r\n                                            width: 20,\r\n                                            height: 20,\r\n                                          }}\r\n                                        >\r\n                                          {\" \"}\r\n                                        </Avatar>\r\n                                        <Avatar\r\n                                          sx={{\r\n                                            bgcolor: \"green\",\r\n                                            width: 20,\r\n                                            height: 20,\r\n                                          }}\r\n                                        >\r\n                                          {\" \"}\r\n                                        </Avatar>\r\n                                        <Avatar\r\n                                          sx={{\r\n                                            bgcolor: \"black\",\r\n                                            width: 20,\r\n                                            height: 20,\r\n                                          }}\r\n                                        >\r\n                                          {\" \"}\r\n                                        </Avatar>\r\n                                      </AvatarGroup>\r\n                                    </Typography>\r\n                                  </Grid>\r\n                                </Grid>\r\n                              </ListItemButton>\r\n                            </ListItem>\r\n                          </List>\r\n                        </Typography>\r\n                      </AccordionDetails>\r\n                    </Accordion>\r\n                  </div>\r\n                  <CRow className=\"mb-3\">\r\n                    <CFormLabel\r\n                      htmlFor=\"staticEmail\"\r\n                      className=\"col-sm-6 col-form-label\"\r\n                    >\r\n                      {t(\"text_color\")}\r\n                    </CFormLabel>\r\n                    <CCol sm={6} className=\"text-center\">\r\n                      <input\r\n                        type=\"color\"\r\n                        onChange={handleInput}\r\n                        value={themes.TextColor}\r\n                        name=\"TextColor\"\r\n                      />\r\n                    </CCol>\r\n                  </CRow>\r\n                  <CRow className=\"mb-3\">\r\n                    <CFormLabel\r\n                      htmlFor=\"inputPassword\"\r\n                      className=\"col-sm-6 col-form-label\"\r\n                    >\r\n                      {t(\"background_color\")}\r\n                    </CFormLabel>\r\n                    <CCol sm={6} className=\"text-center\">\r\n                      <input\r\n                        type=\"color\"\r\n                        onChange={handleInput}\r\n                        value={themes.BackgroundColor}\r\n                        name=\"BackgroundColor\"\r\n                      />\r\n                    </CCol>\r\n                  </CRow>\r\n                  <CRow className=\"mb-3\">\r\n                    <CFormLabel\r\n                      htmlFor=\"inputPassword\"\r\n                      className=\"col-sm-6 col-form-label\"\r\n                    >\r\n                      {t(\"highlight_color\")}\r\n                    </CFormLabel>\r\n                    <CCol sm={6} className=\"text-center\">\r\n                      <input\r\n                        type=\"color\"\r\n                        onChange={handleInput}\r\n                        value={themes.HighlightColor}\r\n                        name=\"HighlightColor\"\r\n                      />\r\n                    </CCol>\r\n                  </CRow>\r\n                  <CRow className=\"mb-3\">\r\n                    <button className=\"btn btn-light m-1\" type=\"button\">\r\n                      {t(\"advanced_customization\")}\r\n                    </button>\r\n                  </CRow>\r\n                </CCardBody>\r\n              </CCard>\r\n            </div>\r\n            <div className=\"col-6\">\r\n              <div className=\"row\">\r\n                <div className=\"col-12\">\r\n                  <CCard>\r\n                    <CCardHeader component=\"h5\">\r\n                      {t(\"home_screen_background\")}\r\n                    </CCardHeader>\r\n                    <CCardBody>\r\n                      <RadioGroup\r\n                        aria-label=\"HomeScreen\"\r\n                        defaultValue=\"1\"\r\n                        name=\"radio-buttons-group\"\r\n                      >\r\n                        <FormControlLabel\r\n                          value=\"1\"\r\n                          control={\r\n                            <Radio\r\n                              onClick={() => setHomeScreen(false)}\r\n                              color=\"secondary\"\r\n                            />\r\n                          }\r\n                          label={t(\"solid_color\")}\r\n                        />\r\n                        <FormControlLabel\r\n                          value=\"0\"\r\n                          control={\r\n                            <Radio\r\n                              onClick={() => setHomeScreen(true)}\r\n                              color=\"secondary\"\r\n                            />\r\n                          }\r\n                          label={t(\"image_or_video\")}\r\n                        />\r\n                      </RadioGroup>\r\n                      <CRow className=\"mb-3\">\r\n                        <CCol sm={12} className=\"text-right\">\r\n                          {homeScreen ? (\r\n                            \" \"\r\n                          ) : (\r\n                            <input\r\n                              type=\"color\"\r\n                              id=\"favcolor\"\r\n                              onChange={handleInput}\r\n                              value={themes.HomeScreenBackground}\r\n                              name=\"HomeScreenBackground\"\r\n                            />\r\n                          )}\r\n                        </CCol>\r\n                      </CRow>\r\n                      {homeScreen ? (\r\n                        <div className=\"form-group\">\r\n                          <div className=\"input-group\">\r\n                            <div className=\"custom-file\">\r\n                              <input\r\n                                type=\"file\"\r\n                                className=\"form-control\"\r\n                                name=\"HomeScreenBackground\"\r\n                                required\r\n                                onChange={handleImage}\r\n                              />\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      ) : (\r\n                        \" \"\r\n                      )}\r\n                    </CCardBody>\r\n                  </CCard>\r\n                </div>\r\n                <div className=\"col-12\">\r\n                  <CCard>\r\n                    <CCardHeader component=\"h5\">\r\n                      {t(\"menu_screen_background\")}\r\n                    </CCardHeader>\r\n                    <CCardBody>\r\n                      <RadioGroup\r\n                        aria-label=\"MenuScreen\"\r\n                        defaultValue=\"1\"\r\n                        name=\"radio-buttons-group\"\r\n                      >\r\n                        <FormControlLabel\r\n                          value=\"1\"\r\n                          control={\r\n                            <Radio\r\n                              onClick={() => setMenuScreen(false)}\r\n                              color=\"secondary\"\r\n                            />\r\n                          }\r\n                          label={t(\"solid_color\")}\r\n                        />\r\n                        <FormControlLabel\r\n                          value=\"0\"\r\n                          control={\r\n                            <Radio\r\n                              onClick={() => setMenuScreen(true)}\r\n                              color=\"secondary\"\r\n                            />\r\n                          }\r\n                          label={t(\"image\")}\r\n                        />\r\n                      </RadioGroup>\r\n                      <CRow className=\"mb-3\">\r\n                        <CCol sm={12} className=\"text-right\">\r\n                          {menuScreen ? (\r\n                            \" \"\r\n                          ) : (\r\n                            <input\r\n                              type=\"color\"\r\n                              onChange={handleInput}\r\n                              value={themes.MenuScreenBackground}\r\n                              name=\"MenuScreenBackground\"\r\n                            />\r\n                          )}\r\n                        </CCol>\r\n                      </CRow>\r\n                      {menuScreen ? (\r\n                        <div className=\"form-group\">\r\n                          <div className=\"input-group\">\r\n                            <div className=\"custom-file\">\r\n                              <input\r\n                                type=\"file\"\r\n                                className=\"form-control\"\r\n                                name=\"MenuScreenBackground\"\r\n                                required\r\n                                onChange={handleImageMenu}\r\n                              />\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      ) : (\r\n                        \" \"\r\n                      )}\r\n                    </CCardBody>\r\n                  </CCard>\r\n                </div>\r\n                <div className=\"col-12\">\r\n                  <CCard>\r\n                    <CCardHeader component=\"h5\">{t(\"menu_button\")}</CCardHeader>\r\n                    <CCardBody>\r\n                      <CRow className=\"mb-3\">\r\n                        <CFormLabel\r\n                          htmlFor=\"staticEmail\"\r\n                          className=\"col-sm-6 col-form-label\"\r\n                        >\r\n                          {t(\"show_button\")}\r\n                        </CFormLabel>\r\n                        <CCol sm={6} className=\"text-center\">\r\n                          <Switch\r\n                            defaultChecked\r\n                            onChange={() => setButtonShow(!buttonShow)}\r\n                            value={buttonShow}\r\n                            onChange={handleInput}\r\n                            name=\"ShowButton\"\r\n                            color=\"secondary\"\r\n                          />\r\n                        </CCol>\r\n                      </CRow>\r\n                      {buttonShow ? (\r\n                        <CRow className=\"mb-3\">\r\n                          <CFormLabel\r\n                            htmlFor=\"inputPassword\"\r\n                            className=\"col-sm-12 col-form-label\"\r\n                          >\r\n                            {t(\"button_shape\")}\r\n                          </CFormLabel>\r\n                          <CCol sm={12} className=\"text-center\">\r\n                            <RadioGroup\r\n                              aria-label=\"menu_button\"\r\n                              defaultValue=\"P\"\r\n                              name=\"radio-buttons-group\"\r\n                            >\r\n                              <FormControlLabel\r\n                                value=\"R\"\r\n                                control={\r\n                                  <div>\r\n                                    <Radio\r\n                                      onChange={handleInput}\r\n                                      name=\"ButtonShape\"\r\n                                      value=\"R\"\r\n                                      color=\"secondary\"\r\n                                    />{\" \"}\r\n                                    <img\r\n                                      src={circle_menu_button}\r\n                                      alt=\"\"\r\n                                      width=\"80\"\r\n                                    />\r\n                                  </div>\r\n                                }\r\n                                label={t(\"round\")}\r\n                              />\r\n                              <FormControlLabel\r\n                                value=\"P\"\r\n                                control={\r\n                                  <div>\r\n                                    <Radio\r\n                                      onChange={handleInput}\r\n                                      name=\"ButtonShape\"\r\n                                      value=\"P\"\r\n                                      color=\"secondary\"\r\n                                    />{\" \"}\r\n                                    <img\r\n                                      src={pill_menu_button}\r\n                                      alt=\"\"\r\n                                      width=\"80\"\r\n                                    />\r\n                                  </div>\r\n                                }\r\n                                label={t(\"pill\")}\r\n                              />\r\n                            </RadioGroup>\r\n                          </CCol>\r\n                        </CRow>\r\n                      ) : null}\r\n                    </CCardBody>\r\n                  </CCard>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"text-center mx-4 mb-4\">\r\n            <button className=\"btn btn-primary\" type=\"submit\">\r\n              {t(\"save\")}\r\n            </button>\r\n            <Link className=\"btn btn-light m-1\" to=\"\" onClick={() => history.goBack()}>\r\n              {t(\"back\")}\r\n            </Link>\r\n          </div>\r\n        </Form>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Theme;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\SingleFileAutoSubmit.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Branches\\Show.js",["359"],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\ProductDetails.js",["360","361","362","363","364"],"import React, { Fragment, useState, useEffect, SyntheticEvent } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// Import css files\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport Footer from \"./Footer\";\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport Container from \"@mui/material/Container\";\r\n// import Slider from \"react-slick\";\r\nimport Header from \"./Header\";\r\nimport { base_url, port } from \"../../../../../Consts\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardMedia from \"@mui/material/CardMedia\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Tabs from \"@mui/material/Tabs\";\r\nimport Tab from \"@mui/material/Tab\";\r\nimport Box from \"@mui/material/Box\";\r\nconst ProductDetails = (props) => {\r\n\r\n  const [themeCustomization, setThemeCustomization] = useState([]);\r\n  const [mode, setMode] = useState(\"dark\" );\r\n\r\n  const theme = createTheme({\r\n    palette: {\r\n      mode:mode ,\r\n      warning: {\r\n        // button background\r\n        main: themeCustomization?.button_background_color ?themeCustomization.button_background_color: \"#ff751d\" ,\r\n      },\r\n    },\r\n    typography: {\r\n      fontFamily: themeCustomization?.font?themeCustomization.font: \"sans-serif\",\r\n      subtitle1: {\r\n        fontSize: themeCustomization?.product_discription_font_size?themeCustomization.product_discription_font_size: 10,\r\n        color: themeCustomization?.product_discription_color?themeCustomization.product_discription_color: \"#777\",\r\n      },\r\n      // price\r\n      body1: {\r\n        fontSize: themeCustomization?.price_font_size?themeCustomization.price_font_size: 12,\r\n        color: themeCustomization?.price_color?themeCustomization.price_color: \"#f1fcfe\",\r\n      },\r\n      // product Names\r\n      button: {\r\n        fontSize: themeCustomization?.product_name_font_size?themeCustomization.product_name_font_size: 12,\r\n        color: themeCustomization?.product_name_color?themeCustomization.product_name_color: \"#ff751d\",\r\n      },\r\n      // categories and sub categories\r\n      overline: {\r\n        fontSize: themeCustomization?.categories_and_sub_categoies_font_size?themeCustomization.categories_and_sub_categoies_font_size: 12,\r\n        color: themeCustomization?.categories_and_sub_categoies_color?themeCustomization.categories_and_sub_categoies_color: \"#ff751d\",\r\n      },\r\n      // branch Name\r\n      h6:{\r\n        fontSize: themeCustomization?.branch_name_font_size?themeCustomization.branch_name_font_size: 14,\r\n        color: themeCustomization?.branch_name_color?themeCustomization.branch_name_color: \"#ff751d\", \r\n      },\r\n    },\r\n    components: {\r\n      MuiButton: {\r\n        variants: [\r\n          {\r\n            // button\r\n            props: { variant: 'contained' },\r\n            style: {\r\n              fontSize: themeCustomization?.button_text_font_size?themeCustomization.button_text_font_size: 12,\r\n              color: themeCustomization?.button_text_color?themeCustomization.button_text_color: \"#f1fcfe\",\r\n            },\r\n          }\r\n        ],\r\n      },\r\n    },\r\n  });\r\n  // for localization\r\n  const { t } = useTranslation();\r\n  const id = atob(props.match.params.id);\r\n  //for retriving data using laravel API\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [variantData, setVariantData] = useState([]);\r\n  const [variantsWithPictures, setVariantsWithPictures] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  useEffect(() => {\r\n    axios.get(`/api/GetCustomization/1`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setThemeCustomization(res.data.fetchData[0].Customization);\r\n        setMode(res.data.fetchData[0].Customization?.mode)\r\n      }\r\n    });\r\n    axios.get(`/api/GetProduct/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setFetchData(res.data.fetchData);\r\n        // console.log(res.data.fetchData);\r\n      }\r\n      setLoading(false);\r\n    });\r\n    axios.get(`/api/GetVariantsBasedOnProduct/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setVariantData(res.data.fetchData);\r\n      }\r\n    });\r\n    axios\r\n      .get(`/api/GetVariantsBasedOnProductWithPictures/${id}`)\r\n      .then((res) => {\r\n        if (res.data.status === 200) {\r\n          setVariantsWithPictures(res.data.fetchData);\r\n          // console.log(res.data.fetchData);\r\n        }\r\n      });\r\n  }, [id]);\r\n  const [value, setValue] = useState(0);\r\n\r\n  const handleChange = (event: SyntheticEvent, newValue: number) => {\r\n    setValue(newValue);\r\n  };\r\n  var viewImages_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"container \">\r\n        <div\r\n          className=\"spinner-border text-primary \"\r\n          role=\"status\"\r\n          style={{ position: \"fixed\", top: \"50%\", left: \"50%\" }}\r\n        >\r\n          <span className=\"sr-only\">{t(\"loading\")}</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewImages_HTMLTABLE = fetchData.map((item, i) => {\r\n      return (\r\n          <Grid item xs={12} sm={12} md={12} key={i}>\r\n            <Card\r\n            className=\"my-2\"\r\n              sx={{\r\n                // height: \"100%\",\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n              }}\r\n            >\r\n              <CardMedia\r\n                component=\"img\"\r\n                sx={\r\n                  {\r\n                    // 16:9\r\n                    // pt: \"40.25%\",\r\n                  }\r\n                }\r\n                sx={{ height: \"200px\", objectFit: \"contain\" }}\r\n                image={`http://${base_url}:${port}/images/products/${item.image}`}\r\n                alt=\"Image\"\r\n                // className=\"d-block w-100 img-thumbnail\"\r\n              />\r\n            </Card>\r\n            <Card\r\n            // sx={{\r\n            //   // height: \"100%\",\r\n            //   // display: \"flex\",\r\n            //   // flexDirection: \"column\",\r\n            // }}\r\n            >\r\n              <CardContent\r\n                sx={{ flexGrow: 1 }}\r\n                // className=\"text-left\"\r\n              >\r\n                <Typography variant=\"overline\" gutterBottom>\r\n                  {t(\"product_name\")}: {item.ProductName}\r\n                </Typography>\r\n                <Typography variant=\"body2\" gutterBottom>\r\n                  {t(\"description\")}: {item.Description}\r\n                </Typography>\r\n                <Typography variant=\"body2\" gutterBottom>\r\n                  {t(\"unit\")}: {item.UnitName}\r\n                </Typography>\r\n                <Typography variant=\"overline\" gutterBottom>\r\n\r\n                <Tabs\r\n                  value={value}\r\n                  onChange={handleChange}\r\n                  textColor=\"inherit\"\r\n                  // aria-label=\"secondary tabs example\"\r\n                  variant=\"scrollable\"\r\n                  scrollButtons=\"auto\"\r\n                  aria-label=\"scrollable auto tabs example\"\r\n                >\r\n                  <Tab label=\"Item One\" />\r\n                  <Tab label=\"Item Two\" />\r\n                  <Tab label=\"Item Three\" />\r\n                  <Tab label=\"Item Four\" />\r\n                  <Tab label=\"Item Five\" />\r\n                  <Tab label=\"Item Six\" />\r\n                  <Tab label=\"Item Seven\" />\r\n                </Tabs>\r\n                </Typography>\r\n\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n         \r\n      );\r\n    });\r\n  }\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <Container maxWidth=\"lg\">\r\n        <Header\r\n          // title={branch[0]?.BrancheName}\r\n          categories={0}\r\n          subcategories={0}\r\n          // setSubCategories={setSubCategories}\r\n          // activeSubCategory={activeSubCategory}\r\n          setMode={setMode}\r\n          mode={mode}\r\n        />\r\n        <main>\r\n          \r\n          <Grid container spacing={2}>\r\n            {viewImages_HTMLTABLE}\r\n          </Grid>\r\n        </main>\r\n        <Typography variant=\"overline\" display=\"block\" gutterBottom>\r\n            {t(\"product_variants\")}:\r\n            \r\n          </Typography>\r\n          <Grid container spacing={2}>\r\n            {variantsWithPictures.map((item, i) => {\r\n              return (\r\n                <Grid item xs={3} sm={2} md={2} key={i}>\r\n                  <Card\r\n                    sx={{\r\n                      // height: \"100%\",\r\n                      display: \"flex\",\r\n                      flexDirection: \"column\",\r\n                    }}\r\n                  >\r\n                    <CardMedia\r\n                      component=\"img\"\r\n                      sx={\r\n                        {\r\n                          // 16:9\r\n                          // pt: \"40.25%\",\r\n                        }\r\n                      }\r\n                      sx={{ height: \"100px\", objectFit: \"contain\" }}\r\n                      image={`http://${base_url}:${port}/images/variants_pics/${item.PicturesLocation}`}\r\n                      alt=\"Image\"\r\n                    />\r\n                    <Link to={`/order-details/${btoa(item.product_id)}`}>\r\n                      <CardContent sx={{ flexGrow: 1 }} className=\"text-center\">\r\n                        <Typography\r\n                          variant=\"overline\"\r\n                          display=\"block\"\r\n                          gutterBottom\r\n                          // sx={{ color: \"#f27d1e\" }}\r\n                        >\r\n                          {item.VariationName}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" gutterBottom>\r\n                          {item.UnitName}\r\n                        </Typography>\r\n                        <Typography variant=\"body1\" gutterBottom>\r\n                          {item.CurrentPrice + \" \" + item.currency_code}\r\n                          {item.OldPrice === null\r\n                            ? \" \"\r\n                            : item.OldPrice + \" \" + item.currency_code}\r\n                        </Typography>\r\n                      </CardContent>\r\n                    </Link>\r\n                  </Card>\r\n                </Grid>\r\n              );\r\n            })}\r\n          </Grid>\r\n        <Footer title=\"Checkout\" />\r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default ProductDetails;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\Main.js",["365","366","367","368","369","370","371"],"import React, { useState, useEffect } from \"react\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Container from \"@mui/material/Container\";\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport Header from \"./Header\";\r\nimport Footer from \"./Footer\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardMedia from \"@mui/material/CardMedia\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport axios from \"axios\";\r\nimport { base_url, port } from \"../../../../../Consts\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nvar hold = 1;\r\nexport default function Main(props) {\r\n  const [loading, setLoading] = useState(true);\r\n  const { t } = useTranslation();\r\n  const branchId = atob(props.match.params.id);\r\n  const [branch, setBranch] = useState([]);\r\n  const [categories, setCategories] = useState([]);\r\n  const [subcategories, setSubCategories] = useState([]);\r\n  const [products, setProducts] = useState([]);\r\n  const [activeSubCategory, setActiveSubCategory] = useState(0);\r\n  const [themeCustomization, setThemeCustomization] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios.get(`/api/GetTempBasedOnBranch/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setThemeCustomization(res.data.fetchData[0]?.Customization);\r\n        setMode(res.data.fetchData[0]?.Customization?.mode ? res.data.fetchData[0]?.Customization?.mode : \"dark\" )\r\n        // console.log(res.data.fetchData[0].Customization);\r\n      }\r\n    });\r\n    axios.get(`/api/GetBranchForShow/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setBranch(res.data.data);\r\n      }\r\n    });\r\n    axios.get(`/api/GetCategories/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setCategories(res.data.fetchData);\r\n      }\r\n    });\r\n    axios.get(`/api/getSubCateBasedOnBranch/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        // console.log(res.data.fetchData[0].sub_id);\r\n        setSubCategories(res.data.fetchData);\r\n        axios\r\n          .get(\r\n            `/api/GetProductsBasedOnSubCategory/${res.data.fetchData[0]?.sub_id}`\r\n          )\r\n          .then((res) => {\r\n            if (res.data.status === 200) {\r\n              setProducts(res.data.data);\r\n              setActiveSubCategory(res.data.data[0]?.sub_category_id);\r\n            }\r\n          });\r\n        setLoading(false);\r\n      }\r\n    });\r\n  }, []);\r\n  const [changeState, setChangeState] = useState(true);\r\n  const fetchMoreData = () => {\r\n    if (hold < subcategories.length) {\r\n      axios.get(`/api/getSubCateBasedOnBranch/${branchId}`).then((res) => {\r\n        if (res.data.status === 200) {\r\n          setActiveSubCategory(res.data.fetchData[hold].sub_id);\r\n          // console.log(res.data.fetchData[hold].sub_id);\r\n\r\n          axios\r\n            .get(\r\n              `/api/GetProductsBasedOnSubCategory/${res.data.fetchData[hold].sub_id}`\r\n            )\r\n            .then((res) => {\r\n              if (res.data.status === 200) {\r\n                if (res.data.data.length === 0) {\r\n                  hold = hold + 1;\r\n                  // console.log(res.data.data);\r\n                  fetchMoreData();\r\n                } else {\r\n                  hold = hold + 1;\r\n                  setProducts(products.concat(res.data.data));\r\n                }\r\n              }\r\n            });\r\n\r\n          setSubCategories(res.data.fetchData);\r\n        }\r\n      });\r\n    } else {\r\n      setChangeState(false);\r\n    }\r\n    // console.log(hold);\r\n  };\r\n  // design start\r\n  const [mode, setMode] = useState(\"dark\");\r\n  const theme = createTheme({\r\n    palette: {\r\n      mode:mode,\r\n      warning: {\r\n        // button background\r\n        main: themeCustomization?.button_background_color ?themeCustomization.button_background_color: \"#ff751d\" ,\r\n      },\r\n    },\r\n    typography: {\r\n      fontFamily: themeCustomization?.font?themeCustomization.font: \"sans-serif\",\r\n      subtitle1: {\r\n        fontSize: themeCustomization?.product_discription_font_size?themeCustomization.product_discription_font_size: 10,\r\n        color: themeCustomization?.product_discription_color?themeCustomization.product_discription_color: \"#777\",\r\n      },\r\n      // price\r\n      body1: {\r\n        fontSize: themeCustomization?.price_font_size?themeCustomization.price_font_size: 12,\r\n        color: themeCustomization?.price_color?themeCustomization.price_color: \"#f1fcfe\",\r\n      },\r\n      // product Names\r\n      button: {\r\n        fontSize: themeCustomization?.product_name_font_size?themeCustomization.product_name_font_size: 12,\r\n        color: themeCustomization?.product_name_color?themeCustomization.product_name_color: \"#ff751d\",\r\n      },\r\n      // categories and sub categories\r\n      overline: {\r\n        fontSize: themeCustomization?.categories_and_sub_categoies_font_size?themeCustomization.categories_and_sub_categoies_font_size: 12,\r\n        color: themeCustomization?.categories_and_sub_categoies_color?themeCustomization.categories_and_sub_categoies_color: \"#ff751d\",\r\n      },\r\n      // branch Name\r\n      h6:{\r\n        fontSize: themeCustomization?.branch_name_font_size?themeCustomization.branch_name_font_size: 14,\r\n        color: themeCustomization?.branch_name_color?themeCustomization.branch_name_color: \"#ff751d\", \r\n      },\r\n    },\r\n    components: {\r\n      MuiButton: {\r\n        variants: [\r\n          {\r\n            // button\r\n            props: { variant: 'contained' },\r\n            style: {\r\n              fontSize: themeCustomization?.button_text_font_size?themeCustomization.button_text_font_size: 12,\r\n              color: themeCustomization?.button_text_color?themeCustomization.button_text_color: \"#f1fcfe\",\r\n            },\r\n          }\r\n        ],\r\n      },\r\n    },\r\n  });\r\n  // design end\r\n\r\n  var viewShow_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div\r\n        className=\"spinner-border text-primary \"\r\n        role=\"status\"\r\n        style={{position: \"fixed\", top: \"50%\", left: \"50%\" }}\r\n      >\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewShow_HTMLTABLE = products?.map((item, i) => {\r\n      return (\r\n        <Grid item xs={\r\n          themeCustomization?.number_of_products_in_each_row==1?12:\r\n          themeCustomization?.number_of_products_in_each_row==2?6:\r\n          themeCustomization?.number_of_products_in_each_row==3?4:\r\n          themeCustomization?.number_of_products_in_each_row==4?3:\r\n          themeCustomization?.number_of_products_in_each_row==5?3:\r\n          themeCustomization?.number_of_products_in_each_row==6?2:\r\n          6} \r\n          // sm={2} md={2} \r\n          key={i}>\r\n          <Card\r\n            sx={{\r\n              // height: \"100%\",\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n            }}\r\n          >\r\n            <CardMedia\r\n              component=\"img\"\r\n              sx={{ height: \"100px\", objectFit: \"contain\" }}\r\n              image={`http://${base_url}:${port}/images/products/${item.image}`}\r\n              alt=\"Image\"\r\n            />\r\n            <Link to={`/product-details/${btoa(item.product_id)}`}>\r\n              <CardContent sx={{ flexGrow: 1 }}>\r\n                <Typography\r\n                  variant=\"button\"\r\n                  display=\"block\"\r\n                  gutterBottom\r\n                >\r\n                  {item.ProductName}\r\n                </Typography>\r\n                <Typography variant=\"subtitle1\" gutterBottom>\r\n                  {item.Description}\r\n                </Typography>\r\n              </CardContent>\r\n            </Link>\r\n          </Card>\r\n        </Grid>\r\n      );\r\n    });\r\n  }\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <Container maxWidth=\"lg\">\r\n        <Header\r\n          title={branch[0]?.BrancheName}\r\n          categories={categories}\r\n          subcategories={subcategories}\r\n          setSubCategories={setSubCategories}\r\n          activeSubCategory={activeSubCategory}\r\n          setMode={setMode}\r\n          mode={mode}\r\n        />\r\n        \r\n        <main>\r\n          <Grid container spacing={4}>\r\n            {viewShow_HTMLTABLE}\r\n          </Grid>\r\n        </main>\r\n        <InfiniteScroll\r\n          dataLength={products.length} //This is important field to render the next data\r\n          next={fetchMoreData}\r\n          hasMore={changeState}\r\n          loader={\r\n            <p className=\"text-center pt-5\">\r\n              <b>{t(\"loading\")}</b>\r\n            </p>\r\n          }\r\n          endMessage={\r\n            <p style={{ textAlign: \"center \" }}>\r\n              <b>{t(\"yay_you_have_seen_it_all\")}</b>\r\n            </p>\r\n          }\r\n        ></InfiniteScroll>\r\n      </Container>\r\n      <Footer title=\"Checkout Order\" />\r\n    </ThemeProvider>\r\n  );\r\n}\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\OrderDetails.js",["372","373","374","375","376"],"import React, { Fragment, useState, useEffect, SyntheticEvent } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// Import css files\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport Footer from \"./Footer\";\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport Container from \"@mui/material/Container\";\r\n// import Slider from \"react-slick\";\r\nimport Header from \"./Header\";\r\nimport { base_url, port } from \"../../../../../Consts\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardMedia from \"@mui/material/CardMedia\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Radio from '@mui/material/Radio';\r\nimport RadioGroup from '@mui/material/RadioGroup';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Slider from \"react-slick\";\r\n\r\nconst OrderDetails = (props) => {\r\n  const [themeCustomization, setThemeCustomization] = useState([]);\r\n  const [mode, setMode] = useState(themeCustomization?.mode ? themeCustomization.mode: \"dark\" );\r\n\r\n  const theme = createTheme({\r\n    palette: {\r\n      mode:mode ,\r\n      warning: {\r\n        // button background\r\n        main: themeCustomization?.button_background_color ?themeCustomization.button_background_color: \"#ff751d\" ,\r\n      },\r\n    },\r\n    typography: {\r\n      fontFamily: themeCustomization?.font?themeCustomization.font: \"sans-serif\",\r\n      subtitle1: {\r\n        fontSize: themeCustomization?.product_discription_font_size?themeCustomization.product_discription_font_size: 10,\r\n        color: themeCustomization?.product_discription_color?themeCustomization.product_discription_color: \"#777\",\r\n      },\r\n      // price\r\n      body1: {\r\n        fontSize: themeCustomization?.price_font_size?themeCustomization.price_font_size: 12,\r\n        color: themeCustomization?.price_color?themeCustomization.price_color: \"#f1fcfe\",\r\n      },\r\n      // product Names\r\n      button: {\r\n        fontSize: themeCustomization?.product_name_font_size?themeCustomization.product_name_font_size: 12,\r\n        color: themeCustomization?.product_name_color?themeCustomization.product_name_color: \"#ff751d\",\r\n      },\r\n      // categories and sub categories\r\n      overline: {\r\n        fontSize: themeCustomization?.categories_and_sub_categoies_font_size?themeCustomization.categories_and_sub_categoies_font_size: 12,\r\n        color: themeCustomization?.categories_and_sub_categoies_color?themeCustomization.categories_and_sub_categoies_color: \"#ff751d\",\r\n      },\r\n      // branch Name\r\n      h6:{\r\n        fontSize: themeCustomization?.branch_name_font_size?themeCustomization.branch_name_font_size: 14,\r\n        color: themeCustomization?.branch_name_color?themeCustomization.branch_name_color: \"#ff751d\", \r\n      },\r\n    },\r\n    components: {\r\n      MuiButton: {\r\n        variants: [\r\n          {\r\n            // button\r\n            props: { variant: 'contained' },\r\n            style: {\r\n              fontSize: themeCustomization?.button_text_font_size?themeCustomization.button_text_font_size: 12,\r\n              color: themeCustomization?.button_text_color?themeCustomization.button_text_color: \"#f1fcfe\",\r\n            },\r\n          }\r\n        ],\r\n      },\r\n    },\r\n  });\r\n  // for localization\r\n  const { t } = useTranslation();\r\n  const id = atob(props.match.params.id);\r\n  //for retriving data using laravel API\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [variantData, setVariantData] = useState([]);\r\n  const [variantsWithPictures, setVariantsWithPictures] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    axios.get(`/api/GetCustomization/1`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setThemeCustomization(res.data.fetchData[0].Customization);\r\n        setMode(res.data.fetchData[0].Customization?.mode)\r\n      }\r\n    });\r\n    axios.get(`/api/GetProduct/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setFetchData(res.data.fetchData);\r\n        // console.log(res.data.fetchData);\r\n      }\r\n      setLoading(false);\r\n    });\r\n    axios.get(`/api/GetVariantsBasedOnProduct/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setVariantData(res.data.fetchData);\r\n      }\r\n    });\r\n    axios\r\n      .get(`/api/GetVariantsBasedOnProductWithPictures/${id}`)\r\n      .then((res) => {\r\n        if (res.data.status === 200) {\r\n          setVariantsWithPictures(res.data.fetchData);\r\n          // console.log(res.data.fetchData);\r\n        }\r\n      });\r\n  }, [id]);\r\n\r\n  var viewImages_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"container \">\r\n        <div\r\n          className=\"spinner-border text-primary \"\r\n          role=\"status\"\r\n          style={{ position: \"fixed\", top: \"50%\", left: \"50%\" }}\r\n        >\r\n          <span className=\"sr-only\">{t(\"loading\")}</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewImages_HTMLTABLE = fetchData.map((item, i) => {\r\n      return (\r\n          <Grid item xs={12} sm={12} md={12} key={i}>\r\n            <Card\r\n            className=\"my-2\"\r\n              sx={{\r\n                // height: \"100%\",\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n              }}\r\n            >\r\n              <CardMedia\r\n                component=\"img\"\r\n                sx={{ height: \"200px\", objectFit: \"contain\" }}\r\n                image={`http://${base_url}:${port}/images/products/${item.image}`}\r\n                alt=\"Image\"\r\n                // className=\"d-block w-100 img-thumbnail\"\r\n              />\r\n            </Card>\r\n            <Card\r\n            // sx={{\r\n            //   // height: \"100%\",\r\n            //   // display: \"flex\",\r\n            //   // flexDirection: \"column\",\r\n            // }}\r\n            >\r\n              <CardContent\r\n                sx={{ flexGrow: 1 }}\r\n              >\r\n                <Typography variant=\"h6\"  gutterBottom>\r\n                   {item.ProductName}\r\n                </Typography>\r\n                <Typography variant=\"body2\" gutterBottom>\r\n                  {item.Description}\r\n                </Typography>\r\n                \r\n                <RadioGroup\r\n                aria-label=\"Drinks\"\r\n                defaultValue=\"1\"\r\n                name=\"radio-buttons-group\"\r\n            >\r\n                <FormControlLabel value=\"1\" control={<Radio />} label=\"1\" />\r\n                <FormControlLabel value=\"2\" control={<Radio />} label=\"2\" />\r\n                <FormControlLabel value=\"3\" control={<Radio />} label=\"3\" />\r\n                <FormControlLabel value=\"4\" control={<Radio />} label=\"4\" />\r\n            </RadioGroup>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n         \r\n      );\r\n    });\r\n  }\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <Container maxWidth=\"lg\">\r\n        <Header\r\n          // title={branch[0]?.BrancheName}\r\n          categories={0}\r\n          subcategories={0}\r\n          // setSubCategories={setSubCategories}\r\n          // activeSubCategory={activeSubCategory}\r\n          setMode={setMode}\r\n          mode={mode}\r\n        />\r\n        <main>\r\n          {/* <Grid container spacing={2}> */}\r\n          <Slider dots={false} infinite={true} slidesToShow={1} slidesToScroll={1}>\r\n            {viewImages_HTMLTABLE}\r\n          </Slider>\r\n          {/* </Grid> */}\r\n        </main>\r\n      </Container>\r\n      <Footer title=\"Add\" />\r\n\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default OrderDetails;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\Customization.js",["377","378","379","380"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CRow,\r\n  CFormLabel,\r\n  CCol,\r\n} from \"@coreui/react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// import Switch from \"react-switch\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { FormControlLabel, RadioGroup, Radio } from \"@mui/material\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport Select from \"@mui/material/Select\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardMedia from \"@mui/material/CardMedia\";\r\nimport { CardActionArea } from \"@mui/material\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Customization = (props) => {\r\n  const { t } = useTranslation();\r\n  // const templateId = atob(props.match.params.id);\r\n  const templateId = props.history.location.state.id;\r\n\r\n  const history = useHistory();\r\n\r\n  const [settings, setSettings] = useState([]);\r\n  const handleInput = (e) => {\r\n    setSettings({ ...settings, [e.target.name]: e.target.value });\r\n    const formData = new FormData();\r\n    formData.append(\r\n      \"settings\",\r\n      JSON.stringify({ ...settings, [e.target.name]: e.target.value })\r\n    );\r\n    axios\r\n      .post(`/api/InsertCustomization/${templateId}`, formData)\r\n      .then((res) => {\r\n        if (res.data.status === 200) {\r\n          setLoading(true);\r\n        }\r\n      });\r\n  };\r\n  // const save = () => {\r\n  //   const formData = new FormData();\r\n  //   formData.append(\"settings\", JSON.stringify(settings));\r\n  //   axios\r\n  //     .post(`/api/InsertCustomization/${templateId}`, formData)\r\n  //     .then((res) => {\r\n  //       if (res.data.status === 200) {\r\n  //         setLoading(true);\r\n  //       }\r\n  //     });\r\n  // };\r\n  const reset = (e) => {\r\n    e.preventDefault();\r\n    axios.get(`/api/ResetCustomization/${templateId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setSettings([]);\r\n        setLoading(true);\r\n        swal(\"Success\", res.data.message, \"success\");\r\n      }\r\n    });\r\n  };\r\n  const [template, setTemplate] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    axios.get(`/api/GetTemplate/${templateId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setSettings(res.data.fetchData[0].Customization)\r\n        setTemplate(res.data.fetchData[0]);\r\n      }\r\n      setLoading(false);\r\n    });\r\n    // const interval = setInterval(() => {\r\n    //   save();\r\n    // }, 15000);\r\n    // return () => clearInterval(interval);\r\n  }, [loading]);\r\n\r\n  var viewPreview_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    viewPreview_HTMLTABLE = (\r\n      <CCard>\r\n        <CCardHeader component=\"h5\">{t(\"preview\")}</CCardHeader>\r\n        <CCardBody>\r\n          <div className=\"spinner-border text-primary\" role=\"status\"\r\n            style={{ position: \"fixed\", top: \"0%\", left: \"50%\" }}\r\n          >\r\n            <span className=\"sr-only\">{t(\"loading\")}</span>\r\n          </div>\r\n        </CCardBody>\r\n      </CCard>\r\n    );\r\n  } else {\r\n    viewPreview_HTMLTABLE = (\r\n      <CCard>\r\n        <CCardHeader component=\"h5\">{t(\"preview\")}</CCardHeader>\r\n        <CCardBody>\r\n          <Card>\r\n            <CardActionArea>\r\n              <CardMedia\r\n                component=\"iframe\"\r\n                height=\"600\"\r\n                image={`/${template?.URL}/${btoa(3)}`}\r\n                alt=\"template\"\r\n              />\r\n            </CardActionArea>\r\n          </Card>\r\n        </CCardBody>\r\n      </CCard>\r\n    );\r\n  }\r\n  return (\r\n    <>\r\n      <div className=\"row\">\r\n        <div className=\"col-7\">\r\n          <CCard>\r\n            <CCardHeader component=\"h5\">{t(\"customization\")}</CCardHeader>\r\n            <CCardBody>\r\n              <CRow className=\"mb-2\">\r\n                <CFormLabel className=\"col-sm-6 col-form-label font-weight-bold\">\r\n                  {t(\"Name\")}\r\n                </CFormLabel>\r\n                <CFormLabel className=\"col-sm-3 col-form-label font-weight-bold\">\r\n                  {t(\"value\")}\r\n                </CFormLabel>\r\n                <CFormLabel className=\"col-sm-3 col-form-label text-center font-weight-bold\">\r\n                  {t(\"default\")}\r\n                </CFormLabel>\r\n              </CRow>\r\n              <CRow className=\"mb-2\">\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"branch_name_color\")}\r\n                </CFormLabel>\r\n                <CCol sm={2} className=\"text-left\">\r\n                  <input\r\n                    type=\"color\"\r\n                    onChange={handleInput}\r\n                    value={settings?.branch_name_color}\r\n                    name=\"branch_name_color\"\r\n                  />\r\n                </CCol>\r\n                <CCol sm={4} className=\"text-center\">\r\n                  <input type=\"color\" disabled value=\"#ff751d\" />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"branch_name_font_size\")}\r\n                </CFormLabel>\r\n                <CCol sm={2}>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    onChange={handleInput}\r\n                    value={settings?.branch_name_font_size}\r\n\r\n                    type=\"number\"\r\n                    name=\"branch_name_font_size\"\r\n                  />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-4 col-form-label text-center\"\r\n                >\r\n                  {t(\"14\")}\r\n                </CFormLabel>\r\n              </CRow>\r\n\r\n              <CRow className=\"mb-2\">\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"categories_and_sub_categoies_color\")}\r\n                </CFormLabel>\r\n                <CCol sm={3} className=\"text-left\">\r\n                  <input\r\n                    type=\"color\"\r\n                    onChange={handleInput}\r\n                    value={settings?.categories_and_sub_categoies_color}\r\n                    name=\"categories_and_sub_categoies_color\"\r\n                  />\r\n                </CCol>\r\n                <CCol sm={2} className=\"text-center\">\r\n                  <input type=\"color\" disabled value=\"#f1fcfe\" />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"categories_and_sub_categoies_font_size\")}\r\n                </CFormLabel>\r\n                <CCol sm={2}>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    onChange={handleInput}\r\n                    value={settings?.categories_and_sub_categoies_font_size}\r\n\r\n                    type=\"number\"\r\n                    name=\"categories_and_sub_categoies_font_size\"\r\n                  />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-4 col-form-label text-center\"\r\n                >\r\n                  {t(\"12\")}\r\n                </CFormLabel>\r\n              </CRow>\r\n\r\n              <CRow className=\"mb-2\">\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"product_name_color\")}\r\n                </CFormLabel>\r\n                <CCol sm={3} className=\"text-left\">\r\n                  <input\r\n                    type=\"color\"\r\n                    onChange={handleInput}\r\n                    value={settings?.product_name_color}\r\n\r\n                    name=\"product_name_color\"\r\n                  />\r\n                </CCol>\r\n                <CCol sm={2} className=\"text-center\">\r\n                  <input type=\"color\" disabled value=\"#ff751d\" />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"product_name_font_size\")}\r\n                </CFormLabel>\r\n                <CCol sm={2}>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    onChange={handleInput}\r\n                    value={settings?.product_name_font_size}\r\n\r\n                    type=\"number\"\r\n                    name=\"product_name_font_size\"\r\n                  />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-4 col-form-label text-center\"\r\n                >\r\n                  {t(\"12\")}\r\n                </CFormLabel>\r\n              </CRow>\r\n              <CRow className=\"mb-2\">\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"product_discription_color\")}\r\n                </CFormLabel>\r\n                <CCol sm={3} className=\"text-left\">\r\n                  <input\r\n                    type=\"color\"\r\n                    onChange={handleInput}\r\n                    value={settings?.product_discription_color}\r\n                    name=\"product_discription_color\"\r\n                  />\r\n                </CCol>\r\n                <CCol sm={2} className=\"text-center\">\r\n                  <input type=\"color\" disabled value=\"#777\" />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"product_discription_font_size\")}\r\n                </CFormLabel>\r\n                <CCol sm={2}>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    onChange={handleInput}\r\n                    value={settings?.product_discription_font_size}\r\n\r\n                    type=\"number\"\r\n                    name=\"product_discription_font_size\"\r\n                  />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-4 col-form-label text-center\"\r\n                >\r\n                  {t(\"10\")}\r\n                </CFormLabel>\r\n              </CRow>\r\n              <CRow className=\"mb-2\">\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"price_color\")}\r\n                </CFormLabel>\r\n                <CCol sm={3} className=\"text-left\">\r\n                  <input\r\n                    type=\"color\"\r\n                    onChange={handleInput}\r\n                    value={settings?.price_color}\r\n\r\n                    name=\"price_color\"\r\n                  />\r\n                </CCol>\r\n                <CCol sm={2} className=\"text-center\">\r\n                  <input type=\"color\" disabled value=\"#ff751d\" />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"price_font_size\")}\r\n                </CFormLabel>\r\n                <CCol sm={2}>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    onChange={handleInput}\r\n                    value={settings?.price_font_size}\r\n\r\n                    type=\"number\"\r\n                    name=\"price_font_size\"\r\n                  />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-4 col-form-label text-center\"\r\n                >\r\n                  {t(\"12\")}\r\n                </CFormLabel>\r\n              </CRow>\r\n              <CRow className=\"mb-2\">\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"button_text_color\")}\r\n                </CFormLabel>\r\n                <CCol sm={2} className=\"text-left\">\r\n                  <input\r\n                    type=\"color\"\r\n                    onChange={handleInput}\r\n                    value={settings?.button_text_color}\r\n\r\n                    // value={themes.TextColor}\r\n                    name=\"button_text_color\"\r\n                  />\r\n                </CCol>\r\n                <CCol sm={4} className=\"text-center\">\r\n                  <input\r\n                    type=\"color\"\r\n                    disabled\r\n                    // onChange={handleInput}\r\n                    value=\"#f1fcfe\"\r\n                  />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"button_background_color\")}\r\n                </CFormLabel>\r\n                <CCol sm={2} className=\"text-left\">\r\n                  <input\r\n                    type=\"color\"\r\n                    onChange={handleInput}\r\n                    value={settings?.button_background_color}\r\n\r\n                    //   value={themes.TextColor}\r\n                    name=\"button_background_color\"\r\n                  />\r\n                </CCol>\r\n                <CCol sm={4} className=\"text-center\">\r\n                  <input\r\n                    type=\"color\"\r\n                    disabled\r\n                    // onChange={handleInput}\r\n                    value=\"#ff751d\"\r\n                  />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"button_text_font_size\")}\r\n                </CFormLabel>\r\n                <CCol sm={2}>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    onChange={handleInput}\r\n                    value={settings?.button_text_font_size}\r\n                    \r\n                    type=\"number\"\r\n                    name=\"button_text_font_size\"\r\n                  />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-4 col-form-label text-center\"\r\n                >\r\n                  {t(\"12\")}\r\n                </CFormLabel>\r\n              </CRow>\r\n              <CRow className=\"mb-2\">\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"number_of_products_in_each_row\")}\r\n                </CFormLabel>\r\n                <CCol sm={2}>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    onChange={handleInput}\r\n                    type=\"number\"\r\n                    value={settings?.number_of_products_in_each_row}\r\n                    \r\n                    name=\"number_of_products_in_each_row\"\r\n                  />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-4 col-form-label text-center\"\r\n                >\r\n                  {t(\"2\")}\r\n                </CFormLabel>\r\n              </CRow>\r\n              <CRow>\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"mode\")}\r\n                </CFormLabel>\r\n\r\n                <CCol sm={2} className=\"text-left\">\r\n                  <RadioGroup\r\n                    row\r\n                    aria-label=\"dark\"\r\n                    defaultValue={settings?.mode?settings.mode: \"dark\" }\r\n                    name=\"mode\"\r\n                    onChange={handleInput}\r\n                  >\r\n                    <FormControlLabel\r\n                      value=\"light\"\r\n                      control={<Radio />}\r\n                      label=\"Light\"\r\n                    />\r\n                    <FormControlLabel\r\n                      value=\"dark\"\r\n                      control={<Radio />}\r\n                      label=\"Dark\"\r\n                    />\r\n                  </RadioGroup>\r\n                </CCol>\r\n                <CCol sm={4} className=\"text-center\">\r\n                  <CFormLabel\r\n                    htmlFor=\"staticEmail\"\r\n                    className=\"col-sm-6 col-form-label \"\r\n                  >\r\n                    Dark\r\n                  </CFormLabel>\r\n                </CCol>\r\n              </CRow>\r\n              <CRow>\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"font\")}\r\n                </CFormLabel>\r\n\r\n                <CCol sm={2} className=\"text-left\">\r\n                  <FormControl fullWidth>\r\n                    <InputLabel id=\"demo-simple-select-label\">\r\n                      {t(\"fonts\")}\r\n                    </InputLabel>\r\n                    <Select\r\n                      labelId=\"demo-simple-select-label\"\r\n                      id=\"demo-simple-select\"\r\n                      //   value={age}\r\n                      label=\"fonts\"\r\n                      onChange={handleInput}\r\n                      name=\"font\"\r\n                      defaultValue={settings?.font?settings.font: \"sans-serif\" }\r\n                    >\r\n                      <MenuItem value=\"-apple-system\">-apple-system</MenuItem>\r\n                      <MenuItem value=\"BlinkMacSystemFont\">\r\n                        BlinkMacSystemFont\r\n                      </MenuItem>\r\n                      <MenuItem value=\"Segoe UI\">Segoe UI</MenuItem>\r\n                      <MenuItem value=\"Roboto\">Roboto</MenuItem>\r\n                      <MenuItem value=\"Helvetica Neue\">Helvetica Neue</MenuItem>\r\n                      <MenuItem value=\"Arial\">Arial</MenuItem>\r\n                      <MenuItem value=\"sans-serif\">sans-serif</MenuItem>\r\n                      <MenuItem value=\"Apple Color Emoji\">\r\n                        Apple Color Emoji\r\n                      </MenuItem>\r\n                      <MenuItem value=\"Segoe UI Emoji\">Segoe UI Emoji</MenuItem>\r\n                      <MenuItem value=\"Segoe UI Symbol\">\r\n                        Segoe UI Symbol\r\n                      </MenuItem>\r\n                    </Select>\r\n                  </FormControl>\r\n                </CCol>\r\n                <CCol sm={4} className=\"text-center\">\r\n                  <CFormLabel\r\n                    htmlFor=\"staticEmail\"\r\n                    className=\"col-sm-6 col-form-label \"\r\n                  >\r\n                    sans-serif\r\n                  </CFormLabel>\r\n                </CCol>\r\n              </CRow>\r\n            </CCardBody>\r\n          </CCard>\r\n        </div>\r\n        <div className=\"col-5\">{viewPreview_HTMLTABLE}</div>\r\n      </div>\r\n      <div className=\"text-center mx-4 mb-4\">\r\n        <button className=\"btn btn-info m-1\" onClick={(e) => reset(e)}>\r\n          {t(\"reset_to_default\")}\r\n        </button>\r\n        <button className=\"btn btn-light m-1\" onClick={() => history.goBack()}>\r\n          {t(\"back\")}\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Customization;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\Header.js",["381"],"import  React, {useState  } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Link from \"@mui/material/Link\";\r\nimport ShoppingBasketOutlinedIcon from \"@mui/icons-material/ShoppingBasketOutlined\";\r\nimport KeyboardBackspaceIcon from \"@mui/icons-material/KeyboardBackspace\";\r\nimport Brightness4Icon from \"@mui/icons-material/Brightness4\";\r\nimport Brightness7Icon from \"@mui/icons-material/Brightness7\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport axios from \"axios\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction Header(props) {\r\n  const history = useHistory();\r\n  const { t } = useTranslation();\r\n  const [activeCategory, setActiveCategory] = useState(0);\r\n\r\n  const { title, setMode, mode,categories ,subcategories , setSubCategories, activeSubCategory} = props;\r\n  const handleChange = () => {\r\n    mode === \"dark\" ? setMode(\"light\") : setMode(\"dark\");\r\n  };\r\n  const filterCategory = (cateId) => {\r\n    axios.get(`/api/GetSubCategories/${cateId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setSubCategories(res.data.fetchData);\r\n      }\r\n    });\r\n    setActiveCategory(cateId);\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <Toolbar sx={{ borderBottom: 1, borderColor: \"divider\" ,position:\"sticky\"}}  className=\"top-0 \">\r\n        <IconButton onClick={() => history.goBack()}>\r\n          <KeyboardBackspaceIcon />\r\n        </IconButton>\r\n        <Typography\r\n          component=\"h2\"\r\n          variant=\"h6\"\r\n          align=\"center\"\r\n          noWrap\r\n          sx={{ flex: 1 }}\r\n        >\r\n          {title}\r\n        </Typography>\r\n        <IconButton>\r\n          <ShoppingBasketOutlinedIcon />\r\n        </IconButton>\r\n        <IconButton sx={{ ml: 1 }} onClick={handleChange} color=\"inherit\">\r\n          {mode === \"dark\" ? <Brightness7Icon /> : <Brightness4Icon />}\r\n        </IconButton>\r\n      </Toolbar>\r\n      {categories===0 ? ' ' :\r\n      <div>\r\n      <Typography variant=\"overline\" display=\"block\" gutterBottom>\r\n        {t('public_categories')}:\r\n      </Typography>\r\n      <Toolbar\r\n        component=\"nav\"\r\n        variant=\"dense\"\r\n        className=\"border\"\r\n        sx={{ justifyContent: \"space-between\", overflowX: \"auto\" }}\r\n      >\r\n        {categories?.map((section,i) => (\r\n          <Link\r\n            color={activeCategory === section.id ? \"#f27d1e\" : \" \"}\r\n            noWrap\r\n            key={i}\r\n            underline=\"hover\"\r\n            variant=\"body2\"\r\n            // className=\"active\"\r\n            onClick={() => filterCategory(section.id)}\r\n            sx={{ p: 1, flexShrink: 0 }}\r\n          >\r\n            {section.CategoryName }\r\n          </Link>\r\n        ))}\r\n      </Toolbar>\r\n      </div>\r\n      }\r\n      {subcategories===0 ? ' ' :\r\n      <div>\r\n          <Typography variant=\"overline\" display=\"block\" gutterBottom>\r\n          {t('sub_categories')}: \r\n        </Typography>\r\n        <Toolbar\r\n          component=\"nav\"\r\n          variant=\"dense\"\r\n          className=\"border mb-2\"\r\n\r\n          sx={{ justifyContent: \"space-between\", overflowX: \"auto\" }}\r\n        >\r\n          {subcategories?.map((section,i) => (\r\n            <Link\r\n              color={activeSubCategory === section.sub_id ? \"#f27d1e\" : \" \"}\r\n              noWrap\r\n              key={i}\r\n              underline=\"hover\"\r\n              variant=\"body2\"\r\n              sx={{ p: 1, flexShrink: 0 }}\r\n            >\r\n              {section.SubCategoryName }\r\n            </Link>\r\n          ))}\r\n        </Toolbar>\r\n      </div>\r\n      }\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\Footer.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Second\\OrderDetails.js",["382","383","384","385","386"],["387","388"],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Second\\ProductDetails.js",["389","390","391","392","393"],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Second\\Main.js",["394","395","396","397","398","399","400","401","402"],"import React, { useState, useEffect } from \"react\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Container from \"@mui/material/Container\";\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport Header from \"./Header\";\r\nimport Footer from \"./Footer\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardMedia from \"@mui/material/CardMedia\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport axios from \"axios\";\r\nimport { base_url, port } from \"../../../../../Consts\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport Box from \"@mui/material/Box\";\r\nimport Tabs, { tabsClasses } from \"@mui/material/Tabs\";\r\nimport Tab from \"@mui/material/Tab\";\r\nimport PhoneIcon from \"@mui/icons-material/Phone\";\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\nimport HorizontalScroller from \"react-horizontal-scroll-container\";\r\n\r\nvar hold = 1;\r\nexport default function Main(props) {\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  const [loading, setLoading] = useState(true);\r\n  const { t } = useTranslation();\r\n  const branchId = atob(props.match.params.id);\r\n  const [branch, setBranch] = useState([]);\r\n  const [categories, setCategories] = useState([]);\r\n  const [subcategories, setSubCategories] = useState([]);\r\n  const [products, setProducts] = useState([]);\r\n  const [activeSubCategory, setActiveSubCategory] = useState(0);\r\n  const [themeCustomization, setThemeCustomization] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios.get(`/api/GetTempBasedOnBranch/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setThemeCustomization(res.data.fetchData[0]?.Customization);\r\n        // console.log(res.data.fetchData[0].Customization);\r\n      }\r\n    });\r\n    axios.get(`/api/GetBranchForShow/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setBranch(res.data.data[0]);\r\n      }\r\n    });\r\n    axios.get(`/api/GetCategories/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setCategories(res.data.fetchData);\r\n      }\r\n    });\r\n    axios.get(`/api/getSubCateBasedOnBranch/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        // console.log(res.data.fetchData[0].sub_id);\r\n        setSubCategories(res.data.fetchData);\r\n        axios\r\n          .get(\r\n            `/api/GetProductsBasedOnSubCategory/${res.data.fetchData[0]?.sub_id}`\r\n          )\r\n          .then((res) => {\r\n            if (res.data.status === 200) {\r\n              setProducts(res.data.data);\r\n              setActiveSubCategory(res.data.data[0]?.sub_category_id);\r\n            }\r\n          });\r\n        setLoading(false);\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  // design start\r\n  const theme = createTheme({\r\n    palette: {\r\n      warning: {\r\n        // button background\r\n        main: themeCustomization?.button_background_color\r\n          ? themeCustomization.button_background_color\r\n          : \"#ff751d\",\r\n      },\r\n    },\r\n    typography: {\r\n      fontFamily: themeCustomization?.font\r\n        ? themeCustomization.font\r\n        : \"sans-serif\",\r\n      subtitle1: {\r\n        fontSize: themeCustomization?.product_discription_font_size\r\n          ? themeCustomization.product_discription_font_size\r\n          : 10,\r\n        color: themeCustomization?.product_discription_color\r\n          ? themeCustomization.product_discription_color\r\n          : \"#777\",\r\n      },\r\n      // price\r\n      body1: {\r\n        fontSize: themeCustomization?.price_font_size\r\n          ? themeCustomization.price_font_size\r\n          : 12,\r\n        color: themeCustomization?.price_color\r\n          ? themeCustomization.price_color\r\n          : \"#f1fcfe\",\r\n      },\r\n      // product Names\r\n      button: {\r\n        fontSize: themeCustomization?.product_name_font_size\r\n          ? themeCustomization.product_name_font_size\r\n          : 12,\r\n        color: themeCustomization?.product_name_color\r\n          ? themeCustomization.product_name_color\r\n          : \"#ff751d\",\r\n      },\r\n      // categories and sub categories\r\n      overline: {\r\n        fontSize: themeCustomization?.categories_and_sub_categoies_font_size\r\n          ? themeCustomization.categories_and_sub_categoies_font_size\r\n          : 12,\r\n        color: themeCustomization?.categories_and_sub_categoies_color\r\n          ? themeCustomization.categories_and_sub_categoies_color\r\n          : \"#ff751d\",\r\n      },\r\n      // branch Name\r\n      h6: {\r\n        fontSize: themeCustomization?.branch_name_font_size\r\n          ? themeCustomization.branch_name_font_size\r\n          : 14,\r\n        color: themeCustomization?.branch_name_color\r\n          ? themeCustomization.branch_name_color\r\n          : \"#ff751d\",\r\n      },\r\n    },\r\n    components: {\r\n      MuiButton: {\r\n        variants: [\r\n          {\r\n            // button\r\n            props: { variant: \"contained\" },\r\n            style: {\r\n              fontSize: themeCustomization?.button_text_font_size\r\n                ? themeCustomization.button_text_font_size\r\n                : 12,\r\n              color: themeCustomization?.button_text_color\r\n                ? themeCustomization.button_text_color\r\n                : \"#f1fcfe\",\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n  });\r\n  // design end\r\n\r\n  var viewShow_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div\r\n        className=\"spinner-border text-primary \"\r\n        role=\"status\"\r\n        style={{ position: \"fixed\", top: \"50%\", left: \"50%\" }}\r\n      >\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewShow_HTMLTABLE = products?.map((item, i) => {\r\n      return (\r\n        <Grid item xs={12} sm={12} md={12} key={i}>\r\n          <Card\r\n            sx={{\r\n              width: \"300px\",\r\n              height: \"600px\",\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n            }}\r\n          >\r\n            <CardMedia\r\n              component=\"img\"\r\n              sx={{ height: \"300px\", objectFit: \"contain\" }}\r\n              image={`http://${base_url}:${port}/images/products/${item.image}`}\r\n              alt=\"Image\"\r\n            />\r\n            <Link to={`/product-details/${btoa(item.product_id)}`}>\r\n              <CardContent sx={{ flexGrow: 1 }} className=\"text-center\">\r\n                <Typography variant=\"button\" display=\"block\" gutterBottom>\r\n                  {item.ProductName}\r\n                </Typography>\r\n                <Typography variant=\"subtitle1\" gutterBottom>\r\n                  {item.Description}\r\n                </Typography>\r\n              </CardContent>\r\n            </Link>\r\n          </Card>\r\n        </Grid>\r\n      );\r\n    });\r\n  }\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <Container maxWidth=\"lg\">\r\n        <Header title={branch?.BrancheName} />\r\n        <Card>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={2}>\r\n              <Box\r\n                sx={{\r\n                  flexGrow: 1,\r\n                  bgcolor: \"background.paper\",\r\n                  display: \"flex\",\r\n                  height: 600,\r\n                }}\r\n              >\r\n                <Tabs\r\n                  orientation=\"vertical\"\r\n                  value={value}\r\n                  onChange={handleChange}\r\n                  variant=\"scrollable\"\r\n                  scrollButtons\r\n                  aria-label=\"Vertical tabs example\"\r\n                  textColor=\"secondary\"\r\n                  indicatorColor=\"secondary\"\r\n                  sx={{\r\n                    [`& .${tabsClasses.scrollButtons}`]: {\r\n                      \"&.Mui-disabled\": { opacity: 0.3 },\r\n                    },\r\n                  }}\r\n                >\r\n                  {subcategories?.map((section, i) => (\r\n                    <Tab \r\n                    className=\"mb-2\"\r\n                    \r\n                    // sx={{bgcolor:activeSubCategory === section.sub_id ? \"green\" : \" \"}}\r\n                      icon={\r\n                        <img\r\n                          style={{\r\n                            height: \"50px\",\r\n                            width: \"50px\",\r\n                            objectFit: \"contain\",\r\n                          }}\r\n                          src={`http://${base_url}:${port}/images/sub_catagories/${section.SubCategoryIcon}`}\r\n                        />\r\n                      }\r\n                      label={section.SubCategoryName}\r\n                    />\r\n                  ))}\r\n                </Tabs>\r\n              </Box>\r\n            </Grid>\r\n            <Grid item xs={10}>\r\n              <HorizontalScroller>{viewShow_HTMLTABLE}</HorizontalScroller>\r\n            </Grid>\r\n          </Grid>\r\n        </Card>\r\n      </Container>\r\n      {/* <Footer /> */}\r\n    </ThemeProvider>\r\n  );\r\n}\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Second\\Footer.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Second\\Header.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Second\\Customization.js",["403","404","405","406"],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Branches\\CreateRoute].js",["407","408"],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\pages\\Error404.js",[],{"ruleId":"409","replacedBy":"410"},{"ruleId":"411","replacedBy":"412"},{"ruleId":"413","severity":1,"message":"414","line":29,"column":8,"nodeType":"415","messageId":"416","endLine":29,"endColumn":16},{"ruleId":"413","severity":1,"message":"417","line":140,"column":9,"nodeType":"415","messageId":"416","endLine":140,"endColumn":23},{"ruleId":"413","severity":1,"message":"418","line":143,"column":9,"nodeType":"415","messageId":"416","endLine":143,"endColumn":22},{"ruleId":"419","severity":1,"message":"420","line":486,"column":37,"nodeType":"421","messageId":"422","endLine":486,"endColumn":39},{"ruleId":"423","severity":1,"message":"424","line":487,"column":15,"nodeType":"425","messageId":"426","endLine":491,"endColumn":16},{"ruleId":"423","severity":1,"message":"424","line":493,"column":17,"nodeType":"425","messageId":"426","endLine":497,"endColumn":18},{"ruleId":"413","severity":1,"message":"427","line":24,"column":11,"nodeType":"415","messageId":"416","endLine":24,"endColumn":26},{"ruleId":"413","severity":1,"message":"428","line":29,"column":11,"nodeType":"415","messageId":"416","endLine":29,"endColumn":26},{"ruleId":"413","severity":1,"message":"429","line":92,"column":11,"nodeType":"415","messageId":"416","endLine":92,"endColumn":21},{"ruleId":"430","severity":1,"message":"431","line":138,"column":91,"nodeType":"432","messageId":"433","endLine":138,"endColumn":93},{"ruleId":"430","severity":1,"message":"431","line":141,"column":97,"nodeType":"432","messageId":"433","endLine":141,"endColumn":99},{"ruleId":"413","severity":1,"message":"434","line":3,"column":10,"nodeType":"415","messageId":"416","endLine":3,"endColumn":14},{"ruleId":"413","severity":1,"message":"435","line":21,"column":10,"nodeType":"415","messageId":"416","endLine":21,"endColumn":30},{"ruleId":"413","severity":1,"message":"436","line":21,"column":32,"nodeType":"415","messageId":"416","endLine":21,"endColumn":55},{"ruleId":"437","severity":1,"message":"438","line":38,"column":19,"nodeType":"439","endLine":38,"endColumn":49},{"ruleId":"430","severity":1,"message":"431","line":59,"column":21,"nodeType":"432","messageId":"433","endLine":59,"endColumn":23},{"ruleId":"430","severity":1,"message":"431","line":66,"column":13,"nodeType":"432","messageId":"433","endLine":66,"endColumn":15},{"ruleId":"430","severity":1,"message":"431","line":74,"column":43,"nodeType":"432","messageId":"433","endLine":74,"endColumn":45},{"ruleId":"430","severity":1,"message":"431","line":95,"column":46,"nodeType":"432","messageId":"433","endLine":95,"endColumn":48},{"ruleId":"430","severity":1,"message":"440","line":105,"column":24,"nodeType":"432","messageId":"433","endLine":105,"endColumn":26},{"ruleId":"419","severity":1,"message":"441","line":109,"column":38,"nodeType":"421","messageId":"442","endLine":109,"endColumn":40},{"ruleId":"413","severity":1,"message":"443","line":132,"column":9,"nodeType":"415","messageId":"416","endLine":132,"endColumn":12},{"ruleId":"430","severity":1,"message":"431","line":183,"column":49,"nodeType":"432","messageId":"433","endLine":183,"endColumn":51},{"ruleId":"413","severity":1,"message":"444","line":22,"column":8,"nodeType":"415","messageId":"416","endLine":22,"endColumn":16},{"ruleId":"413","severity":1,"message":"445","line":25,"column":8,"nodeType":"415","messageId":"416","endLine":25,"endColumn":15},{"ruleId":"413","severity":1,"message":"446","line":45,"column":8,"nodeType":"415","messageId":"416","endLine":45,"endColumn":19},{"ruleId":"413","severity":1,"message":"447","line":11,"column":10,"nodeType":"415","messageId":"416","endLine":11,"endColumn":21},{"ruleId":"413","severity":1,"message":"448","line":11,"column":23,"nodeType":"415","messageId":"416","endLine":11,"endColumn":38},{"ruleId":"413","severity":1,"message":"449","line":8,"column":10,"nodeType":"415","messageId":"416","endLine":8,"endColumn":18},{"ruleId":"413","severity":1,"message":"450","line":8,"column":20,"nodeType":"415","messageId":"416","endLine":8,"endColumn":24},{"ruleId":"413","severity":1,"message":"451","line":22,"column":10,"nodeType":"415","messageId":"416","endLine":22,"endColumn":15},{"ruleId":"413","severity":1,"message":"452","line":22,"column":17,"nodeType":"415","messageId":"416","endLine":22,"endColumn":25},{"ruleId":"430","severity":1,"message":"431","line":29,"column":31,"nodeType":"432","messageId":"433","endLine":29,"endColumn":33},{"ruleId":"419","severity":1,"message":"441","line":38,"column":42,"nodeType":"421","messageId":"442","endLine":38,"endColumn":44},{"ruleId":"430","severity":1,"message":"431","line":43,"column":32,"nodeType":"432","messageId":"433","endLine":43,"endColumn":34},{"ruleId":"419","severity":1,"message":"441","line":47,"column":44,"nodeType":"421","messageId":"442","endLine":47,"endColumn":46},{"ruleId":"419","severity":1,"message":"441","line":69,"column":34,"nodeType":"421","messageId":"442","endLine":69,"endColumn":36},{"ruleId":"430","severity":1,"message":"431","line":76,"column":19,"nodeType":"432","messageId":"433","endLine":76,"endColumn":21},{"ruleId":"430","severity":1,"message":"431","line":77,"column":19,"nodeType":"432","messageId":"433","endLine":77,"endColumn":21},{"ruleId":"430","severity":1,"message":"431","line":78,"column":19,"nodeType":"432","messageId":"433","endLine":78,"endColumn":21},{"ruleId":"430","severity":1,"message":"431","line":79,"column":19,"nodeType":"432","messageId":"433","endLine":79,"endColumn":21},{"ruleId":"430","severity":1,"message":"431","line":80,"column":19,"nodeType":"432","messageId":"433","endLine":80,"endColumn":21},{"ruleId":"437","severity":1,"message":"453","line":112,"column":6,"nodeType":"454","endLine":112,"endColumn":8,"suggestions":"455"},{"ruleId":"419","severity":1,"message":"441","line":173,"column":19,"nodeType":"421","messageId":"442","endLine":173,"endColumn":21},{"ruleId":"413","severity":1,"message":"456","line":191,"column":7,"nodeType":"415","messageId":"416","endLine":191,"endColumn":15},{"ruleId":"413","severity":1,"message":"457","line":192,"column":7,"nodeType":"415","messageId":"416","endLine":192,"endColumn":17},{"ruleId":"413","severity":1,"message":"458","line":193,"column":7,"nodeType":"415","messageId":"416","endLine":193,"endColumn":22},{"ruleId":"413","severity":1,"message":"459","line":149,"column":9,"nodeType":"415","messageId":"416","endLine":149,"endColumn":14},{"ruleId":"413","severity":1,"message":"460","line":14,"column":9,"nodeType":"415","messageId":"416","endLine":14,"endColumn":16},{"ruleId":"413","severity":1,"message":"461","line":15,"column":11,"nodeType":"415","messageId":"416","endLine":15,"endColumn":15},{"ruleId":"413","severity":1,"message":"462","line":36,"column":9,"nodeType":"415","messageId":"416","endLine":36,"endColumn":21},{"ruleId":"413","severity":1,"message":"456","line":154,"column":7,"nodeType":"415","messageId":"416","endLine":154,"endColumn":15},{"ruleId":"413","severity":1,"message":"447","line":9,"column":10,"nodeType":"415","messageId":"416","endLine":9,"endColumn":21},{"ruleId":"413","severity":1,"message":"448","line":9,"column":23,"nodeType":"415","messageId":"416","endLine":9,"endColumn":38},{"ruleId":"413","severity":1,"message":"447","line":9,"column":10,"nodeType":"415","messageId":"416","endLine":9,"endColumn":21},{"ruleId":"413","severity":1,"message":"448","line":9,"column":23,"nodeType":"415","messageId":"416","endLine":9,"endColumn":38},{"ruleId":"413","severity":1,"message":"447","line":7,"column":10,"nodeType":"415","messageId":"416","endLine":7,"endColumn":21},{"ruleId":"413","severity":1,"message":"448","line":7,"column":23,"nodeType":"415","messageId":"416","endLine":7,"endColumn":38},{"ruleId":"413","severity":1,"message":"463","line":9,"column":3,"nodeType":"415","messageId":"416","endLine":9,"endColumn":9},{"ruleId":"413","severity":1,"message":"464","line":10,"column":20,"nodeType":"415","messageId":"416","endLine":10,"endColumn":26},{"ruleId":"413","severity":1,"message":"448","line":20,"column":3,"nodeType":"415","messageId":"416","endLine":20,"endColumn":18},{"ruleId":"413","severity":1,"message":"465","line":25,"column":8,"nodeType":"415","messageId":"416","endLine":25,"endColumn":20},{"ruleId":"413","severity":1,"message":"466","line":26,"column":8,"nodeType":"415","messageId":"416","endLine":26,"endColumn":19},{"ruleId":"413","severity":1,"message":"461","line":29,"column":11,"nodeType":"415","messageId":"416","endLine":29,"endColumn":15},{"ruleId":"413","severity":1,"message":"467","line":52,"column":9,"nodeType":"415","messageId":"416","endLine":52,"endColumn":20},{"ruleId":"413","severity":1,"message":"456","line":162,"column":7,"nodeType":"415","messageId":"416","endLine":162,"endColumn":15},{"ruleId":"413","severity":1,"message":"457","line":163,"column":7,"nodeType":"415","messageId":"416","endLine":163,"endColumn":17},{"ruleId":"437","severity":1,"message":"468","line":19,"column":6,"nodeType":"454","endLine":19,"endColumn":14,"suggestions":"469"},{"ruleId":"419","severity":1,"message":"441","line":23,"column":33,"nodeType":"421","messageId":"442","endLine":23,"endColumn":35},{"ruleId":"430","severity":1,"message":"440","line":24,"column":31,"nodeType":"432","messageId":"433","endLine":24,"endColumn":33},{"ruleId":"430","severity":1,"message":"431","line":25,"column":15,"nodeType":"432","messageId":"433","endLine":25,"endColumn":17},{"ruleId":"430","severity":1,"message":"431","line":37,"column":27,"nodeType":"432","messageId":"433","endLine":37,"endColumn":29},{"ruleId":"430","severity":1,"message":"440","line":84,"column":13,"nodeType":"432","messageId":"433","endLine":84,"endColumn":15},{"ruleId":"430","severity":1,"message":"440","line":101,"column":13,"nodeType":"432","messageId":"433","endLine":101,"endColumn":15},{"ruleId":"430","severity":1,"message":"431","line":108,"column":27,"nodeType":"432","messageId":"433","endLine":108,"endColumn":29},{"ruleId":"430","severity":1,"message":"431","line":109,"column":24,"nodeType":"432","messageId":"433","endLine":109,"endColumn":26},{"ruleId":"430","severity":1,"message":"431","line":115,"column":23,"nodeType":"432","messageId":"433","endLine":115,"endColumn":25},{"ruleId":"437","severity":1,"message":"470","line":71,"column":8,"nodeType":"454","endLine":71,"endColumn":10,"suggestions":"471"},{"ruleId":"472","severity":1,"message":"473","line":83,"column":178,"nodeType":"474","messageId":"475","endLine":83,"endColumn":202},{"ruleId":"413","severity":1,"message":"476","line":19,"column":8,"nodeType":"415","messageId":"416","endLine":19,"endColumn":28},{"ruleId":"413","severity":1,"message":"477","line":34,"column":8,"nodeType":"415","messageId":"416","endLine":34,"endColumn":14},{"ruleId":"413","severity":1,"message":"478","line":37,"column":8,"nodeType":"415","messageId":"416","endLine":37,"endColumn":11},{"ruleId":"413","severity":1,"message":"479","line":37,"column":15,"nodeType":"415","messageId":"416","endLine":37,"endColumn":23},{"ruleId":"419","severity":1,"message":"441","line":104,"column":42,"nodeType":"421","messageId":"442","endLine":104,"endColumn":44},{"ruleId":"430","severity":1,"message":"431","line":105,"column":27,"nodeType":"432","messageId":"433","endLine":105,"endColumn":29},{"ruleId":"437","severity":1,"message":"480","line":118,"column":6,"nodeType":"454","endLine":118,"endColumn":15,"suggestions":"481"},{"ruleId":"430","severity":1,"message":"431","line":196,"column":30,"nodeType":"432","messageId":"433","endLine":196,"endColumn":32},{"ruleId":"430","severity":1,"message":"431","line":236,"column":34,"nodeType":"432","messageId":"433","endLine":236,"endColumn":36},{"ruleId":"430","severity":1,"message":"431","line":313,"column":44,"nodeType":"432","messageId":"433","endLine":313,"endColumn":46},{"ruleId":"413","severity":1,"message":"482","line":6,"column":3,"nodeType":"415","messageId":"416","endLine":6,"endColumn":17},{"ruleId":"413","severity":1,"message":"483","line":7,"column":3,"nodeType":"415","messageId":"416","endLine":7,"endColumn":17},{"ruleId":"413","severity":1,"message":"484","line":8,"column":3,"nodeType":"415","messageId":"416","endLine":8,"endColumn":13},{"ruleId":"413","severity":1,"message":"485","line":10,"column":3,"nodeType":"415","messageId":"416","endLine":10,"endColumn":13},{"ruleId":"413","severity":1,"message":"486","line":11,"column":3,"nodeType":"415","messageId":"416","endLine":11,"endColumn":19},{"ruleId":"413","severity":1,"message":"487","line":12,"column":3,"nodeType":"415","messageId":"416","endLine":12,"endColumn":17},{"ruleId":"413","severity":1,"message":"476","line":21,"column":8,"nodeType":"415","messageId":"416","endLine":21,"endColumn":28},{"ruleId":"413","severity":1,"message":"488","line":49,"column":10,"nodeType":"415","messageId":"416","endLine":49,"endColumn":15},{"ruleId":"413","severity":1,"message":"489","line":53,"column":9,"nodeType":"415","messageId":"416","endLine":53,"endColumn":21},{"ruleId":"472","severity":1,"message":"473","line":437,"column":29,"nodeType":"474","messageId":"475","endLine":437,"endColumn":51},{"ruleId":"413","severity":1,"message":"490","line":7,"column":3,"nodeType":"415","messageId":"416","endLine":7,"endColumn":8},{"ruleId":"413","severity":1,"message":"491","line":1,"column":17,"nodeType":"415","messageId":"416","endLine":1,"endColumn":25},{"ruleId":"413","severity":1,"message":"478","line":22,"column":8,"nodeType":"415","messageId":"416","endLine":22,"endColumn":11},{"ruleId":"413","severity":1,"message":"492","line":83,"column":10,"nodeType":"415","messageId":"416","endLine":83,"endColumn":21},{"ruleId":"472","severity":1,"message":"473","line":152,"column":17,"nodeType":"474","messageId":"475","endLine":152,"endColumn":63},{"ruleId":"472","severity":1,"message":"473","line":248,"column":23,"nodeType":"474","messageId":"475","endLine":248,"endColumn":69},{"ruleId":"437","severity":1,"message":"480","line":65,"column":6,"nodeType":"454","endLine":65,"endColumn":8,"suggestions":"493"},{"ruleId":"430","severity":1,"message":"431","line":168,"column":61,"nodeType":"432","messageId":"433","endLine":168,"endColumn":63},{"ruleId":"430","severity":1,"message":"431","line":169,"column":61,"nodeType":"432","messageId":"433","endLine":169,"endColumn":63},{"ruleId":"430","severity":1,"message":"431","line":170,"column":61,"nodeType":"432","messageId":"433","endLine":170,"endColumn":63},{"ruleId":"430","severity":1,"message":"431","line":171,"column":61,"nodeType":"432","messageId":"433","endLine":171,"endColumn":63},{"ruleId":"430","severity":1,"message":"431","line":172,"column":61,"nodeType":"432","messageId":"433","endLine":172,"endColumn":63},{"ruleId":"430","severity":1,"message":"431","line":173,"column":61,"nodeType":"432","messageId":"433","endLine":173,"endColumn":63},{"ruleId":"413","severity":1,"message":"491","line":1,"column":17,"nodeType":"415","messageId":"416","endLine":1,"endColumn":25},{"ruleId":"413","severity":1,"message":"494","line":1,"column":48,"nodeType":"415","messageId":"416","endLine":1,"endColumn":62},{"ruleId":"413","severity":1,"message":"434","line":3,"column":10,"nodeType":"415","messageId":"416","endLine":3,"endColumn":14},{"ruleId":"413","severity":1,"message":"492","line":84,"column":10,"nodeType":"415","messageId":"416","endLine":84,"endColumn":21},{"ruleId":"413","severity":1,"message":"435","line":85,"column":10,"nodeType":"415","messageId":"416","endLine":85,"endColumn":30},{"ruleId":"413","severity":1,"message":"434","line":13,"column":10,"nodeType":"415","messageId":"416","endLine":13,"endColumn":14},{"ruleId":"413","severity":1,"message":"495","line":16,"column":10,"nodeType":"415","messageId":"416","endLine":16,"endColumn":14},{"ruleId":"413","severity":1,"message":"496","line":23,"column":8,"nodeType":"415","messageId":"416","endLine":23,"endColumn":19},{"ruleId":"437","severity":1,"message":"497","line":87,"column":6,"nodeType":"454","endLine":87,"endColumn":15,"suggestions":"498"},{"ruleId":"413","severity":1,"message":"499","line":2,"column":8,"nodeType":"415","messageId":"416","endLine":2,"endColumn":17},{"ruleId":"413","severity":1,"message":"491","line":1,"column":17,"nodeType":"415","messageId":"416","endLine":1,"endColumn":25},{"ruleId":"413","severity":1,"message":"494","line":1,"column":48,"nodeType":"415","messageId":"416","endLine":1,"endColumn":62},{"ruleId":"413","severity":1,"message":"434","line":3,"column":10,"nodeType":"415","messageId":"416","endLine":3,"endColumn":14},{"ruleId":"413","severity":1,"message":"492","line":84,"column":10,"nodeType":"415","messageId":"416","endLine":84,"endColumn":21},{"ruleId":"413","severity":1,"message":"435","line":85,"column":10,"nodeType":"415","messageId":"416","endLine":85,"endColumn":30},{"ruleId":"409","replacedBy":"500"},{"ruleId":"411","replacedBy":"501"},{"ruleId":"413","severity":1,"message":"491","line":1,"column":17,"nodeType":"415","messageId":"416","endLine":1,"endColumn":25},{"ruleId":"413","severity":1,"message":"478","line":22,"column":8,"nodeType":"415","messageId":"416","endLine":22,"endColumn":11},{"ruleId":"413","severity":1,"message":"492","line":83,"column":10,"nodeType":"415","messageId":"416","endLine":83,"endColumn":21},{"ruleId":"472","severity":1,"message":"473","line":152,"column":17,"nodeType":"474","messageId":"475","endLine":152,"endColumn":63},{"ruleId":"472","severity":1,"message":"473","line":248,"column":23,"nodeType":"474","messageId":"475","endLine":248,"endColumn":69},{"ruleId":"413","severity":1,"message":"502","line":7,"column":8,"nodeType":"415","messageId":"416","endLine":7,"endColumn":14},{"ruleId":"413","severity":1,"message":"503","line":15,"column":8,"nodeType":"415","messageId":"416","endLine":15,"endColumn":22},{"ruleId":"413","severity":1,"message":"504","line":21,"column":8,"nodeType":"415","messageId":"416","endLine":21,"endColumn":17},{"ruleId":"413","severity":1,"message":"505","line":22,"column":8,"nodeType":"415","messageId":"416","endLine":22,"endColumn":15},{"ruleId":"413","severity":1,"message":"506","line":25,"column":5,"nodeType":"415","messageId":"416","endLine":25,"endColumn":9},{"ruleId":"413","severity":1,"message":"507","line":37,"column":10,"nodeType":"415","messageId":"416","endLine":37,"endColumn":20},{"ruleId":"413","severity":1,"message":"508","line":40,"column":10,"nodeType":"415","messageId":"416","endLine":40,"endColumn":27},{"ruleId":"437","severity":1,"message":"480","line":77,"column":6,"nodeType":"454","endLine":77,"endColumn":8,"suggestions":"509"},{"ruleId":"510","severity":1,"message":"511","line":240,"column":25,"nodeType":"512","endLine":247,"endColumn":27},{"ruleId":"413","severity":1,"message":"434","line":13,"column":10,"nodeType":"415","messageId":"416","endLine":13,"endColumn":14},{"ruleId":"413","severity":1,"message":"495","line":16,"column":10,"nodeType":"415","messageId":"416","endLine":16,"endColumn":14},{"ruleId":"413","severity":1,"message":"496","line":23,"column":8,"nodeType":"415","messageId":"416","endLine":23,"endColumn":19},{"ruleId":"437","severity":1,"message":"497","line":85,"column":6,"nodeType":"454","endLine":85,"endColumn":15,"suggestions":"513"},{"ruleId":"413","severity":1,"message":"464","line":10,"column":20,"nodeType":"415","messageId":"416","endLine":10,"endColumn":26},{"ruleId":"413","severity":1,"message":"514","line":19,"column":17,"nodeType":"415","messageId":"416","endLine":19,"endColumn":20},"no-native-reassign",["515"],"no-negated-in-lhs",["516"],"no-unused-vars","'Error404' is defined but never used.","Identifier","unusedVar","'activeVariants' is assigned a value but never used.","'getGrandTotal' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'handleDecrement' is assigned a value but never used.","'handelIncrement' is assigned a value but never used.","'addBaskets' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Link' is defined but never used.","'variantsWithPictures' is assigned a value but never used.","'setVariantsWithPictures' is assigned a value but never used.","react-hooks/exhaustive-deps","Assignments to the 'varData' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","Expected '!==' and instead saw '!='.","Array.prototype.map() expects a return value from arrow function.","expectedInside","'att' is defined but never used.","'Category' is defined but never used.","'SubMenu' is defined but never used.","'CreateRoute' is defined but never used.","'CBreadcrumb' is defined but never used.","'CBreadcrumbItem' is defined but never used.","'base_url' is defined but never used.","'port' is defined but never used.","'check' is assigned a value but never used.","'setCheck' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'attributes.length' and 'id'. Either include them or remove the dependency array.","ArrayExpression",["517"],"'branchID' is assigned a value but never used.","'CategoryID' is assigned a value but never used.","'sub_category_id' is assigned a value but never used.","'phone' is assigned a value but never used.","'history' is assigned a value but never used.","'path' is assigned a value but never used.","'CategoryName' is assigned a value but never used.","'Switch' is defined but never used.","'Router' is defined but never used.","'PrivateRoute' is defined but never used.","'SubCategory' is defined but never used.","'BrancheName' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setVarantGrid'. Either include it or remove the dependency array.",["518"],"React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["519"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'SingleFileAutoSubmit' is defined but never used.","'Button' is defined but never used.","'Box' is defined but never used.","'BoxProps' is defined but never used.","React Hook useEffect has a missing dependency: 'branchId'. Either include it or remove the dependency array.",["520"],"'CAccordionBody' is defined but never used.","'CListGroupItem' is defined but never used.","'CListGroup' is defined but never used.","'CAccordion' is defined but never used.","'CAccordionHeader' is defined but never used.","'CAccordionItem' is defined but never used.","'state' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'Route' is defined but never used.","'Fragment' is defined but never used.","'variantData' is assigned a value but never used.",["521"],"'SyntheticEvent' is defined but never used.","'Form' is defined but never used.","'CardContent' is defined but never used.","React Hook useEffect has a missing dependency: 'templateId'. Either include it or remove the dependency array.",["522"],"'PropTypes' is defined but never used.",["515"],["516"],"'Footer' is defined but never used.","'InfiniteScroll' is defined but never used.","'PhoneIcon' is defined but never used.","'Toolbar' is defined but never used.","'hold' is assigned a value but never used.","'categories' is assigned a value but never used.","'activeSubCategory' is assigned a value but never used.",["523"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["524"],"'url' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"525","fix":"526"},{"desc":"527","fix":"528"},{"desc":"529","fix":"530"},{"desc":"531","fix":"532"},{"desc":"533","fix":"534"},{"desc":"535","fix":"536"},{"desc":"533","fix":"537"},{"desc":"535","fix":"538"},"Update the dependencies array to be: [attributes.length, id]",{"range":"539","text":"540"},"Update the dependencies array to be: [setVarantGrid, values]",{"range":"541","text":"542"},"Update the dependencies array to be: [id]",{"range":"543","text":"544"},"Update the dependencies array to be: [branchId, loading]",{"range":"545","text":"546"},"Update the dependencies array to be: [branchId]",{"range":"547","text":"548"},"Update the dependencies array to be: [loading, templateId]",{"range":"549","text":"550"},{"range":"551","text":"548"},{"range":"552","text":"550"},[3341,3343],"[attributes.length, id]",[538,546],"[setVarantGrid, values]",[3239,3241],"[id]",[4060,4069],"[branchId, loading]",[2626,2628],"[branchId]",[2776,2785],"[loading, templateId]",[2977,2979],[2716,2725]]