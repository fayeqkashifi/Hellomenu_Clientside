[{"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\index.js":"1","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\App.js":"2","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\Consts.js":"3","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\PublicRoute.js":"4","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\pages\\Registration.js":"5","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Public Link\\BranchDetails.js":"6","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\pages\\Login.js":"7","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Public Link\\VariantDetails.js":"8","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Public Link\\ShowProducts.js":"9","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\index.js":"10","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Attributes\\Attributes.js":"11","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Attributes\\Options.js":"12","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\utils\\index.js":"13","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Branches\\Tables.js":"14","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Variants\\VariantDetails.js":"15","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Variants\\Gallary.js":"16","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Variants\\Variants.js":"17","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Branches\\Branches.js":"18","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\PrivateRoute.js":"19","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Orders\\Order.js":"20","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Categories\\SubCategory.js":"21","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Orders\\Basket.js":"22","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Services\\ServiceArea.js":"23","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Units\\Unit.js":"24","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Inventories\\Inventory.js":"25","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Categories\\Category.js":"26","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Companies\\Company.js":"27","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Products\\Product.js":"28","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\layouts\\Footer.js":"29","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Dashboard\\Profile\\Profile.js":"30","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Dashboard\\Home\\Home.js":"31","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\layouts\\nav\\index.js":"32","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Variants\\Grid.js":"33","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\layouts\\PageTitle.js":"34","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\layouts\\nav\\Header.js":"35","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\layouts\\nav\\NavHader.js":"36","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\layouts\\nav\\SideBar.js":"37","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Thrid\\Main.js":"38","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\First\\Main.js":"39","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\EditTheme.js":"40","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Design.js":"41","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Theme.js":"42","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\SingleFileAutoSubmit.js":"43","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Branches\\Show.js":"44","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\ProductDetails.js":"45","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\Main.js":"46","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\OrderDetails.js":"47","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\Customization.js":"48","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\Header.js":"49","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\Footer.js":"50","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Second\\OrderDetails.js":"51","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Second\\ProductDetails.js":"52","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Second\\Main.js":"53","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Second\\Footer.js":"54","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Second\\Header.js":"55","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Second\\Customization.js":"56","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Branches\\CreateRoute].js":"57","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\pages\\Error404.js":"58","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Products\\Show.js":"59","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Products\\Ingredients.js":"60","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Products\\Extra.js":"61","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Products\\AddProduct.js":"62","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Products\\EditProduct.js":"63","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Show.js":"64","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Public Link\\Customization.js":"65"},{"size":1386,"mtime":1638895851471,"results":"66","hashOfConfig":"67"},{"size":4062,"mtime":1639517935543,"results":"68","hashOfConfig":"67"},{"size":67,"mtime":1638620992553,"results":"69","hashOfConfig":"67"},{"size":432,"mtime":1638620673189,"results":"70","hashOfConfig":"67"},{"size":7743,"mtime":1638620673216,"results":"71","hashOfConfig":"67"},{"size":26759,"mtime":1639518268404,"results":"72","hashOfConfig":"67"},{"size":5827,"mtime":1638620673216,"results":"73","hashOfConfig":"67"},{"size":14868,"mtime":1638620673189,"results":"74","hashOfConfig":"67"},{"size":14442,"mtime":1639553220910,"results":"75","hashOfConfig":"67"},{"size":4066,"mtime":1639515800328,"results":"76","hashOfConfig":"67"},{"size":9717,"mtime":1638620673178,"results":"77","hashOfConfig":"67"},{"size":13297,"mtime":1638620673178,"results":"78","hashOfConfig":"67"},{"size":214,"mtime":1638620673216,"results":"79","hashOfConfig":"67"},{"size":12649,"mtime":1638899923989,"results":"80","hashOfConfig":"67"},{"size":14187,"mtime":1638620673202,"results":"81","hashOfConfig":"67"},{"size":7877,"mtime":1638620673201,"results":"82","hashOfConfig":"67"},{"size":8429,"mtime":1639500717470,"results":"83","hashOfConfig":"67"},{"size":17592,"mtime":1639136397228,"results":"84","hashOfConfig":"67"},{"size":542,"mtime":1638620673187,"results":"85","hashOfConfig":"67"},{"size":4048,"mtime":1638620673187,"results":"86","hashOfConfig":"67"},{"size":13910,"mtime":1638909326852,"results":"87","hashOfConfig":"67"},{"size":7016,"mtime":1638620673187,"results":"88","hashOfConfig":"67"},{"size":10082,"mtime":1638898475436,"results":"89","hashOfConfig":"67"},{"size":9224,"mtime":1639134363732,"results":"90","hashOfConfig":"67"},{"size":10702,"mtime":1638956909054,"results":"91","hashOfConfig":"67"},{"size":17405,"mtime":1638907353221,"results":"92","hashOfConfig":"67"},{"size":10439,"mtime":1638899930618,"results":"93","hashOfConfig":"67"},{"size":7860,"mtime":1639508922875,"results":"94","hashOfConfig":"67"},{"size":489,"mtime":1638620673203,"results":"95","hashOfConfig":"67"},{"size":23716,"mtime":1638620673183,"results":"96","hashOfConfig":"67"},{"size":1852,"mtime":1638620673183,"results":"97","hashOfConfig":"67"},{"size":688,"mtime":1638620673212,"results":"98","hashOfConfig":"67"},{"size":7063,"mtime":1639377443808,"results":"99","hashOfConfig":"67"},{"size":823,"mtime":1638620673204,"results":"100","hashOfConfig":"67"},{"size":7127,"mtime":1638788489340,"results":"101","hashOfConfig":"67"},{"size":953,"mtime":1638620673212,"results":"102","hashOfConfig":"67"},{"size":5302,"mtime":1639393207725,"results":"103","hashOfConfig":"67"},{"size":7913,"mtime":1638254819501,"results":"104","hashOfConfig":"67"},{"size":4609,"mtime":1638266053579,"results":"105","hashOfConfig":"67"},{"size":15546,"mtime":1639515948404,"results":"106","hashOfConfig":"67"},{"size":27874,"mtime":1639516098705,"results":"107","hashOfConfig":"67"},{"size":21955,"mtime":1639515714907,"results":"108","hashOfConfig":"67"},{"size":1238,"mtime":1637869031777,"results":"109","hashOfConfig":"67"},{"size":7423,"mtime":1639514926633,"results":"110","hashOfConfig":"67"},{"size":10486,"mtime":1638444404212,"results":"111","hashOfConfig":"67"},{"size":8989,"mtime":1638710078545,"results":"112","hashOfConfig":"67"},{"size":7727,"mtime":1638444355633,"results":"113","hashOfConfig":"67"},{"size":21087,"mtime":1639517298522,"results":"114","hashOfConfig":"67"},{"size":3705,"mtime":1638724209556,"results":"115","hashOfConfig":"67"},{"size":632,"mtime":1638384229571,"results":"116","hashOfConfig":"67"},{"size":7727,"mtime":1638444355633,"results":"117","hashOfConfig":"67"},{"size":10486,"mtime":1638444404212,"results":"118","hashOfConfig":"67"},{"size":9068,"mtime":1638732575237,"results":"119","hashOfConfig":"67"},{"size":543,"mtime":1638722701769,"results":"120","hashOfConfig":"67"},{"size":1002,"mtime":1638732075181,"results":"121","hashOfConfig":"67"},{"size":19591,"mtime":1638720548083,"results":"122","hashOfConfig":"67"},{"size":1671,"mtime":1638964910769,"results":"123","hashOfConfig":"67"},{"size":891,"mtime":1638903859046,"results":"124","hashOfConfig":"67"},{"size":1151,"mtime":1639508335019,"results":"125","hashOfConfig":"67"},{"size":9191,"mtime":1639132633038,"results":"126","hashOfConfig":"67"},{"size":9129,"mtime":1639201151455,"results":"127","hashOfConfig":"67"},{"size":19798,"mtime":1639508986413,"results":"128","hashOfConfig":"67"},{"size":20973,"mtime":1639508715126,"results":"129","hashOfConfig":"67"},{"size":1433,"mtime":1639516921246,"results":"130","hashOfConfig":"67"},{"size":21101,"mtime":1639516907260,"results":"131","hashOfConfig":"67"},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},"i7z6n9",{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"134"},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"134"},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"134"},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"134"},{"filePath":"171","messages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"173","messages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"134"},{"filePath":"180","messages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"182","messages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"134"},{"filePath":"185","messages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"134"},{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"134"},{"filePath":"191","messages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"134"},{"filePath":"194","messages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"196","messages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"134"},{"filePath":"199","messages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"201","messages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"203","messages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"205","messages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"207","messages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"134"},{"filePath":"210","messages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"212","messages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"214","messages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"216","messages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"218","messages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"220","messages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"222","messages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"134"},{"filePath":"225","messages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"134"},{"filePath":"228","messages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"134"},{"filePath":"231","messages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"233","messages":"234","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"134"},{"filePath":"236","messages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"134"},{"filePath":"239","messages":"240","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"134"},{"filePath":"242","messages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"134"},{"filePath":"245","messages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"134"},{"filePath":"248","messages":"249","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"134"},{"filePath":"251","messages":"252","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"253","messages":"254","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"255"},{"filePath":"256","messages":"257","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"255"},{"filePath":"258","messages":"259","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"134"},{"filePath":"261","messages":"262","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"263","messages":"264","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"265","messages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"267","messages":"268","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"270"},{"filePath":"271","messages":"272","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"273","messages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"134"},{"filePath":"276","messages":"277","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"278","messages":"279","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"280","messages":"281","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"282","usedDeprecatedRules":"134"},{"filePath":"283","messages":"284","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285","usedDeprecatedRules":"134"},{"filePath":"286","messages":"287","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288","usedDeprecatedRules":"134"},{"filePath":"289","messages":"290","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"291","usedDeprecatedRules":"134"},"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\index.js",[],["292","293"],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\App.js",["294"],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\Consts.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\PublicRoute.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\pages\\Registration.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Public Link\\BranchDetails.js",["295","296","297","298","299","300"],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\pages\\Login.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Public Link\\VariantDetails.js",["301","302","303","304","305"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\"\r\nimport { Link } from \"react-router-dom\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport Slider from \"react-slick\";\r\nimport { Table } from \"react-bootstrap\";\r\n\r\nconst VariantDetails = (props) => {\r\n    // for localization\r\n    const { t } = useTranslation();\r\n    // let { id } = useParams();\r\n    const id = props.match.params.id;\r\n    //for retriving data using laravel API\r\n    const [fetchData, setFetchData] = useState([]);\r\n    const [variantData, setVariantData] = useState([]);\r\n    const [variantDetails, setVariantDetails] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    // Quantity increment/decrement using hooks start\r\n    const [quantity, setQuantity] = useState(1);\r\n    const handleDecrement = () => {\r\n        if (quantity > 1) {\r\n            setQuantity(prevCount => prevCount - 1);\r\n        }\r\n    }\r\n    const handelIncrement = () => {\r\n\r\n        setQuantity(prevCount => prevCount + 1);\r\n    }\r\n    const [variants, setVariants] = useState([])\r\n\r\n    // Quantity increment/decrement using hooks end\r\n    useEffect(() => {\r\n        axios.get(`/api/GetPictures/${id}`).then(res => {\r\n            if (res.data.status === 200) {\r\n                setFetchData(res.data.fetchData);\r\n            }\r\n            setLoading(false);\r\n        });\r\n\r\n        axios.get(`/api/Getvariant/${id}`).then(res => {\r\n            if (res.data.status === 200) {\r\n                setVariantData(res.data.variantdata);\r\n                axios.get(`/api/Getvariations/${res.data.variantdata[0].product_id}`).then(res => {\r\n                    if (res.data.status === 200) {\r\n                        setVariants(res.data.fetchData);\r\n                        // console.log(res.data.fetchData);\r\n\r\n                    }\r\n                });\r\n            }\r\n        });\r\n        axios.get(`/api/GetVarinatDetails/${id}`).then(res => {\r\n            if (res.data.status === 200) {\r\n                // console.log(res.data.fetchData);\r\n                setVariantDetails(res.data.fetchData);\r\n            }\r\n        });\r\n    }, [quantity, id]);\r\n\r\n    var viewImages_HTMLTABLE = \"\";\r\n    if (loading) {\r\n        return <div className=\"container \"><div className=\"spinner-border text-primary \" role=\"status\" style={{ position: 'fixed', top: '50%', left: '50%' }}><span className=\"sr-only\">{t('loading')}</span></div></div>\r\n    } else {\r\n        viewImages_HTMLTABLE =\r\n            fetchData.map((item, i) => {\r\n                return (\r\n                    <div className=\"col-xl-12 col-lg-12 col-sm-12 my-2\" key={item.id}>\r\n                        <div className=\"card overflow-hidden\">\r\n                            {/* <div className=\"card-body\"> */}\r\n                            <div className=\"text-center\">\r\n                                <div className=\"profile-photo\">\r\n                                    <img\r\n                                        style={{ height: '200px', objectFit: 'contain' }}\r\n                                        src={`http://192.168.1.103/yesilik1/public/images/variants_pics/${item.PicturesLocation}`}\r\n                                        className=\"d-block w-100 img-thumbnail\"\r\n                                        alt=\"\"\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            {/* </div> */}\r\n                        </div>\r\n                    </div>\r\n                )\r\n            })\r\n\r\n    }\r\n    // add to basket start   \r\n    const addBaskets = (e) => {\r\n        e.preventDefault();\r\n        const basket = {\r\n            VariantQuantity: quantity,\r\n        }\r\n        axios.post(`/api/InsertBasket/${id}`, basket).then(res => {\r\n            if (res.data.status === 200) {\r\n                setQuantity(1);\r\n                // setVariantData([]);\r\n                swal(\"Success\", res.data.message, \"success\");\r\n                // thisClicked.closest(\"tr\").remove();\r\n            } else if (res.data.status === 404) {\r\n                swal(\"Success\", res.data.message, \"success\");\r\n            }\r\n        });\r\n\r\n    }\r\n    // add to basket end   \r\n    return (\r\n        <div className=\"container\">\r\n            <Fragment>\r\n                {/* <PageTItle headingPara={t('variants')} activeMenu={t('variant_details')} motherMenu={t('variants')} /> */}\r\n                {/* <!-- Insert  Modal --> */}\r\n                <div className=\"row\" >\r\n                    <div className=\"col-xl-12 col-xxl-12 col-lg-12 col-sm-12 \">\r\n                        <div className=\"row\" >\r\n                            {/* <div > */}\r\n                            <Slider dots={false} infinite={true} slidesToShow={1} slidesToScroll={1}>\r\n                                {viewImages_HTMLTABLE}\r\n                            </Slider>\r\n                            {/* </div> */}\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                    <div className=\"col-xl-12 col-xxl-12 col-lg-12 col-sm-12 mt-4\">\r\n                        <div >\r\n                            {t('availability')} {variants.length}\r\n                        </div>\r\n                        <Slider dots={false} infinite={true} slidesToShow={variants.length >= 4 ? 4 : variants.length} slidesToScroll={1}>\r\n                            {variants.map((item, i) => (\r\n                                <div key={i} className=\"px-1 text-center text-capitalize \" >\r\n                                    {/* <Item as=\"li\" > */}\r\n                                    <Link\r\n                                        to={`/variant-details/${item.variantID}`}\r\n                                        // eventKey={item.SubCategoryName.toLowerCase()}\r\n                                        className={`text-capitalize font-weight-bold ${id == item.variantID ? \"active text-primary\" : \" \"}`}\r\n                                    >\r\n                                        <div>\r\n                                            <img className={`w-100 img-thumbnail mt-1 mx-1 ${id == item.variantID ? \"border border-primary\" : \" \"}`} style={{ height: '80px', objectFit: 'contain' }} src={`http://192.168.1.103/yesilik1/public/images/variants_pics/${item.PicturesLocation}`} alt=\"\" />\r\n                                        </div>\r\n                                        {/* <div className=\"\">\r\n                                        {item.VariationName}\r\n                                    </div> */}\r\n                                    </Link>\r\n                                    {/* </Item> */}\r\n                                </div>\r\n                            )\r\n                            )}\r\n                        </Slider>\r\n                    </div>\r\n\r\n                    <div className=\"col-xl-12 col-xxl-12 col-lg-12 col-sm-12\">\r\n                        {variantData.map((item, i) => {\r\n                            return (\r\n                                <div className=\"card\" key={i}>\r\n                                    <div className=\"card-header font-weight-bold\">\r\n                                        Product Variation Details\r\n                                    </div>\r\n                                    <div className=\"card-body\">\r\n                                        <div className=\"row\">\r\n                                            <div className=\"col-xl-12 col-lg-12  col-md-12 col-xxl-12 col-sm-12\">\r\n                                                <div className=\"product-detail-content\">\r\n                                                    <div className=\"new-arrival-content pr\">\r\n                                                        <h4 >{item.VariationName}</h4>\r\n                                                        <div className=\"star-rating d-inline mb-2\">\r\n                                                            {item.ProductName}\r\n                                                        </div>\r\n                                                        <br></br>\r\n                                                        <p className=\"price\">{item.CurrentPrice + ' ' + item.currency_code}</p>\r\n                                                        <br></br>\r\n                                                        <br></br>\r\n                                                        <p>\r\n                                                            {t('availability')}:\r\n                                                            <span className=\"item\">\r\n                                                                {item.IsAvailable === 0 ? ' Yes ' : ' No '}\r\n                                                                <i className=\"fa fa-shopping-basket\"></i>\r\n                                                            </span>\r\n\r\n                                                        </p>\r\n\r\n                                                        <p>\r\n                                                            {t('variant_code')}:\r\n                                                            <span className=\"item\">{id}</span>\r\n                                                        </p>\r\n                                                        <p>\r\n                                                            {t('unit')}: <span className=\"item\">{item.UnitName}</span>\r\n                                                        </p>\r\n                                                        <h4 className=\"m-b-15\">{t('description')}</h4>\r\n                                                        <p className=\"text-content\"> {item.productDescription}</p>\r\n                                                        <h4 className=\"m-b-15\">{t('advice')}</h4>\r\n                                                        <p className=\"text-content\"> {item.productAdvice}</p>\r\n                                                        <p>{t('variant_details')} </p>\r\n                                                        <Table responsive striped bordered hover>\r\n                                                            <thead>\r\n                                                                <tr>\r\n                                                                    <th>{t('name')}</th>\r\n                                                                    <th>{t('value')}</th>\r\n                                                                </tr>\r\n                                                            </thead>\r\n                                                            <tbody>\r\n                                                                {\r\n                                                                    variantDetails.map((item) => {\r\n                                                                        return (\r\n                                                                            <tr key={item.id}>\r\n                                                                                <td>{item.name}</td>\r\n                                                                                <td>{item.value}</td>\r\n                                                                            </tr>\r\n                                                                        )\r\n                                                                    })\r\n                                                                }\r\n                                                            </tbody>\r\n                                                        </Table>\r\n\r\n                                                        {/* <div className=\"col-2 px-0 mt-2\">\r\n                                                            <div className=\"input-group\">\r\n                                                                <button type=\"button\" onClick={handleDecrement} className=\"input-group-text \">{t('minus')}</button>\r\n                                                                    <div className=\"input-group-text bg-white \"> {quantity}</div>\r\n                                                                <button type=\"button\" onClick={handelIncrement} className=\"input-group-text\" disabled={item.Buyingquantity - item.SellingQuantity === quantity ? 'disabled' : ''}>{t('plus')} </button>\r\n                                                            </div>\r\n                                                            {item.Buyingquantity - item.SellingQuantity === quantity\r\n                                                                ?\r\n                                                                <div className=\"text-danger\">\r\n                                                                    {t('not_available')}\r\n                                                                </div>\r\n                                                                : \"\"\r\n                                                            }\r\n                                                        </div> */}\r\n                                                        {/* <div className=\"shopping-cart mt-5\"> */}\r\n                                                        {/* <Link\r\n                                                                to=\"/page-login\"\r\n                                                                className=\"btn btn-primary btn-lg\">\r\n                                                                <i className=\"fa fa-shopping-basket mr-2\"></i>\r\n                                                                {t('add_to_basket')}\r\n                                                            </Link> */}\r\n                                                        {/* <button\r\n                                                type=\"button\"\r\n                                                onClick={addBaskets}\r\n                                                className=\"btn btn-primary btn-lg\">\r\n                                                <i className=\"fa fa-shopping-basket mr-2\"></i>\r\n                                                    {t('add_to_basket')}\r\n                                            </button>\r\n                                         */}\r\n                                                        {/* </div> */}\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </Fragment>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VariantDetails;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Public Link\\ShowProducts.js",["306","307","308","309","310","311","312","313","314","315","316","317","318"],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\index.js",["319","320"],"import React from \"react\";\r\n/// React router dom\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Redirect,\r\n  Route,\r\n} from \"react-router-dom\";\r\nimport PrivateRoute from \"./components/PrivateRoute\";\r\n// import PublicRoute from './components/PublicRoute';\r\n/// Css\r\nimport \"./index.css\";\r\nimport \"./chart.css\";\r\n/// Layout\r\nimport Nav from \"./layouts/nav\";\r\nimport Footer from \"./layouts/Footer\";\r\n/// Deshboard\r\nimport Home from \"./components/Dashboard/Home/Home\";\r\nimport Branches from \"./components/Branches/Branches\";\r\nimport BranchShow from \"./components/Branches/Show\";\r\n\r\n// import Category from \"./components/Categories/Category\";\r\nimport Company from \"./components/Companies/Company\";\r\n// import Product from \"./components/Products/Product\";\r\n// import SubMenu from \"./components/Categories/SubCategory\";\r\nimport ServiceArea from \"./components/Services/ServiceArea\";\r\nimport Unit from \"./components/Units/Unit\";\r\nimport Inventory from \"./components/Inventories/Inventory\";\r\nimport Profile from \"./components/Dashboard/Profile/Profile\";\r\nimport Order from \"./components/Orders/Order\";\r\nimport Gallery from \"./components/Variants/Gallary\";\r\nimport Basket from \"./components/Orders/Basket\";\r\n// import VariantDetails from \"./components/Variants/VariantDetails\";\r\n// import ShowBranchDetails from \"./components/Public Link/ShowBranchDetails\";\r\nimport VariantDetails from \"./components/Variants/VariantDetails\";\r\nimport Tables from \"./components/Branches/Tables\";\r\nimport Attributes from \"./components/Attributes/Attributes\";\r\n// import AddProduct from \"./components/Products/AddProduct\";\r\nimport Options from \"./components/Attributes/Options\";\r\n// import Design from \"./components/Design/Design\";\r\nimport Theme from \"./components/Design/Theme\";\r\nimport EditTheme from \"./components/Design/EditTheme\";\r\n// import Customization from \"./components/Design/Templates/Dark/Customization\";\r\n// import CreateRoute from \"./components/Branches/CreateRoute]\";\r\nimport Error404 from \"./pages/Error404\";\r\nimport Ingredients from \"./components/Products/Ingredients\";\r\nimport Extra from \"./components/Products/Extra\";\r\n\r\nconst Markup = () => {\r\n  const routes = [\r\n    /// Login\r\n    { url: \"dashboard\", component: Home },\r\n    { url: \"branches\", component: Branches },\r\n    { url: \"ingredients\", component: Ingredients },\r\n    { url: \"extras\", component: Extra },\r\n    { url: \"companies\", component: Company },\r\n    { url: \"branches/service-area\", component: ServiceArea },\r\n    { url: \"branches/unit\", component: Unit },\r\n    { url: \"branches/inventory\", component: Inventory },\r\n    { url: \"profile\", component: Profile },\r\n    { url: \"orders\", component: Order },\r\n    { url: \"baskets\", component: Basket },\r\n    { url: \"gallery/:id\", component: Gallery },\r\n    { url: \"show_variant_detials/:id\", component: VariantDetails },\r\n    { url: \"branches/tables\", component: Tables },\r\n    { url: \"attributes\", component: Attributes },\r\n    { url: \"add-option/:id\", component: Options },\r\n    // { url: \"branches/design/edit-theme/:id\", component: EditTheme },\r\n    // { url: \"branches/design/add-theme/:id\", component: Theme },\r\n  ];\r\n\r\n  return (\r\n    <Router>\r\n      <div id=\"main-wrapper\" className=\"show\">\r\n        {localStorage.getItem(\"auth_token\") ? (\r\n          <Nav />\r\n        ) : (\r\n          <Redirect to=\"/page-login\" />\r\n        )}\r\n        <div className=\"content-body\">\r\n          <div className=\"container-fluid\">\r\n            <Switch>\r\n              {routes.map((data, i) => (\r\n                <PrivateRoute\r\n                  key={i}\r\n                  exact\r\n                  path={`/${data.url}`}\r\n                  component={data.component}\r\n                />\r\n              ))}\r\n              <PrivateRoute path={`/branches/show`} component={BranchShow} />\r\n\r\n              <Route component={Error404} />\r\n            </Switch>\r\n\r\n            {/* <CreateRoute /> */}\r\n          </div>\r\n        </div>\r\n        {localStorage.getItem(\"auth_token\") ? <Footer /> : <Redirect to=\"/\" />}\r\n      </div>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default Markup;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Attributes\\Attributes.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Attributes\\Options.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\utils\\index.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Branches\\Tables.js",["321","322"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { Button, Modal, Form } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport { Link } from \"react-router-dom\";\r\nimport * as yup from \"yup\";\r\nimport QRCode from \"qrcode.react\";\r\nimport { CBreadcrumb, CBreadcrumbItem } from \"@coreui/react\";\r\n\r\nconst Tables = (props) => {\r\n  // validation start\r\n  const schema = yup\r\n    .object()\r\n    .shape({\r\n      tableId: yup.string().required(\"This field is a required field\"),\r\n      tableName: yup.string().required(\"This field is a required field\"),\r\n    })\r\n    .required();\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors },\r\n  } = useForm({\r\n    resolver: yupResolver(schema),\r\n  });\r\n  // validation end\r\n\r\n  // for localization\r\n  const { t } = useTranslation();\r\n  // ID\r\n  const id = props.history.location.state.id;\r\n\r\n  // insert modal\r\n  const [modalCentered, setModalCentered] = useState(false);\r\n  const [tableInsert, setTableInsert] = useState({\r\n    branchId: id,\r\n  });\r\n  const handleInput = (e) => {\r\n    e.persist();\r\n    setTableInsert({ ...tableInsert, [e.target.name]: e.target.value });\r\n  };\r\n  const saveTable = (e) => {\r\n    // e.preventDefault();\r\n    axios.post(\"/api/InsertTable\", tableInsert).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setTableInsert({\r\n          branchId: id,\r\n        });\r\n        reset();\r\n\r\n        swal(\"Success\", res.data.message, \"success\");\r\n        setModalCentered(false);\r\n        //  this.props.history.push(\"/\")\r\n      }\r\n    });\r\n  };\r\n  // insert end\r\n\r\n  // edit modal\r\n  const [editmodalCentered, setEditModalCentered] = useState(false);\r\n  const [editTable, setEditTable] = useState([]);\r\n  const editHandleInput = (e) => {\r\n    e.persist();\r\n    setEditTable({ ...editTable, [e.target.name]: e.target.value });\r\n  };\r\n  const fetchTable = (e, id) => {\r\n    e.preventDefault();\r\n    axios.get(`/api/EditTable/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setEditTable(res.data.Details);\r\n        setEditModalCentered(true);\r\n      } else if (res.data.status === 404) {\r\n        swal(\"Error\", res.data.message, \"error\");\r\n      }\r\n    });\r\n  };\r\n  const updateTable = (e) => {\r\n    e.preventDefault();\r\n    axios.post(\"/api/UpdateTable\", editTable).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setEditTable(\"\");\r\n        swal(\"Success\", res.data.message, \"success\");\r\n        setEditModalCentered(false);\r\n        //  this.props.history.push(\"/\")\r\n      } else if (res.data.status === 404) {\r\n        swal(\"Error\", res.data.message, \"error\");\r\n      }\r\n    });\r\n  };\r\n  // edit end\r\n  // delete section\r\n  const deleteTable = (e, id) => {\r\n    e.preventDefault();\r\n    swal({\r\n      title: \"Are you sure?\",\r\n      text: \"Once deleted, you will not be able to recover this imaginary file!\",\r\n      icon: \"warning\",\r\n      buttons: [t(\"cancel\"), t(\"confirm\")],\r\n      dangerMode: true,\r\n    }).then((willDelete) => {\r\n      if (willDelete) {\r\n        axios.delete(`/api/DeleteTable/${id}`).then((res) => {\r\n          if (res.data.status === 200) {\r\n            swal(\"Success\", res.data.message, \"success\");\r\n            setTableInsert({\r\n              branchId: id,\r\n            });\r\n          } else if (res.data.status === 404) {\r\n            swal(\"Error\", res.data.message, \"error\");\r\n          }\r\n        });\r\n      } else {\r\n        swal(\"Your Data is safe now!\");\r\n      }\r\n    });\r\n  };\r\n  // delete end\r\n  //for retriving data using laravel API\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  useEffect(() => {\r\n    axios.get(`/api/GetTables/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        // console.log(res.data.fetchData);\r\n        setFetchData(res.data.fetchData);\r\n      }\r\n      setLoading(false);\r\n    });\r\n  }, [tableInsert, editTable, id]);\r\n  // download QRcode\r\n  const downloadQRCode = (e, id) => {\r\n    e.preventDefault();\r\n    // console.log(id)\r\n\r\n    const qrCodeURL = document\r\n      .getElementById(id)\r\n      .toDataURL(\"image/png\")\r\n      .replace(\"image/png\", \"image/octet-stream\");\r\n    let aEl = document.createElement(\"a\");\r\n    aEl.href = qrCodeURL;\r\n    aEl.download = \"Branch_QR_Code.png\";\r\n    document.body.appendChild(aEl);\r\n    aEl.click();\r\n    document.body.removeChild(aEl);\r\n  };\r\n  var viewProducts_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"spinner-border text-primary \" role=\"status\">\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewProducts_HTMLTABLE = fetchData.map((item, i) => {\r\n      return (\r\n        <tr key={item.id}>\r\n          <td> {item.tableId}</td>\r\n          <td> {item.tableName}</td>\r\n          <td>\r\n            <QRCode\r\n              id={btoa(item.id)}\r\n              level={\"H\"}\r\n              size={256}\r\n              fgColor=\"red\"\r\n              value={`http://192.168.1.103:3000/show-branch-details/${btoa(\r\n                item.id\r\n              )}`}\r\n              className=\"primary d-none\"\r\n            />\r\n            <Link to=\"\" onClick={(e) => downloadQRCode(e, btoa(item.id))}>\r\n              {\" \"}\r\n              {t(\"download_qr_code\")}\r\n            </Link>\r\n          </td>\r\n          <td>\r\n            <button\r\n              type=\"button\"\r\n              onClick={(e) => fetchTable(e, item.id)}\r\n              className=\"btn btn-outline-danger btn-sm\"\r\n            >\r\n              {t(\"edit\")}\r\n            </button>\r\n            &nbsp;&nbsp;&nbsp;\r\n            <button\r\n              type=\"button\"\r\n              onClick={(e) => deleteTable(e, item.id)}\r\n              className=\"btn btn-outline-warning btn-sm\"\r\n            >\r\n              {t(\"delete\")}\r\n            </button>\r\n          </td>\r\n        </tr>\r\n      );\r\n    });\r\n  }\r\n  return (\r\n    <Fragment>\r\n      <Modal className=\"fade\" show={modalCentered}>\r\n        <Form\r\n          onSubmit={handleSubmit(saveTable)}\r\n          method=\"POST\"\r\n          encType=\"multipart/form-data\"\r\n        >\r\n          <Modal.Header>\r\n            <Modal.Title>{t(\"add_table\")}</Modal.Title>\r\n            <Button\r\n              onClick={() => setModalCentered(false)}\r\n              variant=\"\"\r\n              className=\"close\"\r\n            >\r\n              <span>&times;</span>\r\n            </Button>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>{t(\"table_id\")} </strong>{\" \"}\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                {...register(\"tableId\")}\r\n                className={\r\n                  errors.tableId?.message\r\n                    ? \"form-control  is-invalid\"\r\n                    : \"form-control\"\r\n                }\r\n                placeholder={t(\"table_id\")}\r\n                name=\"tableId\"\r\n                onChange={handleInput}\r\n                value={tableInsert.tableId}\r\n              />\r\n              {errors.tableId?.message && (\r\n                <div className=\"invalid-feedback\">\r\n                  {errors.tableId?.message}\r\n                </div>\r\n              )}\r\n              {/* <div className=\"text-danger\">\r\n                                {errors.name?.message}\r\n                            </div> */}\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>{t(\"table_name\")} </strong>{\" \"}\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                {...register(\"tableName\")}\r\n                className={\r\n                  errors.tableName?.message\r\n                    ? \"form-control  is-invalid\"\r\n                    : \"form-control\"\r\n                }\r\n                placeholder={t(\"table_name\")}\r\n                name=\"tableName\"\r\n                onChange={handleInput}\r\n                value={tableInsert.tableName}\r\n              />\r\n              {errors.tableName?.message && (\r\n                <div className=\"invalid-feedback\">\r\n                  {errors.tableName?.message}\r\n                </div>\r\n              )}\r\n              {/* <div className=\"text-danger\">\r\n                                {errors.value?.message}\r\n                            </div> */}\r\n            </div>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button\r\n              onClick={() => setModalCentered(false)}\r\n              variant=\"danger light\"\r\n            >\r\n              {t(\"close\")}\r\n            </Button>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              {t(\"save\")}\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Form>\r\n      </Modal>\r\n      {/* Edit Modal */}\r\n      <Modal className=\"fade\" show={editmodalCentered}>\r\n        <Form onSubmit={updateTable} method=\"POST\">\r\n          <Modal.Header>\r\n            <Modal.Title>{t(\"edit_table\")} </Modal.Title>\r\n            <Button\r\n              onClick={() => setEditModalCentered(false)}\r\n              variant=\"\"\r\n              className=\"close\"\r\n            >\r\n              <span>&times;</span>\r\n            </Button>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <div className=\"form-group text-center\">\r\n              <QRCode\r\n                level={\"H\"}\r\n                size={256}\r\n                fgColor=\"#f50b65\"\r\n                value={`http://192.168.1.103:3000/show-branch-details/${btoa(\r\n                  editTable.tableId\r\n                )}`}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>{t(\"table_id\")}</strong>{\" \"}\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                placeholder={t(\"table_id\")}\r\n                name=\"tableId\"\r\n                required\r\n                onChange={editHandleInput}\r\n                value={editTable.tableId}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>{t(\"table_name\")}</strong>{\" \"}\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                placeholder={t(\"table_name\")}\r\n                name=\"tableName\"\r\n                required\r\n                onChange={editHandleInput}\r\n                value={editTable.tableName}\r\n              />\r\n            </div>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button\r\n              onClick={() => setEditModalCentered(false)}\r\n              variant=\"danger light\"\r\n            >\r\n              {t(\"close\")}\r\n            </Button>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              {t(\"update\")}{\" \"}\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Form>\r\n      </Modal>\r\n      <div className=\"row\">\r\n        <div className=\"col-xl-12 col-xxl-12 col-lg-12 col-sm-12\">\r\n          <div className=\"card\">\r\n            <div className=\"card-header border-0\">\r\n              <div>\r\n                <h4 className=\"card-title mb-2\">{t(\"tables\")}</h4>\r\n              </div>\r\n              <div className=\"dropdown\">\r\n                <Button\r\n                  variant=\"primary\"\r\n                  type=\"button\"\r\n                  className=\"mb-2 mr-2\"\r\n                  onClick={() => setModalCentered(true)}\r\n                >\r\n                  {t(\"add_table\")}\r\n                </Button>\r\n              </div>\r\n            </div>\r\n            <div className=\"card-body p-0\">\r\n              <div className=\"table-responsive \">\r\n                <table className=\"table text-center \">\r\n                  <thead>\r\n                    <tr className=\"card-title\">\r\n                      {/* <th>{t('number')}</th> */}\r\n                      <th>{t(\"table_id\")}</th>\r\n                      <th>{t(\"table_name\")}</th>\r\n                      <th>{t(\"download\")}</th>\r\n                      <th>{t(\"actions\")}</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>{viewProducts_HTMLTABLE}</tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Tables;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Variants\\VariantDetails.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Variants\\Gallary.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Variants\\Variants.js",["323","324","325","326","327","328","329","330","331","332","333","334","335","336","337","338","339","340","341"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport Grid from \"./Grid\";\r\nimport { CBreadcrumb } from \"@coreui/react\";\r\nimport Select from \"react-select\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\n\r\nconst Variants = (props) => {\r\n  // for localization\r\n  const history = useHistory();\r\n\r\n  const { t } = useTranslation();\r\n  const id = props.history.location.state.id;\r\n\r\n  const [nameAttr, setNameAtter] = useState({});\r\n  const [attributes, setAttributes] = useState([]);\r\n  const [filterAttributes, setfilterAttributes] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [numberOfVar, setNumberOfVar] = useState([]);\r\n  const [jsonVaraints, setJsonVaratis] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const getdata = async () => {\r\n      const jsonvar = await axios({\r\n        method: \"GET\",\r\n        url: `/api/Getvariations/${id}`,\r\n      });\r\n      if (jsonvar.data.status == 200) {\r\n        setJsonVaratis(jsonvar.data.fetchData);\r\n      }\r\n\r\n      const res = await axios({\r\n        method: \"POST\",\r\n        url: \"/api/GetAttributes\",\r\n      });\r\n      const nameAtter = {};\r\n      res.data.fetchData.map((fetchData) => {\r\n        nameAtter[fetchData.attributeName] = \"\";\r\n      });\r\n      if (\r\n        res.data.fetchData.length !== attributes.length &&\r\n        jsonvar.data.fetchData == \"\"\r\n      ) {\r\n        const varLines = [];\r\n\r\n        res.data.fetchData.map((fetchData) => {\r\n          nameAtter[fetchData.attributeName] = \"\";\r\n        });\r\n\r\n        varLines.push({\r\n          postion: 0,\r\n          sku: \"\",\r\n          price: \"\",\r\n          stock: \"\",\r\n          image: [],\r\n          // ...nameAtter,\r\n        });\r\n        // setNameAtter(nameAtter);\r\n\r\n        setNumberOfVar(varLines);\r\n        setAttributes(res.data.fetchData);\r\n      } else {\r\n        const varLines = [];\r\n\r\n        const arrayVar = JSON.parse(jsonvar.data.fetchData);\r\n        const AttNames = {};\r\n\r\n        arrayVar.map((fetchData) => {\r\n          const attrFilterName = [];\r\n\r\n          let line = {};\r\n          let count = 0;\r\n          for (const [key, value] of Object.entries(fetchData)) {\r\n            if (\r\n              key == \"postion\" ||\r\n              key == \"sku\" ||\r\n              key == \"price\" ||\r\n              key == \"stock\" ||\r\n              key == \"image\"\r\n            ) {\r\n              line[key] = value;\r\n            } else if (nameAtter.hasOwnProperty(key)) {\r\n              line[key] = value;\r\n              attrFilterName.push({\r\n                value: key,\r\n                label: key,\r\n              });\r\n              AttNames[key] = \"\";\r\n            } else {\r\n              if (count < Object.keys(nameAtter).length) {\r\n                line[Object.keys(nameAtter)[count]] = value;\r\n              }\r\n              count++;\r\n            }\r\n          }\r\n\r\n          varLines.push(line);\r\n          setfilterAttributes(attrFilterName);\r\n        });\r\n        setNameAtter(AttNames);\r\n        // console.log(nameAttr);\r\n\r\n        setNumberOfVar(varLines);\r\n        setAttributes(res.data.fetchData);\r\n      }\r\n    };\r\n\r\n    getdata();\r\n    setLoading(false);\r\n  }, []);\r\n  const CreateNewVar = () => {\r\n    let postion = 0;\r\n    if (numberOfVar.length > 0) {\r\n      postion = numberOfVar.length;\r\n    }\r\n    setNumberOfVar([\r\n      ...numberOfVar,\r\n      {\r\n        postion: postion,\r\n        sku: \"\",\r\n        price: \"\",\r\n        stock: \"\",\r\n        image: [],\r\n        ...nameAttr,\r\n      },\r\n    ]);\r\n  };\r\n  const removeVar = () => {\r\n    const varsLines = numberOfVar;\r\n    varsLines.pop();\r\n    setNumberOfVar([...varsLines]);\r\n  };\r\n  // select box\r\n  const getJSONVaraints = (items) => {\r\n    setJsonVaratis(items);\r\n  };\r\n  const saveVaraiants = async () => {\r\n    if (numberOfVar.length === JSON.parse(jsonVaraints).length) {\r\n      const formdata = new FormData();\r\n      formdata.append(\"product_id\", id);\r\n      formdata.append(\"vars\", jsonVaraints);\r\n      const res = await axios({\r\n        method: \"post\",\r\n        data: formdata,\r\n        url: \"/api/saveVars\",\r\n      });\r\n      if (res.data.status === 200) {\r\n        swal(\"Success\", res.data.message, \"success\");\r\n      } else {\r\n        swal(\"error\", res.data.message, \"error\");\r\n      }\r\n    } else {\r\n      console.log(jsonVaraints);\r\n      return;\r\n    }\r\n  };\r\n  const recheckitem = (item) => {\r\n    console.log(item);\r\n  };\r\n\r\n  // select box\r\n  const handleSelectEvent = (e) => {\r\n    const nameAtter = {};\r\n    // console.log(filterAttributes);\r\n    // console.log(e);\r\n\r\n    const inputFilter = filterAttributes?.length ? filterAttributes?.length : 0;\r\n    const input = e?.length ? e?.length : 0;\r\n    if (input > inputFilter) {\r\n      if (inputFilter === 0) {\r\n        e?.map((item) => {\r\n          nameAtter[item.label] = \"\";\r\n          numberOfVar.map((vars) => {\r\n            vars[item.label] = vars[item.label] ? vars[item.label] : \"\";\r\n          });\r\n        });\r\n      } else {\r\n        e?.map((item) => {\r\n          nameAtter[item.label] = \"\";\r\n          numberOfVar.map((vars) => {\r\n            vars[item.label] = vars[item.label] ? vars[item.label] : \"\";\r\n          });\r\n        });\r\n      }\r\n    } else if (input < inputFilter) {\r\n      if (input === 0) {\r\n        var uniqueResultOne = filterAttributes;\r\n      } else {\r\n        var uniqueResultOne = filterAttributes.filter(function (obj) {\r\n          return !e.some(function (obj2) {\r\n            return obj.value == obj2.value;\r\n          });\r\n        });\r\n      }\r\n      const label = uniqueResultOne[0].label;\r\n      numberOfVar.map((vars) => {\r\n        delete vars[label];\r\n      });\r\n      e?.map((item) => {\r\n        nameAtter[item.label] = \"\";\r\n      });\r\n    }\r\n\r\n    // Object.keys(vars).splice(index, 1);\r\n    //   console.log(vars);\r\n    setfilterAttributes(e);\r\n    setNameAtter(nameAtter);\r\n    setNumberOfVar(numberOfVar);\r\n  };\r\n  if (loading) {\r\n    return (\r\n      <div className=\"spinner-border text-primary \" role=\"status\">\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <Fragment>\r\n        <CBreadcrumb style={{ \"--cui-breadcrumb-divider\": \"'>'\" }}>\r\n          <Link\r\n            className=\"font-weight-bold\"\r\n            to=\"\"\r\n            onClick={() => history.goBack()}\r\n          >\r\n            {t(\"back_to_products_list\")}\r\n          </Link>\r\n        </CBreadcrumb>\r\n\r\n        <div className=\"row\">\r\n          <div className=\"col-xl-12 col-lg-12 col-sm-12 \">\r\n            <div className=\"card \">\r\n              <Select\r\n                value={filterAttributes}\r\n                isMulti\r\n                options={attributes.map((o, i) => {\r\n                  return { value: o.attributeName, label: o.attributeName };\r\n                })}\r\n                onChange={handleSelectEvent}\r\n                // name=\"attributeName\"\r\n                className=\"basic-multi-select\"\r\n                classNamePrefix=\"select\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"row\">\r\n          <div className=\"col-xl-12 col-lg-12 col-sm-12 \">\r\n            <div className=\"card \">\r\n              <div className=\"col-xl-12 col-lg-12 col-sm-12 \">\r\n                <Grid\r\n                  recheck={(item) => {\r\n                    recheckitem(item);\r\n                  }}\r\n                  getJSONVaraints={(items) => getJSONVaraints(items)}\r\n                  numberOfVar={numberOfVar}\r\n                  filterAttributes={filterAttributes}\r\n                  productid={id}\r\n                ></Grid>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-xl-12 col-lg-12 col-sm-12\">\r\n            <div className=\"row \">\r\n              <div className=\"col-xl-1 col-lg-1 col-sm-1\">\r\n                <Button onClick={CreateNewVar}> Add Variant</Button>\r\n              </div>\r\n              <div className=\"col-xl-1 col-lg-1 col-sm-1\">\r\n                <Button onClick={removeVar}>Remove Variant</Button>\r\n              </div>\r\n              <div className=\"col-xl-1 col-lg-1 col-sm-1\">\r\n                <Button onClick={saveVaraiants}> Save Variants</Button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Variants;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Branches\\Branches.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\PrivateRoute.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Orders\\Order.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Categories\\SubCategory.js",["342","343","344","345"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { Button, Modal, Form } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Link, useHistory, useRouteMatch } from \"react-router-dom\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as yup from \"yup\";\r\nimport { CBreadcrumb, CBreadcrumbItem } from \"@coreui/react\";\r\nimport { base_url, port } from \"../../../Consts\";\r\n\r\nconst SubCategory = (props) => {\r\n  const history = useHistory();\r\n  const { path, url } = useRouteMatch();\r\n\r\n  // validation start\r\n  const schema = yup\r\n    .object()\r\n    .shape({\r\n      SubCategoryName: yup.string().required(\"This field is a required field\"),\r\n    })\r\n    .required();\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors },\r\n  } = useForm({\r\n    resolver: yupResolver(schema),\r\n  });\r\n  // validation end\r\n  // for localization\r\n  const { t } = useTranslation();\r\n  const id = props.history.location.state.id;\r\n  const CategoryName = props.history.location.state.CategoryName;\r\n  // insert start\r\n  const [modalCentered, setModalCentered] = useState(false);\r\n  const [subCategoryInsert, setSubCategoryInsert] = useState({\r\n    SubCategoryName: \"\",\r\n    CategoryID: id,\r\n  });\r\n  const handleInput = (e) => {\r\n    e.persist();\r\n    setSubCategoryInsert({\r\n      ...subCategoryInsert,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n  const [imageState, setImageState] = useState([]);\r\n\r\n  const handleImage = (e) => {\r\n    setImageState({ ...imageState, SubCategoryIcon: e.target.files[0] });\r\n  };\r\n  const saveSubMenu = (e) => {\r\n    // e.preventDefault();\r\n    const formData = new FormData();\r\n    formData.append(\"SubCategoryName\", subCategoryInsert.SubCategoryName);\r\n    formData.append(\"CategoryID\", subCategoryInsert.CategoryID);\r\n    formData.append(\"SubCategoryIcon\", imageState.SubCategoryIcon);\r\n    axios.post(\"/api/InsertSubCategories\", formData).then((res) => {\r\n      if (res.data.status === 200) {\r\n        // console.log(res.data.status);\r\n        setSubCategoryInsert({\r\n          SubCategoryName: \"\",\r\n          CategoryID: id,\r\n        });\r\n        reset();\r\n        swal(\"Success\", res.data.message, \"success\");\r\n        setModalCentered(false);\r\n        //  this.props.history.push(\"/\")\r\n      }\r\n    });\r\n  };\r\n  // insert End\r\n\r\n  // edit start\r\n  const [editmodalCentered, setEditModalCentered] = useState(false);\r\n  const [editSubMenu, setEditSubMenu] = useState([]);\r\n  const editHandleInput = (e) => {\r\n    e.persist();\r\n    setEditSubMenu({ ...editSubMenu, [e.target.name]: e.target.value });\r\n  };\r\n  const fetchSubMenus = (e, id) => {\r\n    e.preventDefault();\r\n\r\n    axios.get(`/api/EditSubCategories/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setEditSubMenu(res.data.menu);\r\n        setEditModalCentered(true);\r\n      } else if (res.data.status === 404) {\r\n        swal(\"Error\", res.data.message, \"error\");\r\n      }\r\n    });\r\n  };\r\n  const updateSubMenu = (e) => {\r\n    e.preventDefault();\r\n    const formData = new FormData();\r\n    formData.append(\"SubCategoryIcon\", imageState.SubCategoryIcon);\r\n    formData.append(\"SubCategoryName\", editSubMenu.SubCategoryName);\r\n    formData.append(\"CategoryID\", editSubMenu.CategoryID);\r\n    formData.append(\"id\", editSubMenu.id);\r\n    axios.post(\"/api/UpdateSubCategory\", formData).then((res) => {\r\n      if (res.data.status === 200) {\r\n        // console.log(res.data.status);\r\n        setEditSubMenu(\"\");\r\n        swal(\"Success\", res.data.message, \"success\");\r\n        setEditModalCentered(false);\r\n        //  this.props.history.push(\"/\")\r\n      } else if (res.data.status === 404) {\r\n        swal(\"Error\", res.data.message, \"error\");\r\n      }\r\n    });\r\n  };\r\n  // edit end\r\n  // delete start\r\n  const deleteSubMenu = (e, id) => {\r\n    e.preventDefault();\r\n    swal({\r\n      title: \"Are you sure?\",\r\n      text: \"Once deleted, you will not be able to recover this imaginary file!\",\r\n      icon: \"warning\",\r\n      buttons: [t(\"cancel\"), t(\"confirm\")],\r\n      dangerMode: true,\r\n    }).then((willDelete) => {\r\n      if (willDelete) {\r\n        axios.delete(`/api/DeleteSubCategories/${id}`).then((res) => {\r\n          if (res.data.status === 200) {\r\n            setSubCategoryInsert([]);\r\n            swal(\"Success\", res.data.message, \"success\");\r\n            // thisClicked.closest(\"tr\").remove();\r\n          } else if (res.data.status === 404) {\r\n            swal(\"Error\", res.data.message, \"error\");\r\n          }\r\n        });\r\n      } else {\r\n        swal(\"Your Data is safe now!\");\r\n      }\r\n    });\r\n  };\r\n  // delete end\r\n\r\n  //for retriving data using laravel API\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  useEffect(() => {\r\n    axios.get(`/api/GetSubCategories/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setFetchData(res.data.fetchData);\r\n      }\r\n      setLoading(false);\r\n    });\r\n  }, [subCategoryInsert, editSubMenu, id]);\r\n  var branchID = 0;\r\n\r\n  var viewProducts_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"spinner-border text-primary \" role=\"status\">\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewProducts_HTMLTABLE = fetchData.map((item, i) => {\r\n      branchID = item.branchID;\r\n      return (\r\n        <div className=\"col-xl-4 col-lg-6 col-sm-6\" key={i}>\r\n          <div className=\"card overflow-hidden\">\r\n            <div className=\"card-body\">\r\n              <div className=\"text-center\">\r\n                <Link\r\n                  to={{\r\n                    pathname: `${url}/products`,\r\n                    state: { id: item.sub_id },\r\n                  }}\r\n                >\r\n                  <span>\r\n                    <img\r\n                      style={{ height: \"100px\", objectFit: \"contain\" }}\r\n                      src={`http://${base_url}:${port}/images/sub_catagories/${item.SubCategoryIcon}`}\r\n                      className=\"w-40\"\r\n                      alt=\"\"\r\n                    />\r\n                  </span>\r\n\r\n                  <h4 className=\"mt-4 mb-1\">{item.SubCategoryName}</h4>\r\n                </Link>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"card-footer pt-0 pb-0 text-center\">\r\n              <div className=\"row\">\r\n                <div className=\"col-4 pt-3 pb-3 border-right\">\r\n                  <Link to=\"\" onClick={(e) => fetchSubMenus(e, item.sub_id)}>\r\n                    <span>{t(\"edit\")}</span>\r\n                  </Link>\r\n                </div>\r\n                <div className=\"col-4 pt-3 pb-3 border-right\">\r\n                  <Link to=\"\" onClick={(e) => deleteSubMenu(e, item.sub_id)}>\r\n                    <span>{t(\"delete\")}</span>\r\n                  </Link>\r\n                </div>\r\n                <div className=\"col-4 pt-3 pb-3\">\r\n                  <Link\r\n                    to={{\r\n                      pathname: `${url}/products`,\r\n                      state: { id: item.sub_id },\r\n                    }}\r\n                  >\r\n                    <span>{t(\"products\")}</span>\r\n                  </Link>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <CBreadcrumb style={{ \"--cui-breadcrumb-divider\": \"'>'\" }}>\r\n        <CBreadcrumbItem\r\n          className=\"font-weight-bold\"\r\n          // onClick={() => history.goBack()}\r\n        >\r\n          {t(\"categories\")}\r\n        </CBreadcrumbItem>\r\n        <CBreadcrumbItem active>{t(\"sub_category\")}</CBreadcrumbItem>\r\n      </CBreadcrumb>\r\n      {/* <!-- Insert  Modal --> */}\r\n      <Modal className=\"fade\" show={modalCentered}>\r\n        <Form\r\n          onSubmit={handleSubmit(saveSubMenu)}\r\n          method=\"POST\"\r\n          encType=\"multipart/form-data\"\r\n        >\r\n          <Modal.Header>\r\n            <Modal.Title>{t(\"add_sub_Category\")}</Modal.Title>\r\n            <Button\r\n              onClick={() => setModalCentered(false)}\r\n              variant=\"\"\r\n              className=\"close\"\r\n            >\r\n              <span>&times;</span>\r\n            </Button>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>\r\n                  {t(\"category_name\")}: {props.location.CategoryName}\r\n                </strong>{\" \"}\r\n              </label>\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>{t(\"sub_category_icon\")}</strong>{\" \"}\r\n              </label>\r\n              <div className=\"input-group\">\r\n                <div className=\"custom-file\">\r\n                  <input\r\n                    type=\"file\"\r\n                    className=\"form-control\"\r\n                    placeholder={t(\"sub_category_icon\")}\r\n                    name=\"SubCategoryIcon\"\r\n                    required\r\n                    onChange={handleImage}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>{t(\"sub_category_name\")}</strong>{\" \"}\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                {...register(\"SubCategoryName\")}\r\n                className=\"form-control\"\r\n                placeholder={t(\"sub_category_name\")}\r\n                name=\"SubCategoryName\"\r\n                onChange={handleInput}\r\n                value={subCategoryInsert.SubCategoryName}\r\n              />\r\n              <div className=\"text-danger\">\r\n                {errors.SubCategoryName?.message}\r\n              </div>\r\n            </div>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button\r\n              onClick={() => setModalCentered(false)}\r\n              variant=\"danger light\"\r\n            >\r\n              {t(\"close\")}\r\n            </Button>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              {t(\"save\")}\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Form>\r\n      </Modal>\r\n      {/* Edit Modal */}\r\n      <Modal className=\"fade\" show={editmodalCentered}>\r\n        <Form onSubmit={updateSubMenu} method=\"POST\">\r\n          <Modal.Header>\r\n            <Modal.Title>{t(\"edit_sub_category\")}</Modal.Title>\r\n            <Button\r\n              onClick={() => setEditModalCentered(false)}\r\n              variant=\"\"\r\n              className=\"close\"\r\n            >\r\n              <span>&times;</span>\r\n            </Button>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>{t(\"sub_category_icon\")}</strong>{\" \"}\r\n              </label>\r\n              <div className=\"input-group\">\r\n                <div className=\"custom-file\">\r\n                  <input\r\n                    type=\"file\"\r\n                    className=\"form-control\"\r\n                    placeholder={t(\"sub_category_icon\")}\r\n                    name=\"SubCategoryIcon\"\r\n                    onChange={handleImage}\r\n                  />\r\n                  <img\r\n                    src={`http://${base_url}:${port}/images/sub_catagories/${editSubMenu.SubCategoryIcon}`}\r\n                    width=\"70\"\r\n                    alt=\" \"\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>{t(\"sub_category_name\")}</strong>{\" \"}\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                placeholder={t(\"sub_category_name\")}\r\n                name=\"SubCategoryName\"\r\n                required\r\n                onChange={editHandleInput}\r\n                value={editSubMenu.SubCategoryName}\r\n              />\r\n            </div>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button\r\n              onClick={() => setEditModalCentered(false)}\r\n              variant=\"danger light\"\r\n            >\r\n              {t(\"close\")}\r\n            </Button>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              {t(\"update\")}{\" \"}\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Form>\r\n      </Modal>\r\n      <div className=\"row\">\r\n        {viewProducts_HTMLTABLE}\r\n        <div className=\"col-xl-4 col-lg-4 col-sm-4 \">\r\n          <div className=\"card overflow-hidden \">\r\n            <div\r\n              className=\"card-body d-flex justify-content-center text-center\"\r\n              style={{ border: \"2px dashed red\" }}\r\n            >\r\n              <div className=\"align-self-center text-center\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-outline-primary\"\r\n                  onClick={() => setModalCentered(true)}\r\n                >\r\n                  <svg\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    width=\"32\"\r\n                    height=\"32\"\r\n                    fill=\"currentColor\"\r\n                    className=\"bi bi-plus\"\r\n                    viewBox=\"0 0 16 16\"\r\n                  >\r\n                    <path d=\"M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z\" />\r\n                  </svg>\r\n                  {t(\"add_sub_Category\")}\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default SubCategory;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Orders\\Basket.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Services\\ServiceArea.js",["346","347"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { Button, Modal, Form } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as yup from \"yup\";\r\nimport { CBreadcrumb, CBreadcrumbItem } from \"@coreui/react\";\r\n\r\nconst ServiceArea = (props) => {\r\n  // Validation Start\r\n  const schema = yup\r\n    .object()\r\n    .shape({\r\n      AreaName: yup.string().required(\"This field is a required field\"),\r\n    })\r\n    .required();\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors },\r\n  } = useForm({\r\n    resolver: yupResolver(schema),\r\n  });\r\n  // Validation End\r\n  // for localization\r\n  const { t } = useTranslation();\r\n  //ID\r\n  const id = props.history.location.state.id;\r\n\r\n  // insert Start\r\n  const [modalCentered, setModalCentered] = useState(false);\r\n  const [serviceAreaInsert, setServiceAreaInsert] = useState({\r\n    AreaName: \"\",\r\n    BranchID: id,\r\n  });\r\n  const handleInput = (e) => {\r\n    e.persist();\r\n    setServiceAreaInsert({\r\n      ...serviceAreaInsert,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n  const saveServiceAreas = (e) => {\r\n    // e.preventDefault();\r\n    axios.post(\"/api/InsertServicAreas\", serviceAreaInsert).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setServiceAreaInsert({\r\n          AreaName: \"\",\r\n          BranchID: id,\r\n        });\r\n        reset();\r\n        swal(\"Success\", res.data.message, \"success\");\r\n        setModalCentered(false);\r\n        //  this.props.history.push(\"/\")\r\n      }\r\n    });\r\n  };\r\n  // insert End\r\n  // edit Start\r\n  const [editmodalCentered, setEditModalCentered] = useState(false);\r\n  const [editServiceAreas, setEditServiceAreas] = useState([]);\r\n  const editHandleInput = (e) => {\r\n    e.persist();\r\n    setEditServiceAreas({\r\n      ...editServiceAreas,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n  const fetchServiceArea = (e, id) => {\r\n    e.preventDefault();\r\n    axios.get(`/api/EditServiceAreas/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setEditServiceAreas(res.data.menu);\r\n        setEditModalCentered(true);\r\n      } else if (res.data.status === 404) {\r\n        swal(\"Error\", res.data.message, \"error\");\r\n      }\r\n    });\r\n  };\r\n  const updateServiceArea = (e) => {\r\n    e.preventDefault();\r\n    axios.post(\"/api/UpdateServiceAreas\", editServiceAreas).then((res) => {\r\n      if (res.data.status === 200) {\r\n        console.log(res.data.status);\r\n        setEditServiceAreas(\"\");\r\n        swal(\"Success\", res.data.message, \"success\");\r\n        setEditModalCentered(false);\r\n        //  this.props.history.push(\"/\")\r\n      } else if (res.data.status === 404) {\r\n        swal(\"Error\", res.data.message, \"error\");\r\n      }\r\n    });\r\n  };\r\n  // Edit End\r\n\r\n  // delete Start\r\n  const deleteServiceArea = (e, id) => {\r\n    swal({\r\n      title: \"Are you sure?\",\r\n      text: \"Once deleted, you will not be able to recover this imaginary file!\",\r\n      icon: \"warning\",\r\n      buttons: [t(\"cancel\"), t(\"confirm\")],\r\n      dangerMode: true,\r\n    }).then((willDelete) => {\r\n      if (willDelete) {\r\n        axios.delete(`/api/DeleteServiceAreas/${id}`).then((res) => {\r\n          if (res.data.status === 200) {\r\n            swal(\"Success\", res.data.message, \"success\");\r\n            setServiceAreaInsert({\r\n              AreaName: \"\",\r\n              BranchID: id,\r\n            });\r\n          } else if (res.data.status === 404) {\r\n            swal(\"Error\", res.data.message, \"error\");\r\n          }\r\n        });\r\n      } else {\r\n        swal(\"Your Data is safe now!\");\r\n      }\r\n    });\r\n  };\r\n  // delete End\r\n\r\n  //for retriving data using laravel API\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    axios.get(`/api/GetServiceAreas/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setFetchData(res.data.fetchData);\r\n      }\r\n      setLoading(false);\r\n    });\r\n  }, [serviceAreaInsert, editServiceAreas, id]);\r\n\r\n  var viewProducts_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"spinner-border text-primary \" role=\"status\">\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewProducts_HTMLTABLE = fetchData.map((item, i) => {\r\n      return (\r\n        <tr key={item.id}>\r\n          <td>{i + 1}</td>\r\n\r\n          <td> {item.AreaName}</td>\r\n          <td>\r\n            <button\r\n              type=\"button\"\r\n              onClick={(e) => fetchServiceArea(e, item.id)}\r\n              className=\"btn btn-outline-danger btn-sm\"\r\n            >\r\n              {t(\"edit\")}\r\n            </button>\r\n            &nbsp;&nbsp;&nbsp;\r\n            <button\r\n              type=\"button\"\r\n              onClick={(e) => deleteServiceArea(e, item.id)}\r\n              className=\"btn btn-outline-warning btn-sm\"\r\n            >\r\n              {t(\"delete\")}\r\n            </button>\r\n          </td>\r\n        </tr>\r\n      );\r\n    });\r\n  }\r\n  return (\r\n    <Fragment>\r\n      {/* <CBreadcrumb style={{ \"--cui-breadcrumb-divider\": \"'>'\" }}>\r\n                <CBreadcrumbItem className=\"font-weight-bold\" href=\"/branches\" >{t('Branches')}</CBreadcrumbItem>\r\n                <CBreadcrumbItem active>{t('services_area')}</CBreadcrumbItem>\r\n            </CBreadcrumb> */}\r\n      {/* <!-- Insert  Modal --> */}\r\n      <Modal className=\"fade\" show={modalCentered}>\r\n        <Form\r\n          onSubmit={handleSubmit(saveServiceAreas)}\r\n          method=\"POST\"\r\n          encType=\"multipart/form-data\"\r\n        >\r\n          <Modal.Header>\r\n            <Modal.Title>{t(\"add_service_area\")}</Modal.Title>\r\n            <Button\r\n              onClick={() => setModalCentered(false)}\r\n              variant=\"\"\r\n              className=\"close\"\r\n            >\r\n              <span>&times;</span>\r\n            </Button>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>\r\n                  {t(\"branch_name\")}: {props.location.branchName}\r\n                </strong>{\" \"}\r\n              </label>\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>{t(\"service_area\")}</strong>{\" \"}\r\n              </label>\r\n              <textarea\r\n                type=\"text\"\r\n                {...register(\"AreaName\")}\r\n                className=\"form-control\"\r\n                placeholder={t(\"service_area\")}\r\n                name=\"AreaName\"\r\n                onChange={handleInput}\r\n                value={serviceAreaInsert.AreaName}\r\n              />\r\n              <div className=\"text-danger\">{errors.AreaName?.message}</div>\r\n            </div>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button\r\n              onClick={() => setModalCentered(false)}\r\n              variant=\"danger light\"\r\n            >\r\n              {t(\"close\")}\r\n            </Button>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              {t(\"save\")}\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Form>\r\n      </Modal>\r\n      {/* Edit Modal */}\r\n      <Modal className=\"fade\" show={editmodalCentered}>\r\n        <Form onSubmit={updateServiceArea} method=\"POST\">\r\n          <Modal.Header>\r\n            <Modal.Title>{t(\"edit_service_area\")}</Modal.Title>\r\n            <Button\r\n              onClick={() => setEditModalCentered(false)}\r\n              variant=\"\"\r\n              className=\"close\"\r\n            >\r\n              <span>&times;</span>\r\n            </Button>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>{t(\"service_area\")}</strong>{\" \"}\r\n              </label>\r\n              <textarea\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                placeholder={t(\"service_area\")}\r\n                name=\"AreaName\"\r\n                required\r\n                onChange={editHandleInput}\r\n                value={editServiceAreas.AreaName}\r\n              />\r\n            </div>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button\r\n              onClick={() => setEditModalCentered(false)}\r\n              variant=\"danger light\"\r\n            >\r\n              {t(\"close\")}\r\n            </Button>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              {t(\"update\")}{\" \"}\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Form>\r\n      </Modal>\r\n      <div className=\"row\">\r\n        <div className=\"col-xl-12 col-xxl-12 col-lg-12 col-sm-12\">\r\n          <div className=\"card\">\r\n            <div className=\"card-header border-0\">\r\n              <div>\r\n                <h4 className=\"card-title mb-2\">{t(\"service_area\")}</h4>\r\n              </div>\r\n              <div className=\"dropdown\">\r\n                <Button\r\n                  variant=\"primary\"\r\n                  type=\"button\"\r\n                  className=\"mb-2 mr-2\"\r\n                  onClick={() => setModalCentered(true)}\r\n                >\r\n                  {t(\"add_service_area\")}\r\n                </Button>\r\n              </div>\r\n            </div>\r\n            <div className=\"card-body p-0\">\r\n              <div className=\"table-responsive \">\r\n                <table className=\"table \">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>{t(\"number\")}</th>\r\n                      <th>{t(\"service_area\")}</th>\r\n                      <th>{t(\"actions\")}</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>{viewProducts_HTMLTABLE}</tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default ServiceArea;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Units\\Unit.js",["348","349","350"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { Button, Modal, Form } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as yup from \"yup\";\r\nimport { CBreadcrumb, CBreadcrumbItem } from \"@coreui/react\";\r\n\r\nconst Unit = (props) => {\r\n  // validation Start\r\n  const schema = yup\r\n    .object()\r\n    .shape({\r\n      UnitName: yup.string().required(\"This field is a required field\"),\r\n    })\r\n    .required();\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors },\r\n  } = useForm({\r\n    resolver: yupResolver(schema),\r\n  });\r\n  // Validation End\r\n  // for localization\r\n  const { t } = useTranslation();\r\n  // ID\r\n  const id = props.history.location.state.id;\r\n\r\n  // Insert Start\r\n  const [modalCentered, setModalCentered] = useState(false);\r\n  const [unitInsert, setUnitInsert] = useState({\r\n    UnitName: \"\",\r\n    brancheID: id,\r\n  });\r\n  const handleInput = (e) => {\r\n    e.persist();\r\n    setUnitInsert({ ...unitInsert, [e.target.name]: e.target.value });\r\n  };\r\n  const saveUnit = (e) => {\r\n    // e.preventDefault();\r\n    axios.post(\"/api/InsertUnits\", unitInsert).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setUnitInsert({\r\n          UnitName: \"\",\r\n          brancheID: id,\r\n        });\r\n        reset();\r\n\r\n        swal(\"Success\", res.data.message, \"success\");\r\n        setModalCentered(false);\r\n        //  this.props.history.push(\"/\")\r\n      }\r\n    });\r\n  };\r\n  // insert End\r\n  // edit Start\r\n  const [editmodalCentered, setEditModalCentered] = useState(false);\r\n  const [editUnit, setEditUnit] = useState([]);\r\n  const editHandleInput = (e) => {\r\n    e.persist();\r\n    setEditUnit({ ...editUnit, [e.target.name]: e.target.value });\r\n  };\r\n  const fetchUnit = (e, id) => {\r\n    e.preventDefault();\r\n    axios.get(`/api/EditUnits/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setEditUnit(res.data.unit);\r\n        setEditModalCentered(true);\r\n      } else if (res.data.status === 404) {\r\n        swal(\"Error\", res.data.message, \"error\");\r\n      }\r\n    });\r\n  };\r\n  const updateUnit = (e) => {\r\n    e.preventDefault();\r\n    axios.post(\"/api/UpdateUnit\", editUnit).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setEditUnit([]);\r\n        setUnitInsert([]);\r\n        swal(\"Success\", res.data.message, \"success\");\r\n        setEditModalCentered(false);\r\n        //  this.props.history.push(\"/\")\r\n      } else if (res.data.status === 404) {\r\n        swal(\"Error\", res.data.message, \"error\");\r\n      }\r\n    });\r\n  };\r\n  // Edit End\r\n  // delete Start\r\n  const deleteUnit = (e, id) => {\r\n    e.preventDefault();\r\n    swal({\r\n      title: \"Are you sure?\",\r\n      text: \"Once deleted, you will not be able to recover this imaginary file!\",\r\n      icon: \"warning\",\r\n      buttons: [t(\"cancel\"), t(\"confirm\")],\r\n      dangerMode: true,\r\n    }).then((willDelete) => {\r\n      if (willDelete) {\r\n        axios.delete(`/api/DeleteUnits/${id}`).then((res) => {\r\n          if (res.data.status === 200) {\r\n            swal(\"Success\", res.data.message, \"success\");\r\n            setUnitInsert({\r\n              UnitName: \"\",\r\n              brancheID: id,\r\n            });\r\n          } else if (res.data.status === 404) {\r\n            swal(\"Error\", res.data.message, \"error\");\r\n          }\r\n        });\r\n      } else {\r\n        swal(\"Your Data is safe now!\");\r\n      }\r\n    });\r\n  };\r\n  // delete End\r\n  //for retriving data using laravel API\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    axios.get(`/api/GetUnits/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        // console.log(res.data.fetchData);\r\n        setFetchData(res.data.fetchData);\r\n      }\r\n      setLoading(false);\r\n    });\r\n  }, [unitInsert]);\r\n\r\n  var viewProducts_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"spinner-border text-primary \" role=\"status\">\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewProducts_HTMLTABLE = fetchData.map((item, i) => {\r\n      return (\r\n        <tr key={item.id}>\r\n          <td>{i + 1}</td>\r\n\r\n          <td> {item.UnitName}</td>\r\n          <td>\r\n            <button\r\n              type=\"button\"\r\n              onClick={(e) => fetchUnit(e, item.id)}\r\n              className=\"btn btn-outline-danger btn-sm\"\r\n            >\r\n              {t(\"edit\")}\r\n            </button>\r\n            &nbsp;&nbsp;&nbsp;\r\n            <button\r\n              type=\"button\"\r\n              onClick={(e) => deleteUnit(e, item.id)}\r\n              className=\"btn btn-outline-warning btn-sm\"\r\n            >\r\n              {t(\"delete\")}\r\n            </button>\r\n          </td>\r\n        </tr>\r\n      );\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      {/* <!-- Insert  Modal --> */}\r\n      <Modal className=\"fade\" show={modalCentered}>\r\n        <Form\r\n          onSubmit={handleSubmit(saveUnit)}\r\n          method=\"POST\"\r\n          encType=\"multipart/form-data\"\r\n        >\r\n          <Modal.Header>\r\n            <Modal.Title>{t(\"add_unit\")}</Modal.Title>\r\n            <Button\r\n              onClick={() => setModalCentered(false)}\r\n              variant=\"\"\r\n              className=\"close\"\r\n            >\r\n              <span>&times;</span>\r\n            </Button>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>{t(\"unit_name\")} </strong>{\" \"}\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                {...register(\"UnitName\")}\r\n                className=\"form-control\"\r\n                placeholder={t(\"unit_name\")}\r\n                name=\"UnitName\"\r\n                onChange={handleInput}\r\n                value={unitInsert.UnitName}\r\n              />\r\n              <div className=\"text-danger\">{errors.UnitName?.message}</div>\r\n            </div>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button\r\n              onClick={() => setModalCentered(false)}\r\n              variant=\"danger light\"\r\n            >\r\n              {t(\"close\")}\r\n            </Button>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              {t(\"save\")}\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Form>\r\n      </Modal>\r\n      {/* Edit Modal */}\r\n      <Modal className=\"fade\" show={editmodalCentered}>\r\n        <Form onSubmit={updateUnit} method=\"POST\">\r\n          <Modal.Header>\r\n            <Modal.Title>{t(\"edit_unit\")} </Modal.Title>\r\n            <Button\r\n              onClick={() => setEditModalCentered(false)}\r\n              variant=\"\"\r\n              className=\"close\"\r\n            >\r\n              <span>&times;</span>\r\n            </Button>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>{t(\"unit_name\")}</strong>{\" \"}\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                placeholder={t(\"unit_name\")}\r\n                name=\"UnitName\"\r\n                required\r\n                onChange={editHandleInput}\r\n                value={editUnit.UnitName}\r\n              />\r\n            </div>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button\r\n              onClick={() => setEditModalCentered(false)}\r\n              variant=\"danger light\"\r\n            >\r\n              {t(\"close\")}\r\n            </Button>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              {t(\"update\")}{\" \"}\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Form>\r\n      </Modal>\r\n      <div className=\"row\">\r\n        <div className=\"col-xl-12 col-xxl-12 col-lg-12 col-sm-12\">\r\n          <div className=\"card\">\r\n            <div className=\"card-header border-0\">\r\n              <div>\r\n                <h4 className=\"card-title mb-2\">{t(\"units\")}</h4>\r\n              </div>\r\n              <div className=\"dropdown\">\r\n                <Button\r\n                  variant=\"primary\"\r\n                  type=\"button\"\r\n                  className=\"mb-2 mr-2\"\r\n                  onClick={() => setModalCentered(true)}\r\n                >\r\n                  {t(\"add_unit\")}\r\n                </Button>\r\n              </div>\r\n            </div>\r\n            <div className=\"card-body p-0\">\r\n              <div className=\"table-responsive \">\r\n                <table className=\"table \">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>{t(\"number\")}</th>\r\n                      <th>{t(\"unit_name\")}</th>\r\n                      <th>{t(\"actions\")}</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>{viewProducts_HTMLTABLE}</tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Unit;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Inventories\\Inventory.js",["351","352"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { Button, Modal, Form } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { CBreadcrumb, CBreadcrumbItem } from \"@coreui/react\";\r\nimport { CSmartTable } from \"@coreui/react-pro\";\r\nconst Inventory = (props) => {\r\n  // for localization\r\n  const { t } = useTranslation();\r\n\r\n  const id = props.history.location.state.id;\r\n\r\n  // edit modal\r\n  const [editmodalCentered, setEditModalCentered] = useState(false);\r\n  const [editIventory, setEditInventory] = useState([]);\r\n  const editHandleInput = (e) => {\r\n    e.persist();\r\n    setEditInventory({ ...editIventory, [e.target.name]: e.target.value });\r\n  };\r\n  const fetchUnit = (e, id) => {\r\n    e.preventDefault();\r\n    axios.get(`/api/EditInventory/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setEditInventory(res.data.intenvtory);\r\n        setEditModalCentered(true);\r\n      } else if (res.data.status === 404) {\r\n        swal(\"Error\", res.data.message, \"error\");\r\n      }\r\n    });\r\n  };\r\n  const updateInventory = (e) => {\r\n    e.preventDefault();\r\n    axios.post(\"/api/UpdateInventory\", editIventory).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setEditInventory(\"\");\r\n        swal(\"Success\", res.data.message, \"success\");\r\n        setEditModalCentered(false);\r\n        //  this.props.history.push(\"/\")\r\n      } else if (res.data.status === 404) {\r\n        swal(\"Error\", res.data.message, \"error\");\r\n      }\r\n    });\r\n  };\r\n  // edit End\r\n  // delete start\r\n  const deleteInventory = (e, id) => {\r\n    e.preventDefault();\r\n    swal({\r\n      title: \"Are you sure?\",\r\n      text: \"Once deleted, you will not be able to recover this imaginary file!\",\r\n      icon: \"warning\",\r\n      buttons: [t(\"cancel\"), t(\"confirm\")],\r\n      dangerMode: true,\r\n    }).then((willDelete) => {\r\n      if (willDelete) {\r\n        axios.delete(`/api/DeleteInventory/${id}`).then((res) => {\r\n          if (res.data.status === 200) {\r\n            setEditInventory([]);\r\n            swal(\"Success\", res.data.message, \"success\");\r\n          } else if (res.data.status === 404) {\r\n            swal(\"Error\", res.data.message, \"error\");\r\n          }\r\n        });\r\n      } else {\r\n        swal(\"Your Data is safe now!\");\r\n      }\r\n    });\r\n  };\r\n  // delete end\r\n  //for retriving data using laravel API\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    axios.get(`/api/GetInventory/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setFetchData(res.data.fetchData);\r\n      }\r\n      setLoading(false);\r\n    });\r\n  }, [editIventory, id]);\r\n  const columns = [\r\n    {\r\n      key: \"variant_name\",\r\n    },\r\n    {\r\n      key: \"Buyingquantity\",\r\n    },\r\n    {\r\n      key: \"SellingQuantity\",\r\n    },\r\n    {\r\n      key: \"buyingPrice\",\r\n    },\r\n    {\r\n      key: \"sellingPrice\",\r\n    },\r\n    {\r\n      key: \"actions\",\r\n    },\r\n  ];\r\n\r\n  var viewInventory_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"spinner-border text-primary \" role=\"status\">\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewInventory_HTMLTABLE = (\r\n      // fetchData.map((item, i) => {\r\n      // return (\r\n      <CSmartTable\r\n        activePage={1}\r\n        cleaner\r\n        // clickableRows\r\n        columns={columns}\r\n        // columnFilter\r\n        columnSorter\r\n        // footer\r\n        items={fetchData}\r\n        itemsPerPageSelect\r\n        itemsPerPage={10}\r\n        pagination\r\n        scopedColumns={{\r\n          actions: (item) => {\r\n            return (\r\n              <td>\r\n                <Link to=\"\" onClick={(e) => fetchUnit(e, item.id)}>\r\n                  <svg\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    width=\"16\"\r\n                    height=\"16\"\r\n                    fill=\"currentColor\"\r\n                    className=\"bi bi-pencil-square\"\r\n                    viewBox=\"0 0 16 16\"\r\n                  >\r\n                    <path d=\"M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z\" />\r\n                    <path\r\n                      fill-rule=\"evenodd\"\r\n                      d=\"M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z\"\r\n                    />\r\n                  </svg>\r\n                </Link>\r\n                <span> | </span>\r\n                <Link to=\"\" onClick={(e) => deleteInventory(e, item.id)}>\r\n                  <svg\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    width=\"16\"\r\n                    height=\"16\"\r\n                    fill=\"currentColor\"\r\n                    className=\"bi bi-trash\"\r\n                    viewBox=\"0 0 16 16\"\r\n                  >\r\n                    <path d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z\" />\r\n                    <path\r\n                      fill-rule=\"evenodd\"\r\n                      d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\"\r\n                    />\r\n                  </svg>\r\n                </Link>\r\n              </td>\r\n            );\r\n          },\r\n        }}\r\n        // selectable\r\n        // sorterValue={{ column: 'name', state: 'asc' }}\r\n        tableFilter\r\n        // tableHeadProps={{\r\n        //   color: 'primary',\r\n        // }}\r\n        tableProps={{\r\n          striped: true,\r\n          hover: true,\r\n        }}\r\n      />\r\n    );\r\n    //     )\r\n    // })\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      {/* Edit Modal */}\r\n      <Modal\r\n        className=\"fade bd-example-modal-lg\"\r\n        show={editmodalCentered}\r\n        size=\"lg\"\r\n      >\r\n        <Form onSubmit={updateInventory} method=\"POST\">\r\n          <Modal.Header>\r\n            <Modal.Title> {t(\"edit_inventory\")} </Modal.Title>\r\n            <Button\r\n              onClick={() => setEditModalCentered(false)}\r\n              variant=\"\"\r\n              className=\"close\"\r\n            >\r\n              <span>&times;</span>\r\n            </Button>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <div className=\"row\">\r\n              <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    {\" \"}\r\n                    <strong>{t(\"variant_name\")}</strong>{\" \"}\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    placeholder={t(\"variant_name\")}\r\n                    name=\"variant_name\"\r\n                    required\r\n                    onChange={editHandleInput}\r\n                    value={editIventory.variant_name}\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    {\" \"}\r\n                    <strong>{t(\"buying_quantity\")}</strong>{\" \"}\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    placeholder={t(\"buying_quantity\")}\r\n                    name=\"Buyingquantity\"\r\n                    required\r\n                    onChange={editHandleInput}\r\n                    value={editIventory.Buyingquantity}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    {\" \"}\r\n                    <strong>{t(\"buying_price\")}</strong>{\" \"}\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    placeholder={t(\"buying_price\")}\r\n                    name=\"buyingPrice\"\r\n                    required\r\n                    onChange={editHandleInput}\r\n                    value={editIventory.buyingPrice}\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    {\" \"}\r\n                    <strong>{t(\"selling_price\")}</strong>{\" \"}\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    placeholder={t(\"selling_price\")}\r\n                    name=\"sellingPrice\"\r\n                    required\r\n                    onChange={editHandleInput}\r\n                    value={editIventory.sellingPrice}\r\n                  />\r\n                </div>\r\n              </div>\r\n              {/* <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                                <div className=\"form-group\">\r\n                                    <label className=\"mb-1 \"> <strong>SellingQuantity</strong> </label>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        className=\"form-control\"\r\n                                        placeholder=\"SellingQuantity\"\r\n                                        name=\"SellingQuantity\"\r\n                                        required\r\n                                        onChange={editHandleInput}  \r\n                                        value={editIventory.SellingQuantity}\r\n                                    />\r\n                                </div>\r\n                            </div> */}\r\n            </div>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button\r\n              onClick={() => setEditModalCentered(false)}\r\n              variant=\"danger light\"\r\n            >\r\n              {t(\"close\")}\r\n            </Button>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              {\" \"}\r\n              {t(\"update\")}{\" \"}\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Form>\r\n      </Modal>\r\n\r\n      {viewInventory_HTMLTABLE}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Inventory;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Categories\\Category.js",["353","354","355","356","357","358","359"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { Button, Modal, Form } from \"react-bootstrap\";\r\nimport { base_url, port } from \"../../../Consts\";\r\n/// Bootstrap\r\nimport { Row, Col, Card } from \"react-bootstrap\";\r\nimport {\r\n  Link,\r\n  useRouteMatch,\r\n  Switch,\r\n  BrowserRouter as Router,\r\n} from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as yup from \"yup\";\r\nimport {\r\n  CBreadcrumb,\r\n  CBreadcrumbItem,\r\n  CDropdown,\r\n  CDropdownToggle,\r\n  CDropdownMenu,\r\n} from \"@coreui/react\";\r\nimport PrivateRoute from \"../PrivateRoute\";\r\nimport SubCategory from \"./SubCategory\";\r\n\r\nconst Category = (props) => {\r\n  const { path, url } = useRouteMatch();\r\n\r\n  // valiation start\r\n  const schema = yup\r\n    .object()\r\n    .shape({\r\n      CategoryName: yup.string().required(\"This field is a required field\"),\r\n    })\r\n    .required();\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors },\r\n  } = useForm({\r\n    resolver: yupResolver(schema),\r\n  });\r\n  // validation end\r\n\r\n  // for localization\r\n  const { t } = useTranslation();\r\n  // ID\r\n  const id = props.history.location.state.id;\r\n  const BrancheName = props.history.location.state.BrancheName;\r\n  // insert Start\r\n  const [modalCentered, setModalCentered] = useState(false);\r\n  const [categoryInsert, setCategoryInsert] = useState({\r\n    CategoryName: \"\",\r\n    branchID: id,\r\n  });\r\n  const [imageState, setImageState] = useState([]);\r\n\r\n  const handleInput = (e) => {\r\n    e.persist();\r\n    setCategoryInsert({ ...categoryInsert, [e.target.name]: e.target.value });\r\n  };\r\n  const handleImage = (e) => {\r\n    setImageState({ ...imageState, CategoryIcon: e.target.files[0] });\r\n  };\r\n  const saveMenu = (e) => {\r\n    // e.preventDefault();\r\n    const formData = new FormData();\r\n    formData.append(\"CategoryIcon\", imageState.CategoryIcon);\r\n    formData.append(\"CategoryName\", categoryInsert.CategoryName);\r\n    formData.append(\"branchID\", categoryInsert.branchID);\r\n\r\n    axios.post(\"/api/InsertCategories\", formData).then((res) => {\r\n      if (res.data.status === 200) {\r\n        // console.log(res.data.status);\r\n        setCategoryInsert({\r\n          CategoryName: \"\",\r\n          branchID: id,\r\n        });\r\n        reset();\r\n        swal(\"Success\", res.data.message, \"success\");\r\n        setModalCentered(false);\r\n        //  this.props.history.push(\"/\")\r\n      }\r\n    });\r\n  };\r\n  // insert End\r\n  // edit start\r\n  const [editmodalCentered, setEditModalCentered] = useState(false);\r\n  const [editMenu, setEditMenu] = useState(\"\");\r\n  const editHandleInput = (e) => {\r\n    e.persist();\r\n    setEditMenu({ ...editMenu, [e.target.name]: e.target.value });\r\n  };\r\n  const fetchMenus = (e, id) => {\r\n    e.preventDefault();\r\n    axios.get(`/api/EditCategories/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setEditMenu(res.data.menu);\r\n        setEditModalCentered(true);\r\n      } else if (res.data.status === 404) {\r\n        swal(\"Error\", res.data.message, \"error\");\r\n      }\r\n    });\r\n  };\r\n  const updateMenu = (e) => {\r\n    e.preventDefault();\r\n    const formData = new FormData();\r\n    formData.append(\"CategoryIcon\", imageState.CategoryIcon);\r\n    formData.append(\"CategoryName\", editMenu.CategoryName);\r\n    formData.append(\"branchID\", editMenu.branchID);\r\n    formData.append(\"id\", editMenu.id);\r\n    axios.post(\"/api/UpdateCategories\", formData).then((res) => {\r\n      if (res.data.status === 200) {\r\n        // console.log(res.data.status);\r\n        setEditMenu(\"\");\r\n        swal(\"Success\", res.data.message, \"success\");\r\n        setEditModalCentered(false);\r\n        //  this.props.history.push(\"/\")\r\n      } else if (res.data.status === 404) {\r\n        swal(\"Error\", res.data.message, \"error\");\r\n      }\r\n    });\r\n  };\r\n  // edit end\r\n  // delete start\r\n  const deleteMenu = (e, id) => {\r\n    e.preventDefault();\r\n    swal({\r\n      title: \"Are you sure?\",\r\n      text: \"Once deleted, you will not be able to recover this imaginary file!\",\r\n      icon: \"warning\",\r\n      buttons: [t(\"cancel\"), t(\"confirm\")],\r\n      dangerMode: true,\r\n    }).then((willDelete) => {\r\n      if (willDelete) {\r\n        axios.delete(`/api/DeleteCategories/${id}`).then((res) => {\r\n          if (res.data.status === 200) {\r\n            setCategoryInsert([]);\r\n            swal(\"Success\", res.data.message, \"success\");\r\n            // thisClicked.closest(\"tr\").remove();\r\n          } else if (res.data.status === 404) {\r\n            swal(\"Error\", res.data.message, \"error\");\r\n          }\r\n        });\r\n      } else {\r\n        swal(\"Your Data is safe now!\");\r\n      }\r\n    });\r\n  };\r\n  // delete end\r\n  //for retriving data using laravel API\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    axios.get(`/api/GetCategories/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setFetchData(res.data.fetchData);\r\n      }\r\n      setLoading(false);\r\n    });\r\n  }, [categoryInsert, editMenu, id]);\r\n\r\n  var viewProducts_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"spinner-border text-primary \" role=\"status\">\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewProducts_HTMLTABLE = fetchData.map((item, i) => {\r\n      return (\r\n        <Col xl={3} key={item.id}>\r\n          <Card>\r\n            <Card.Header>\r\n              <h4 className=\"card-intro-title\">{item.CategoryName}</h4>\r\n            </Card.Header>\r\n            <Card.Body>\r\n              <div className=\"text-center\">\r\n                <Link\r\n                  to={{\r\n                    pathname: `${url}/sub-category`,\r\n                    state: { id: item.id, CategoryName: item.CategoryName },\r\n                  }}\r\n                >\r\n                  <span>\r\n                    <img\r\n                      style={{ height: \"100px\", objectFit: \"contain\" }}\r\n                      src={`http://${base_url}:${port}/images/catagories/${item.CategoryIcon}`}\r\n                      className=\"w-40\"\r\n                      alt=\"Menu\"\r\n                    />\r\n                  </span>\r\n                </Link>\r\n              </div>\r\n            </Card.Body>\r\n\r\n            <Card.Footer className=\"text-center\">\r\n              <CDropdown variant=\"btn-group\">\r\n                {/* <CButton color=\"primary\" size=\"sm\"></CButton> */}\r\n                <CDropdownToggle\r\n                  color=\"primary\"\r\n                  size=\"sm\"\r\n                  shape=\"rounded\"\r\n                  caret={false}\r\n                >\r\n                  <svg\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    width=\"16\"\r\n                    height=\"16\"\r\n                    fill=\"currentColor\"\r\n                    className=\"bi bi-three-dots\"\r\n                    viewBox=\"0 0 16 16\"\r\n                  >\r\n                    <path d=\"M3 9.5a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm5 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm5 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3z\" />\r\n                  </svg>\r\n                </CDropdownToggle>\r\n                <CDropdownMenu>\r\n                  <div className=\"mx-3 my-2\">\r\n                    <Link to=\"\" onClick={(e) => fetchMenus(e, item.id)}>\r\n                      <svg\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                        width=\"16\"\r\n                        height=\"16\"\r\n                        fill=\"currentColor\"\r\n                        className=\"bi bi-pencil-square\"\r\n                        viewBox=\"0 0 16 16\"\r\n                      >\r\n                        <path d=\"M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z\" />\r\n                        <path\r\n                          fillRule=\"evenodd\"\r\n                          d=\"M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z\"\r\n                        />\r\n                      </svg>\r\n                      <span> {t(\"edit\")}</span>\r\n                    </Link>\r\n                  </div>\r\n\r\n                  <div className=\"mx-3 my-2\">\r\n                    <Link to=\"\" onClick={(e) => deleteMenu(e, item.id)}>\r\n                      <svg\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                        width=\"16\"\r\n                        height=\"16\"\r\n                        fill=\"currentColor\"\r\n                        className=\"bi bi-trash\"\r\n                        viewBox=\"0 0 16 16\"\r\n                      >\r\n                        <path d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z\" />\r\n                        <path\r\n                          fillRule=\"evenodd\"\r\n                          d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\"\r\n                        />\r\n                      </svg>\r\n                      <span> {t(\"delete\")}</span>\r\n                    </Link>\r\n                  </div>\r\n                  <div className=\"mx-3 my-2\">\r\n                    <Link\r\n                      to={{\r\n                        pathname: `${url}/sub-category`,\r\n                        state: { id: item.id, CategoryName: item.CategoryName },\r\n                      }}\r\n                    >\r\n                      <svg\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                        width=\"16\"\r\n                        height=\"16\"\r\n                        fill=\"currentColor\"\r\n                        className=\"bi bi-subtract\"\r\n                        viewBox=\"0 0 16 16\"\r\n                      >\r\n                        <path d=\"M0 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v2h2a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2v-2H2a2 2 0 0 1-2-2V2zm2-1a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H2z\" />\r\n                      </svg>\r\n                      <span> {t(\"sub_category\")}</span>\r\n                    </Link>\r\n                  </div>\r\n                </CDropdownMenu>\r\n              </CDropdown>\r\n            </Card.Footer>\r\n          </Card>\r\n        </Col>\r\n      );\r\n    });\r\n  }\r\n  return (\r\n    <Fragment>\r\n      <CBreadcrumb style={{ \"--cui-breadcrumb-divider\": \"'>'\" }}>\r\n        <Link className=\"font-weight-bold\">{t(\"categories\")}</Link>\r\n      </CBreadcrumb>\r\n      {/* <!-- Insert  Modal --> */}\r\n\r\n      <Modal className=\"fade\" show={modalCentered}>\r\n        <Form\r\n          onSubmit={handleSubmit(saveMenu)}\r\n          method=\"POST\"\r\n          encType=\"multipart/form-data\"\r\n        >\r\n          <Modal.Header>\r\n            <Modal.Title>{t(\"add_category\")} </Modal.Title>\r\n            <Button\r\n              onClick={() => setModalCentered(false)}\r\n              variant=\"\"\r\n              className=\"close\"\r\n            >\r\n              <span>&times;</span>\r\n            </Button>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>\r\n                  {t(\"branch_name\")}: {props.location.branchName}\r\n                </strong>{\" \"}\r\n              </label>\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>{t(\"category_icon\")}</strong>{\" \"}\r\n              </label>\r\n              <div className=\"input-group\">\r\n                <div className=\"custom-file\">\r\n                  <input\r\n                    type=\"file\"\r\n                    className=\"form-control\"\r\n                    placeholder={t(\"category_icon\")}\r\n                    name=\"CategoryIcon\"\r\n                    required\r\n                    onChange={handleImage}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>{t(\"category_name\")}</strong>{\" \"}\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                {...register(\"CategoryName\")}\r\n                className=\"form-control\"\r\n                placeholder={t(\"category_name\")}\r\n                name=\"CategoryName\"\r\n                onChange={handleInput}\r\n                value={categoryInsert.CategoryName}\r\n              />\r\n              <div className=\"text-danger\">{errors.CategoryName?.message}</div>\r\n            </div>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button\r\n              onClick={() => setModalCentered(false)}\r\n              variant=\"danger light\"\r\n            >\r\n              {t(\"close\")}\r\n            </Button>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              {t(\"save\")}\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Form>\r\n      </Modal>\r\n      {/* Edit Modal */}\r\n      <Modal className=\"fade\" show={editmodalCentered}>\r\n        <Form onSubmit={updateMenu} method=\"POST\">\r\n          <Modal.Header>\r\n            <Modal.Title>{t(\"edit_category\")}</Modal.Title>\r\n            <Button\r\n              onClick={() => setEditModalCentered(false)}\r\n              variant=\"\"\r\n              className=\"close\"\r\n            >\r\n              <span>&times;</span>\r\n            </Button>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>{t(\"edit_category\")}</strong>{\" \"}\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                disabled=\"disabled\"\r\n                className=\"form-control\"\r\n                name=\"id\"\r\n                required\r\n                onChange={editHandleInput}\r\n                value={editMenu.id}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>{t(\"category_icon\")}</strong>{\" \"}\r\n              </label>\r\n              <div className=\"input-group\">\r\n                <div className=\"custom-file\">\r\n                  <input\r\n                    type=\"file\"\r\n                    className=\"form-control\"\r\n                    placeholder={t(\"category_icon\")}\r\n                    name=\"CategoryIcon\"\r\n                    onChange={handleImage}\r\n                  />\r\n                  <img\r\n                    src={`http://${base_url}:${port}/images/catagories/${editMenu.CategoryIcon}`}\r\n                    width=\"70\"\r\n                    alt=\" \"\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>{t(\"category_name\")}</strong>{\" \"}\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                placeholder={t(\"category_name\")}\r\n                name=\"CategoryName\"\r\n                required\r\n                onChange={editHandleInput}\r\n                value={editMenu.CategoryName}\r\n              />\r\n            </div>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button\r\n              onClick={() => setEditModalCentered(false)}\r\n              variant=\"danger light\"\r\n            >\r\n              {t(\"close\")}\r\n            </Button>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              {t(\"update\")}{\" \"}\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Form>\r\n      </Modal>\r\n      <Row>\r\n        {viewProducts_HTMLTABLE}\r\n        <div className=\"col-xl-3 col-lg-4 col-sm-4 \">\r\n          <div className=\"card overflow-hidden \">\r\n            <div\r\n              className=\"card-body d-flex justify-content-center text-center\"\r\n              style={{ border: \"2px dashed red\" }}\r\n            >\r\n              <div className=\"align-self-center text-center\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-outline-primary\"\r\n                  onClick={() => setModalCentered(true)}\r\n                >\r\n                  <svg\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    width=\"32\"\r\n                    height=\"32\"\r\n                    fill=\"currentColor\"\r\n                    className=\"bi bi-plus\"\r\n                    viewBox=\"0 0 16 16\"\r\n                  >\r\n                    <path d=\"M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z\" />\r\n                  </svg>\r\n                  {t(\"add_category\")}\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Row>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Category;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Companies\\Company.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Products\\Product.js",["360","361","362"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { base_url, port } from \"../../../Consts\";\r\nimport { CSmartTable } from \"@coreui/react-pro\";\r\nimport { useRouteMatch } from \"react-router-dom\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Tooltip from \"@mui/material/Tooltip\";\r\nimport AutoAwesomeMotionIcon from \"@mui/icons-material/AutoAwesomeMotion\";\r\nimport EditIcon from \"@mui/icons-material/Edit\";\r\nimport Chip from \"@mui/material/Chip\";\r\nimport Stack from \"@mui/material/Stack\";\r\nconst Product = (props) => {\r\n  const { path, url } = useRouteMatch();\r\n\r\n  // for localization\r\n  const { t } = useTranslation();\r\n  // const subMenuId = atob(props.match.params.id)\r\n  const branchId = props.history.location.state.id;\r\n\r\n  // delete section\r\n  const deleteProduct = (e, id) => {\r\n    e.preventDefault();\r\n    swal({\r\n      title: \"Are you sure?\",\r\n      text: \"Once deleted, you will not be able to recover this imaginary file!\",\r\n      icon: \"warning\",\r\n      buttons: [t(\"cancel\"), t(\"confirm\")],\r\n      dangerMode: true,\r\n    }).then((willDelete) => {\r\n      if (willDelete) {\r\n        axios.delete(`/api/DeleteProducts/${id}`).then((res) => {\r\n          if (res.data.status === 200) {\r\n            swal(\"Success\", res.data.message, \"success\");\r\n          } else if (res.data.status === 404) {\r\n            swal(\"Error\", res.data.message, \"error\");\r\n          }\r\n        });\r\n      } else {\r\n        swal(\"Your Data is safe now!\");\r\n      }\r\n    });\r\n  };\r\n  // delete End\r\n  //for retriving data using laravel API\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  useEffect(() => {\r\n    axios.get(`/api/GetProducts/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setFetchData(res.data.fetchData);\r\n      }\r\n      setLoading(false);\r\n    });\r\n  }, []);\r\n\r\n  const columns = [\r\n    {\r\n      key: \"image\",\r\n    },\r\n    {\r\n      key: \"ProductName\",\r\n    },\r\n    {\r\n      key: \"Description\",\r\n    },\r\n    {\r\n      key: \"price\",\r\n    },\r\n    {\r\n      key: \"stock\",\r\n    },\r\n    {\r\n      key: \"ingredients\",\r\n    },\r\n    {\r\n      key: \"extras\",\r\n    },\r\n    {\r\n      key: \"recommendations\",\r\n    },\r\n    {\r\n      key: \"CategoryName\",\r\n    },\r\n    {\r\n      key: \"SubCategoryName\",\r\n    },\r\n    {\r\n      key: \"actions\",\r\n    },\r\n  ];\r\n  var viewProducts_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"spinner-border text-primary \" role=\"status\">\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewProducts_HTMLTABLE = (\r\n      <CSmartTable\r\n        activePage={1}\r\n        cleaner\r\n        // clickableRows\r\n        columns={columns}\r\n        // columnFilter\r\n        columnSorter\r\n        footer\r\n        items={fetchData}\r\n        itemsPerPageSelect\r\n        itemsPerPage={5}\r\n        pagination\r\n        scopedColumns={{\r\n          ingredients: (item) => {\r\n            return (\r\n              <td>\r\n                <div className=\"row m-3\">\r\n                  {JSON.parse(item.ingredients)?.map((item, i) => {\r\n                    return (\r\n                      <Stack direction=\"row\" className=\"m-1\" spacing={1}>\r\n                        <Chip\r\n                          label={item.label}\r\n                          // color=\"primary\"\r\n                          variant=\"outlined\"\r\n                        />\r\n                      </Stack>\r\n                    );\r\n                  })}\r\n                </div>\r\n              </td>\r\n            );\r\n          },\r\n          extras: (item) => {\r\n            return (\r\n              <td>\r\n                <div className=\"row m-3\">\r\n                  {JSON.parse(item.extras)?.map((item, i) => {\r\n                    return (\r\n                      <Stack direction=\"row\" className=\"m-1\" spacing={1}>\r\n                        <Chip\r\n                          label={item.label + \"( +\" + item.price + \".00\" + \" )\"}\r\n                          // color=\"primary\"\r\n                          variant=\"outlined\"\r\n                        />\r\n                      </Stack>\r\n                    );\r\n                  })}\r\n                </div>\r\n              </td>\r\n            );\r\n          },\r\n          recommendations: (item) => {\r\n            return (\r\n              <td>\r\n                <div className=\"row m-3\">\r\n                  {JSON.parse(item.recommendations)?.map((item, i) => {\r\n                    return (\r\n                      <Stack direction=\"row\" className=\"m-1\" spacing={1}>\r\n                        <Chip\r\n                          label={item.label}\r\n                          // color=\"primary\"\r\n                          variant=\"outlined\"\r\n                        />\r\n                      </Stack>\r\n                    );\r\n                  })}\r\n                </div>\r\n              </td>\r\n            );\r\n          },\r\n          image: (item) => {\r\n            return (\r\n              <td>\r\n                <img\r\n                  src={`http://${base_url}:${port}/images/products/${item.image}`}\r\n                  className=\"img-thumbnail\"\r\n                  alt=\"\"\r\n                  style={{\r\n                    width: \"100px\",\r\n                    height: \"100px\",\r\n                    objectFit: \"contain\",\r\n                  }}\r\n                />\r\n              </td>\r\n            );\r\n          },\r\n          actions: (item) => {\r\n            return (\r\n              <td style={{ width: \"20%\" }}>\r\n                <Link\r\n                  to={{\r\n                    pathname: `${url}/variants`,\r\n                    id: item.id,\r\n                    ProductName: item.ProductName,\r\n                    state: { id: item.id },\r\n                  }}\r\n                >\r\n                  <Tooltip title=\"Variants\">\r\n                    <IconButton>\r\n                      <AutoAwesomeMotionIcon fontSize=\"small\" />\r\n                    </IconButton>\r\n                  </Tooltip>\r\n                </Link>\r\n                <Link\r\n                  to={{\r\n                    pathname: `${url}/edit-product`,\r\n                    state: { id: branchId, productId: item.id },\r\n                  }}\r\n                  // onClick={(e) => fetchProduct(e, item.id)}\r\n                >\r\n                  <Tooltip title=\"Edit\">\r\n                    <IconButton>\r\n                      <EditIcon fontSize=\"small\" />\r\n                    </IconButton>\r\n                  </Tooltip>\r\n                </Link>\r\n                <Link to=\"\" onClick={(e) => deleteProduct(e, item.id)}>\r\n                  <Tooltip title=\"Delete\">\r\n                    <IconButton>\r\n                      <DeleteIcon fontSize=\"small\" />\r\n                    </IconButton>\r\n                  </Tooltip>\r\n                </Link>\r\n              </td>\r\n            );\r\n          },\r\n        }}\r\n        // selectable\r\n        // sorterValue={{ column: 'name', state: 'asc' }}\r\n        tableFilter\r\n        // tableHeadProps={{\r\n        //   color: \"primary\",\r\n        // }}\r\n        tableProps={{\r\n          striped: true,\r\n          hover: true,\r\n        }}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Fragment>\r\n        <div style={{ overflowX: \"scroll\" }}>\r\n          <div className=\"float-right\">\r\n            <Link\r\n              className=\"btn btn-primary mb-2 mr-2\"\r\n              to={{\r\n                pathname: `${url}/add-product`,\r\n                state: { id: branchId },\r\n              }}\r\n            >\r\n              {t(\"add_product\")}\r\n            </Link>\r\n          </div>\r\n\r\n          {viewProducts_HTMLTABLE}\r\n        </div>\r\n      </Fragment>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Product;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\layouts\\Footer.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Dashboard\\Profile\\Profile.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Dashboard\\Home\\Home.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\layouts\\nav\\index.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Variants\\Grid.js",["363","364","365","366","367","368","369","370","371","372","373","374","375"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport axios from \"axios\";\r\nimport { base_url, port } from \"../../../Consts\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Tooltip from \"@mui/material/Tooltip\";\r\nconst VariantsLine = (props) => {\r\n  const { items, filterAttributes, productid, setVarantGrid } = props;\r\n  const [values, setValues] = useState(items);\r\n  if (Object.keys(items).length !== Object.keys(values).length) {\r\n    setValues(items);\r\n  }\r\n\r\n  let [errors, setErrors] = useState({});\r\n  useEffect(() => {\r\n    setVarantGrid({\r\n      ...values,\r\n    });\r\n    // setValues(items);\r\n  }, [values]);\r\n  const genrateSku = () => {\r\n    let sku = productid + \"-\";\r\n    let c = 1;\r\n    filterAttributes.map((atter) => {\r\n      if (values[atter.label] != \"\") {\r\n        if (c == filterAttributes.length) {\r\n          sku += values[atter.label];\r\n        } else {\r\n          sku += values[atter.label] + \"-\";\r\n        }\r\n      }\r\n      c++;\r\n    });\r\n\r\n    return sku;\r\n  };\r\n  const Change = (event) => {\r\n    if (event.target.name == \"image\") {\r\n      uploadImage(event);\r\n    } else {\r\n      setValues({\r\n        ...values,\r\n        [event.target.name]: event.target.value,\r\n      });\r\n    }\r\n    // console.log(values);\r\n  };\r\n  const uploadImage = (event) => {\r\n    const formData = new FormData();\r\n    for (let i = 0; i < event.target.files.length; i++) {\r\n      formData.append(\"file[]\", event.target.files[i]);\r\n    }\r\n    const images = [];\r\n\r\n    axios.post(\"/api/uploadImage\", formData).then((res) => {\r\n      if (res.data.status === 200) {\r\n        values.image.map((item) => {\r\n          images.push(item);\r\n        });\r\n        res.data.filenames.map((item) => {\r\n          images.push(item);\r\n        });\r\n        setValues({\r\n          ...values,\r\n          image: images,\r\n        });\r\n      }\r\n    });\r\n  };\r\n  const removeImage = (e, image) => {\r\n    e.preventDefault();\r\n    axios.post(`/api/removeImage/${image}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setValues({\r\n          ...values,\r\n          image: values.image.filter((item) => item !== image),\r\n        });\r\n        // setImagesName(imagesName.filter((item) => item !== image));\r\n      }\r\n    });\r\n  };\r\n  const changeSku = (event) => {\r\n    const name = event.target.name;\r\n    const check = filterAttributes.some((attribute) => {\r\n      return attribute.label === name;\r\n    });\r\n\r\n    if (!check) {\r\n      const error = {};\r\n      if (isNaN(event.target.value)) {\r\n        error[name] = true;\r\n        error[name + \"message\"] = \"Please Enter A Real Number\";\r\n        setErrors({ ...errors, ...error });\r\n      } else {\r\n        error[name] = false;\r\n        error[name + \"message\"] = \"\";\r\n        setErrors({ ...errors, ...error });\r\n      }\r\n    }\r\n    let sku = genrateSku();\r\n\r\n    if (sku != \"\") {\r\n      setValues({\r\n        ...values,\r\n        sku: sku,\r\n      });\r\n    }\r\n    console.log({\r\n      [event.target.name]: event.target.value,\r\n      ...values,\r\n      sku: sku,\r\n    });\r\n  };\r\n\r\n  // console.log(items);\r\n  // console.log(values);\r\n  const outputs = [];\r\n  for (const [key, value] of Object.entries(values)) {\r\n    if (key != \"postion\") {\r\n      outputs.push(\r\n        <div className=\"col-xl-2 col-lg-2 col-sm-2 p-4  \">\r\n          <input\r\n            className={\r\n              errors[key] ? \" form-control is-invalid\" : \"form-control\"\r\n            }\r\n            disabled={key == \"sku\"}\r\n            value={key == \"image\" ? \"\" : value}\r\n            onBlur={(event) => {\r\n              changeSku(event);\r\n            }}\r\n            onChange={(event) => Change(event)}\r\n            name={key}\r\n            type={key == \"image\" ? \"file\" : \"\"}\r\n            multiple\r\n          ></input>\r\n          {errors[key] ? (\r\n            <div className=\"invalid-feedback\">{errors[key + \"message\"]}</div>\r\n          ) : null}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      <div className=\"col-xl-12 col-lg-12 col-sm-12 \">\r\n        <div className=\"row\">{outputs}</div>\r\n      </div>\r\n      <div className=\"col-xl-12 col-lg-12 col-sm-12 \">\r\n        <div className=\"row\">\r\n          {values.image?.map((photo) => {\r\n            return (\r\n              <div className=\"col-xl-2 col-lg-2 col-sm-2\" key={photo}>\r\n                <div className=\"card \">\r\n                  <div className=\"text-center\">\r\n                    <img\r\n                      className=\"w-100\"\r\n                      src={`http://${base_url}:${port}/images/variants_pics/${photo}`}\r\n                      alt=\"\"\r\n                      key={photo}\r\n                      style={{\r\n                        // width: \"100px\",\r\n                        height: \"100px\",\r\n                        objectFit: \"contain\",\r\n                      }}\r\n                    />\r\n                  </div>\r\n\r\n                  <div className=\"card-footer pt-0 pb-0 text-center\">\r\n                    <div className=\"row\">\r\n                      <Tooltip title=\"Delete\">\r\n                        <IconButton onClick={(e) => removeImage(e, photo)}>\r\n                          <DeleteIcon fontSize=\"small\" />\r\n                        </IconButton>\r\n                      </Tooltip>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst VariantsGrid = (props) => {\r\n  const { t } = useTranslation();\r\n\r\n  const { filterAttributes, numberOfVar, productid, getJSONVaraints, recheck } =\r\n    props;\r\n  const [varintGrid, setVariantGrid] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (numberOfVar.length !== 0) {\r\n      setVariantGrid(numberOfVar);\r\n    }\r\n  }, [numberOfVar]);\r\n  const vars = numberOfVar.map((item, i) => (\r\n    <VariantsLine\r\n      key={i}\r\n      recheck={recheck}\r\n      key={item.postion}\r\n      setVarantGrid={(item) => setVarantGrid(item)}\r\n      items={item}\r\n      productid={productid}\r\n      filterAttributes={filterAttributes}\r\n    ></VariantsLine>\r\n  ));\r\n\r\n  const setVarantGrid = (item) => {\r\n    if (item.sku !== \"\") {\r\n      let modifyVariant = varintGrid;\r\n\r\n      modifyVariant[item.postion] = item;\r\n      setVariantGrid(modifyVariant);\r\n      getJSONVaraints(JSON.stringify(varintGrid));\r\n    } else {\r\n      console.log(\"fssds\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"col-xl-12 col-lg-12 col-sm-12 \">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-2  p-4\">{t(\"sku\")}</div>\r\n          <div className=\"col-md-2  p-4\">{t(\"price\")}</div>\r\n          <div className=\"col-md-2  p-4\">{t(\"stock\")}</div>\r\n          <div className=\"col-md-2  p-4\">{t(\"image\")}</div>\r\n\r\n          {filterAttributes?.map((sec, i) => (\r\n            <div className=\"col-md-2  p-4\" key={i}>\r\n              {sec.label}\r\n            </div>\r\n          ))}\r\n        </div>\r\n        {vars}\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\nexport default VariantsGrid;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\layouts\\PageTitle.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\layouts\\nav\\Header.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\layouts\\nav\\NavHader.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\layouts\\nav\\SideBar.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Thrid\\Main.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\First\\Main.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\EditTheme.js",["376","377","378"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  CBreadcrumb,\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CRow,\r\n  CFormLabel,\r\n  CCol,\r\n} from \"@coreui/react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport circle_menu_button from \"../../../images/hellomenu/circle_menu_button.png\";\r\nimport pill_menu_button from \"../../../images/hellomenu/pill_menu_button.png\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport Switch from \"@mui/material/Switch\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { FormControlLabel, RadioGroup, Radio } from \"@mui/material\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst EditTheme = (props) => {\r\n  const { t } = useTranslation();\r\n  const history = useHistory();\r\n  const id = props.history.location.state.id;\r\n\r\n  const [homeScreen, setHomeScreen] = useState(false);\r\n  const [menuScreen, setMenuScreen] = useState(false);\r\n  const [buttonShow, setButtonShow] = useState(1);\r\n  const [imageState, setImageState] = useState([]);\r\n  const handleImage = (e) => {\r\n    setImageState({ ...imageState, HomeScreenBackground: e.target.files[0] });\r\n  };\r\n  const [imageStateMenu, setImageStateMenu] = useState([]);\r\n  const handleImageMenu = (e) => {\r\n    setImageStateMenu({\r\n      ...imageStateMenu,\r\n      MenuScreenBackground: e.target.files[0],\r\n    });\r\n  };\r\n  // update Start\r\n  const [themes, setThemes] = useState([]);\r\n  const handleInput = (e) => {\r\n    e.persist();\r\n    setThemes({ ...themes, [e.target.name]: e.target.value });\r\n  };\r\n  const update = (e) => {\r\n    e.preventDefault();\r\n    // console.log(themes);\r\n    const formData = new FormData();\r\n    formData.append(\"HomeScreenBackground\", imageState.HomeScreenBackground);\r\n    formData.append(\r\n      \"MenuScreenBackground\",\r\n      imageStateMenu.MenuScreenBackground\r\n    );\r\n    formData.append(\"ThemeName\", themes.ThemeName);\r\n    // formData.append(\"Orientation\", themes.Orientation);\r\n    // formData.append(\"MenuStructure\", themes.MenuStructure);\r\n    formData.append(\"TextColor\", themes.TextColor);\r\n    formData.append(\"BackgroundColor\", themes.BackgroundColor);\r\n    formData.append(\"HighlightColor\", themes.HighlightColor);\r\n    // formData.append(\"QRCodeColor\", themes.QRCodeColor);\r\n    // formData.append(\"QRCodeBackgroundColor\", themes.QRCodeBackgroundColor);\r\n    formData.append(\"HomeScreenBackground\", themes.HomeScreenBackground);\r\n    formData.append(\"MenuScreenBackground\", themes.MenuScreenBackground);\r\n    formData.append(\"ShowButton\", themes.ShowButton);\r\n    formData.append(\"ButtonShape\", themes.ButtonShape);\r\n    axios.post(`/api/UpdateTheme/${id}`, formData).then((res) => {\r\n      if (res.data.status === 200) {\r\n        swal(\"Success\", res.data.message, \"success\");\r\n        // setThemes([]);\r\n        // setImageStateMenu([]);\r\n        // setImageState([]);\r\n      }\r\n    });\r\n  };\r\n  // update End\r\n\r\n  useEffect(() => {\r\n    axios.get(`/api/EditTheme/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setThemes(res.data.data);\r\n      }\r\n    });\r\n  }, []);\r\n  return (\r\n    <>\r\n      <div className=\"\">\r\n        <Form onSubmit={update} method=\"POST\" encType=\"multipart/form-data\">\r\n          <div className=\"row\">\r\n            <div className=\"col-12 mb-2\">\r\n              <input\r\n                type=\"text\"\r\n                style={{ border: \"none\" }}\r\n                value={themes.ThemeName}\r\n                className=\"form-control\"\r\n                placeholder={t(\"theme_name\")}\r\n                onChange={handleInput}\r\n                value={themes.ThemeName}\r\n                name=\"ThemeName\"\r\n              />\r\n            </div>\r\n            <div className=\"col-6\">\r\n              <CCard>\r\n                <CCardHeader component=\"h5\">{t(\"theme_colors\")}</CCardHeader>\r\n                <CCardBody>\r\n                  <CRow className=\"mb-3\">\r\n                    <CFormLabel\r\n                      htmlFor=\"staticEmail\"\r\n                      className=\"col-sm-6 col-form-label\"\r\n                    >\r\n                      {t(\"text_color\")}\r\n                    </CFormLabel>\r\n                    <CCol sm={6} className=\"text-center\">\r\n                      <input\r\n                        type=\"color\"\r\n                        onChange={handleInput}\r\n                        value={themes.TextColor}\r\n                        id=\"favcolor\"\r\n                        name=\"TextColor\"\r\n                      />\r\n                    </CCol>\r\n                  </CRow>\r\n                  <CRow className=\"mb-3\">\r\n                    <CFormLabel\r\n                      htmlFor=\"inputPassword\"\r\n                      className=\"col-sm-6 col-form-label\"\r\n                    >\r\n                      {t(\"background_color\")}\r\n                    </CFormLabel>\r\n                    <CCol sm={6} className=\"text-center\">\r\n                      <input\r\n                        type=\"color\"\r\n                        id=\"favcolor\"\r\n                        onChange={handleInput}\r\n                        value={themes.BackgroundColor}\r\n                        name=\"BackgroundColor\"\r\n                      />\r\n                    </CCol>\r\n                  </CRow>\r\n                  <CRow className=\"mb-3\">\r\n                    <CFormLabel\r\n                      htmlFor=\"inputPassword\"\r\n                      className=\"col-sm-6 col-form-label\"\r\n                    >\r\n                      {t(\"highlight_color\")}\r\n                    </CFormLabel>\r\n                    <CCol sm={6} className=\"text-center\">\r\n                      <input\r\n                        type=\"color\"\r\n                        id=\"favcolor\"\r\n                        onChange={handleInput}\r\n                        value={themes.HighlightColor}\r\n                        name=\"HighlightColor\"\r\n                      />\r\n                    </CCol>\r\n                  </CRow>\r\n                  <CRow className=\"mb-3\">\r\n                    <button className=\"btn btn-light m-1\" type=\"button\">\r\n                      {t(\"advanced_customization\")}\r\n                    </button>\r\n                  </CRow>\r\n                </CCardBody>\r\n              </CCard>\r\n            </div>\r\n            <div className=\"col-6\">\r\n              <div className=\"row\">\r\n                <div className=\"col-12\">\r\n                  <CCard>\r\n                    <CCardHeader component=\"h5\">\r\n                      {t(\"home_screen_background\")}\r\n                    </CCardHeader>\r\n                    <CCardBody>\r\n                      <RadioGroup\r\n                        aria-label=\"HomeScreen\"\r\n                        defaultValue=\"1\"\r\n                        name=\"radio-buttons-group\"\r\n                      >\r\n                        <FormControlLabel\r\n                          value=\"1\"\r\n                          control={\r\n                            <Radio\r\n                              onClick={() => setHomeScreen(false)}\r\n                              color=\"secondary\"\r\n                            />\r\n                          }\r\n                          label={t(\"solid_color\")}\r\n                        />\r\n                        <FormControlLabel\r\n                          value=\"0\"\r\n                          control={\r\n                            <Radio\r\n                              onClick={() => setHomeScreen(true)}\r\n                              color=\"secondary\"\r\n                            />\r\n                          }\r\n                          label={t(\"image_or_video\")}\r\n                        />\r\n                      </RadioGroup>\r\n                      <CRow className=\"mb-3\">\r\n                        <CCol sm={12} className=\"text-right\">\r\n                          {homeScreen ? (\r\n                            \" \"\r\n                          ) : (\r\n                            <input\r\n                              type=\"color\"\r\n                              id=\"favcolor\"\r\n                              onChange={handleInput}\r\n                              value={themes.HomeScreenBackground}\r\n                              name=\"HomeScreenBackground\"\r\n                            />\r\n                          )}\r\n                        </CCol>\r\n                      </CRow>\r\n                      {homeScreen ? (\r\n                        <div className=\"form-group\">\r\n                          <div className=\"input-group\">\r\n                            <div className=\"custom-file\">\r\n                              <input\r\n                                type=\"file\"\r\n                                className=\"form-control\"\r\n                                name=\"HomeScreenBackground\"\r\n                                required\r\n                                onChange={handleImage}\r\n                              />\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      ) : (\r\n                        \" \"\r\n                      )}\r\n                    </CCardBody>\r\n                  </CCard>\r\n                </div>\r\n                <div className=\"col-12\">\r\n                  <CCard>\r\n                    <CCardHeader component=\"h5\">\r\n                      {t(\"menu_screen_background\")}\r\n                    </CCardHeader>\r\n                    <CCardBody>\r\n                      <RadioGroup\r\n                        aria-label=\"MenuScreen\"\r\n                        defaultValue=\"1\"\r\n                        name=\"radio-buttons-group\"\r\n                      >\r\n                        <FormControlLabel\r\n                          value=\"1\"\r\n                          control={\r\n                            <Radio\r\n                              onClick={() => setMenuScreen(false)}\r\n                              color=\"secondary\"\r\n                            />\r\n                          }\r\n                          label={t(\"solid_color\")}\r\n                        />\r\n                        <FormControlLabel\r\n                          value=\"0\"\r\n                          control={\r\n                            <Radio\r\n                              onClick={() => setMenuScreen(true)}\r\n                              color=\"secondary\"\r\n                            />\r\n                          }\r\n                          label={t(\"image\")}\r\n                        />\r\n                      </RadioGroup>\r\n                      <CRow className=\"mb-3\">\r\n                        <CCol sm={12} className=\"text-right\">\r\n                          {menuScreen ? (\r\n                            \" \"\r\n                          ) : (\r\n                            <input\r\n                              type=\"color\"\r\n                              onChange={handleInput}\r\n                              value={themes.MenuScreenBackground}\r\n                              name=\"MenuScreenBackground\"\r\n                            />\r\n                          )}\r\n                        </CCol>\r\n                      </CRow>\r\n                      {menuScreen ? (\r\n                        <div className=\"form-group\">\r\n                          <div className=\"input-group\">\r\n                            <div className=\"custom-file\">\r\n                              <input\r\n                                type=\"file\"\r\n                                className=\"form-control\"\r\n                                name=\"MenuScreenBackground\"\r\n                                required\r\n                                onChange={handleImageMenu}\r\n                              />\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      ) : (\r\n                        \" \"\r\n                      )}\r\n                    </CCardBody>\r\n                  </CCard>\r\n                </div>\r\n                <div className=\"col-12\">\r\n                  <CCard>\r\n                    <CCardHeader component=\"h5\">{t(\"menu_button\")}</CCardHeader>\r\n                    <CCardBody>\r\n                      <CRow className=\"mb-3\">\r\n                        <CFormLabel\r\n                          htmlFor=\"staticEmail\"\r\n                          className=\"col-sm-6 col-form-label\"\r\n                        >\r\n                          {t(\"show_button\")}\r\n                        </CFormLabel>\r\n                        <CCol sm={6} className=\"text-center\">\r\n                          <Switch\r\n                            defaultChecked\r\n                            onChange={() => setButtonShow(!buttonShow)}\r\n                            value={buttonShow}\r\n                            name=\"ShowButton\"\r\n                            color=\"secondary\"\r\n                          />\r\n                        </CCol>\r\n                      </CRow>\r\n                      {buttonShow ? (\r\n                        <CRow className=\"mb-3\">\r\n                          <CFormLabel\r\n                            htmlFor=\"inputPassword\"\r\n                            className=\"col-sm-12 col-form-label\"\r\n                          >\r\n                            {t(\"button_shape\")}\r\n                          </CFormLabel>\r\n                          <CCol sm={12} className=\"text-center\">\r\n                            <RadioGroup\r\n                              aria-label=\"menu_button\"\r\n                              defaultValue=\"P\"\r\n                              name=\"ButtonShape\"\r\n                              onChange={handleInput}\r\n                              value={themes.ButtonShape}\r\n                            >\r\n                              <FormControlLabel\r\n                                value=\"R\"\r\n                                control={\r\n                                  <div>\r\n                                    <Radio value=\"R\" color=\"secondary\" />{\" \"}\r\n                                    <img\r\n                                      src={circle_menu_button}\r\n                                      alt=\"\"\r\n                                      width=\"80\"\r\n                                    />\r\n                                  </div>\r\n                                }\r\n                                label={t(\"round\")}\r\n                              />\r\n                              <FormControlLabel\r\n                                value=\"P\"\r\n                                control={\r\n                                  <div>\r\n                                    <Radio value=\"P\" color=\"secondary\" />{\" \"}\r\n                                    <img\r\n                                      src={pill_menu_button}\r\n                                      alt=\"\"\r\n                                      width=\"80\"\r\n                                    />\r\n                                  </div>\r\n                                }\r\n                                label={t(\"pill\")}\r\n                              />\r\n                            </RadioGroup>\r\n                          </CCol>\r\n                        </CRow>\r\n                      ) : null}\r\n                    </CCardBody>\r\n                  </CCard>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"text-center mx-4 mb-4\">\r\n            <button className=\"btn btn-primary\" type=\"submit\">\r\n              {t(\"update\")}\r\n            </button>\r\n            <Link\r\n              className=\"btn btn-light m-1\"\r\n              to=\"\"\r\n              onClick={() => history.goBack()}\r\n            >\r\n              {t(\"back\")}\r\n            </Link>\r\n          </div>\r\n        </Form>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EditTheme;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Design.js",["379","380","381","382","383","384","385","386","387","388","389"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  CNav,\r\n  CNavItem,\r\n  CNavLink,\r\n  CTabContent,\r\n  CTabPane,\r\n  CCard,\r\n  CCardText,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCardImage,\r\n  CRow,\r\n  CFormLabel,\r\n  CCol,\r\n} from \"@coreui/react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport palette from \"../../../images/hellomenu/palette.svg\";\r\nimport SingleFileAutoSubmit from \"./SingleFileAutoSubmit\";\r\nimport { Link, useRouteMatch } from \"react-router-dom\";\r\nimport QRCode from \"qrcode.react\";\r\nimport axios from \"axios\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport swal from \"sweetalert\";\r\nimport Switch from \"@mui/material/Switch\";\r\nimport { FormControlLabel, RadioGroup, Radio } from \"@mui/material\";\r\nimport { base_url, port } from \"../../../Consts\";\r\nimport logo from \"../../../images/hellomenu/logo.svg\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardMedia from \"@mui/material/CardMedia\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { CardActionArea } from \"@mui/material\";\r\nimport Button from \"@mui/material/Button\";\r\nimport CardActions from \"@mui/material/CardActions\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Box, { BoxProps } from \"@mui/material/Box\";\r\nconst Design = (props) => {\r\n  const { path, url } = useRouteMatch();\r\n\r\n  const { t } = useTranslation();\r\n  // const branchId = atob(props.match.params.id);\r\n  const branchId = props.history.location.state.id;\r\n\r\n  const [activeKey, setActiveKey] = useState(1);\r\n  // Insert Start\r\n  const [themes, setThemes] = useState([]);\r\n  const [activeThemeId, setActiveThemeId] = useState([]);\r\n  const handleInput = (e) => {\r\n    e.persist();\r\n    setThemes({ ...themes, [e.target.name]: e.target.value });\r\n  };\r\n  const [imageState, setImageState] = useState([]);\r\n  const handleImage = (e) => {\r\n    setImageState({ ...imageState, Logo: e.target.files[0] });\r\n  };\r\n  const save = (e) => {\r\n    e.preventDefault();\r\n    // console.log(themes);\r\n    const formData = new FormData();\r\n    formData.append(\"Logo\", imageState.Logo);\r\n    formData.append(\"Orientation\", themes.Orientation);\r\n    formData.append(\"MenuStructure\", themes.MenuStructure);\r\n    formData.append(\"TextColor\", themes.TextColor);\r\n    formData.append(\"BackgroundColor\", themes.BackgroundColor);\r\n    formData.append(\"HighlightColor\", themes.HighlightColor);\r\n    formData.append(\"QRCodeColor\", themes.QRCodeColor);\r\n    formData.append(\"QRCodeBackgroundColor\", themes.QRCodeBackgroundColor);\r\n    // console.log(activeThemeId);\r\n    axios.post(`/api/UpdateTheme/${activeThemeId}`, formData).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setLoading(true);\r\n        swal(\"Success\", res.data.message, \"success\");\r\n      }\r\n    });\r\n  };\r\n\r\n  // insert End\r\n  // change the active theme\r\n  const changeTheActiveTheme = (e, id) => {\r\n    axios.post(`/api/ThemeStatus/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setLoading(true);\r\n        swal(\"Success\", res.data.message, \"success\");\r\n      }\r\n    });\r\n  };\r\n  // change the active template\r\n  const changeTheActiveTemplate = (e, id) => {\r\n    axios.post(`/api/TemplateStatus/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setLoading(true);\r\n        swal(\"Success\", res.data.message, \"success\");\r\n      }\r\n    });\r\n  };\r\n  //for retriving data using laravel API\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [templates, setTemplates] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios.get(`/api/GetThemes/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setFetchData(res.data.fetchData);\r\n        res.data.fetchData.map((item, i) => {\r\n          if (item.Status == 1) {\r\n            setActiveThemeId(item.id);\r\n            setThemes(item);\r\n          }\r\n        });\r\n      }\r\n      setLoading(false);\r\n    });\r\n    axios.get(`/api/GetTemplates/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setTemplates(res.data.data);\r\n      }\r\n    });\r\n  }, [loading]);\r\n  // delete start\r\n  const deleteTheme = (e, id) => {\r\n    e.preventDefault();\r\n    swal({\r\n      title: \"Are you sure?\",\r\n      text: \"Once deleted, you will not be able to recover this imaginary file!\",\r\n      icon: \"warning\",\r\n      buttons: [t(\"cancel\"), t(\"confirm\")],\r\n      dangerMode: true,\r\n    }).then((willDelete) => {\r\n      if (willDelete) {\r\n        axios.delete(`/api/DeleteTheme/${id}`).then((res) => {\r\n          if (res.data.status === 200) {\r\n            setLoading(true);\r\n            swal(\"Success\", res.data.message, \"success\");\r\n            // thisClicked.closest(\"tr\").remove();\r\n          } else if (res.data.status === 404) {\r\n            swal(\"Error\", res.data.message, \"error\");\r\n          }\r\n        });\r\n      } else {\r\n        swal(\"Your Data is safe now!\");\r\n      }\r\n    });\r\n  };\r\n  // delete end\r\n  //   duplicate Theme\r\n  const duplicateTheme = (e, id) => {\r\n    e.preventDefault();\r\n    axios.get(`/api/duplicateTheme/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setLoading(true);\r\n        swal(\"Success\", res.data.message, \"success\");\r\n      }\r\n    });\r\n  };\r\n  var viewThemes_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"spinner-border text-primary \" role=\"status\">\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewThemes_HTMLTABLE = fetchData.map((item, i) => {\r\n      return (\r\n        <div className=\"col-xl-4 col-lg-4 col-sm-6\" key={i}>\r\n          <CCard>\r\n            <CCardImage\r\n              orientation=\"top\"\r\n              src={\r\n                item.Logo\r\n                  ? `http://${base_url}:${port}/images/Themes/${item.Logo}`\r\n                  : palette\r\n              }\r\n              style={{ height: \"250px\", objectFit: \"contain\" }}\r\n            />\r\n            <CCardBody>\r\n              <CCardText>\r\n                {/* <div className=\"row\"> */}\r\n                <Link\r\n                  to={{\r\n                    pathname: `${url}/edit-theme`,\r\n                    state: { id: branchId },\r\n                  }}\r\n                >\r\n                  <svg\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    width=\"16\"\r\n                    height=\"16\"\r\n                    fill=\"currentColor\"\r\n                    className=\"bi bi-pencil-square mx-2\"\r\n                    viewBox=\"0 0 16 16\"\r\n                  >\r\n                    <path d=\"M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z\" />\r\n                    <path\r\n                      fillRule=\"evenodd\"\r\n                      d=\"M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z\"\r\n                    />\r\n                  </svg>\r\n                  {t(\"edit\")}\r\n                </Link>\r\n                {item.Status == 1 ? (\r\n                  \" \"\r\n                ) : (\r\n                  <Link to=\"\" onClick={(e) => deleteTheme(e, item.id)}>\r\n                    <svg\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      width=\"16\"\r\n                      height=\"16\"\r\n                      fill=\"currentColor\"\r\n                      className=\"bi bi-trash mx-2\"\r\n                      viewBox=\"0 0 16 16\"\r\n                    >\r\n                      <path d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z\" />\r\n                      <path\r\n                        fillRule=\"evenodd\"\r\n                        d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\"\r\n                      />\r\n                    </svg>\r\n                    <span> {t(\"delete\")}</span>\r\n                  </Link>\r\n                )}\r\n                <Link to=\"\" onClick={(e) => duplicateTheme(e, item.id)}>\r\n                  <svg\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    width=\"16\"\r\n                    height=\"16\"\r\n                    fill=\"currentColor\"\r\n                    className=\"bi bi-front mx-2\"\r\n                    viewBox=\"0 0 16 16\"\r\n                  >\r\n                    <path d=\"M0 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v2h2a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2v-2H2a2 2 0 0 1-2-2V2zm5 10v2a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1h-2v5a2 2 0 0 1-2 2H5z\" />\r\n                  </svg>\r\n                  <span> {t(\"duplicate\")}</span>\r\n                </Link>\r\n                {/* </div> */}\r\n                <div className=\"row \">\r\n                  <div className=\"col-8 mt-2 text-primary font-weight-bold\">\r\n                    {item.ThemeName}\r\n                  </div>\r\n                  <div className=\"col-4 text-right\">\r\n                    {item.Status == 1 ? (\r\n                      <Switch checked disabled color=\"secondary\" />\r\n                    ) : (\r\n                      <Switch\r\n                        onChange={(e) => changeTheActiveTheme(e, item.id)}\r\n                        color=\"secondary\"\r\n                      />\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </CCardText>\r\n            </CCardBody>\r\n          </CCard>\r\n        </div>\r\n      );\r\n    });\r\n  }\r\n  return (\r\n    <>\r\n      <CNav variant=\"pills\" role=\"tablist\">\r\n        <CNavItem>\r\n          <CNavLink\r\n            style={{ cursor: \"pointer\" }}\r\n            active={activeKey === 1}\r\n            onClick={() => setActiveKey(1)}\r\n          >\r\n            {t(\"default_templates\")}\r\n          </CNavLink>\r\n        </CNavItem>\r\n        <CNavItem>\r\n          <CNavLink\r\n            // href=\"#\"\r\n            style={{ cursor: \"pointer\" }}\r\n            active={activeKey === 2}\r\n            onClick={() => setActiveKey(2)}\r\n          >\r\n            {t(\"custom_design\")}\r\n          </CNavLink>\r\n        </CNavItem>\r\n      </CNav>\r\n      <CTabContent>\r\n        <CTabPane\r\n          role=\"tabpanel\"\r\n          aria-labelledby=\"profile-tab\"\r\n          visible={activeKey === 1}\r\n        >\r\n          <div className=\" overflow-hidden border\">\r\n            <Grid container spacing={2}>\r\n              {templates.map((item) => {\r\n                return (\r\n                  <Grid item xs={6} sm={4} md={4} key={item.id}>\r\n                    <Card>\r\n                      <CardActionArea>\r\n                        <CardMedia\r\n                          component=\"iframe\"\r\n                          height=\"400\"\r\n                          image={`/${item.URL}/${btoa(branchId)}`}\r\n                          alt=\"template\"\r\n                        />\r\n                        <CardContent>\r\n                          <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n                            {item.TemplateName}\r\n                          </Typography>\r\n                        </CardContent>\r\n                        <CardActions>\r\n                          <Grid container spacing={2}>\r\n                            <Grid item xs={8} className=\"mt-2\">\r\n                              <Link\r\n                                to={{\r\n                                  pathname: `${url}/${item.CustomizationURL}`,\r\n                                  state: { id: item.id },\r\n                                }}\r\n                              >\r\n                                Customization\r\n                              </Link>\r\n                            </Grid>\r\n                            <Grid item xs={4}>\r\n                              {item.Status == 1 ? (\r\n                                <Switch checked disabled color=\"secondary\" />\r\n                              ) : (\r\n                                <Switch\r\n                                  onChange={(e) =>\r\n                                    changeTheActiveTemplate(e, item.id)\r\n                                  }\r\n                                  color=\"secondary\"\r\n                                />\r\n                              )}\r\n                            </Grid>\r\n                          </Grid>\r\n                        </CardActions>\r\n                      </CardActionArea>\r\n                    </Card>\r\n                  </Grid>\r\n                );\r\n              })}\r\n            </Grid>\r\n          </div>\r\n        </CTabPane>\r\n        <CTabPane\r\n          role=\"tabpanel\"\r\n          aria-labelledby=\"home-tab\"\r\n          visible={activeKey === 2}\r\n        >\r\n          <div className=\" overflow-hidden border\">\r\n            {/* {fetchData.map((item, i) => { \r\n                         if(item.Status == '1'){\r\n                        return ( */}\r\n            <Form onSubmit={save} method=\"POST\" encType=\"multipart/form-data\">\r\n              <div className=\"row\">\r\n                <div className=\"col-6\">\r\n                  <CCard>\r\n                    <CCardHeader component=\"h5\">{t(\"logo\")}</CCardHeader>\r\n                    <CCardBody>\r\n                      <div className=\"mb-3\">{t(\"note_for_logo\")}</div>\r\n                      <div className=\"p-2\">\r\n                        <input\r\n                          type=\"file\"\r\n                          className=\"form-control\"\r\n                          name=\"Logo\"\r\n                          onChange={handleImage}\r\n                        />\r\n                        <img\r\n                          style={{ height: \"50px\", objectFit: \"contain\" }}\r\n                          src={\r\n                            themes.Logo\r\n                              ? `http://${base_url}:${port}/images/Themes/${themes.Logo}`\r\n                              : logo\r\n                          }\r\n                          // src={`http://${base_url}:${port}/images/Themes/${theme[0].Logo}`}\r\n                          className=\"w-40 mr-2\"\r\n                          alt=\"Menu\"\r\n                        />\r\n                      </div>\r\n                    </CCardBody>\r\n                  </CCard>\r\n                </div>\r\n                <div className=\"col-6\">\r\n                  <div className=\"row\">\r\n                    <div className=\"col-12\">\r\n                      <CCard>\r\n                        <CCardHeader component=\"h5\">\r\n                          {t(\"screen_orientation\")}\r\n                        </CCardHeader>\r\n                        <CCardBody>\r\n                          <RadioGroup\r\n                            row\r\n                            aria-label=\"Orientation\"\r\n                            defaultValue={themes.Orientation}\r\n                            name=\"Orientation\"\r\n                            onChange={handleInput}\r\n                          >\r\n                            <FormControlLabel\r\n                              value=\"P\"\r\n                              control={\r\n                                <div>\r\n                                  <Radio\r\n                                    value=\"P\"\r\n                                    name=\"Orientation\"\r\n                                    color=\"secondary\"\r\n                                  />\r\n                                  <svg\r\n                                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                                    width=\"64\"\r\n                                    height=\"64\"\r\n                                    fill=\"currentColor\"\r\n                                    className=\"bi bi-phone\"\r\n                                    viewBox=\"0 0 16 16\"\r\n                                  >\r\n                                    <path d=\"M11 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h6zM5 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H5z\" />\r\n                                    <path d=\"M8 14a1 1 0 1 0 0-2 1 1 0 0 0 0 2z\" />\r\n                                  </svg>\r\n                                </div>\r\n                              }\r\n                              label={t(\"portrait\")}\r\n                            />\r\n                            <FormControlLabel\r\n                              value=\"L\"\r\n                              control={\r\n                                <div>\r\n                                  <Radio\r\n                                    value=\"L\"\r\n                                    name=\"Orientation\"\r\n                                    color=\"secondary\"\r\n                                  />{\" \"}\r\n                                  <svg\r\n                                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                                    width=\"64\"\r\n                                    height=\"64\"\r\n                                    fill=\"currentColor\"\r\n                                    className=\"bi bi-phone-landscape mr-2\"\r\n                                    viewBox=\"0 0 16 16\"\r\n                                  >\r\n                                    <path d=\"M1 4.5a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1v6a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1v-6zm-1 6a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-6a2 2 0 0 0-2-2H2a2 2 0 0 0-2 2v6z\" />\r\n                                    <path d=\"M14 7.5a1 1 0 1 0-2 0 1 1 0 0 0 2 0z\" />\r\n                                  </svg>\r\n                                </div>\r\n                              }\r\n                              label={t(\"landscape\")}\r\n                            />\r\n                          </RadioGroup>\r\n                        </CCardBody>\r\n                      </CCard>\r\n                    </div>\r\n\r\n                    <div className=\"col-12\">\r\n                      <CCard>\r\n                        <CCardHeader component=\"h5\">\r\n                          {t(\"menu_structure\")}\r\n                        </CCardHeader>\r\n                        <CCardBody>\r\n                          <RadioGroup\r\n                            row\r\n                            aria-label=\"MenuStructure\"\r\n                            defaultValue={themes.MenuStructure}\r\n                            name=\"MenuStructure\"\r\n                            onChange={handleInput}\r\n                          >\r\n                            <FormControlLabel\r\n                              value=\"I\"\r\n                              control={\r\n                                <div>\r\n                                  <Radio\r\n                                    value=\"I\"\r\n                                    name=\"MenuStructure\"\r\n                                    color=\"secondary\"\r\n                                  />{\" \"}\r\n                                  <svg\r\n                                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                                    width=\"64\"\r\n                                    height=\"64\"\r\n                                    fill=\"currentColor\"\r\n                                    className=\"bi bi-file-post\"\r\n                                    viewBox=\"0 0 16 16\"\r\n                                  >\r\n                                    <path d=\"M4 3.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5zm0 2a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 .5.5v8a.5.5 0 0 1-.5.5h-7a.5.5 0 0 1-.5-.5v-8z\" />\r\n                                    <path d=\"M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2zm10-1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1z\" />\r\n                                  </svg>\r\n                                </div>\r\n                              }\r\n                              label={t(\"infinite_scroll\")}\r\n                            />\r\n                            <FormControlLabel\r\n                              value=\"C\"\r\n                              control={\r\n                                <div>\r\n                                  <Radio\r\n                                    value=\"C\"\r\n                                    name=\"MenuStructure\"\r\n                                    color=\"secondary\"\r\n                                  />{\" \"}\r\n                                  <svg\r\n                                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                                    width=\"64\"\r\n                                    height=\"64\"\r\n                                    fill=\"currentColor\"\r\n                                    className=\"bi bi-file-spreadsheet\"\r\n                                    viewBox=\"0 0 16 16\"\r\n                                  >\r\n                                    <path d=\"M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2zm2-1a1 1 0 0 0-1 1v4h10V2a1 1 0 0 0-1-1H4zm9 6h-3v2h3V7zm0 3h-3v2h3v-2zm0 3h-3v2h2a1 1 0 0 0 1-1v-1zm-4 2v-2H6v2h3zm-4 0v-2H3v1a1 1 0 0 0 1 1h1zm-2-3h2v-2H3v2zm0-3h2V7H3v2zm3-2v2h3V7H6zm3 3H6v2h3v-2z\" />\r\n                                  </svg>\r\n                                </div>\r\n                              }\r\n                              label={t(\"classic_layout\")}\r\n                            />\r\n                          </RadioGroup>\r\n                        </CCardBody>\r\n                      </CCard>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-6\">\r\n                  <CCard>\r\n                    <CCardHeader component=\"h5\">\r\n                      {t(\"theme_colors\")}\r\n                    </CCardHeader>\r\n                    <CCardBody>\r\n                      {/* <SketchPicker /> */}\r\n                      <CRow className=\"mb-3\">\r\n                        <CFormLabel\r\n                          htmlFor=\"staticEmail\"\r\n                          className=\"col-sm-6 col-form-label\"\r\n                        >\r\n                          {t(\"text_color\")}\r\n                        </CFormLabel>\r\n                        <CCol sm={6} className=\"text-center\">\r\n                          <input\r\n                            type=\"color\"\r\n                            onChange={handleInput}\r\n                            value={themes.TextColor}\r\n                            id=\"favcolor\"\r\n                            name=\"TextColor\"\r\n                          />\r\n                        </CCol>\r\n                      </CRow>\r\n                      <CRow className=\"mb-3\">\r\n                        <CFormLabel\r\n                          htmlFor=\"inputPassword\"\r\n                          className=\"col-sm-6 col-form-label\"\r\n                        >\r\n                          {t(\"background_color\")}\r\n                        </CFormLabel>\r\n                        <CCol sm={6} className=\"text-center\">\r\n                          <input\r\n                            type=\"color\"\r\n                            onChange={handleInput}\r\n                            value={themes.BackgroundColor}\r\n                            id=\"favcolor\"\r\n                            name=\"BackgroundColor\"\r\n                          />\r\n                        </CCol>\r\n                      </CRow>\r\n                      <CRow className=\"mb-3\">\r\n                        <CFormLabel\r\n                          htmlFor=\"inputPassword\"\r\n                          className=\"col-sm-6 col-form-label\"\r\n                        >\r\n                          {t(\"highlight_color\")}\r\n                        </CFormLabel>\r\n                        <CCol sm={6} className=\"text-center\">\r\n                          <input\r\n                            type=\"color\"\r\n                            onChange={handleInput}\r\n                            value={themes.HighlightColor}\r\n                            id=\"favcolor\"\r\n                            name=\"HighlightColor\"\r\n                          />\r\n                        </CCol>\r\n                      </CRow>\r\n                    </CCardBody>\r\n                  </CCard>\r\n                </div>\r\n                <div className=\"col-6\">\r\n                  <CCard>\r\n                    <CCardHeader component=\"h5\">\r\n                      {t(\"your_helloMenu_QR\")}\r\n                    </CCardHeader>\r\n                    <CCardBody>\r\n                      <div className=\"text-center mb-3\">\r\n                        <QRCode\r\n                          level={\"H\"}\r\n                          size={256}\r\n                          bgColor={themes.QRCodeBackgroundColor}\r\n                          fgColor={themes.QRCodeColor}\r\n                          value={`http://192.168.1.103:3000/show-branch-details`}\r\n                          className=\"primary\"\r\n                        />\r\n                      </div>\r\n                      <CRow className=\"mb-3\">\r\n                        <CFormLabel\r\n                          htmlFor=\"staticEmail\"\r\n                          className=\"col-sm-6 col-form-label\"\r\n                        >\r\n                          {t(\"QR_code_color\")}\r\n                        </CFormLabel>\r\n                        <CCol sm={6} className=\"text-center\">\r\n                          <input\r\n                            type=\"color\"\r\n                            onChange={handleInput}\r\n                            value={themes.QRCodeColor}\r\n                            id=\"favcolor\"\r\n                            name=\"QRCodeColor\"\r\n                          />\r\n                        </CCol>\r\n                      </CRow>\r\n                      <CRow className=\"mb-3\">\r\n                        <CFormLabel\r\n                          htmlFor=\"inputPassword\"\r\n                          className=\"col-sm-6 col-form-label\"\r\n                        >\r\n                          {t(\"QR_code_background_color\")}\r\n                        </CFormLabel>\r\n                        <CCol sm={6} className=\"text-center\">\r\n                          <input\r\n                            type=\"color\"\r\n                            onChange={handleInput}\r\n                            value={themes.QRCodeBackgroundColor}\r\n                            id=\"favcolor\"\r\n                            name=\"QRCodeBackgroundColor\"\r\n                          />\r\n                        </CCol>\r\n                      </CRow>\r\n                    </CCardBody>\r\n                  </CCard>\r\n                </div>\r\n              </div>\r\n              <div className=\"text-right mx-4 mb-4\">\r\n                <button className=\"btn btn-primary\" type=\"submit\">\r\n                  {t(\"save\")}\r\n                </button>\r\n              </div>\r\n            </Form>\r\n            {/* // )\r\n                        // }\r\n                        // })} */}\r\n          </div>\r\n          <div className=\"row mt-2\">\r\n            {viewThemes_HTMLTABLE}\r\n\r\n            <div className=\"col-xl-4 col-lg-4 col-sm-6\">\r\n              <div className=\"card overflow-hidden \">\r\n                <div\r\n                  className=\"card-body d-flex justify-content-center text-center\"\r\n                  style={{ border: \"2px dashed pink\" }}\r\n                >\r\n                  <div className=\"align-self-center text-center\">\r\n                    <div>\r\n                      <img src={palette} alt=\"\" />\r\n                    </div>\r\n                    <div className=\"pt-3\">\r\n                      <Link\r\n                        className=\"btn btn-outline-primary\"\r\n                        to={{\r\n                          pathname: `${url}/add-theme`,\r\n                          state: { id: branchId },\r\n                        }}\r\n                      >\r\n                        {t(\"new_theme\")}\r\n                      </Link>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </CTabPane>\r\n      </CTabContent>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Design;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Theme.js",["390","391","392","393","394","395","396","397","398","399","400"],"import React, { useState } from \"react\";\r\nimport {\r\n  CBreadcrumb,\r\n  CCard,\r\n  CCardBody,\r\n  CAccordionBody,\r\n  CListGroupItem,\r\n  CListGroup,\r\n  CCardHeader,\r\n  CAccordion,\r\n  CAccordionHeader,\r\n  CAccordionItem,\r\n  CRow,\r\n  CFormLabel,\r\n  CCol,\r\n} from \"@coreui/react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// import Switch from \"react-switch\";\r\nimport circle_menu_button from \"../../../images/hellomenu/circle_menu_button.png\";\r\nimport pill_menu_button from \"../../../images/hellomenu/pill_menu_button.png\";\r\nimport SingleFileAutoSubmit from \"./SingleFileAutoSubmit\";\r\nimport Avatar from \"@mui/material/Avatar\";\r\nimport {\r\n  AvatarGroup,\r\n  Grid,\r\n  List,\r\n  ListItem,\r\n  ListItemButton,\r\n  ListItemText,\r\n} from \"@mui/material\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport Switch from \"@mui/material/Switch\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { FormControlLabel, RadioGroup, Radio } from \"@mui/material\";\r\nimport Accordion from \"@mui/material/Accordion\";\r\nimport AccordionDetails from \"@mui/material/AccordionDetails\";\r\nimport AccordionSummary from \"@mui/material/AccordionSummary\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Theme = (props) => {\r\n  const history = useHistory();\r\n\r\n  const { t } = useTranslation();\r\n  const branchId = props.history.location.state.id;\r\n\r\n  const [state, setState] = useState({ checked: false });\r\n  const [homeScreen, setHomeScreen] = useState(false);\r\n  const [menuScreen, setMenuScreen] = useState(false);\r\n  const [buttonShow, setButtonShow] = useState(1);\r\n  const handleChange = (checked) => {\r\n    setState({ checked });\r\n  };\r\n  const [imageState, setImageState] = useState([]);\r\n  const handleImage = (e) => {\r\n    setImageState({ ...imageState, HomeScreenBackground: e.target.files[0] });\r\n  };\r\n  const [imageStateMenu, setImageStateMenu] = useState([]);\r\n  const handleImageMenu = (e) => {\r\n    setImageStateMenu({\r\n      ...imageStateMenu,\r\n      MenuScreenBackground: e.target.files[0],\r\n    });\r\n  };\r\n  // Insert Start\r\n  const [themes, setThemes] = useState([]);\r\n  const handleInput = (e) => {\r\n    e.persist();\r\n    setThemes({ ...themes, [e.target.name]: e.target.value });\r\n  };\r\n  const changeColor = (first, second, thrid) => {\r\n    setThemes({\r\n      ...themes,\r\n      TextColor: first,\r\n      BackgroundColor: second,\r\n      HighlightColor: thrid,\r\n    });\r\n  };\r\n  const save = (e) => {\r\n    e.preventDefault();\r\n    // console.log(themes);\r\n    const formData = new FormData();\r\n    formData.append(\"HomeScreenBackground\", imageState.HomeScreenBackground);\r\n    formData.append(\r\n      \"MenuScreenBackground\",\r\n      imageStateMenu.MenuScreenBackground\r\n    );\r\n    formData.append(\"ThemeName\", themes.ThemeName);\r\n    // formData.append(\"Orientation\", themes.Orientation);\r\n    // formData.append(\"MenuStructure\", themes.MenuStructure);\r\n    formData.append(\"TextColor\", themes.TextColor);\r\n    formData.append(\"BackgroundColor\", themes.BackgroundColor);\r\n    formData.append(\"HighlightColor\", themes.HighlightColor);\r\n    // formData.append(\"QRCodeColor\", themes.QRCodeColor);\r\n    // formData.append(\"QRCodeBackgroundColor\", themes.QRCodeBackgroundColor);\r\n    formData.append(\"HomeScreenBackground\", themes.HomeScreenBackground);\r\n    formData.append(\"MenuScreenBackground\", themes.MenuScreenBackground);\r\n    formData.append(\"ShowButton\", themes.ShowButton);\r\n    formData.append(\"ButtonShape\", themes.ButtonShape);\r\n    axios.post(`/api/InsertTheme/${branchId}`, formData).then((res) => {\r\n      if (res.data.status === 200) {\r\n        swal(\"Success\", res.data.message, \"success\");\r\n        // setThemes([]);\r\n        // setImageStateMenu([]);\r\n        // setImageState([]);\r\n      }\r\n    });\r\n  };\r\n  // insert End\r\n  const [expanded, setExpanded] = React.useState(false);\r\n\r\n  const handleChangePanel = (panel) => (event, isExpanded) => {\r\n    setExpanded(isExpanded ? panel : false);\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\" overflow-hidden border\">\r\n        <Form onSubmit={save} method=\"POST\" encType=\"multipart/form-data\">\r\n          <div className=\"row\">\r\n            <div className=\"col-12 mb-2\">\r\n              <div\r\n                className=\"col-6 mb-2\"\r\n                style={{ borderBottom: \"2px solid black\" }}\r\n              >\r\n                <input\r\n                  type=\"text\"\r\n                  style={{ border: \"none\" }}\r\n                  className=\"form-control\"\r\n                  placeholder={t(\"theme_name\")}\r\n                  onChange={handleInput}\r\n                  name=\"ThemeName\"\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"col-6\">\r\n              <CCard>\r\n                <CCardHeader component=\"h5\">{t(\"theme_colors\")}</CCardHeader>\r\n                <CCardBody>\r\n                  <div>\r\n                    <Accordion\r\n                      expanded={expanded === \"panel1\"}\r\n                      onChange={handleChangePanel(\"panel1\")}\r\n                      className=\"my-3\"\r\n                    >\r\n                      <AccordionSummary\r\n                        aria-controls=\"panel1bh-content\"\r\n                        id=\"panel1bh-header\"\r\n                      >\r\n                        <Grid container spacing={2}>\r\n                          <Grid item xs={6} md={8}>\r\n                            <Typography sx={{ width: \"33%\", flexShrink: 0 }}>\r\n                              {t(\"selected\")}\r\n                            </Typography>\r\n                          </Grid>\r\n                          <Grid item xs={6} md={4}>\r\n                            <Typography sx={{ color: \"text.secondary\" }}>\r\n                              <AvatarGroup max={4}>\r\n                                <Avatar\r\n                                  sx={{\r\n                                    bgcolor: themes.TextColor,\r\n                                    width: 20,\r\n                                    height: 20,\r\n                                  }}\r\n                                >\r\n                                  {\" \"}\r\n                                </Avatar>\r\n                                <Avatar\r\n                                  sx={{\r\n                                    bgcolor: themes.BackgroundColor,\r\n                                    width: 20,\r\n                                    height: 20,\r\n                                  }}\r\n                                >\r\n                                  {\" \"}\r\n                                </Avatar>\r\n                                <Avatar\r\n                                  sx={{\r\n                                    bgcolor: themes.HighlightColor,\r\n                                    width: 20,\r\n                                    height: 20,\r\n                                  }}\r\n                                >\r\n                                  {\" \"}\r\n                                </Avatar>\r\n                              </AvatarGroup>\r\n                            </Typography>\r\n                          </Grid>\r\n                        </Grid>\r\n                      </AccordionSummary>\r\n                      <AccordionDetails>\r\n                        <Typography>\r\n                          <List>\r\n                            <ListItem disablePadding>\r\n                              <ListItemButton\r\n                                onClick={() =>\r\n                                  changeColor(\"red\", \"green\", \"black\")\r\n                                }\r\n                              >\r\n                                <Grid container spacing={2}>\r\n                                  <Grid item xs={6} md={8}>\r\n                                    <ListItemText primary=\"First Color Theme\" />\r\n                                  </Grid>\r\n                                  <Grid item xs={6} md={4}>\r\n                                    <Typography\r\n                                      sx={{ color: \"text.secondary\" }}\r\n                                    >\r\n                                      <AvatarGroup max={4}>\r\n                                        <Avatar\r\n                                          sx={{\r\n                                            bgcolor: \"red\",\r\n                                            width: 20,\r\n                                            height: 20,\r\n                                          }}\r\n                                        >\r\n                                          {\" \"}\r\n                                        </Avatar>\r\n                                        <Avatar\r\n                                          sx={{\r\n                                            bgcolor: \"green\",\r\n                                            width: 20,\r\n                                            height: 20,\r\n                                          }}\r\n                                        >\r\n                                          {\" \"}\r\n                                        </Avatar>\r\n                                        <Avatar\r\n                                          sx={{\r\n                                            bgcolor: \"black\",\r\n                                            width: 20,\r\n                                            height: 20,\r\n                                          }}\r\n                                        >\r\n                                          {\" \"}\r\n                                        </Avatar>\r\n                                      </AvatarGroup>\r\n                                    </Typography>\r\n                                  </Grid>\r\n                                </Grid>\r\n                              </ListItemButton>\r\n                            </ListItem>\r\n                          </List>\r\n                        </Typography>\r\n                      </AccordionDetails>\r\n                    </Accordion>\r\n                  </div>\r\n                  <CRow className=\"mb-3\">\r\n                    <CFormLabel\r\n                      htmlFor=\"staticEmail\"\r\n                      className=\"col-sm-6 col-form-label\"\r\n                    >\r\n                      {t(\"text_color\")}\r\n                    </CFormLabel>\r\n                    <CCol sm={6} className=\"text-center\">\r\n                      <input\r\n                        type=\"color\"\r\n                        onChange={handleInput}\r\n                        value={themes.TextColor}\r\n                        name=\"TextColor\"\r\n                      />\r\n                    </CCol>\r\n                  </CRow>\r\n                  <CRow className=\"mb-3\">\r\n                    <CFormLabel\r\n                      htmlFor=\"inputPassword\"\r\n                      className=\"col-sm-6 col-form-label\"\r\n                    >\r\n                      {t(\"background_color\")}\r\n                    </CFormLabel>\r\n                    <CCol sm={6} className=\"text-center\">\r\n                      <input\r\n                        type=\"color\"\r\n                        onChange={handleInput}\r\n                        value={themes.BackgroundColor}\r\n                        name=\"BackgroundColor\"\r\n                      />\r\n                    </CCol>\r\n                  </CRow>\r\n                  <CRow className=\"mb-3\">\r\n                    <CFormLabel\r\n                      htmlFor=\"inputPassword\"\r\n                      className=\"col-sm-6 col-form-label\"\r\n                    >\r\n                      {t(\"highlight_color\")}\r\n                    </CFormLabel>\r\n                    <CCol sm={6} className=\"text-center\">\r\n                      <input\r\n                        type=\"color\"\r\n                        onChange={handleInput}\r\n                        value={themes.HighlightColor}\r\n                        name=\"HighlightColor\"\r\n                      />\r\n                    </CCol>\r\n                  </CRow>\r\n                  <CRow className=\"mb-3\">\r\n                    <button className=\"btn btn-light m-1\" type=\"button\">\r\n                      {t(\"advanced_customization\")}\r\n                    </button>\r\n                  </CRow>\r\n                </CCardBody>\r\n              </CCard>\r\n            </div>\r\n            <div className=\"col-6\">\r\n              <div className=\"row\">\r\n                <div className=\"col-12\">\r\n                  <CCard>\r\n                    <CCardHeader component=\"h5\">\r\n                      {t(\"home_screen_background\")}\r\n                    </CCardHeader>\r\n                    <CCardBody>\r\n                      <RadioGroup\r\n                        aria-label=\"HomeScreen\"\r\n                        defaultValue=\"1\"\r\n                        name=\"radio-buttons-group\"\r\n                      >\r\n                        <FormControlLabel\r\n                          value=\"1\"\r\n                          control={\r\n                            <Radio\r\n                              onClick={() => setHomeScreen(false)}\r\n                              color=\"secondary\"\r\n                            />\r\n                          }\r\n                          label={t(\"solid_color\")}\r\n                        />\r\n                        <FormControlLabel\r\n                          value=\"0\"\r\n                          control={\r\n                            <Radio\r\n                              onClick={() => setHomeScreen(true)}\r\n                              color=\"secondary\"\r\n                            />\r\n                          }\r\n                          label={t(\"image_or_video\")}\r\n                        />\r\n                      </RadioGroup>\r\n                      <CRow className=\"mb-3\">\r\n                        <CCol sm={12} className=\"text-right\">\r\n                          {homeScreen ? (\r\n                            \" \"\r\n                          ) : (\r\n                            <input\r\n                              type=\"color\"\r\n                              id=\"favcolor\"\r\n                              onChange={handleInput}\r\n                              value={themes.HomeScreenBackground}\r\n                              name=\"HomeScreenBackground\"\r\n                            />\r\n                          )}\r\n                        </CCol>\r\n                      </CRow>\r\n                      {homeScreen ? (\r\n                        <div className=\"form-group\">\r\n                          <div className=\"input-group\">\r\n                            <div className=\"custom-file\">\r\n                              <input\r\n                                type=\"file\"\r\n                                className=\"form-control\"\r\n                                name=\"HomeScreenBackground\"\r\n                                required\r\n                                onChange={handleImage}\r\n                              />\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      ) : (\r\n                        \" \"\r\n                      )}\r\n                    </CCardBody>\r\n                  </CCard>\r\n                </div>\r\n                <div className=\"col-12\">\r\n                  <CCard>\r\n                    <CCardHeader component=\"h5\">\r\n                      {t(\"menu_screen_background\")}\r\n                    </CCardHeader>\r\n                    <CCardBody>\r\n                      <RadioGroup\r\n                        aria-label=\"MenuScreen\"\r\n                        defaultValue=\"1\"\r\n                        name=\"radio-buttons-group\"\r\n                      >\r\n                        <FormControlLabel\r\n                          value=\"1\"\r\n                          control={\r\n                            <Radio\r\n                              onClick={() => setMenuScreen(false)}\r\n                              color=\"secondary\"\r\n                            />\r\n                          }\r\n                          label={t(\"solid_color\")}\r\n                        />\r\n                        <FormControlLabel\r\n                          value=\"0\"\r\n                          control={\r\n                            <Radio\r\n                              onClick={() => setMenuScreen(true)}\r\n                              color=\"secondary\"\r\n                            />\r\n                          }\r\n                          label={t(\"image\")}\r\n                        />\r\n                      </RadioGroup>\r\n                      <CRow className=\"mb-3\">\r\n                        <CCol sm={12} className=\"text-right\">\r\n                          {menuScreen ? (\r\n                            \" \"\r\n                          ) : (\r\n                            <input\r\n                              type=\"color\"\r\n                              onChange={handleInput}\r\n                              value={themes.MenuScreenBackground}\r\n                              name=\"MenuScreenBackground\"\r\n                            />\r\n                          )}\r\n                        </CCol>\r\n                      </CRow>\r\n                      {menuScreen ? (\r\n                        <div className=\"form-group\">\r\n                          <div className=\"input-group\">\r\n                            <div className=\"custom-file\">\r\n                              <input\r\n                                type=\"file\"\r\n                                className=\"form-control\"\r\n                                name=\"MenuScreenBackground\"\r\n                                required\r\n                                onChange={handleImageMenu}\r\n                              />\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      ) : (\r\n                        \" \"\r\n                      )}\r\n                    </CCardBody>\r\n                  </CCard>\r\n                </div>\r\n                <div className=\"col-12\">\r\n                  <CCard>\r\n                    <CCardHeader component=\"h5\">{t(\"menu_button\")}</CCardHeader>\r\n                    <CCardBody>\r\n                      <CRow className=\"mb-3\">\r\n                        <CFormLabel\r\n                          htmlFor=\"staticEmail\"\r\n                          className=\"col-sm-6 col-form-label\"\r\n                        >\r\n                          {t(\"show_button\")}\r\n                        </CFormLabel>\r\n                        <CCol sm={6} className=\"text-center\">\r\n                          <Switch\r\n                            defaultChecked\r\n                            onChange={() => setButtonShow(!buttonShow)}\r\n                            value={buttonShow}\r\n                            onChange={handleInput}\r\n                            name=\"ShowButton\"\r\n                            color=\"secondary\"\r\n                          />\r\n                        </CCol>\r\n                      </CRow>\r\n                      {buttonShow ? (\r\n                        <CRow className=\"mb-3\">\r\n                          <CFormLabel\r\n                            htmlFor=\"inputPassword\"\r\n                            className=\"col-sm-12 col-form-label\"\r\n                          >\r\n                            {t(\"button_shape\")}\r\n                          </CFormLabel>\r\n                          <CCol sm={12} className=\"text-center\">\r\n                            <RadioGroup\r\n                              aria-label=\"menu_button\"\r\n                              defaultValue=\"P\"\r\n                              name=\"radio-buttons-group\"\r\n                            >\r\n                              <FormControlLabel\r\n                                value=\"R\"\r\n                                control={\r\n                                  <div>\r\n                                    <Radio\r\n                                      onChange={handleInput}\r\n                                      name=\"ButtonShape\"\r\n                                      value=\"R\"\r\n                                      color=\"secondary\"\r\n                                    />{\" \"}\r\n                                    <img\r\n                                      src={circle_menu_button}\r\n                                      alt=\"\"\r\n                                      width=\"80\"\r\n                                    />\r\n                                  </div>\r\n                                }\r\n                                label={t(\"round\")}\r\n                              />\r\n                              <FormControlLabel\r\n                                value=\"P\"\r\n                                control={\r\n                                  <div>\r\n                                    <Radio\r\n                                      onChange={handleInput}\r\n                                      name=\"ButtonShape\"\r\n                                      value=\"P\"\r\n                                      color=\"secondary\"\r\n                                    />{\" \"}\r\n                                    <img\r\n                                      src={pill_menu_button}\r\n                                      alt=\"\"\r\n                                      width=\"80\"\r\n                                    />\r\n                                  </div>\r\n                                }\r\n                                label={t(\"pill\")}\r\n                              />\r\n                            </RadioGroup>\r\n                          </CCol>\r\n                        </CRow>\r\n                      ) : null}\r\n                    </CCardBody>\r\n                  </CCard>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"text-center mx-4 mb-4\">\r\n            <button className=\"btn btn-primary\" type=\"submit\">\r\n              {t(\"save\")}\r\n            </button>\r\n            <Link\r\n              className=\"btn btn-light m-1\"\r\n              to=\"\"\r\n              onClick={() => history.goBack()}\r\n            >\r\n              {t(\"back\")}\r\n            </Link>\r\n          </div>\r\n        </Form>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Theme;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\SingleFileAutoSubmit.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Branches\\Show.js",["401"],"import React, { Fragment, useState } from \"react\";\r\nimport { Tab, Nav } from \"react-bootstrap\";\r\nimport {\r\n  Link,\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  useRouteMatch,\r\n} from \"react-router-dom\";\r\n\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport {\r\n  CCloseButton,\r\n  COffcanvas,\r\n  COffcanvasBody,\r\n  COffcanvasHeader,\r\n  COffcanvasTitle,\r\n} from \"@coreui/react\";\r\nimport Customization from \"../Design/Templates/Dark/Customization\";\r\nimport SubCategory from \"../Categories/SubCategory\";\r\nimport Category from \"../Categories/Category\";\r\nimport Inventory from \"../Inventories/Inventory\";\r\nimport PrivateRoute from \"../PrivateRoute\";\r\nimport ServiceArea from \"../Services/ServiceArea\";\r\nimport Unit from \"../Units/Unit\";\r\nimport Tables from \"./Tables\";\r\nimport ProductShow from \"../Products/Show\";\r\nimport DesignShow from \"../Design/Show\";\r\nconst Show = (props) => {\r\n  const { t } = useTranslation();\r\n  const id = props.history.location.state.id;\r\n  const BrancheName = props.history.location.state.BrancheName;\r\n  const { path, url } = useRouteMatch();\r\n  const tabData = [\r\n    {\r\n      name: t(\"categories\"),\r\n      url: {\r\n        pathname: `${url}`,\r\n        state: { id: id, BrancheName: BrancheName },\r\n      },\r\n    },\r\n    {\r\n      name: t(\"products\"),\r\n      url: {\r\n        pathname: `${url}/products`,\r\n        state: { id: id, BrancheName: BrancheName },\r\n      },\r\n    },\r\n    {\r\n      name: t(\"design\"),\r\n      url: {\r\n        pathname: `${url}/design`,\r\n        state: { id: id, BrancheName: BrancheName },\r\n      },\r\n    },\r\n    {\r\n      name: t(\"tables\"),\r\n      url: {\r\n        pathname: `${url}/tables`,\r\n        state: { id: id, BrancheName: BrancheName },\r\n      },\r\n    },\r\n    {\r\n      name: t(\"inventory\"),\r\n      url: {\r\n        pathname: `${url}/inventory`,\r\n        state: { id: id, BrancheName: BrancheName },\r\n      },\r\n    },\r\n    {\r\n      name: t(\"units\"),\r\n      url: {\r\n        pathname: `${url}/unit`,\r\n        state: { id: id, BrancheName: BrancheName },\r\n      },\r\n    },\r\n    {\r\n      name: t(\"services\"),\r\n      url: {\r\n        pathname: `${url}/service-area`,\r\n        state: { id: id, BrancheName: BrancheName },\r\n      },\r\n    },\r\n    {\r\n      name: t(\"preview\"),\r\n      url: {\r\n        pathname: ``,\r\n      },\r\n    },\r\n    {\r\n      name: t(\"public_link\"),\r\n      url: {\r\n        pathname: `/standard-template/${btoa(id)}`,\r\n      },\r\n    },\r\n  ];\r\n  // to display public link inside phone\r\n  const [visible, setVisible] = useState(false);\r\n\r\n  const [destinationLink, setDestinationLink] = useState(\"\");\r\n  const phone = (e, srcLink) => {\r\n    e.preventDefault();\r\n    setDestinationLink(srcLink);\r\n    setVisible(true);\r\n  };\r\n  return (\r\n    <Fragment>\r\n      <Router>\r\n        <div className=\"row\">\r\n          <div className=\"col-xl-9 col-xxl-12\">\r\n            <div className=\"row\">\r\n              <div className=\"col-xl-12\">\r\n                <div className=\"card\">\r\n                  <div className=\"card-header border-0 pb-2 d-lg-flex d-block\">\r\n                    <div>\r\n                      <h4 className=\"card-title mb-2\">{BrancheName}</h4>\r\n                    </div>\r\n                    <div className=\"card-action card-tabs mt-3 mt-3 mt-lg-0\">\r\n                      <Tab.Container\r\n                        defaultActiveKey={tabData[0].name.toLowerCase()}\r\n                      >\r\n                        <Nav as=\"ul\" className=\"nav-tabs\">\r\n                          {tabData.map((data, i) =>\r\n                            data.name === t(\"preview\") ? (\r\n                              <Nav.Item as=\"li\" key={i}>\r\n                                <Link\r\n                                  to={data.url}\r\n                                  onClick={(e) =>\r\n                                    phone(e, `/standard-template/${btoa(id)}`)\r\n                                  }\r\n                                >\r\n                                  <Nav.Link eventKey={data.name.toLowerCase()}>\r\n                                    {data.name}\r\n                                  </Nav.Link>\r\n                                </Link>\r\n                              </Nav.Item>\r\n                            ) : (\r\n                              <Nav.Item as=\"li\" key={i}>\r\n                                <Link\r\n                                  to={data.url}\r\n                                  target={\r\n                                    data.name === t(\"public_link\")\r\n                                      ? \"_blank\"\r\n                                      : \"\"\r\n                                  }\r\n                                >\r\n                                  <Nav.Link eventKey={data.name.toLowerCase()}>\r\n                                    {data.name}\r\n                                  </Nav.Link>\r\n                                </Link>\r\n                              </Nav.Item>\r\n                            )\r\n                          )}\r\n                        </Nav>\r\n                      </Tab.Container>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <COffcanvas\r\n          placement=\"end\"\r\n          className=\"fade bd-example-modal-lg\"\r\n          scroll\r\n          visible={visible}\r\n          onHide={() => setVisible(false)}\r\n        >\r\n          <COffcanvasHeader>\r\n            <COffcanvasTitle>{t(\"display_mobile\")}</COffcanvasTitle>\r\n            <CCloseButton\r\n              className=\"text-reset\"\r\n              onClick={() => setVisible(false)}\r\n            />\r\n          </COffcanvasHeader>\r\n          <COffcanvasBody>\r\n            <div className=\"wrapper\">\r\n              <div className=\"iphone\">\r\n                <div className=\"power\"></div>\r\n                <div className=\"lock\"></div>\r\n                <div className=\"volume up\"></div>\r\n                <div className=\"volume down\"></div>\r\n                <div className=\"camera\"></div>\r\n                <div className=\"speaker\"></div>\r\n                <div className=\"screen\">\r\n                  <iframe\r\n                    src={destinationLink}\r\n                    height=\"100%\"\r\n                    width=\"100%\"\r\n                    title=\"Devices\"\r\n                  ></iframe>\r\n                </div>\r\n                <div className=\"button\">\r\n                  <div className=\"square\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </COffcanvasBody>\r\n        </COffcanvas>\r\n\r\n        <Switch>\r\n          <PrivateRoute exact path={`${path}`} component={Category} />\r\n          <PrivateRoute path={`${path}/sub-category`} component={SubCategory} />\r\n\r\n          {/* <PrivateRoute path={`${path}/category`} component={Category} /> */}\r\n          <PrivateRoute path={`${path}/design`} component={DesignShow} />\r\n          <PrivateRoute path={`${path}/products`} component={ProductShow} />\r\n\r\n          <PrivateRoute path={`${path}/service-area`} component={ServiceArea} />\r\n          <PrivateRoute path={`${path}/unit`} component={Unit} />\r\n          <PrivateRoute path={`${path}/inventory`} component={Inventory} />\r\n          <PrivateRoute path={`${path}/tables`} component={Tables} />\r\n          <PrivateRoute\r\n            path={`/dark-template-customization`}\r\n            component={Customization}\r\n          />\r\n        </Switch>\r\n      </Router>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Show;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\ProductDetails.js",["402","403","404","405","406"],"import React, { Fragment, useState, useEffect, SyntheticEvent } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// Import css files\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport Footer from \"./Footer\";\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport Container from \"@mui/material/Container\";\r\n// import Slider from \"react-slick\";\r\nimport Header from \"./Header\";\r\nimport { base_url, port } from \"../../../../../Consts\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardMedia from \"@mui/material/CardMedia\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Tabs from \"@mui/material/Tabs\";\r\nimport Tab from \"@mui/material/Tab\";\r\nimport Box from \"@mui/material/Box\";\r\nconst ProductDetails = (props) => {\r\n\r\n  const [themeCustomization, setThemeCustomization] = useState([]);\r\n  const [mode, setMode] = useState(\"dark\" );\r\n\r\n  const theme = createTheme({\r\n    palette: {\r\n      mode:mode ,\r\n      warning: {\r\n        // button background\r\n        main: themeCustomization?.button_background_color ?themeCustomization.button_background_color: \"#ff751d\" ,\r\n      },\r\n    },\r\n    typography: {\r\n      fontFamily: themeCustomization?.font?themeCustomization.font: \"sans-serif\",\r\n      subtitle1: {\r\n        fontSize: themeCustomization?.product_discription_font_size?themeCustomization.product_discription_font_size: 10,\r\n        color: themeCustomization?.product_discription_color?themeCustomization.product_discription_color: \"#777\",\r\n      },\r\n      // price\r\n      body1: {\r\n        fontSize: themeCustomization?.price_font_size?themeCustomization.price_font_size: 12,\r\n        color: themeCustomization?.price_color?themeCustomization.price_color: \"#f1fcfe\",\r\n      },\r\n      // product Names\r\n      button: {\r\n        fontSize: themeCustomization?.product_name_font_size?themeCustomization.product_name_font_size: 12,\r\n        color: themeCustomization?.product_name_color?themeCustomization.product_name_color: \"#ff751d\",\r\n      },\r\n      // categories and sub categories\r\n      overline: {\r\n        fontSize: themeCustomization?.categories_and_sub_categoies_font_size?themeCustomization.categories_and_sub_categoies_font_size: 12,\r\n        color: themeCustomization?.categories_and_sub_categoies_color?themeCustomization.categories_and_sub_categoies_color: \"#ff751d\",\r\n      },\r\n      // branch Name\r\n      h6:{\r\n        fontSize: themeCustomization?.branch_name_font_size?themeCustomization.branch_name_font_size: 14,\r\n        color: themeCustomization?.branch_name_color?themeCustomization.branch_name_color: \"#ff751d\", \r\n      },\r\n    },\r\n    components: {\r\n      MuiButton: {\r\n        variants: [\r\n          {\r\n            // button\r\n            props: { variant: 'contained' },\r\n            style: {\r\n              fontSize: themeCustomization?.button_text_font_size?themeCustomization.button_text_font_size: 12,\r\n              color: themeCustomization?.button_text_color?themeCustomization.button_text_color: \"#f1fcfe\",\r\n            },\r\n          }\r\n        ],\r\n      },\r\n    },\r\n  });\r\n  // for localization\r\n  const { t } = useTranslation();\r\n  const id = atob(props.match.params.id);\r\n  //for retriving data using laravel API\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [variantData, setVariantData] = useState([]);\r\n  const [variantsWithPictures, setVariantsWithPictures] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  useEffect(() => {\r\n    axios.get(`/api/GetCustomization/1`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setThemeCustomization(res.data.fetchData[0].Customization);\r\n        setMode(res.data.fetchData[0].Customization?.mode)\r\n      }\r\n    });\r\n    axios.get(`/api/GetProduct/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setFetchData(res.data.fetchData);\r\n        // console.log(res.data.fetchData);\r\n      }\r\n      setLoading(false);\r\n    });\r\n    axios.get(`/api/GetVariantsBasedOnProduct/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setVariantData(res.data.fetchData);\r\n      }\r\n    });\r\n    axios\r\n      .get(`/api/GetVariantsBasedOnProductWithPictures/${id}`)\r\n      .then((res) => {\r\n        if (res.data.status === 200) {\r\n          setVariantsWithPictures(res.data.fetchData);\r\n          // console.log(res.data.fetchData);\r\n        }\r\n      });\r\n  }, [id]);\r\n  const [value, setValue] = useState(0);\r\n\r\n  const handleChange = (event: SyntheticEvent, newValue: number) => {\r\n    setValue(newValue);\r\n  };\r\n  var viewImages_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"container \">\r\n        <div\r\n          className=\"spinner-border text-primary \"\r\n          role=\"status\"\r\n          style={{ position: \"fixed\", top: \"50%\", left: \"50%\" }}\r\n        >\r\n          <span className=\"sr-only\">{t(\"loading\")}</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewImages_HTMLTABLE = fetchData.map((item, i) => {\r\n      return (\r\n          <Grid item xs={12} sm={12} md={12} key={i}>\r\n            <Card\r\n            className=\"my-2\"\r\n              sx={{\r\n                // height: \"100%\",\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n              }}\r\n            >\r\n              <CardMedia\r\n                component=\"img\"\r\n                sx={\r\n                  {\r\n                    // 16:9\r\n                    // pt: \"40.25%\",\r\n                  }\r\n                }\r\n                sx={{ height: \"200px\", objectFit: \"contain\" }}\r\n                image={`http://${base_url}:${port}/images/products/${item.image}`}\r\n                alt=\"Image\"\r\n                // className=\"d-block w-100 img-thumbnail\"\r\n              />\r\n            </Card>\r\n            <Card\r\n            // sx={{\r\n            //   // height: \"100%\",\r\n            //   // display: \"flex\",\r\n            //   // flexDirection: \"column\",\r\n            // }}\r\n            >\r\n              <CardContent\r\n                sx={{ flexGrow: 1 }}\r\n                // className=\"text-left\"\r\n              >\r\n                <Typography variant=\"overline\" gutterBottom>\r\n                  {t(\"product_name\")}: {item.ProductName}\r\n                </Typography>\r\n                <Typography variant=\"body2\" gutterBottom>\r\n                  {t(\"description\")}: {item.Description}\r\n                </Typography>\r\n                <Typography variant=\"body2\" gutterBottom>\r\n                  {t(\"unit\")}: {item.UnitName}\r\n                </Typography>\r\n                <Typography variant=\"overline\" gutterBottom>\r\n\r\n                <Tabs\r\n                  value={value}\r\n                  onChange={handleChange}\r\n                  textColor=\"inherit\"\r\n                  // aria-label=\"secondary tabs example\"\r\n                  variant=\"scrollable\"\r\n                  scrollButtons=\"auto\"\r\n                  aria-label=\"scrollable auto tabs example\"\r\n                >\r\n                  <Tab label=\"Item One\" />\r\n                  <Tab label=\"Item Two\" />\r\n                  <Tab label=\"Item Three\" />\r\n                  <Tab label=\"Item Four\" />\r\n                  <Tab label=\"Item Five\" />\r\n                  <Tab label=\"Item Six\" />\r\n                  <Tab label=\"Item Seven\" />\r\n                </Tabs>\r\n                </Typography>\r\n\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n         \r\n      );\r\n    });\r\n  }\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <Container maxWidth=\"lg\">\r\n        <Header\r\n          // title={branch[0]?.BrancheName}\r\n          categories={0}\r\n          subcategories={0}\r\n          // setSubCategories={setSubCategories}\r\n          // activeSubCategory={activeSubCategory}\r\n          setMode={setMode}\r\n          mode={mode}\r\n        />\r\n        <main>\r\n          \r\n          <Grid container spacing={2}>\r\n            {viewImages_HTMLTABLE}\r\n          </Grid>\r\n        </main>\r\n        <Typography variant=\"overline\" display=\"block\" gutterBottom>\r\n            {t(\"product_variants\")}:\r\n            \r\n          </Typography>\r\n          <Grid container spacing={2}>\r\n            {variantsWithPictures.map((item, i) => {\r\n              return (\r\n                <Grid item xs={3} sm={2} md={2} key={i}>\r\n                  <Card\r\n                    sx={{\r\n                      // height: \"100%\",\r\n                      display: \"flex\",\r\n                      flexDirection: \"column\",\r\n                    }}\r\n                  >\r\n                    <CardMedia\r\n                      component=\"img\"\r\n                      sx={\r\n                        {\r\n                          // 16:9\r\n                          // pt: \"40.25%\",\r\n                        }\r\n                      }\r\n                      sx={{ height: \"100px\", objectFit: \"contain\" }}\r\n                      image={`http://${base_url}:${port}/images/variants_pics/${item.PicturesLocation}`}\r\n                      alt=\"Image\"\r\n                    />\r\n                    <Link to={`/order-details/${btoa(item.product_id)}`}>\r\n                      <CardContent sx={{ flexGrow: 1 }} className=\"text-center\">\r\n                        <Typography\r\n                          variant=\"overline\"\r\n                          display=\"block\"\r\n                          gutterBottom\r\n                          // sx={{ color: \"#f27d1e\" }}\r\n                        >\r\n                          {item.VariationName}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" gutterBottom>\r\n                          {item.UnitName}\r\n                        </Typography>\r\n                        <Typography variant=\"body1\" gutterBottom>\r\n                          {item.CurrentPrice + \" \" + item.currency_code}\r\n                          {item.OldPrice === null\r\n                            ? \" \"\r\n                            : item.OldPrice + \" \" + item.currency_code}\r\n                        </Typography>\r\n                      </CardContent>\r\n                    </Link>\r\n                  </Card>\r\n                </Grid>\r\n              );\r\n            })}\r\n          </Grid>\r\n        <Footer title=\"Checkout\" />\r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default ProductDetails;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\Main.js",["407","408","409","410","411","412","413"],"import React, { useState, useEffect } from \"react\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Container from \"@mui/material/Container\";\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport Header from \"./Header\";\r\nimport Footer from \"./Footer\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardMedia from \"@mui/material/CardMedia\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport axios from \"axios\";\r\nimport { base_url, port } from \"../../../../../Consts\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nvar hold = 1;\r\nexport default function Main(props) {\r\n  const [loading, setLoading] = useState(true);\r\n  const { t } = useTranslation();\r\n  const branchId = atob(props.match.params.id);\r\n  const [branch, setBranch] = useState([]);\r\n  const [categories, setCategories] = useState([]);\r\n  const [subcategories, setSubCategories] = useState([]);\r\n  const [products, setProducts] = useState([]);\r\n  const [activeSubCategory, setActiveSubCategory] = useState(0);\r\n  const [themeCustomization, setThemeCustomization] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios.get(`/api/GetTempBasedOnBranch/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setThemeCustomization(res.data.fetchData[0]?.Customization);\r\n        setMode(res.data.fetchData[0]?.Customization?.mode ? res.data.fetchData[0]?.Customization?.mode : \"dark\" )\r\n        // console.log(res.data.fetchData[0].Customization);\r\n      }\r\n    });\r\n    axios.get(`/api/GetBranchForShow/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setBranch(res.data.data);\r\n      }\r\n    });\r\n    axios.get(`/api/GetCategories/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setCategories(res.data.fetchData);\r\n      }\r\n    });\r\n    axios.get(`/api/getSubCateBasedOnBranch/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        // console.log(res.data.fetchData[0].sub_id);\r\n        setSubCategories(res.data.fetchData);\r\n        axios\r\n          .get(\r\n            `/api/GetProductsBasedOnSubCategory/${res.data.fetchData[0]?.sub_id}`\r\n          )\r\n          .then((res) => {\r\n            if (res.data.status === 200) {\r\n              setProducts(res.data.data);\r\n              setActiveSubCategory(res.data.data[0]?.sub_category_id);\r\n            }\r\n          });\r\n        setLoading(false);\r\n      }\r\n    });\r\n  }, []);\r\n  const [changeState, setChangeState] = useState(true);\r\n  const fetchMoreData = () => {\r\n    if (hold < subcategories.length) {\r\n      axios.get(`/api/getSubCateBasedOnBranch/${branchId}`).then((res) => {\r\n        if (res.data.status === 200) {\r\n          setActiveSubCategory(res.data.fetchData[hold].sub_id);\r\n          // console.log(res.data.fetchData[hold].sub_id);\r\n\r\n          axios\r\n            .get(\r\n              `/api/GetProductsBasedOnSubCategory/${res.data.fetchData[hold].sub_id}`\r\n            )\r\n            .then((res) => {\r\n              if (res.data.status === 200) {\r\n                if (res.data.data.length === 0) {\r\n                  hold = hold + 1;\r\n                  // console.log(res.data.data);\r\n                  fetchMoreData();\r\n                } else {\r\n                  hold = hold + 1;\r\n                  setProducts(products.concat(res.data.data));\r\n                }\r\n              }\r\n            });\r\n\r\n          setSubCategories(res.data.fetchData);\r\n        }\r\n      });\r\n    } else {\r\n      setChangeState(false);\r\n    }\r\n    // console.log(hold);\r\n  };\r\n  // design start\r\n  const [mode, setMode] = useState(\"dark\");\r\n  const theme = createTheme({\r\n    palette: {\r\n      mode:mode,\r\n      warning: {\r\n        // button background\r\n        main: themeCustomization?.button_background_color ?themeCustomization.button_background_color: \"#ff751d\" ,\r\n      },\r\n    },\r\n    typography: {\r\n      fontFamily: themeCustomization?.font?themeCustomization.font: \"sans-serif\",\r\n      subtitle1: {\r\n        fontSize: themeCustomization?.product_discription_font_size?themeCustomization.product_discription_font_size: 10,\r\n        color: themeCustomization?.product_discription_color?themeCustomization.product_discription_color: \"#777\",\r\n      },\r\n      // price\r\n      body1: {\r\n        fontSize: themeCustomization?.price_font_size?themeCustomization.price_font_size: 12,\r\n        color: themeCustomization?.price_color?themeCustomization.price_color: \"#f1fcfe\",\r\n      },\r\n      // product Names\r\n      button: {\r\n        fontSize: themeCustomization?.product_name_font_size?themeCustomization.product_name_font_size: 12,\r\n        color: themeCustomization?.product_name_color?themeCustomization.product_name_color: \"#ff751d\",\r\n      },\r\n      // categories and sub categories\r\n      overline: {\r\n        fontSize: themeCustomization?.categories_and_sub_categoies_font_size?themeCustomization.categories_and_sub_categoies_font_size: 12,\r\n        color: themeCustomization?.categories_and_sub_categoies_color?themeCustomization.categories_and_sub_categoies_color: \"#ff751d\",\r\n      },\r\n      // branch Name\r\n      h6:{\r\n        fontSize: themeCustomization?.branch_name_font_size?themeCustomization.branch_name_font_size: 14,\r\n        color: themeCustomization?.branch_name_color?themeCustomization.branch_name_color: \"#ff751d\", \r\n      },\r\n    },\r\n    components: {\r\n      MuiButton: {\r\n        variants: [\r\n          {\r\n            // button\r\n            props: { variant: 'contained' },\r\n            style: {\r\n              fontSize: themeCustomization?.button_text_font_size?themeCustomization.button_text_font_size: 12,\r\n              color: themeCustomization?.button_text_color?themeCustomization.button_text_color: \"#f1fcfe\",\r\n            },\r\n          }\r\n        ],\r\n      },\r\n    },\r\n  });\r\n  // design end\r\n\r\n  var viewShow_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div\r\n        className=\"spinner-border text-primary \"\r\n        role=\"status\"\r\n        style={{position: \"fixed\", top: \"50%\", left: \"50%\" }}\r\n      >\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewShow_HTMLTABLE = products?.map((item, i) => {\r\n      return (\r\n        <Grid item xs={\r\n          themeCustomization?.number_of_products_in_each_row==1?12:\r\n          themeCustomization?.number_of_products_in_each_row==2?6:\r\n          themeCustomization?.number_of_products_in_each_row==3?4:\r\n          themeCustomization?.number_of_products_in_each_row==4?3:\r\n          themeCustomization?.number_of_products_in_each_row==5?3:\r\n          themeCustomization?.number_of_products_in_each_row==6?2:\r\n          6} \r\n          // sm={2} md={2} \r\n          key={i}>\r\n          <Card\r\n            sx={{\r\n              // height: \"100%\",\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n            }}\r\n          >\r\n            <CardMedia\r\n              component=\"img\"\r\n              sx={{ height: \"100px\", objectFit: \"contain\" }}\r\n              image={`http://${base_url}:${port}/images/products/${item.image}`}\r\n              alt=\"Image\"\r\n            />\r\n            <Link to={`/product-details/${btoa(item.product_id)}`}>\r\n              <CardContent sx={{ flexGrow: 1 }}>\r\n                <Typography\r\n                  variant=\"button\"\r\n                  display=\"block\"\r\n                  gutterBottom\r\n                >\r\n                  {item.ProductName}\r\n                </Typography>\r\n                <Typography variant=\"subtitle1\" gutterBottom>\r\n                  {item.Description}\r\n                </Typography>\r\n              </CardContent>\r\n            </Link>\r\n          </Card>\r\n        </Grid>\r\n      );\r\n    });\r\n  }\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <Container maxWidth=\"lg\">\r\n        <Header\r\n          title={branch[0]?.BrancheName}\r\n          categories={categories}\r\n          subcategories={subcategories}\r\n          setSubCategories={setSubCategories}\r\n          activeSubCategory={activeSubCategory}\r\n          setMode={setMode}\r\n          mode={mode}\r\n        />\r\n        \r\n        <main>\r\n          <Grid container spacing={4}>\r\n            {viewShow_HTMLTABLE}\r\n          </Grid>\r\n        </main>\r\n        <InfiniteScroll\r\n          dataLength={products.length} //This is important field to render the next data\r\n          next={fetchMoreData}\r\n          hasMore={changeState}\r\n          loader={\r\n            <p className=\"text-center pt-5\">\r\n              <b>{t(\"loading\")}</b>\r\n            </p>\r\n          }\r\n          endMessage={\r\n            <p style={{ textAlign: \"center \" }}>\r\n              <b>{t(\"yay_you_have_seen_it_all\")}</b>\r\n            </p>\r\n          }\r\n        ></InfiniteScroll>\r\n      </Container>\r\n      <Footer title=\"Checkout Order\" />\r\n    </ThemeProvider>\r\n  );\r\n}\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\OrderDetails.js",["414","415","416","417","418"],"import React, { Fragment, useState, useEffect, SyntheticEvent } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// Import css files\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport Footer from \"./Footer\";\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport Container from \"@mui/material/Container\";\r\n// import Slider from \"react-slick\";\r\nimport Header from \"./Header\";\r\nimport { base_url, port } from \"../../../../../Consts\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardMedia from \"@mui/material/CardMedia\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Radio from '@mui/material/Radio';\r\nimport RadioGroup from '@mui/material/RadioGroup';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Slider from \"react-slick\";\r\n\r\nconst OrderDetails = (props) => {\r\n  const [themeCustomization, setThemeCustomization] = useState([]);\r\n  const [mode, setMode] = useState(themeCustomization?.mode ? themeCustomization.mode: \"dark\" );\r\n\r\n  const theme = createTheme({\r\n    palette: {\r\n      mode:mode ,\r\n      warning: {\r\n        // button background\r\n        main: themeCustomization?.button_background_color ?themeCustomization.button_background_color: \"#ff751d\" ,\r\n      },\r\n    },\r\n    typography: {\r\n      fontFamily: themeCustomization?.font?themeCustomization.font: \"sans-serif\",\r\n      subtitle1: {\r\n        fontSize: themeCustomization?.product_discription_font_size?themeCustomization.product_discription_font_size: 10,\r\n        color: themeCustomization?.product_discription_color?themeCustomization.product_discription_color: \"#777\",\r\n      },\r\n      // price\r\n      body1: {\r\n        fontSize: themeCustomization?.price_font_size?themeCustomization.price_font_size: 12,\r\n        color: themeCustomization?.price_color?themeCustomization.price_color: \"#f1fcfe\",\r\n      },\r\n      // product Names\r\n      button: {\r\n        fontSize: themeCustomization?.product_name_font_size?themeCustomization.product_name_font_size: 12,\r\n        color: themeCustomization?.product_name_color?themeCustomization.product_name_color: \"#ff751d\",\r\n      },\r\n      // categories and sub categories\r\n      overline: {\r\n        fontSize: themeCustomization?.categories_and_sub_categoies_font_size?themeCustomization.categories_and_sub_categoies_font_size: 12,\r\n        color: themeCustomization?.categories_and_sub_categoies_color?themeCustomization.categories_and_sub_categoies_color: \"#ff751d\",\r\n      },\r\n      // branch Name\r\n      h6:{\r\n        fontSize: themeCustomization?.branch_name_font_size?themeCustomization.branch_name_font_size: 14,\r\n        color: themeCustomization?.branch_name_color?themeCustomization.branch_name_color: \"#ff751d\", \r\n      },\r\n    },\r\n    components: {\r\n      MuiButton: {\r\n        variants: [\r\n          {\r\n            // button\r\n            props: { variant: 'contained' },\r\n            style: {\r\n              fontSize: themeCustomization?.button_text_font_size?themeCustomization.button_text_font_size: 12,\r\n              color: themeCustomization?.button_text_color?themeCustomization.button_text_color: \"#f1fcfe\",\r\n            },\r\n          }\r\n        ],\r\n      },\r\n    },\r\n  });\r\n  // for localization\r\n  const { t } = useTranslation();\r\n  const id = atob(props.match.params.id);\r\n  //for retriving data using laravel API\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [variantData, setVariantData] = useState([]);\r\n  const [variantsWithPictures, setVariantsWithPictures] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    axios.get(`/api/GetCustomization/1`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setThemeCustomization(res.data.fetchData[0].Customization);\r\n        setMode(res.data.fetchData[0].Customization?.mode)\r\n      }\r\n    });\r\n    axios.get(`/api/GetProduct/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setFetchData(res.data.fetchData);\r\n        // console.log(res.data.fetchData);\r\n      }\r\n      setLoading(false);\r\n    });\r\n    axios.get(`/api/GetVariantsBasedOnProduct/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setVariantData(res.data.fetchData);\r\n      }\r\n    });\r\n    axios\r\n      .get(`/api/GetVariantsBasedOnProductWithPictures/${id}`)\r\n      .then((res) => {\r\n        if (res.data.status === 200) {\r\n          setVariantsWithPictures(res.data.fetchData);\r\n          // console.log(res.data.fetchData);\r\n        }\r\n      });\r\n  }, [id]);\r\n\r\n  var viewImages_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"container \">\r\n        <div\r\n          className=\"spinner-border text-primary \"\r\n          role=\"status\"\r\n          style={{ position: \"fixed\", top: \"50%\", left: \"50%\" }}\r\n        >\r\n          <span className=\"sr-only\">{t(\"loading\")}</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewImages_HTMLTABLE = fetchData.map((item, i) => {\r\n      return (\r\n          <Grid item xs={12} sm={12} md={12} key={i}>\r\n            <Card\r\n            className=\"my-2\"\r\n              sx={{\r\n                // height: \"100%\",\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n              }}\r\n            >\r\n              <CardMedia\r\n                component=\"img\"\r\n                sx={{ height: \"200px\", objectFit: \"contain\" }}\r\n                image={`http://${base_url}:${port}/images/products/${item.image}`}\r\n                alt=\"Image\"\r\n                // className=\"d-block w-100 img-thumbnail\"\r\n              />\r\n            </Card>\r\n            <Card\r\n            // sx={{\r\n            //   // height: \"100%\",\r\n            //   // display: \"flex\",\r\n            //   // flexDirection: \"column\",\r\n            // }}\r\n            >\r\n              <CardContent\r\n                sx={{ flexGrow: 1 }}\r\n              >\r\n                <Typography variant=\"h6\"  gutterBottom>\r\n                   {item.ProductName}\r\n                </Typography>\r\n                <Typography variant=\"body2\" gutterBottom>\r\n                  {item.Description}\r\n                </Typography>\r\n                \r\n                <RadioGroup\r\n                aria-label=\"Drinks\"\r\n                defaultValue=\"1\"\r\n                name=\"radio-buttons-group\"\r\n            >\r\n                <FormControlLabel value=\"1\" control={<Radio />} label=\"1\" />\r\n                <FormControlLabel value=\"2\" control={<Radio />} label=\"2\" />\r\n                <FormControlLabel value=\"3\" control={<Radio />} label=\"3\" />\r\n                <FormControlLabel value=\"4\" control={<Radio />} label=\"4\" />\r\n            </RadioGroup>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n         \r\n      );\r\n    });\r\n  }\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <Container maxWidth=\"lg\">\r\n        <Header\r\n          // title={branch[0]?.BrancheName}\r\n          categories={0}\r\n          subcategories={0}\r\n          // setSubCategories={setSubCategories}\r\n          // activeSubCategory={activeSubCategory}\r\n          setMode={setMode}\r\n          mode={mode}\r\n        />\r\n        <main>\r\n          {/* <Grid container spacing={2}> */}\r\n          <Slider dots={false} infinite={true} slidesToShow={1} slidesToScroll={1}>\r\n            {viewImages_HTMLTABLE}\r\n          </Slider>\r\n          {/* </Grid> */}\r\n        </main>\r\n      </Container>\r\n      <Footer title=\"Add\" />\r\n\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default OrderDetails;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\Customization.js",["419","420","421","422"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CRow,\r\n  CFormLabel,\r\n  CCol,\r\n} from \"@coreui/react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// import Switch from \"react-switch\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { FormControlLabel, RadioGroup, Radio } from \"@mui/material\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport Select from \"@mui/material/Select\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardMedia from \"@mui/material/CardMedia\";\r\nimport { CardActionArea } from \"@mui/material\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Customization = (props) => {\r\n  const { t } = useTranslation();\r\n  // const templateId = atob(props.match.params.id);\r\n  const templateId = props.history.location.state.id;\r\n\r\n  const history = useHistory();\r\n\r\n  const [settings, setSettings] = useState([]);\r\n  const handleInput = (e) => {\r\n    setSettings({ ...settings, [e.target.name]: e.target.value });\r\n    const formData = new FormData();\r\n    formData.append(\r\n      \"settings\",\r\n      JSON.stringify({ ...settings, [e.target.name]: e.target.value })\r\n    );\r\n    axios\r\n      .post(`/api/InsertCustomization/${templateId}`, formData)\r\n      .then((res) => {\r\n        if (res.data.status === 200) {\r\n          setLoading(true);\r\n        }\r\n      });\r\n  };\r\n  // const save = () => {\r\n  //   const formData = new FormData();\r\n  //   formData.append(\"settings\", JSON.stringify(settings));\r\n  //   axios\r\n  //     .post(`/api/InsertCustomization/${templateId}`, formData)\r\n  //     .then((res) => {\r\n  //       if (res.data.status === 200) {\r\n  //         setLoading(true);\r\n  //       }\r\n  //     });\r\n  // };\r\n  const reset = (e) => {\r\n    e.preventDefault();\r\n    axios.get(`/api/ResetCustomization/${templateId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setSettings([]);\r\n        setLoading(true);\r\n        swal(\"Success\", res.data.message, \"success\");\r\n      }\r\n    });\r\n  };\r\n  const [template, setTemplate] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    axios.get(`/api/GetTemplate/${templateId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setSettings(res.data.fetchData[0].Customization);\r\n        setTemplate(res.data.fetchData[0]);\r\n      }\r\n      setLoading(false);\r\n    });\r\n    // const interval = setInterval(() => {\r\n    //   save();\r\n    // }, 15000);\r\n    // return () => clearInterval(interval);\r\n  }, [loading]);\r\n\r\n  var viewPreview_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    viewPreview_HTMLTABLE = (\r\n      <CCard>\r\n        <CCardHeader component=\"h5\">{t(\"preview\")}</CCardHeader>\r\n        <CCardBody>\r\n          <div\r\n            className=\"spinner-border text-primary\"\r\n            role=\"status\"\r\n            style={{ position: \"fixed\", top: \"0%\", left: \"50%\" }}\r\n          >\r\n            <span className=\"sr-only\">{t(\"loading\")}</span>\r\n          </div>\r\n        </CCardBody>\r\n      </CCard>\r\n    );\r\n  } else {\r\n    viewPreview_HTMLTABLE = (\r\n      <CCard>\r\n        <CCardHeader component=\"h5\">{t(\"preview\")}</CCardHeader>\r\n        <CCardBody>\r\n          <Card>\r\n            <CardActionArea>\r\n              <CardMedia\r\n                component=\"iframe\"\r\n                height=\"600\"\r\n                image={`/${template?.URL}/${btoa(3)}`}\r\n                alt=\"template\"\r\n              />\r\n            </CardActionArea>\r\n          </Card>\r\n        </CCardBody>\r\n      </CCard>\r\n    );\r\n  }\r\n  return (\r\n    <>\r\n      <div className=\"row\">\r\n        <div className=\"col-7\">\r\n          <CCard>\r\n            <CCardHeader component=\"h5\">{t(\"customization\")}</CCardHeader>\r\n            <CCardBody>\r\n              <CRow className=\"mb-2\">\r\n                <CFormLabel className=\"col-sm-6 col-form-label font-weight-bold\">\r\n                  {t(\"Name\")}\r\n                </CFormLabel>\r\n                <CFormLabel className=\"col-sm-3 col-form-label font-weight-bold\">\r\n                  {t(\"value\")}\r\n                </CFormLabel>\r\n                <CFormLabel className=\"col-sm-3 col-form-label text-center font-weight-bold\">\r\n                  {t(\"default\")}\r\n                </CFormLabel>\r\n              </CRow>\r\n              <CRow className=\"mb-2\">\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"branch_name_color\")}\r\n                </CFormLabel>\r\n                <CCol sm={2} className=\"text-left\">\r\n                  <input\r\n                    type=\"color\"\r\n                    onChange={handleInput}\r\n                    value={settings?.branch_name_color}\r\n                    name=\"branch_name_color\"\r\n                  />\r\n                </CCol>\r\n                <CCol sm={4} className=\"text-center\">\r\n                  <input type=\"color\" disabled value=\"#ff751d\" />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"branch_name_font_size\")}\r\n                </CFormLabel>\r\n                <CCol sm={2}>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    onChange={handleInput}\r\n                    value={settings?.branch_name_font_size}\r\n                    type=\"number\"\r\n                    name=\"branch_name_font_size\"\r\n                  />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-4 col-form-label text-center\"\r\n                >\r\n                  {t(\"14\")}\r\n                </CFormLabel>\r\n              </CRow>\r\n\r\n              <CRow className=\"mb-2\">\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"categories_and_sub_categoies_color\")}\r\n                </CFormLabel>\r\n                <CCol sm={3} className=\"text-left\">\r\n                  <input\r\n                    type=\"color\"\r\n                    onChange={handleInput}\r\n                    value={settings?.categories_and_sub_categoies_color}\r\n                    name=\"categories_and_sub_categoies_color\"\r\n                  />\r\n                </CCol>\r\n                <CCol sm={2} className=\"text-center\">\r\n                  <input type=\"color\" disabled value=\"#f1fcfe\" />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"categories_and_sub_categoies_font_size\")}\r\n                </CFormLabel>\r\n                <CCol sm={2}>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    onChange={handleInput}\r\n                    value={settings?.categories_and_sub_categoies_font_size}\r\n                    type=\"number\"\r\n                    name=\"categories_and_sub_categoies_font_size\"\r\n                  />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-4 col-form-label text-center\"\r\n                >\r\n                  {t(\"12\")}\r\n                </CFormLabel>\r\n              </CRow>\r\n\r\n              <CRow className=\"mb-2\">\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"product_name_color\")}\r\n                </CFormLabel>\r\n                <CCol sm={3} className=\"text-left\">\r\n                  <input\r\n                    type=\"color\"\r\n                    onChange={handleInput}\r\n                    value={settings?.product_name_color}\r\n                    name=\"product_name_color\"\r\n                  />\r\n                </CCol>\r\n                <CCol sm={2} className=\"text-center\">\r\n                  <input type=\"color\" disabled value=\"#ff751d\" />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"product_name_font_size\")}\r\n                </CFormLabel>\r\n                <CCol sm={2}>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    onChange={handleInput}\r\n                    value={settings?.product_name_font_size}\r\n                    type=\"number\"\r\n                    name=\"product_name_font_size\"\r\n                  />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-4 col-form-label text-center\"\r\n                >\r\n                  {t(\"12\")}\r\n                </CFormLabel>\r\n              </CRow>\r\n              <CRow className=\"mb-2\">\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"product_discription_color\")}\r\n                </CFormLabel>\r\n                <CCol sm={3} className=\"text-left\">\r\n                  <input\r\n                    type=\"color\"\r\n                    onChange={handleInput}\r\n                    value={settings?.product_discription_color}\r\n                    name=\"product_discription_color\"\r\n                  />\r\n                </CCol>\r\n                <CCol sm={2} className=\"text-center\">\r\n                  <input type=\"color\" disabled value=\"#777\" />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"product_discription_font_size\")}\r\n                </CFormLabel>\r\n                <CCol sm={2}>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    onChange={handleInput}\r\n                    value={settings?.product_discription_font_size}\r\n                    type=\"number\"\r\n                    name=\"product_discription_font_size\"\r\n                  />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-4 col-form-label text-center\"\r\n                >\r\n                  {t(\"10\")}\r\n                </CFormLabel>\r\n              </CRow>\r\n              <CRow className=\"mb-2\">\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"price_color\")}\r\n                </CFormLabel>\r\n                <CCol sm={3} className=\"text-left\">\r\n                  <input\r\n                    type=\"color\"\r\n                    onChange={handleInput}\r\n                    value={settings?.price_color}\r\n                    name=\"price_color\"\r\n                  />\r\n                </CCol>\r\n                <CCol sm={2} className=\"text-center\">\r\n                  <input type=\"color\" disabled value=\"#ff751d\" />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"price_font_size\")}\r\n                </CFormLabel>\r\n                <CCol sm={2}>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    onChange={handleInput}\r\n                    value={settings?.price_font_size}\r\n                    type=\"number\"\r\n                    name=\"price_font_size\"\r\n                  />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-4 col-form-label text-center\"\r\n                >\r\n                  {t(\"12\")}\r\n                </CFormLabel>\r\n              </CRow>\r\n              <CRow className=\"mb-2\">\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"button_text_color\")}\r\n                </CFormLabel>\r\n                <CCol sm={2} className=\"text-left\">\r\n                  <input\r\n                    type=\"color\"\r\n                    onChange={handleInput}\r\n                    value={settings?.button_text_color}\r\n                    // value={themes.TextColor}\r\n                    name=\"button_text_color\"\r\n                  />\r\n                </CCol>\r\n                <CCol sm={4} className=\"text-center\">\r\n                  <input\r\n                    type=\"color\"\r\n                    disabled\r\n                    // onChange={handleInput}\r\n                    value=\"#f1fcfe\"\r\n                  />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"button_background_color\")}\r\n                </CFormLabel>\r\n                <CCol sm={2} className=\"text-left\">\r\n                  <input\r\n                    type=\"color\"\r\n                    onChange={handleInput}\r\n                    value={settings?.button_background_color}\r\n                    //   value={themes.TextColor}\r\n                    name=\"button_background_color\"\r\n                  />\r\n                </CCol>\r\n                <CCol sm={4} className=\"text-center\">\r\n                  <input\r\n                    type=\"color\"\r\n                    disabled\r\n                    // onChange={handleInput}\r\n                    value=\"#ff751d\"\r\n                  />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"button_text_font_size\")}\r\n                </CFormLabel>\r\n                <CCol sm={2}>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    onChange={handleInput}\r\n                    value={settings?.button_text_font_size}\r\n                    type=\"number\"\r\n                    name=\"button_text_font_size\"\r\n                  />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-4 col-form-label text-center\"\r\n                >\r\n                  {t(\"12\")}\r\n                </CFormLabel>\r\n              </CRow>\r\n              <CRow className=\"mb-2\">\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"number_of_products_in_each_row\")}\r\n                </CFormLabel>\r\n                <CCol sm={2}>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    onChange={handleInput}\r\n                    type=\"number\"\r\n                    value={settings?.number_of_products_in_each_row}\r\n                    name=\"number_of_products_in_each_row\"\r\n                  />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-4 col-form-label text-center\"\r\n                >\r\n                  {t(\"2\")}\r\n                </CFormLabel>\r\n              </CRow>\r\n              <CRow>\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"mode\")}\r\n                </CFormLabel>\r\n\r\n                <CCol sm={2} className=\"text-left\">\r\n                  <RadioGroup\r\n                    row\r\n                    aria-label=\"dark\"\r\n                    defaultValue={settings?.mode ? settings.mode : \"dark\"}\r\n                    name=\"mode\"\r\n                    onChange={handleInput}\r\n                  >\r\n                    <FormControlLabel\r\n                      value=\"light\"\r\n                      control={<Radio />}\r\n                      label=\"Light\"\r\n                    />\r\n                    <FormControlLabel\r\n                      value=\"dark\"\r\n                      control={<Radio />}\r\n                      label=\"Dark\"\r\n                    />\r\n                  </RadioGroup>\r\n                </CCol>\r\n                <CCol sm={4} className=\"text-center\">\r\n                  <CFormLabel\r\n                    htmlFor=\"staticEmail\"\r\n                    className=\"col-sm-6 col-form-label \"\r\n                  >\r\n                    Dark\r\n                  </CFormLabel>\r\n                </CCol>\r\n              </CRow>\r\n              <CRow>\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"font\")}\r\n                </CFormLabel>\r\n\r\n                <CCol sm={2} className=\"text-left\">\r\n                  <FormControl fullWidth>\r\n                    <InputLabel id=\"demo-simple-select-label\">\r\n                      {t(\"fonts\")}\r\n                    </InputLabel>\r\n                    <Select\r\n                      labelId=\"demo-simple-select-label\"\r\n                      id=\"demo-simple-select\"\r\n                      //   value={age}\r\n                      label=\"fonts\"\r\n                      onChange={handleInput}\r\n                      name=\"font\"\r\n                      defaultValue={\r\n                        settings?.font ? settings.font : \"sans-serif\"\r\n                      }\r\n                    >\r\n                      <MenuItem value=\"-apple-system\">-apple-system</MenuItem>\r\n                      <MenuItem value=\"BlinkMacSystemFont\">\r\n                        BlinkMacSystemFont\r\n                      </MenuItem>\r\n                      <MenuItem value=\"Segoe UI\">Segoe UI</MenuItem>\r\n                      <MenuItem value=\"Roboto\">Roboto</MenuItem>\r\n                      <MenuItem value=\"Helvetica Neue\">Helvetica Neue</MenuItem>\r\n                      <MenuItem value=\"Arial\">Arial</MenuItem>\r\n                      <MenuItem value=\"sans-serif\">sans-serif</MenuItem>\r\n                      <MenuItem value=\"Apple Color Emoji\">\r\n                        Apple Color Emoji\r\n                      </MenuItem>\r\n                      <MenuItem value=\"Segoe UI Emoji\">Segoe UI Emoji</MenuItem>\r\n                      <MenuItem value=\"Segoe UI Symbol\">\r\n                        Segoe UI Symbol\r\n                      </MenuItem>\r\n                    </Select>\r\n                  </FormControl>\r\n                </CCol>\r\n                <CCol sm={4} className=\"text-center\">\r\n                  <CFormLabel\r\n                    htmlFor=\"staticEmail\"\r\n                    className=\"col-sm-6 col-form-label \"\r\n                  >\r\n                    sans-serif\r\n                  </CFormLabel>\r\n                </CCol>\r\n              </CRow>\r\n              <CRow>\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"show_preparation_time\")}\r\n                </CFormLabel>\r\n\r\n                <CCol sm={2} className=\"text-left\">\r\n                  <RadioGroup\r\n                    row\r\n                    aria-label=\"dark\"\r\n                    defaultValue={\r\n                      settings?.preparation_time\r\n                        ? settings.preparation_time\r\n                        : \"1\"\r\n                    }\r\n                    name=\"preparation_time\"\r\n                    onChange={handleInput}\r\n                  >\r\n                    <FormControlLabel\r\n                      value=\"1\"\r\n                      control={<Radio />}\r\n                      label=\"Yes\"\r\n                    />\r\n                    <FormControlLabel\r\n                      value=\"0\"\r\n                      control={<Radio />}\r\n                      label=\"No\"\r\n                    />\r\n                  </RadioGroup>\r\n                </CCol>\r\n                <CCol sm={4} className=\"text-center\">\r\n                  <CFormLabel\r\n                    htmlFor=\"staticEmail\"\r\n                    className=\"col-sm-6 col-form-label \"\r\n                  >\r\n                    Yes\r\n                  </CFormLabel>\r\n                </CCol>\r\n              </CRow>\r\n            </CCardBody>\r\n          </CCard>\r\n        </div>\r\n        <div className=\"col-5\">{viewPreview_HTMLTABLE}</div>\r\n      </div>\r\n      <div className=\"text-center mx-4 mb-4\">\r\n        <button className=\"btn btn-info m-1\" onClick={(e) => reset(e)}>\r\n          {t(\"reset_to_default\")}\r\n        </button>\r\n        <button className=\"btn btn-light m-1\" onClick={() => history.goBack()}>\r\n          {t(\"back\")}\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Customization;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\Header.js",["423"],"import  React, {useState  } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Link from \"@mui/material/Link\";\r\nimport ShoppingBasketOutlinedIcon from \"@mui/icons-material/ShoppingBasketOutlined\";\r\nimport KeyboardBackspaceIcon from \"@mui/icons-material/KeyboardBackspace\";\r\nimport Brightness4Icon from \"@mui/icons-material/Brightness4\";\r\nimport Brightness7Icon from \"@mui/icons-material/Brightness7\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport axios from \"axios\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction Header(props) {\r\n  const history = useHistory();\r\n  const { t } = useTranslation();\r\n  const [activeCategory, setActiveCategory] = useState(0);\r\n\r\n  const { title, setMode, mode,categories ,subcategories , setSubCategories, activeSubCategory} = props;\r\n  const handleChange = () => {\r\n    mode === \"dark\" ? setMode(\"light\") : setMode(\"dark\");\r\n  };\r\n  const filterCategory = (cateId) => {\r\n    axios.get(`/api/GetSubCategories/${cateId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setSubCategories(res.data.fetchData);\r\n      }\r\n    });\r\n    setActiveCategory(cateId);\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <Toolbar sx={{ borderBottom: 1, borderColor: \"divider\" ,position:\"sticky\"}}  className=\"top-0 \">\r\n        <IconButton onClick={() => history.goBack()}>\r\n          <KeyboardBackspaceIcon />\r\n        </IconButton>\r\n        <Typography\r\n          component=\"h2\"\r\n          variant=\"h6\"\r\n          align=\"center\"\r\n          noWrap\r\n          sx={{ flex: 1 }}\r\n        >\r\n          {title}\r\n        </Typography>\r\n        <IconButton>\r\n          <ShoppingBasketOutlinedIcon />\r\n        </IconButton>\r\n        <IconButton sx={{ ml: 1 }} onClick={handleChange} color=\"inherit\">\r\n          {mode === \"dark\" ? <Brightness7Icon /> : <Brightness4Icon />}\r\n        </IconButton>\r\n      </Toolbar>\r\n      {categories===0 ? ' ' :\r\n      <div>\r\n      <Typography variant=\"overline\" display=\"block\" gutterBottom>\r\n        {t('public_categories')}:\r\n      </Typography>\r\n      <Toolbar\r\n        component=\"nav\"\r\n        variant=\"dense\"\r\n        className=\"border\"\r\n        sx={{ justifyContent: \"space-between\", overflowX: \"auto\" }}\r\n      >\r\n        {categories?.map((section,i) => (\r\n          <Link\r\n            color={activeCategory === section.id ? \"#f27d1e\" : \" \"}\r\n            noWrap\r\n            key={i}\r\n            underline=\"hover\"\r\n            variant=\"body2\"\r\n            // className=\"active\"\r\n            onClick={() => filterCategory(section.id)}\r\n            sx={{ p: 1, flexShrink: 0 }}\r\n          >\r\n            {section.CategoryName }\r\n          </Link>\r\n        ))}\r\n      </Toolbar>\r\n      </div>\r\n      }\r\n      {subcategories===0 ? ' ' :\r\n      <div>\r\n          <Typography variant=\"overline\" display=\"block\" gutterBottom>\r\n          {t('sub_categories')}: \r\n        </Typography>\r\n        <Toolbar\r\n          component=\"nav\"\r\n          variant=\"dense\"\r\n          className=\"border mb-2\"\r\n\r\n          sx={{ justifyContent: \"space-between\", overflowX: \"auto\" }}\r\n        >\r\n          {subcategories?.map((section,i) => (\r\n            <Link\r\n              color={activeSubCategory === section.sub_id ? \"#f27d1e\" : \" \"}\r\n              noWrap\r\n              key={i}\r\n              underline=\"hover\"\r\n              variant=\"body2\"\r\n              sx={{ p: 1, flexShrink: 0 }}\r\n            >\r\n              {section.SubCategoryName }\r\n            </Link>\r\n          ))}\r\n        </Toolbar>\r\n      </div>\r\n      }\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\Footer.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Second\\OrderDetails.js",["424","425","426","427","428"],["429","430"],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Second\\ProductDetails.js",["431","432","433","434","435"],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Second\\Main.js",["436","437","438","439","440","441","442","443","444"],"import React, { useState, useEffect } from \"react\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Container from \"@mui/material/Container\";\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport Header from \"./Header\";\r\nimport Footer from \"./Footer\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardMedia from \"@mui/material/CardMedia\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport axios from \"axios\";\r\nimport { base_url, port } from \"../../../../../Consts\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport Box from \"@mui/material/Box\";\r\nimport Tabs, { tabsClasses } from \"@mui/material/Tabs\";\r\nimport Tab from \"@mui/material/Tab\";\r\nimport PhoneIcon from \"@mui/icons-material/Phone\";\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\nimport HorizontalScroller from \"react-horizontal-scroll-container\";\r\n\r\nvar hold = 1;\r\nexport default function Main(props) {\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  const [loading, setLoading] = useState(true);\r\n  const { t } = useTranslation();\r\n  const branchId = atob(props.match.params.id);\r\n  const [branch, setBranch] = useState([]);\r\n  const [categories, setCategories] = useState([]);\r\n  const [subcategories, setSubCategories] = useState([]);\r\n  const [products, setProducts] = useState([]);\r\n  const [activeSubCategory, setActiveSubCategory] = useState(0);\r\n  const [themeCustomization, setThemeCustomization] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios.get(`/api/GetTempBasedOnBranch/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setThemeCustomization(res.data.fetchData[0]?.Customization);\r\n        // console.log(res.data.fetchData[0].Customization);\r\n      }\r\n    });\r\n    axios.get(`/api/GetBranchForShow/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setBranch(res.data.data[0]);\r\n      }\r\n    });\r\n    axios.get(`/api/GetCategories/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setCategories(res.data.fetchData);\r\n      }\r\n    });\r\n    axios.get(`/api/getSubCateBasedOnBranch/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        // console.log(res.data.fetchData[0].sub_id);\r\n        setSubCategories(res.data.fetchData);\r\n        axios\r\n          .get(\r\n            `/api/GetProductsBasedOnSubCategory/${res.data.fetchData[0]?.sub_id}`\r\n          )\r\n          .then((res) => {\r\n            if (res.data.status === 200) {\r\n              setProducts(res.data.data);\r\n              setActiveSubCategory(res.data.data[0]?.sub_category_id);\r\n            }\r\n          });\r\n        setLoading(false);\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  // design start\r\n  const theme = createTheme({\r\n    palette: {\r\n      warning: {\r\n        // button background\r\n        main: themeCustomization?.button_background_color\r\n          ? themeCustomization.button_background_color\r\n          : \"#ff751d\",\r\n      },\r\n    },\r\n    typography: {\r\n      fontFamily: themeCustomization?.font\r\n        ? themeCustomization.font\r\n        : \"sans-serif\",\r\n      subtitle1: {\r\n        fontSize: themeCustomization?.product_discription_font_size\r\n          ? themeCustomization.product_discription_font_size\r\n          : 10,\r\n        color: themeCustomization?.product_discription_color\r\n          ? themeCustomization.product_discription_color\r\n          : \"#777\",\r\n      },\r\n      // price\r\n      body1: {\r\n        fontSize: themeCustomization?.price_font_size\r\n          ? themeCustomization.price_font_size\r\n          : 12,\r\n        color: themeCustomization?.price_color\r\n          ? themeCustomization.price_color\r\n          : \"#f1fcfe\",\r\n      },\r\n      // product Names\r\n      button: {\r\n        fontSize: themeCustomization?.product_name_font_size\r\n          ? themeCustomization.product_name_font_size\r\n          : 12,\r\n        color: themeCustomization?.product_name_color\r\n          ? themeCustomization.product_name_color\r\n          : \"#ff751d\",\r\n      },\r\n      // categories and sub categories\r\n      overline: {\r\n        fontSize: themeCustomization?.categories_and_sub_categoies_font_size\r\n          ? themeCustomization.categories_and_sub_categoies_font_size\r\n          : 12,\r\n        color: themeCustomization?.categories_and_sub_categoies_color\r\n          ? themeCustomization.categories_and_sub_categoies_color\r\n          : \"#ff751d\",\r\n      },\r\n      // branch Name\r\n      h6: {\r\n        fontSize: themeCustomization?.branch_name_font_size\r\n          ? themeCustomization.branch_name_font_size\r\n          : 14,\r\n        color: themeCustomization?.branch_name_color\r\n          ? themeCustomization.branch_name_color\r\n          : \"#ff751d\",\r\n      },\r\n    },\r\n    components: {\r\n      MuiButton: {\r\n        variants: [\r\n          {\r\n            // button\r\n            props: { variant: \"contained\" },\r\n            style: {\r\n              fontSize: themeCustomization?.button_text_font_size\r\n                ? themeCustomization.button_text_font_size\r\n                : 12,\r\n              color: themeCustomization?.button_text_color\r\n                ? themeCustomization.button_text_color\r\n                : \"#f1fcfe\",\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n  });\r\n  // design end\r\n\r\n  var viewShow_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div\r\n        className=\"spinner-border text-primary \"\r\n        role=\"status\"\r\n        style={{ position: \"fixed\", top: \"50%\", left: \"50%\" }}\r\n      >\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewShow_HTMLTABLE = products?.map((item, i) => {\r\n      return (\r\n        <Grid item xs={12} sm={12} md={12} key={i}>\r\n          <Card\r\n            sx={{\r\n              width: \"300px\",\r\n              height: \"600px\",\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n            }}\r\n          >\r\n            <CardMedia\r\n              component=\"img\"\r\n              sx={{ height: \"300px\", objectFit: \"contain\" }}\r\n              image={`http://${base_url}:${port}/images/products/${item.image}`}\r\n              alt=\"Image\"\r\n            />\r\n            <Link to={`/product-details/${btoa(item.product_id)}`}>\r\n              <CardContent sx={{ flexGrow: 1 }} className=\"text-center\">\r\n                <Typography variant=\"button\" display=\"block\" gutterBottom>\r\n                  {item.ProductName}\r\n                </Typography>\r\n                <Typography variant=\"subtitle1\" gutterBottom>\r\n                  {item.Description}\r\n                </Typography>\r\n              </CardContent>\r\n            </Link>\r\n          </Card>\r\n        </Grid>\r\n      );\r\n    });\r\n  }\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <Container maxWidth=\"lg\">\r\n        <Header title={branch?.BrancheName} />\r\n        <Card>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={2}>\r\n              <Box\r\n                sx={{\r\n                  flexGrow: 1,\r\n                  bgcolor: \"background.paper\",\r\n                  display: \"flex\",\r\n                  height: 600,\r\n                }}\r\n              >\r\n                <Tabs\r\n                  orientation=\"vertical\"\r\n                  value={value}\r\n                  onChange={handleChange}\r\n                  variant=\"scrollable\"\r\n                  scrollButtons\r\n                  aria-label=\"Vertical tabs example\"\r\n                  textColor=\"secondary\"\r\n                  indicatorColor=\"secondary\"\r\n                  sx={{\r\n                    [`& .${tabsClasses.scrollButtons}`]: {\r\n                      \"&.Mui-disabled\": { opacity: 0.3 },\r\n                    },\r\n                  }}\r\n                >\r\n                  {subcategories?.map((section, i) => (\r\n                    <Tab \r\n                    className=\"mb-2\"\r\n                    \r\n                    // sx={{bgcolor:activeSubCategory === section.sub_id ? \"green\" : \" \"}}\r\n                      icon={\r\n                        <img\r\n                          style={{\r\n                            height: \"50px\",\r\n                            width: \"50px\",\r\n                            objectFit: \"contain\",\r\n                          }}\r\n                          src={`http://${base_url}:${port}/images/sub_catagories/${section.SubCategoryIcon}`}\r\n                        />\r\n                      }\r\n                      label={section.SubCategoryName}\r\n                    />\r\n                  ))}\r\n                </Tabs>\r\n              </Box>\r\n            </Grid>\r\n            <Grid item xs={10}>\r\n              <HorizontalScroller>{viewShow_HTMLTABLE}</HorizontalScroller>\r\n            </Grid>\r\n          </Grid>\r\n        </Card>\r\n      </Container>\r\n      {/* <Footer /> */}\r\n    </ThemeProvider>\r\n  );\r\n}\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Second\\Footer.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Second\\Header.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Second\\Customization.js",["445","446","447","448"],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Branches\\CreateRoute].js",["449","450"],"import React from \"react\";\r\nimport Category from \"../Categories/Category\";\r\nimport Design from \"../Design/Design\";\r\nimport Inventory from \"../Inventories/Inventory\";\r\nimport PrivateRoute from \"../PrivateRoute\";\r\nimport ServiceArea from \"../Services/ServiceArea\";\r\nimport Unit from \"../Units/Unit\";\r\nimport Tables from \"./Tables\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  useRouteMatch,\r\n} from \"react-router-dom\";\r\nimport Customization from \"../Design/Templates/Dark/Customization\";\r\nimport SubCategory from \"../Categories/SubCategory\";\r\nimport Product from \"../Products/Product\";\r\n\r\nconst CreateRoute = () => {\r\n  const { path, url } = useRouteMatch();\r\n\r\n  return (\r\n    <Switch>\r\n      <PrivateRoute path=\"/branches/show\" component={Category} />\r\n      <PrivateRoute path={`${path}/category`} component={Category} />\r\n      <PrivateRoute path={`${path}/sub-category`} component={SubCategory} />\r\n      <PrivateRoute\r\n        path=\"/branches/category/sub-category/products\"\r\n        component={Product}\r\n      />\r\n      <PrivateRoute\r\n        path=\"/branches/category/sub-category/products/variants\"\r\n        component={Product}\r\n      />\r\n      <PrivateRoute path=\"/branches/service-area\" component={ServiceArea} />\r\n      <PrivateRoute path=\"/branches/unit\" component={Unit} />\r\n      <PrivateRoute path=\"/branches/inventory\" component={Inventory} />\r\n      <PrivateRoute path={`${path}/design`} component={Design} />\r\n      <PrivateRoute path=\"/branches/tables\" component={Tables} />\r\n      <PrivateRoute\r\n        path=\"/branches/design/dark-template-customization\"\r\n        component={Customization}\r\n      />\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default CreateRoute;\r\n",["451","452"],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\pages\\Error404.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Products\\Show.js",["453","454","455","456","457","458","459","460","461","462"],"import React, { Fragment, useState } from \"react\";\r\nimport { Tab, Nav } from \"react-bootstrap\";\r\nimport {\r\n  Link,\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  useRouteMatch,\r\n} from \"react-router-dom\";\r\n\r\nimport Product from \"../Products/Product\";\r\nimport PrivateRoute from \"../PrivateRoute\";\r\nimport Variants from \"../Variants/Variants\";\r\nimport { Button, Modal, Form } from \"react-bootstrap\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport AddProduct from \"./AddProduct\";\r\nimport EditProduct from \"./EditProduct\";\r\n\r\nconst ProductShow = (props) => {\r\n  const { path, url } = useRouteMatch();\r\n  const { t } = useTranslation();\r\n  const id = props.history.location.state.id;\r\n\r\n  return (\r\n    <Fragment>\r\n      <Router>\r\n        <Switch>\r\n          <PrivateRoute exact path={`${path}`} component={Product} />\r\n          <PrivateRoute path={`${path}/variants`} component={Variants} />\r\n          <PrivateRoute path={`${path}/add-product`} component={AddProduct} />\r\n          <PrivateRoute path={`${path}/edit-product`} component={EditProduct} />\r\n        </Switch>\r\n      </Router>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default ProductShow;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Products\\Ingredients.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Products\\Extra.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Products\\AddProduct.js",["463","464"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { Button, Modal, Form } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as yup from \"yup\";\r\nimport Select from \"react-select\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst AddProduct = (props) => {\r\n  const history = useHistory();\r\n\r\n  // for localization\r\n  const { t } = useTranslation();\r\n  const branchId = props.history.location.state.id;\r\n  // validation start\r\n  const schema = yup\r\n    .object()\r\n    .shape({\r\n      Description: yup.string().required(\"This field is a required field\"),\r\n      ProductName: yup.string().required(\"This field is a required field\"),\r\n      UnitID: yup.string().required(\"This field is a required field\"),\r\n      sub_category: yup.string().required(\"This field is a required field\"),\r\n      price: yup.number().required(\"This field is a required field\"),\r\n      stock: yup.number().required(\"This field is a required field\"),\r\n      preparationTime: yup.number().required(\"This field is a required field\"),\r\n    })\r\n    .required();\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors },\r\n  } = useForm({\r\n    resolver: yupResolver(schema),\r\n  });\r\n  // validation End\r\n  const [modalCentered, setModalCentered] = useState(false);\r\n\r\n  const [imageState, setImageState] = useState([]);\r\n  const handleImage = (e) => {\r\n    setImageState({ ...imageState, photo: e.target.files[0] });\r\n  };\r\n  const [productInsert, setProductInsert] = useState([]);\r\n  const handleInput = (e) => {\r\n    e.persist();\r\n    setProductInsert({ ...productInsert, [e.target.name]: e.target.value });\r\n  };\r\n  const saveProduct = (e) => {\r\n    const formData = new FormData();\r\n    formData.append(\"image\", imageState.photo);\r\n    formData.append(\"Description\", productInsert.Description);\r\n    formData.append(\"ProductName\", productInsert.ProductName);\r\n    formData.append(\"sub_category\", productInsert.sub_category);\r\n    formData.append(\"price\", productInsert.price);\r\n    formData.append(\"stock\", productInsert.stock);\r\n    formData.append(\"preparationTime\", productInsert.preparationTime);\r\n    formData.append(\"ingredients\", JSON.stringify(productIngredient));\r\n    formData.append(\"extras\", JSON.stringify(productExtra));\r\n    formData.append(\"recommendations\", JSON.stringify(productRecom));\r\n    formData.append(\"UnitID\", productInsert.UnitID);\r\n    axios.post(`/api/InsertProducts`, formData).then((res) => {\r\n      if (res.data.status === 200) {\r\n        // console.log(res.data.status);\r\n        setProductInsert([]);\r\n        setProductIngredient([]);\r\n        reset();\r\n        swal(\"Success\", res.data.message, \"success\");\r\n        //  this.props.history.push(\"/\")\r\n      }\r\n    });\r\n  };\r\n  const [insert, setInsert] = useState({\r\n    name: \"\",\r\n  });\r\n\r\n  const handleInputIngredients = (e) => {\r\n    e.persist();\r\n    setInsert({ ...insert, [e.target.name]: e.target.value });\r\n  };\r\n  const save = (e) => {\r\n    e.preventDefault();\r\n    axios.post(\"/api/InsertIngredient\", insert).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setInsert({\r\n          name: \"\",\r\n        });\r\n        setModalCentered(false);\r\n        swal(\"Success\", res.data.message, \"success\");\r\n      }\r\n    });\r\n  };\r\n  //for retriving data using laravel API\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [unitData, setUnitData] = useState([]);\r\n  const [subCategories, setSubCategories] = useState([]);\r\n  const [intgredients, setIntgredients] = useState([]);\r\n  useEffect(() => {\r\n    axios.post(`/api/GetIngredient`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setIntgredients(res.data.fetchData);\r\n      }\r\n    });\r\n    axios.get(`/api/GetUnits/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setUnitData(res.data.fetchData);\r\n      }\r\n    });\r\n    axios.get(`/api/getSubCateBasedOnBranch/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setSubCategories(res.data.fetchData);\r\n        // console.log(res.data.fetchData);\r\n      }\r\n    });\r\n    axios.get(`/api/GetProducts/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setFetchData(res.data.fetchData);\r\n      }\r\n      setLoading(false);\r\n    });\r\n  }, [insert]);\r\n  const [productIngredient, setProductIngredient] = useState([]);\r\n  const handleSelectEvent = (e) => {\r\n    setProductIngredient(e);\r\n  };\r\n  const [productExtra, setProductExtra] = useState([]);\r\n  const handleSelectEventExtra = (e) => {\r\n    setProductExtra(e);\r\n  };\r\n  // const [extraPrices, setextraPrices] = useState({});\r\n\r\n  const extraHandle = (e, id) => {\r\n    let updatedList = productExtra.map((item) => {\r\n      if (item.id == id) {\r\n        return { ...item, price: e.target.value }; //gets everything that was already in item, and updates \"done\"\r\n      }\r\n      return item; // else return unmodified item\r\n    });\r\n    setProductExtra(updatedList);\r\n  };\r\n  const [productRecom, setProductRecom] = useState([]);\r\n  const handleSelectEventRecom = (e) => {\r\n    setProductRecom(e);\r\n  };\r\n\r\n  var viewProducts_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"spinner-border text-primary \" role=\"status\">\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewProducts_HTMLTABLE = (\r\n      <div className=\"card\">\r\n        <div className=\"card-header\">\r\n          <div>\r\n            <h4 className=\"card-title\">{t(\"add_product\")}</h4>\r\n          </div>\r\n        </div>\r\n        <div className=\"card-body\">\r\n          <Form onSubmit={handleSubmit(saveProduct)} method=\"POST\">\r\n            <div className=\"row\">\r\n              <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    <strong>{t(\"sub_categories\")}</strong>\r\n                  </label>\r\n                  <select\r\n                    type=\"text\"\r\n                    {...register(\"sub_category\")}\r\n                    className={\r\n                      errors.sub_category?.message\r\n                        ? \"form-control  is-invalid\"\r\n                        : \"form-control\"\r\n                    }\r\n                    placeholder={t(\"sub_category\")}\r\n                    name=\"sub_category\"\r\n                    onChange={handleInput}\r\n                    value={productInsert.sub_category}\r\n                  >\r\n                    <option value=\"\">{t(\"select_a_option\")}</option>\r\n                    {subCategories.map((item) => (\r\n                      <option value={item.sub_id} key={item.sub_id}>\r\n                        {item.SubCategoryName}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                  {errors.sub_category?.message && (\r\n                    <div className=\"invalid-feedback\">\r\n                      {errors.sub_category?.message}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    {\" \"}\r\n                    <strong>{t(\"unit\")}</strong>{\" \"}\r\n                  </label>\r\n                  <select\r\n                    type=\"text\"\r\n                    {...register(\"UnitID\")}\r\n                    className={\r\n                      errors.UnitID?.message\r\n                        ? \"form-control  is-invalid\"\r\n                        : \"form-control\"\r\n                    }\r\n                    placeholder=\"UnitID\"\r\n                    name=\"UnitID\"\r\n                    onChange={handleInput}\r\n                    value={productInsert.UnitID}\r\n                  >\r\n                    <option value=\"\">{t(\"select_a_option\")}</option> )\r\n                    {unitData.map((item) => (\r\n                      <option value={item.id} key={item.id}>\r\n                        {item.UnitName}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                  {errors.UnitID?.message && (\r\n                    <div className=\"invalid-feedback\">\r\n                      {errors.UnitID?.message}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    {\" \"}\r\n                    <strong>{t(\"product_name\")}</strong>{\" \"}\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    {...register(\"ProductName\")}\r\n                    className={\r\n                      errors.ProductName?.message\r\n                        ? \"form-control  is-invalid\"\r\n                        : \"form-control\"\r\n                    }\r\n                    placeholder={t(\"product_name\")}\r\n                    name=\"ProductName\"\r\n                    onChange={handleInput}\r\n                    value={productInsert.ProductName}\r\n                  />\r\n                  {errors.ProductName?.message && (\r\n                    <div className=\"invalid-feedback\">\r\n                      {errors.ProductName?.message}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    {\" \"}\r\n                    <strong>{t(\"description\")}</strong>{\" \"}\r\n                  </label>\r\n                  <textarea\r\n                    type=\"text\"\r\n                    {...register(\"Description\")}\r\n                    className={\r\n                      errors.Description?.message\r\n                        ? \"form-control  is-invalid\"\r\n                        : \"form-control\"\r\n                    }\r\n                    placeholder={t(\"description\")}\r\n                    name=\"Description\"\r\n                    onChange={handleInput}\r\n                    value={productInsert.Description}\r\n                  />\r\n                  {errors.Description?.message && (\r\n                    <div className=\"invalid-feedback\">\r\n                      {errors.Description?.message}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    {\" \"}\r\n                    <strong>{t(\"price\")}</strong>{\" \"}\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    {...register(\"price\")}\r\n                    className={\r\n                      errors.price?.message\r\n                        ? \"form-control  is-invalid\"\r\n                        : \"form-control\"\r\n                    }\r\n                    placeholder={t(\"price\")}\r\n                    name=\"price\"\r\n                    onChange={handleInput}\r\n                    value={productInsert.price}\r\n                  />\r\n                  {errors.price?.message && (\r\n                    <div className=\"invalid-feedback\">\r\n                      {errors.price?.message}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    {\" \"}\r\n                    <strong>{t(\"stock\")}</strong>{\" \"}\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    {...register(\"stock\")}\r\n                    className={\r\n                      errors.stock?.message\r\n                        ? \"form-control  is-invalid\"\r\n                        : \"form-control\"\r\n                    }\r\n                    placeholder={t(\"stock\")}\r\n                    name=\"stock\"\r\n                    onChange={handleInput}\r\n                    value={productInsert.stock}\r\n                  />\r\n                  {errors.stock?.message && (\r\n                    <div className=\"invalid-feedback\">\r\n                      {errors.stock?.message}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    <strong>{t(\"preparation_Time\")}(Minutes)</strong>\r\n                  </label>\r\n                  <input\r\n                    type=\"number\"\r\n                    {...register(\"preparationTime\")}\r\n                    className={\r\n                      errors.preparationTime?.message\r\n                        ? \"form-control  is-invalid\"\r\n                        : \"form-control\"\r\n                    }\r\n                    name=\"preparationTime\"\r\n                    placeholder=\"30\"\r\n                    onChange={handleInput}\r\n                    value={productInsert.preparationTime}\r\n                  />\r\n                  {errors.preparationTime?.message && (\r\n                    <div className=\"invalid-feedback\">\r\n                      {errors.preparationTime?.message}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    {\" \"}\r\n                    <strong>{t(\"image\")}</strong>{\" \"}\r\n                  </label>\r\n                  <input\r\n                    type=\"file\"\r\n                    className=\"form-control\"\r\n                    placeholder={t(\"image\")}\r\n                    name=\"photo\"\r\n                    required\r\n                    onChange={handleImage}\r\n                  />\r\n                  {/* </div> */}\r\n                </div>\r\n              </div>\r\n              <div className=\"col-xl-12 col-xxl-12 col-lg-12 col-sm-12\">\r\n                <div className=\"form-group\">\r\n                  <div className=\"d-flex justify-content-between\">\r\n                    <label className=\"mb-1 \">\r\n                      <strong>{t(\"ingredients\")}</strong>\r\n                    </label>\r\n                    <small\r\n                      onClick={() => setModalCentered(true)}\r\n                      style={{ cursor: \"pointer\" }}\r\n                    >\r\n                      {t(\"add_ingredient\")}\r\n                    </small>\r\n                  </div>\r\n                  <Select\r\n                    isMulti\r\n                    options={intgredients?.map((o, i) => {\r\n                      return { id: i, value: o.id, label: o.name };\r\n                    })}\r\n                    onChange={handleSelectEvent}\r\n                    className=\"basic-multi-select\"\r\n                    classNamePrefix=\"select\"\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"col-xl-12 col-xxl-12 col-lg-12 col-sm-12\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    <strong>{t(\"extras\")}</strong>\r\n                    <small>\r\n                      (Please first choose the fields and then set the input\r\n                      values.)\r\n                    </small>\r\n                  </label>\r\n\r\n                  <Select\r\n                    isMulti\r\n                    options={intgredients?.map((o, i) => {\r\n                      return { id: i, value: o.id, label: o.name, price: 0 };\r\n                    })}\r\n                    onChange={handleSelectEventExtra}\r\n                    className=\"basic-multi-select\"\r\n                    classNamePrefix=\"select\"\r\n                  />\r\n                </div>\r\n              </div>\r\n              {productExtra?.map((item, i) => {\r\n                return (\r\n                  <div className=\"col-xl-3 col-xxl-3 col-lg-3 col-sm-3\" key={i}>\r\n                    <div className=\"form-group\">\r\n                      <label className=\"mb-1 \">\r\n                        <strong>{item.label}</strong>\r\n                      </label>\r\n                      <input\r\n                        type=\"number\"\r\n                        min=\"0\"\r\n                        className=\"form-control\"\r\n                        onChange={(e) => extraHandle(e, item.id)}\r\n                        value={productExtra[i].price}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n\r\n              <div className=\"col-xl-12 col-xxl-12 col-lg-12 col-sm-12\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    <strong>{t(\"recommendation_roducts\")}</strong>\r\n                  </label>\r\n                  <Select\r\n                    isMulti\r\n                    options={fetchData?.map((o, i) => {\r\n                      return { id: i, value: o.id, label: o.ProductName };\r\n                    })}\r\n                    onChange={handleSelectEventRecom}\r\n                    className=\"basic-multi-select\"\r\n                    classNamePrefix=\"select\"\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"card-footer\">\r\n              <Button\r\n                variant=\"danger light\"\r\n                className=\"m-1\"\r\n                onClick={() => history.goBack()}\r\n              >\r\n                {t(\"back\")}\r\n              </Button>\r\n              <Button variant=\"primary\" type=\"submit\">\r\n                {t(\"save\")}{\" \"}\r\n              </Button>\r\n            </div>\r\n          </Form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Fragment>\r\n        {viewProducts_HTMLTABLE}\r\n\r\n        <Modal className=\"fade\" show={modalCentered}>\r\n          <Form onSubmit={save} method=\"POST\" encType=\"multipart/form-data\">\r\n            <Modal.Header>\r\n              <Modal.Title>{t(\"add_ingredient\")}</Modal.Title>\r\n              <Button\r\n                onClick={() => setModalCentered(false)}\r\n                variant=\"\"\r\n                className=\"close\"\r\n              >\r\n                <span>&times;</span>\r\n              </Button>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n              <div className=\"form-group\">\r\n                <label className=\"mb-1 \">\r\n                  {\" \"}\r\n                  <strong>{t(\"name\")} </strong>{\" \"}\r\n                </label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  placeholder={t(\"name\")}\r\n                  name=\"name\"\r\n                  onChange={handleInputIngredients}\r\n                  value={insert.name}\r\n                />\r\n              </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n              <Button\r\n                onClick={() => setModalCentered(false)}\r\n                variant=\"danger light\"\r\n              >\r\n                {t(\"close\")}\r\n              </Button>\r\n              <Button variant=\"primary\" type=\"submit\">\r\n                {t(\"save\")}\r\n              </Button>\r\n            </Modal.Footer>\r\n          </Form>\r\n        </Modal>\r\n      </Fragment>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddProduct;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Products\\EditProduct.js",["465","466","467","468"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { Button, Modal, Form } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as yup from \"yup\";\r\nimport { base_url, port } from \"../../../Consts\";\r\nimport { useRouteMatch } from \"react-router-dom\";\r\nimport Select from \"react-select\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst EditProduct = (props) => {\r\n  const history = useHistory();\r\n\r\n  const { path, url } = useRouteMatch();\r\n  // validation start\r\n  const schema = yup\r\n    .object()\r\n    .shape({\r\n      Description: yup.string().required(\"This field is a required field\"),\r\n      ProductName: yup.string().required(\"This field is a required field\"),\r\n      UnitID: yup.string().required(\"This field is a required field\"),\r\n      sub_category_id: yup.string().required(\"This field is a required field\"),\r\n      price: yup.number().required(\"This field is a required field\"),\r\n      stock: yup.number().required(\"This field is a required field\"),\r\n      preparationTime: yup.number().required(\"This field is a required field\"),\r\n    })\r\n    .required();\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm({\r\n    resolver: yupResolver(schema),\r\n  });\r\n  // validation End\r\n  // for localization\r\n  const { t } = useTranslation();\r\n  const branchId = props.history.location.state.id;\r\n  const productId = props.history.location.state.productId;\r\n\r\n  const [modalCentered, setModalCentered] = useState(false);\r\n  const [insert, setInsert] = useState({\r\n    name: \"\",\r\n  });\r\n  const handleInputIngredients = (e) => {\r\n    e.persist();\r\n    setInsert({ ...insert, [e.target.name]: e.target.value });\r\n  };\r\n  const save = (e) => {\r\n    e.preventDefault();\r\n    axios.post(\"/api/InsertIngredient\", insert).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setInsert({\r\n          name: \"\",\r\n        });\r\n        setModalCentered(false);\r\n        swal(\"Success\", res.data.message, \"success\");\r\n      }\r\n    });\r\n  };\r\n  // insert modal\r\n  const [imageState, setImageState] = useState([]);\r\n  const handleImage = (e) => {\r\n    setImageState({ ...imageState, photo: e.target.files[0] });\r\n  };\r\n  // edit Start\r\n  const [editProduct, setEditProduct] = useState([]);\r\n  const editHandleInput = (e) => {\r\n    e.persist();\r\n    setEditProduct({ ...editProduct, [e.target.name]: e.target.value });\r\n  };\r\n  const updateProduct = (e) => {\r\n    const formData = new FormData();\r\n    formData.append(\"image\", imageState.photo);\r\n    formData.append(\"Description\", editProduct.Description);\r\n    formData.append(\"ProductName\", editProduct.ProductName);\r\n    formData.append(\"UnitID\", editProduct.UnitID);\r\n    formData.append(\"price\", editProduct.price);\r\n    formData.append(\"stock\", editProduct.stock);\r\n    formData.append(\"preparationTime\", editProduct.preparationTime);\r\n    formData.append(\"ingredients\", JSON.stringify(productIngredient));\r\n    formData.append(\"extras\", JSON.stringify(productExtra));\r\n    formData.append(\"recommendations\", JSON.stringify(productRecom));\r\n    formData.append(\"sub_category\", editProduct.sub_category_id);\r\n    formData.append(\"id\", editProduct.id);\r\n    axios.post(\"/api/UpdateProduct\", formData).then((res) => {\r\n      if (res.data.status === 200) {\r\n        swal(\"Success\", res.data.message, \"success\");\r\n      }\r\n    });\r\n  };\r\n  // edit ENd\r\n  //for retriving data using laravel API\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [unitData, setUnitData] = useState([]);\r\n  const [subCategories, setSubCategories] = useState([]);\r\n  const [intgredients, setIntgredients] = useState([]);\r\n  const [productIngredient, setProductIngredient] = useState([]);\r\n  const handleSelectEvent = (e) => {\r\n    setProductIngredient(e);\r\n  };\r\n  const [productExtra, setProductExtra] = useState([]);\r\n  const handleSelectEventExtra = (e) => {\r\n    setProductExtra(e);\r\n  };\r\n  const extraHandle = (e, id) => {\r\n    let updatedList = productExtra.map((item) => {\r\n      if (item.id == id) {\r\n        return { ...item, price: e.target.value }; //gets everything that was already in item, and updates \"done\"\r\n      }\r\n      return item; // else return unmodified item\r\n    });\r\n    setProductExtra(updatedList);\r\n    console.log(productExtra);\r\n  };\r\n  const [productRecom, setProductRecom] = useState([]);\r\n  const handleSelectEventRecom = (e) => {\r\n    setProductRecom(e);\r\n  };\r\n  useEffect(() => {\r\n    axios.post(`/api/GetIngredient`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setIntgredients(res.data.fetchData);\r\n      }\r\n    });\r\n    axios.get(`/api/GetUnits/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setUnitData(res.data.fetchData);\r\n      }\r\n    });\r\n    axios.get(`/api/getSubCateBasedOnBranch/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setSubCategories(res.data.fetchData);\r\n        // console.log(res.data.fetchData);\r\n      }\r\n    });\r\n    axios.get(`/api/GetProducts/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setFetchData(res.data.fetchData);\r\n      }\r\n    });\r\n    axios.get(`/api/EditProducts/${productId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setEditProduct(res.data.product);\r\n        setProductIngredient(JSON.parse(res.data.product.ingredients));\r\n        setProductExtra(JSON.parse(res.data.product.extras));\r\n        setProductRecom(JSON.parse(res.data.product.recommendations));\r\n        setLoading(false);\r\n      } else if (res.data.status === 404) {\r\n        swal(\"Error\", res.data.message, \"error\");\r\n      }\r\n    });\r\n  }, [insert]);\r\n\r\n  var viewProducts_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"spinner-border text-primary \" role=\"status\">\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewProducts_HTMLTABLE = (\r\n      <div className=\"card\">\r\n        <div className=\"card-header\">\r\n          <div>\r\n            <h4 className=\"card-title\">{t(\"edit_product\")}</h4>\r\n          </div>\r\n        </div>\r\n        <div className=\"card-body\">\r\n          <Form onSubmit={handleSubmit(updateProduct)} method=\"POST\">\r\n            <div className=\"row\">\r\n              <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    {\" \"}\r\n                    <strong>{t(\"sub_categories\")}</strong>{\" \"}\r\n                  </label>\r\n                  <select\r\n                    type=\"text\"\r\n                    {...register(\"sub_category_id\")}\r\n                    className={\r\n                      errors.sub_category_id?.message\r\n                        ? \"form-control  is-invalid\"\r\n                        : \"form-control\"\r\n                    }\r\n                    placeholder={t(\"sub_category\")}\r\n                    name=\"sub_category_id\"\r\n                    onChange={editHandleInput}\r\n                    value={editProduct.sub_category_id}\r\n                  >\r\n                    <option value=\"\">{t(\"select_a_option\")}</option> )\r\n                    {subCategories.map((item) => (\r\n                      <option value={item.sub_id} key={item.sub_id}>\r\n                        {item.SubCategoryName}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                  {errors.sub_category_id?.message && (\r\n                    <div className=\"invalid-feedback\">\r\n                      {errors.sub_category_id?.message}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    {\" \"}\r\n                    <strong>{t(\"unit\")}</strong>{\" \"}\r\n                  </label>\r\n                  <select\r\n                    type=\"text\"\r\n                    {...register(\"UnitID\")}\r\n                    className={\r\n                      errors.UnitID?.message\r\n                        ? \"form-control  is-invalid\"\r\n                        : \"form-control\"\r\n                    }\r\n                    placeholder=\"UnitID\"\r\n                    name=\"UnitID\"\r\n                    onChange={editHandleInput}\r\n                    value={editProduct.UnitID}\r\n                  >\r\n                    <option value=\"\">{t(\"select_a_option\")}</option> )\r\n                    {unitData.map((item) => (\r\n                      <option value={item.id} key={item.id}>\r\n                        {item.UnitName}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                  {errors.UnitID?.message && (\r\n                    <div className=\"invalid-feedback\">\r\n                      {errors.UnitID?.message}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    {\" \"}\r\n                    <strong>{t(\"product_name\")}</strong>{\" \"}\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    {...register(\"ProductName\")}\r\n                    className={\r\n                      errors.ProductName?.message\r\n                        ? \"form-control  is-invalid\"\r\n                        : \"form-control\"\r\n                    }\r\n                    placeholder={t(\"product_name\")}\r\n                    name=\"ProductName\"\r\n                    required\r\n                    onChange={editHandleInput}\r\n                    value={editProduct.ProductName}\r\n                  />\r\n                  {errors.ProductName?.message && (\r\n                    <div className=\"invalid-feedback\">\r\n                      {errors.ProductName?.message}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    {\" \"}\r\n                    <strong>{t(\"description\")}</strong>{\" \"}\r\n                  </label>\r\n                  <textarea\r\n                    type=\"text\"\r\n                    {...register(\"Description\")}\r\n                    className={\r\n                      errors.Description?.message\r\n                        ? \"form-control  is-invalid\"\r\n                        : \"form-control\"\r\n                    }\r\n                    placeholder={t(\"description\")}\r\n                    name=\"Description\"\r\n                    onChange={editHandleInput}\r\n                    value={editProduct.Description}\r\n                  />\r\n                  {errors.Description?.message && (\r\n                    <div className=\"invalid-feedback\">\r\n                      {errors.Description?.message}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    {\" \"}\r\n                    <strong>{t(\"price\")}</strong>{\" \"}\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    {...register(\"price\")}\r\n                    className={\r\n                      errors.price?.message\r\n                        ? \"form-control  is-invalid\"\r\n                        : \"form-control\"\r\n                    }\r\n                    placeholder={t(\"price\")}\r\n                    name=\"price\"\r\n                    required\r\n                    onChange={editHandleInput}\r\n                    value={editProduct.price}\r\n                  />\r\n                  {errors.price?.message && (\r\n                    <div className=\"invalid-feedback\">\r\n                      {errors.price?.message}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    {\" \"}\r\n                    <strong>{t(\"stock\")}</strong>{\" \"}\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    {...register(\"stock\")}\r\n                    className={\r\n                      errors.stock?.message\r\n                        ? \"form-control  is-invalid\"\r\n                        : \"form-control\"\r\n                    }\r\n                    placeholder={t(\"stock\")}\r\n                    name=\"stock\"\r\n                    required\r\n                    onChange={editHandleInput}\r\n                    value={editProduct.stock}\r\n                  />\r\n                  {errors.stock?.message && (\r\n                    <div className=\"invalid-feedback\">\r\n                      {errors.stock?.message}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    <strong>{t(\"preparation_Time\")}(Minutes)</strong>\r\n                  </label>\r\n                  <input\r\n                    type=\"number\"\r\n                    {...register(\"preparationTime\")}\r\n                    className={\r\n                      errors.preparationTime?.message\r\n                        ? \"form-control  is-invalid\"\r\n                        : \"form-control\"\r\n                    }\r\n                    name=\"preparationTime\"\r\n                    placeholder=\"30 Minutes\"\r\n                    onChange={editHandleInput}\r\n                    value={editProduct.preparationTime}\r\n                  />\r\n                  {errors.preparationTime?.message && (\r\n                    <div className=\"invalid-feedback\">\r\n                      {errors.preparationTime?.message}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    {\" \"}\r\n                    <strong>{t(\"image\")}</strong>{\" \"}\r\n                  </label>\r\n                  <div className=\"input-group\">\r\n                    <div className=\"custom-file\">\r\n                      <input\r\n                        type=\"file\"\r\n                        className=\"form-control\"\r\n                        placeholder={t(\"image\")}\r\n                        name=\"photo\"\r\n                        onChange={handleImage}\r\n                      />\r\n                      <img\r\n                        src={`http://${base_url}:${port}/images/products/${editProduct.image}`}\r\n                        width=\"70\"\r\n                        alt=\" \"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"col-xl-12 col-xxl-12 col-lg-12 col-sm-12\">\r\n                <div className=\"form-group\">\r\n                  <div className=\"d-flex justify-content-between\">\r\n                    <label className=\"mb-1 \">\r\n                      <strong>{t(\"ingredients\")}</strong>\r\n                    </label>\r\n                    <small\r\n                      onClick={() => setModalCentered(true)}\r\n                      style={{ cursor: \"pointer\" }}\r\n                    >\r\n                      {t(\"add_ingredient\")}\r\n                    </small>\r\n                  </div>\r\n                  <Select\r\n                    defaultValue={productIngredient}\r\n                    isMulti\r\n                    options={intgredients?.map((o, i) => {\r\n                      return { id: i, value: o.id, label: o.name };\r\n                    })}\r\n                    onChange={handleSelectEvent}\r\n                    className=\"basic-multi-select\"\r\n                    classNamePrefix=\"select\"\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"col-xl-12 col-xxl-12 col-lg-12 col-sm-12\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    <strong>{t(\"extras\")}</strong>\r\n                    <small>\r\n                      (Please first choose the fields and then set the input\r\n                      values.)\r\n                    </small>\r\n                  </label>\r\n                  <Select\r\n                    defaultValue={productExtra}\r\n                    isMulti\r\n                    options={intgredients?.map((o, i) => {\r\n                      return { id: i, value: o.id, label: o.name, price: 0 };\r\n                    })}\r\n                    onChange={handleSelectEventExtra}\r\n                    className=\"basic-multi-select\"\r\n                    classNamePrefix=\"select\"\r\n                  />\r\n                </div>\r\n              </div>\r\n              {productExtra?.map((item, i) => {\r\n                return (\r\n                  <div className=\"col-xl-3 col-xxl-3 col-lg-3 col-sm-3\" key={i}>\r\n                    <div className=\"form-group\">\r\n                      <label className=\"mb-1 \">\r\n                        <strong>{item.label}</strong>\r\n                      </label>\r\n                      <input\r\n                        type=\"number\"\r\n                        className=\"form-control\"\r\n                        onChange={(e) => extraHandle(e, item.id)}\r\n                        value={productExtra[i].price}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n\r\n              <div className=\"col-xl-12 col-xxl-12 col-lg-12 col-sm-12\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    <strong>{t(\"recommendation_roducts\")}</strong>\r\n                  </label>\r\n                  <Select\r\n                    defaultValue={productRecom}\r\n                    isMulti\r\n                    options={fetchData?.map((o, i) => {\r\n                      return { id: i, value: o.id, label: o.ProductName };\r\n                    })}\r\n                    onChange={handleSelectEventRecom}\r\n                    className=\"basic-multi-select\"\r\n                    classNamePrefix=\"select\"\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"card-footer\">\r\n              <Button\r\n                variant=\"danger light\"\r\n                className=\"m-1\"\r\n                onClick={() => history.goBack()}\r\n              >\r\n                {t(\"back\")}\r\n              </Button>\r\n              <Button variant=\"primary\" type=\"submit\">\r\n                {t(\"update\")}{\" \"}\r\n              </Button>\r\n            </div>\r\n          </Form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Fragment>\r\n        {viewProducts_HTMLTABLE}\r\n        <Modal className=\"fade\" show={modalCentered}>\r\n          <Form onSubmit={save} method=\"POST\" encType=\"multipart/form-data\">\r\n            <Modal.Header>\r\n              <Modal.Title>{t(\"add_ingredient\")}</Modal.Title>\r\n              <Button\r\n                onClick={() => setModalCentered(false)}\r\n                variant=\"\"\r\n                className=\"close\"\r\n              >\r\n                <span>&times;</span>\r\n              </Button>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n              <div className=\"form-group\">\r\n                <label className=\"mb-1 \">\r\n                  {\" \"}\r\n                  <strong>{t(\"name\")} </strong>{\" \"}\r\n                </label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  placeholder={t(\"name\")}\r\n                  name=\"name\"\r\n                  onChange={handleInputIngredients}\r\n                  value={insert.name}\r\n                />\r\n              </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n              <Button\r\n                onClick={() => setModalCentered(false)}\r\n                variant=\"danger light\"\r\n              >\r\n                {t(\"close\")}\r\n              </Button>\r\n              <Button variant=\"primary\" type=\"submit\">\r\n                {t(\"save\")}\r\n              </Button>\r\n            </Modal.Footer>\r\n          </Form>\r\n        </Modal>\r\n      </Fragment>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EditProduct;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Show.js",["469","470","471","472","473","474","475"],"import React, { Fragment, useState } from \"react\";\r\nimport { Tab, Nav } from \"react-bootstrap\";\r\nimport {\r\n  Link,\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  useRouteMatch,\r\n} from \"react-router-dom\";\r\n\r\nimport Design from \"./Design\";\r\nimport PrivateRoute from \"../PrivateRoute\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport Customization from \"./Templates/Dark/Customization\";\r\nimport Theme from \"./Theme\";\r\nimport EditTheme from \"./EditTheme\";\r\nimport DefaultCustomization from \"../Public Link/Customization\";\r\n\r\nconst DesignShow = (props) => {\r\n  const { path, url } = useRouteMatch();\r\n  const { t } = useTranslation();\r\n  const id = props.history.location.state.id;\r\n\r\n  return (\r\n    <Fragment>\r\n      <Router>\r\n        <Switch>\r\n          <PrivateRoute exact path={`${path}`} component={Design} />\r\n          <PrivateRoute\r\n            path={`${path}/dark-template-customization`}\r\n            component={Customization}\r\n          />\r\n          <PrivateRoute\r\n            path={`${path}/defualt-template-customization`}\r\n            component={DefaultCustomization}\r\n          />\r\n          <PrivateRoute path={`${path}/add-theme`} component={Theme} />\r\n          <PrivateRoute path={`${path}/edit-theme`} component={EditTheme} />\r\n          {/* <PrivateRoute path={`${path}/edit-product`} component={EditProduct} /> */}\r\n        </Switch>\r\n      </Router>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default DesignShow;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Public Link\\Customization.js",["476","477","478","479"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CRow,\r\n  CFormLabel,\r\n  CCol,\r\n} from \"@coreui/react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// import Switch from \"react-switch\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { FormControlLabel, RadioGroup, Radio } from \"@mui/material\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport Select from \"@mui/material/Select\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardMedia from \"@mui/material/CardMedia\";\r\nimport { CardActionArea } from \"@mui/material\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst DefaultCustomization = (props) => {\r\n  const { t } = useTranslation();\r\n  // const templateId = atob(props.match.params.id);\r\n  const templateId = props.history.location.state.id;\r\n\r\n  const history = useHistory();\r\n\r\n  const [settings, setSettings] = useState([]);\r\n  const handleInput = (e) => {\r\n    setSettings({ ...settings, [e.target.name]: e.target.value });\r\n    const formData = new FormData();\r\n    formData.append(\r\n      \"settings\",\r\n      JSON.stringify({ ...settings, [e.target.name]: e.target.value })\r\n    );\r\n    axios\r\n      .post(`/api/InsertCustomization/${templateId}`, formData)\r\n      .then((res) => {\r\n        if (res.data.status === 200) {\r\n          setLoading(true);\r\n        }\r\n      });\r\n  };\r\n  // const save = () => {\r\n  //   const formData = new FormData();\r\n  //   formData.append(\"settings\", JSON.stringify(settings));\r\n  //   axios\r\n  //     .post(`/api/InsertCustomization/${templateId}`, formData)\r\n  //     .then((res) => {\r\n  //       if (res.data.status === 200) {\r\n  //         setLoading(true);\r\n  //       }\r\n  //     });\r\n  // };\r\n  const reset = (e) => {\r\n    e.preventDefault();\r\n    axios.get(`/api/ResetCustomization/${templateId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setSettings([]);\r\n        setLoading(true);\r\n        swal(\"Success\", res.data.message, \"success\");\r\n      }\r\n    });\r\n  };\r\n  const [template, setTemplate] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    axios.get(`/api/GetTemplate/${templateId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setSettings(res.data.fetchData[0].Customization);\r\n        setTemplate(res.data.fetchData[0]);\r\n      }\r\n      setLoading(false);\r\n    });\r\n    // const interval = setInterval(() => {\r\n    //   save();\r\n    // }, 15000);\r\n    // return () => clearInterval(interval);\r\n  }, [loading]);\r\n\r\n  var viewPreview_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    viewPreview_HTMLTABLE = (\r\n      <CCard>\r\n        <CCardHeader component=\"h5\">{t(\"preview\")}</CCardHeader>\r\n        <CCardBody>\r\n          <div\r\n            className=\"spinner-border text-primary\"\r\n            role=\"status\"\r\n            style={{ position: \"fixed\", top: \"0%\", left: \"50%\" }}\r\n          >\r\n            <span className=\"sr-only\">{t(\"loading\")}</span>\r\n          </div>\r\n        </CCardBody>\r\n      </CCard>\r\n    );\r\n  } else {\r\n    viewPreview_HTMLTABLE = (\r\n      <CCard>\r\n        <CCardHeader component=\"h5\">{t(\"preview\")}</CCardHeader>\r\n        <CCardBody>\r\n          <Card>\r\n            <CardActionArea>\r\n              <CardMedia\r\n                component=\"iframe\"\r\n                height=\"600\"\r\n                image={`/${template?.URL}/${btoa(3)}`}\r\n                alt=\"template\"\r\n              />\r\n            </CardActionArea>\r\n          </Card>\r\n        </CCardBody>\r\n      </CCard>\r\n    );\r\n  }\r\n  return (\r\n    <>\r\n      <div className=\"row\">\r\n        <div className=\"col-7\">\r\n          <CCard>\r\n            <CCardHeader component=\"h5\">{t(\"customization\")}</CCardHeader>\r\n            <CCardBody>\r\n              <CRow className=\"mb-2\">\r\n                <CFormLabel className=\"col-sm-6 col-form-label font-weight-bold\">\r\n                  {t(\"Name\")}\r\n                </CFormLabel>\r\n                <CFormLabel className=\"col-sm-3 col-form-label font-weight-bold\">\r\n                  {t(\"value\")}\r\n                </CFormLabel>\r\n                <CFormLabel className=\"col-sm-3 col-form-label text-center font-weight-bold\">\r\n                  {t(\"default\")}\r\n                </CFormLabel>\r\n              </CRow>\r\n              <CRow className=\"mb-2\">\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"branch_name_color\")}\r\n                </CFormLabel>\r\n                <CCol sm={2} className=\"text-left\">\r\n                  <input\r\n                    type=\"color\"\r\n                    onChange={handleInput}\r\n                    value={settings?.branch_name_color}\r\n                    name=\"branch_name_color\"\r\n                  />\r\n                </CCol>\r\n                <CCol sm={4} className=\"text-center\">\r\n                  <input type=\"color\" disabled value=\"#ff751d\" />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"branch_name_font_size\")}\r\n                </CFormLabel>\r\n                <CCol sm={2}>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    onChange={handleInput}\r\n                    value={settings?.branch_name_font_size}\r\n                    type=\"number\"\r\n                    name=\"branch_name_font_size\"\r\n                  />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-4 col-form-label text-center\"\r\n                >\r\n                  {t(\"14\")}\r\n                </CFormLabel>\r\n              </CRow>\r\n\r\n              <CRow className=\"mb-2\">\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"categories_and_sub_categoies_color\")}\r\n                </CFormLabel>\r\n                <CCol sm={3} className=\"text-left\">\r\n                  <input\r\n                    type=\"color\"\r\n                    onChange={handleInput}\r\n                    value={settings?.categories_and_sub_categoies_color}\r\n                    name=\"categories_and_sub_categoies_color\"\r\n                  />\r\n                </CCol>\r\n                <CCol sm={2} className=\"text-center\">\r\n                  <input type=\"color\" disabled value=\"#f1fcfe\" />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"categories_and_sub_categoies_font_size\")}\r\n                </CFormLabel>\r\n                <CCol sm={2}>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    onChange={handleInput}\r\n                    value={settings?.categories_and_sub_categoies_font_size}\r\n                    type=\"number\"\r\n                    name=\"categories_and_sub_categoies_font_size\"\r\n                  />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-4 col-form-label text-center\"\r\n                >\r\n                  {t(\"12\")}\r\n                </CFormLabel>\r\n              </CRow>\r\n\r\n              <CRow className=\"mb-2\">\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"product_name_color\")}\r\n                </CFormLabel>\r\n                <CCol sm={3} className=\"text-left\">\r\n                  <input\r\n                    type=\"color\"\r\n                    onChange={handleInput}\r\n                    value={settings?.product_name_color}\r\n                    name=\"product_name_color\"\r\n                  />\r\n                </CCol>\r\n                <CCol sm={2} className=\"text-center\">\r\n                  <input type=\"color\" disabled value=\"#ff751d\" />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"product_name_font_size\")}\r\n                </CFormLabel>\r\n                <CCol sm={2}>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    onChange={handleInput}\r\n                    value={settings?.product_name_font_size}\r\n                    type=\"number\"\r\n                    name=\"product_name_font_size\"\r\n                  />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-4 col-form-label text-center\"\r\n                >\r\n                  {t(\"12\")}\r\n                </CFormLabel>\r\n              </CRow>\r\n              <CRow className=\"mb-2\">\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"product_discription_color\")}\r\n                </CFormLabel>\r\n                <CCol sm={3} className=\"text-left\">\r\n                  <input\r\n                    type=\"color\"\r\n                    onChange={handleInput}\r\n                    value={settings?.product_discription_color}\r\n                    name=\"product_discription_color\"\r\n                  />\r\n                </CCol>\r\n                <CCol sm={2} className=\"text-center\">\r\n                  <input type=\"color\" disabled value=\"#777\" />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"product_discription_font_size\")}\r\n                </CFormLabel>\r\n                <CCol sm={2}>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    onChange={handleInput}\r\n                    value={settings?.product_discription_font_size}\r\n                    type=\"number\"\r\n                    name=\"product_discription_font_size\"\r\n                  />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-4 col-form-label text-center\"\r\n                >\r\n                  {t(\"10\")}\r\n                </CFormLabel>\r\n              </CRow>\r\n              <CRow className=\"mb-2\">\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"price_color\")}\r\n                </CFormLabel>\r\n                <CCol sm={3} className=\"text-left\">\r\n                  <input\r\n                    type=\"color\"\r\n                    onChange={handleInput}\r\n                    value={settings?.price_color}\r\n                    name=\"price_color\"\r\n                  />\r\n                </CCol>\r\n                <CCol sm={2} className=\"text-center\">\r\n                  <input type=\"color\" disabled value=\"#ff751d\" />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"price_font_size\")}\r\n                </CFormLabel>\r\n                <CCol sm={2}>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    onChange={handleInput}\r\n                    value={settings?.price_font_size}\r\n                    type=\"number\"\r\n                    name=\"price_font_size\"\r\n                  />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-4 col-form-label text-center\"\r\n                >\r\n                  {t(\"12\")}\r\n                </CFormLabel>\r\n              </CRow>\r\n              <CRow className=\"mb-2\">\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"button_text_color\")}\r\n                </CFormLabel>\r\n                <CCol sm={2} className=\"text-left\">\r\n                  <input\r\n                    type=\"color\"\r\n                    onChange={handleInput}\r\n                    value={settings?.button_text_color}\r\n                    // value={themes.TextColor}\r\n                    name=\"button_text_color\"\r\n                  />\r\n                </CCol>\r\n                <CCol sm={4} className=\"text-center\">\r\n                  <input\r\n                    type=\"color\"\r\n                    disabled\r\n                    // onChange={handleInput}\r\n                    value=\"#f1fcfe\"\r\n                  />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"button_background_color\")}\r\n                </CFormLabel>\r\n                <CCol sm={2} className=\"text-left\">\r\n                  <input\r\n                    type=\"color\"\r\n                    onChange={handleInput}\r\n                    value={settings?.button_background_color}\r\n                    //   value={themes.TextColor}\r\n                    name=\"button_background_color\"\r\n                  />\r\n                </CCol>\r\n                <CCol sm={4} className=\"text-center\">\r\n                  <input\r\n                    type=\"color\"\r\n                    disabled\r\n                    // onChange={handleInput}\r\n                    value=\"#ff751d\"\r\n                  />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"button_text_font_size\")}\r\n                </CFormLabel>\r\n                <CCol sm={2}>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    onChange={handleInput}\r\n                    value={settings?.button_text_font_size}\r\n                    type=\"number\"\r\n                    name=\"button_text_font_size\"\r\n                  />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-4 col-form-label text-center\"\r\n                >\r\n                  {t(\"12\")}\r\n                </CFormLabel>\r\n              </CRow>\r\n              <CRow className=\"mb-2\">\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"number_of_products_in_each_row\")}\r\n                </CFormLabel>\r\n                <CCol sm={2}>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    onChange={handleInput}\r\n                    type=\"number\"\r\n                    value={settings?.number_of_products_in_each_row}\r\n                    name=\"number_of_products_in_each_row\"\r\n                  />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-4 col-form-label text-center\"\r\n                >\r\n                  {t(\"2\")}\r\n                </CFormLabel>\r\n              </CRow>\r\n              <CRow>\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"mode\")}\r\n                </CFormLabel>\r\n\r\n                <CCol sm={2} className=\"text-left\">\r\n                  <RadioGroup\r\n                    row\r\n                    aria-label=\"dark\"\r\n                    defaultValue={settings?.mode ? settings.mode : \"dark\"}\r\n                    name=\"mode\"\r\n                    onChange={handleInput}\r\n                  >\r\n                    <FormControlLabel\r\n                      value=\"light\"\r\n                      control={<Radio />}\r\n                      label=\"Light\"\r\n                    />\r\n                    <FormControlLabel\r\n                      value=\"dark\"\r\n                      control={<Radio />}\r\n                      label=\"Dark\"\r\n                    />\r\n                  </RadioGroup>\r\n                </CCol>\r\n                <CCol sm={4} className=\"text-center\">\r\n                  <CFormLabel\r\n                    htmlFor=\"staticEmail\"\r\n                    className=\"col-sm-6 col-form-label \"\r\n                  >\r\n                    Dark\r\n                  </CFormLabel>\r\n                </CCol>\r\n              </CRow>\r\n              <CRow>\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"font\")}\r\n                </CFormLabel>\r\n\r\n                <CCol sm={2} className=\"text-left\">\r\n                  <FormControl fullWidth>\r\n                    <InputLabel id=\"demo-simple-select-label\">\r\n                      {t(\"fonts\")}\r\n                    </InputLabel>\r\n                    <Select\r\n                      labelId=\"demo-simple-select-label\"\r\n                      id=\"demo-simple-select\"\r\n                      //   value={age}\r\n                      label=\"fonts\"\r\n                      onChange={handleInput}\r\n                      name=\"font\"\r\n                      defaultValue={\r\n                        settings?.font ? settings.font : \"sans-serif\"\r\n                      }\r\n                    >\r\n                      <MenuItem value=\"-apple-system\">-apple-system</MenuItem>\r\n                      <MenuItem value=\"BlinkMacSystemFont\">\r\n                        BlinkMacSystemFont\r\n                      </MenuItem>\r\n                      <MenuItem value=\"Segoe UI\">Segoe UI</MenuItem>\r\n                      <MenuItem value=\"Roboto\">Roboto</MenuItem>\r\n                      <MenuItem value=\"Helvetica Neue\">Helvetica Neue</MenuItem>\r\n                      <MenuItem value=\"Arial\">Arial</MenuItem>\r\n                      <MenuItem value=\"sans-serif\">sans-serif</MenuItem>\r\n                      <MenuItem value=\"Apple Color Emoji\">\r\n                        Apple Color Emoji\r\n                      </MenuItem>\r\n                      <MenuItem value=\"Segoe UI Emoji\">Segoe UI Emoji</MenuItem>\r\n                      <MenuItem value=\"Segoe UI Symbol\">\r\n                        Segoe UI Symbol\r\n                      </MenuItem>\r\n                    </Select>\r\n                  </FormControl>\r\n                </CCol>\r\n                <CCol sm={4} className=\"text-center\">\r\n                  <CFormLabel\r\n                    htmlFor=\"staticEmail\"\r\n                    className=\"col-sm-6 col-form-label \"\r\n                  >\r\n                    sans-serif\r\n                  </CFormLabel>\r\n                </CCol>\r\n              </CRow>\r\n              <CRow>\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"show_preparation_time\")}\r\n                </CFormLabel>\r\n\r\n                <CCol sm={2} className=\"text-left\">\r\n                  <RadioGroup\r\n                    row\r\n                    aria-label=\"dark\"\r\n                    defaultValue={\r\n                      settings?.preparation_time\r\n                        ? settings.preparation_time\r\n                        : \"1\"\r\n                    }\r\n                    name=\"preparation_time\"\r\n                    onChange={handleInput}\r\n                  >\r\n                    <FormControlLabel\r\n                      value=\"1\"\r\n                      control={<Radio />}\r\n                      label=\"Yes\"\r\n                    />\r\n                    <FormControlLabel\r\n                      value=\"0\"\r\n                      control={<Radio />}\r\n                      label=\"No\"\r\n                    />\r\n                  </RadioGroup>\r\n                </CCol>\r\n                <CCol sm={4} className=\"text-center\">\r\n                  <CFormLabel\r\n                    htmlFor=\"staticEmail\"\r\n                    className=\"col-sm-6 col-form-label \"\r\n                  >\r\n                    Yes\r\n                  </CFormLabel>\r\n                </CCol>\r\n              </CRow>\r\n            </CCardBody>\r\n          </CCard>\r\n        </div>\r\n        <div className=\"col-5\">{viewPreview_HTMLTABLE}</div>\r\n      </div>\r\n      <div className=\"text-center mx-4 mb-4\">\r\n        <button className=\"btn btn-info m-1\" onClick={(e) => reset(e)}>\r\n          {t(\"reset_to_default\")}\r\n        </button>\r\n        <button className=\"btn btn-light m-1\" onClick={() => history.goBack()}>\r\n          {t(\"back\")}\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DefaultCustomization;\r\n",{"ruleId":"480","replacedBy":"481"},{"ruleId":"482","replacedBy":"483"},{"ruleId":"484","severity":1,"message":"485","line":29,"column":8,"nodeType":"486","messageId":"487","endLine":29,"endColumn":16},{"ruleId":"484","severity":1,"message":"488","line":145,"column":9,"nodeType":"486","messageId":"487","endLine":145,"endColumn":23},{"ruleId":"484","severity":1,"message":"489","line":148,"column":9,"nodeType":"486","messageId":"487","endLine":148,"endColumn":22},{"ruleId":"484","severity":1,"message":"490","line":241,"column":9,"nodeType":"486","messageId":"487","endLine":241,"endColumn":14},{"ruleId":"491","severity":1,"message":"492","line":475,"column":37,"nodeType":"493","messageId":"494","endLine":475,"endColumn":39},{"ruleId":"495","severity":1,"message":"496","line":476,"column":15,"nodeType":"497","messageId":"498","endLine":480,"endColumn":16},{"ruleId":"495","severity":1,"message":"496","line":482,"column":17,"nodeType":"497","messageId":"498","endLine":486,"endColumn":18},{"ruleId":"484","severity":1,"message":"499","line":24,"column":11,"nodeType":"486","messageId":"487","endLine":24,"endColumn":26},{"ruleId":"484","severity":1,"message":"500","line":29,"column":11,"nodeType":"486","messageId":"487","endLine":29,"endColumn":26},{"ruleId":"484","severity":1,"message":"501","line":92,"column":11,"nodeType":"486","messageId":"487","endLine":92,"endColumn":21},{"ruleId":"502","severity":1,"message":"503","line":138,"column":91,"nodeType":"504","messageId":"505","endLine":138,"endColumn":93},{"ruleId":"502","severity":1,"message":"503","line":141,"column":97,"nodeType":"504","messageId":"505","endLine":141,"endColumn":99},{"ruleId":"484","severity":1,"message":"506","line":15,"column":10,"nodeType":"486","messageId":"487","endLine":15,"endColumn":13},{"ruleId":"507","severity":1,"message":"508","line":49,"column":19,"nodeType":"509","endLine":49,"endColumn":49},{"ruleId":"502","severity":1,"message":"503","line":63,"column":21,"nodeType":"504","messageId":"505","endLine":63,"endColumn":23},{"ruleId":"502","severity":1,"message":"503","line":70,"column":13,"nodeType":"504","messageId":"505","endLine":70,"endColumn":15},{"ruleId":"502","severity":1,"message":"503","line":78,"column":43,"nodeType":"504","messageId":"505","endLine":78,"endColumn":45},{"ruleId":"502","severity":1,"message":"503","line":106,"column":46,"nodeType":"504","messageId":"505","endLine":106,"endColumn":48},{"ruleId":"502","severity":1,"message":"510","line":116,"column":24,"nodeType":"504","messageId":"505","endLine":116,"endColumn":26},{"ruleId":"491","severity":1,"message":"511","line":120,"column":38,"nodeType":"493","messageId":"512","endLine":120,"endColumn":40},{"ruleId":"513","severity":1,"message":"514","line":154,"column":5,"nodeType":"515","messageId":"505","endLine":154,"endColumn":15},{"ruleId":"516","severity":1,"message":"517","line":156,"column":9,"nodeType":"518","endLine":165,"endColumn":11},{"ruleId":"502","severity":1,"message":"510","line":251,"column":41,"nodeType":"504","messageId":"505","endLine":251,"endColumn":43},{"ruleId":"519","severity":1,"message":"520","line":337,"column":72,"nodeType":"504","messageId":"521","endLine":337,"endColumn":73},{"ruleId":"502","severity":1,"message":"503","line":367,"column":47,"nodeType":"504","messageId":"505","endLine":367,"endColumn":49},{"ruleId":"484","severity":1,"message":"522","line":41,"column":8,"nodeType":"486","messageId":"487","endLine":41,"endColumn":13},{"ruleId":"484","severity":1,"message":"523","line":42,"column":8,"nodeType":"486","messageId":"487","endLine":42,"endColumn":17},{"ruleId":"484","severity":1,"message":"524","line":11,"column":10,"nodeType":"486","messageId":"487","endLine":11,"endColumn":21},{"ruleId":"484","severity":1,"message":"525","line":11,"column":23,"nodeType":"486","messageId":"487","endLine":11,"endColumn":38},{"ruleId":"502","severity":1,"message":"503","line":31,"column":31,"nodeType":"504","messageId":"505","endLine":31,"endColumn":33},{"ruleId":"491","severity":1,"message":"511","line":40,"column":42,"nodeType":"493","messageId":"512","endLine":40,"endColumn":44},{"ruleId":"502","severity":1,"message":"503","line":45,"column":32,"nodeType":"504","messageId":"505","endLine":45,"endColumn":34},{"ruleId":"491","severity":1,"message":"511","line":49,"column":44,"nodeType":"493","messageId":"512","endLine":49,"endColumn":46},{"ruleId":"491","severity":1,"message":"511","line":71,"column":34,"nodeType":"493","messageId":"512","endLine":71,"endColumn":36},{"ruleId":"502","severity":1,"message":"503","line":78,"column":19,"nodeType":"504","messageId":"505","endLine":78,"endColumn":21},{"ruleId":"502","severity":1,"message":"503","line":79,"column":19,"nodeType":"504","messageId":"505","endLine":79,"endColumn":21},{"ruleId":"502","severity":1,"message":"503","line":80,"column":19,"nodeType":"504","messageId":"505","endLine":80,"endColumn":21},{"ruleId":"502","severity":1,"message":"503","line":81,"column":19,"nodeType":"504","messageId":"505","endLine":81,"endColumn":21},{"ruleId":"502","severity":1,"message":"503","line":82,"column":19,"nodeType":"504","messageId":"505","endLine":82,"endColumn":21},{"ruleId":"507","severity":1,"message":"526","line":113,"column":6,"nodeType":"527","endLine":113,"endColumn":8,"suggestions":"528"},{"ruleId":"491","severity":1,"message":"511","line":174,"column":23,"nodeType":"493","messageId":"512","endLine":174,"endColumn":25},{"ruleId":"491","severity":1,"message":"511","line":176,"column":34,"nodeType":"493","messageId":"512","endLine":176,"endColumn":36},{"ruleId":"491","severity":1,"message":"511","line":181,"column":23,"nodeType":"493","messageId":"512","endLine":181,"endColumn":25},{"ruleId":"491","severity":1,"message":"511","line":183,"column":34,"nodeType":"493","messageId":"512","endLine":183,"endColumn":36},{"ruleId":"529","severity":1,"message":"530","line":192,"column":13,"nodeType":"486","messageId":"531","endLine":192,"endColumn":28},{"ruleId":"502","severity":1,"message":"503","line":194,"column":30,"nodeType":"504","messageId":"505","endLine":194,"endColumn":32},{"ruleId":"491","severity":1,"message":"511","line":199,"column":30,"nodeType":"493","messageId":"512","endLine":199,"endColumn":32},{"ruleId":"491","severity":1,"message":"511","line":202,"column":21,"nodeType":"493","messageId":"512","endLine":202,"endColumn":23},{"ruleId":"484","severity":1,"message":"532","line":14,"column":9,"nodeType":"486","messageId":"487","endLine":14,"endColumn":16},{"ruleId":"484","severity":1,"message":"533","line":15,"column":11,"nodeType":"486","messageId":"487","endLine":15,"endColumn":15},{"ruleId":"484","severity":1,"message":"534","line":36,"column":9,"nodeType":"486","messageId":"487","endLine":36,"endColumn":21},{"ruleId":"484","severity":1,"message":"535","line":154,"column":7,"nodeType":"486","messageId":"487","endLine":154,"endColumn":15},{"ruleId":"484","severity":1,"message":"524","line":9,"column":10,"nodeType":"486","messageId":"487","endLine":9,"endColumn":21},{"ruleId":"484","severity":1,"message":"525","line":9,"column":23,"nodeType":"486","messageId":"487","endLine":9,"endColumn":38},{"ruleId":"484","severity":1,"message":"524","line":9,"column":10,"nodeType":"486","messageId":"487","endLine":9,"endColumn":21},{"ruleId":"484","severity":1,"message":"525","line":9,"column":23,"nodeType":"486","messageId":"487","endLine":9,"endColumn":38},{"ruleId":"507","severity":1,"message":"536","line":133,"column":6,"nodeType":"527","endLine":133,"endColumn":18,"suggestions":"537"},{"ruleId":"484","severity":1,"message":"524","line":7,"column":10,"nodeType":"486","messageId":"487","endLine":7,"endColumn":21},{"ruleId":"484","severity":1,"message":"525","line":7,"column":23,"nodeType":"486","messageId":"487","endLine":7,"endColumn":38},{"ruleId":"484","severity":1,"message":"538","line":9,"column":3,"nodeType":"486","messageId":"487","endLine":9,"endColumn":9},{"ruleId":"484","severity":1,"message":"539","line":10,"column":20,"nodeType":"486","messageId":"487","endLine":10,"endColumn":26},{"ruleId":"484","severity":1,"message":"525","line":20,"column":3,"nodeType":"486","messageId":"487","endLine":20,"endColumn":18},{"ruleId":"484","severity":1,"message":"540","line":25,"column":8,"nodeType":"486","messageId":"487","endLine":25,"endColumn":20},{"ruleId":"484","severity":1,"message":"541","line":26,"column":8,"nodeType":"486","messageId":"487","endLine":26,"endColumn":19},{"ruleId":"484","severity":1,"message":"533","line":29,"column":11,"nodeType":"486","messageId":"487","endLine":29,"endColumn":15},{"ruleId":"484","severity":1,"message":"542","line":52,"column":9,"nodeType":"486","messageId":"487","endLine":52,"endColumn":20},{"ruleId":"484","severity":1,"message":"533","line":17,"column":11,"nodeType":"486","messageId":"487","endLine":17,"endColumn":15},{"ruleId":"507","severity":1,"message":"543","line":58,"column":6,"nodeType":"527","endLine":58,"endColumn":8,"suggestions":"544"},{"ruleId":"519","severity":1,"message":"520","line":144,"column":74,"nodeType":"504","messageId":"521","endLine":144,"endColumn":75},{"ruleId":"507","severity":1,"message":"545","line":21,"column":6,"nodeType":"527","endLine":21,"endColumn":14,"suggestions":"546"},{"ruleId":"491","severity":1,"message":"511","line":25,"column":34,"nodeType":"493","messageId":"512","endLine":25,"endColumn":36},{"ruleId":"502","severity":1,"message":"510","line":26,"column":31,"nodeType":"504","messageId":"505","endLine":26,"endColumn":33},{"ruleId":"502","severity":1,"message":"503","line":27,"column":15,"nodeType":"504","messageId":"505","endLine":27,"endColumn":17},{"ruleId":"502","severity":1,"message":"503","line":39,"column":27,"nodeType":"504","messageId":"505","endLine":39,"endColumn":29},{"ruleId":"491","severity":1,"message":"511","line":58,"column":33,"nodeType":"493","messageId":"512","endLine":58,"endColumn":35},{"ruleId":"491","severity":1,"message":"511","line":61,"column":39,"nodeType":"493","messageId":"512","endLine":61,"endColumn":41},{"ruleId":"502","severity":1,"message":"510","line":103,"column":13,"nodeType":"504","messageId":"505","endLine":103,"endColumn":15},{"ruleId":"502","severity":1,"message":"510","line":120,"column":13,"nodeType":"504","messageId":"505","endLine":120,"endColumn":15},{"ruleId":"502","severity":1,"message":"503","line":127,"column":27,"nodeType":"504","messageId":"505","endLine":127,"endColumn":29},{"ruleId":"502","severity":1,"message":"503","line":128,"column":24,"nodeType":"504","messageId":"505","endLine":128,"endColumn":26},{"ruleId":"502","severity":1,"message":"503","line":134,"column":23,"nodeType":"504","messageId":"505","endLine":134,"endColumn":25},{"ruleId":"547","severity":1,"message":"548","line":204,"column":7,"nodeType":"549","messageId":"550","endLine":204,"endColumn":25},{"ruleId":"484","severity":1,"message":"524","line":3,"column":3,"nodeType":"486","messageId":"487","endLine":3,"endColumn":14},{"ruleId":"507","severity":1,"message":"536","line":85,"column":6,"nodeType":"527","endLine":85,"endColumn":8,"suggestions":"551"},{"ruleId":"547","severity":1,"message":"548","line":99,"column":17,"nodeType":"549","messageId":"550","endLine":99,"endColumn":41},{"ruleId":"484","severity":1,"message":"552","line":19,"column":8,"nodeType":"486","messageId":"487","endLine":19,"endColumn":28},{"ruleId":"484","severity":1,"message":"553","line":34,"column":8,"nodeType":"486","messageId":"487","endLine":34,"endColumn":14},{"ruleId":"484","severity":1,"message":"554","line":37,"column":8,"nodeType":"486","messageId":"487","endLine":37,"endColumn":11},{"ruleId":"484","severity":1,"message":"555","line":37,"column":15,"nodeType":"486","messageId":"487","endLine":37,"endColumn":23},{"ruleId":"484","severity":1,"message":"533","line":39,"column":11,"nodeType":"486","messageId":"487","endLine":39,"endColumn":15},{"ruleId":"491","severity":1,"message":"511","line":106,"column":42,"nodeType":"493","messageId":"512","endLine":106,"endColumn":44},{"ruleId":"502","severity":1,"message":"503","line":107,"column":27,"nodeType":"504","messageId":"505","endLine":107,"endColumn":29},{"ruleId":"507","severity":1,"message":"543","line":120,"column":6,"nodeType":"527","endLine":120,"endColumn":15,"suggestions":"556"},{"ruleId":"502","severity":1,"message":"503","line":203,"column":30,"nodeType":"504","messageId":"505","endLine":203,"endColumn":32},{"ruleId":"502","severity":1,"message":"503","line":243,"column":34,"nodeType":"504","messageId":"505","endLine":243,"endColumn":36},{"ruleId":"502","severity":1,"message":"503","line":320,"column":44,"nodeType":"504","messageId":"505","endLine":320,"endColumn":46},{"ruleId":"484","severity":1,"message":"524","line":3,"column":3,"nodeType":"486","messageId":"487","endLine":3,"endColumn":14},{"ruleId":"484","severity":1,"message":"557","line":6,"column":3,"nodeType":"486","messageId":"487","endLine":6,"endColumn":17},{"ruleId":"484","severity":1,"message":"558","line":7,"column":3,"nodeType":"486","messageId":"487","endLine":7,"endColumn":17},{"ruleId":"484","severity":1,"message":"559","line":8,"column":3,"nodeType":"486","messageId":"487","endLine":8,"endColumn":13},{"ruleId":"484","severity":1,"message":"560","line":10,"column":3,"nodeType":"486","messageId":"487","endLine":10,"endColumn":13},{"ruleId":"484","severity":1,"message":"561","line":11,"column":3,"nodeType":"486","messageId":"487","endLine":11,"endColumn":19},{"ruleId":"484","severity":1,"message":"562","line":12,"column":3,"nodeType":"486","messageId":"487","endLine":12,"endColumn":17},{"ruleId":"484","severity":1,"message":"552","line":21,"column":8,"nodeType":"486","messageId":"487","endLine":21,"endColumn":28},{"ruleId":"484","severity":1,"message":"563","line":49,"column":10,"nodeType":"486","messageId":"487","endLine":49,"endColumn":15},{"ruleId":"484","severity":1,"message":"564","line":53,"column":9,"nodeType":"486","messageId":"487","endLine":53,"endColumn":21},{"ruleId":"547","severity":1,"message":"548","line":455,"column":29,"nodeType":"549","messageId":"550","endLine":455,"endColumn":51},{"ruleId":"484","severity":1,"message":"565","line":7,"column":3,"nodeType":"486","messageId":"487","endLine":7,"endColumn":8},{"ruleId":"484","severity":1,"message":"566","line":1,"column":17,"nodeType":"486","messageId":"487","endLine":1,"endColumn":25},{"ruleId":"484","severity":1,"message":"554","line":22,"column":8,"nodeType":"486","messageId":"487","endLine":22,"endColumn":11},{"ruleId":"484","severity":1,"message":"567","line":83,"column":10,"nodeType":"486","messageId":"487","endLine":83,"endColumn":21},{"ruleId":"547","severity":1,"message":"548","line":152,"column":17,"nodeType":"549","messageId":"550","endLine":152,"endColumn":63},{"ruleId":"547","severity":1,"message":"548","line":248,"column":23,"nodeType":"549","messageId":"550","endLine":248,"endColumn":69},{"ruleId":"507","severity":1,"message":"543","line":65,"column":6,"nodeType":"527","endLine":65,"endColumn":8,"suggestions":"568"},{"ruleId":"502","severity":1,"message":"503","line":168,"column":61,"nodeType":"504","messageId":"505","endLine":168,"endColumn":63},{"ruleId":"502","severity":1,"message":"503","line":169,"column":61,"nodeType":"504","messageId":"505","endLine":169,"endColumn":63},{"ruleId":"502","severity":1,"message":"503","line":170,"column":61,"nodeType":"504","messageId":"505","endLine":170,"endColumn":63},{"ruleId":"502","severity":1,"message":"503","line":171,"column":61,"nodeType":"504","messageId":"505","endLine":171,"endColumn":63},{"ruleId":"502","severity":1,"message":"503","line":172,"column":61,"nodeType":"504","messageId":"505","endLine":172,"endColumn":63},{"ruleId":"502","severity":1,"message":"503","line":173,"column":61,"nodeType":"504","messageId":"505","endLine":173,"endColumn":63},{"ruleId":"484","severity":1,"message":"566","line":1,"column":17,"nodeType":"486","messageId":"487","endLine":1,"endColumn":25},{"ruleId":"484","severity":1,"message":"569","line":1,"column":48,"nodeType":"486","messageId":"487","endLine":1,"endColumn":62},{"ruleId":"484","severity":1,"message":"570","line":3,"column":10,"nodeType":"486","messageId":"487","endLine":3,"endColumn":14},{"ruleId":"484","severity":1,"message":"567","line":84,"column":10,"nodeType":"486","messageId":"487","endLine":84,"endColumn":21},{"ruleId":"484","severity":1,"message":"571","line":85,"column":10,"nodeType":"486","messageId":"487","endLine":85,"endColumn":30},{"ruleId":"484","severity":1,"message":"570","line":13,"column":10,"nodeType":"486","messageId":"487","endLine":13,"endColumn":14},{"ruleId":"484","severity":1,"message":"572","line":16,"column":10,"nodeType":"486","messageId":"487","endLine":16,"endColumn":14},{"ruleId":"484","severity":1,"message":"573","line":23,"column":8,"nodeType":"486","messageId":"487","endLine":23,"endColumn":19},{"ruleId":"507","severity":1,"message":"574","line":87,"column":6,"nodeType":"527","endLine":87,"endColumn":15,"suggestions":"575"},{"ruleId":"484","severity":1,"message":"576","line":2,"column":8,"nodeType":"486","messageId":"487","endLine":2,"endColumn":17},{"ruleId":"484","severity":1,"message":"566","line":1,"column":17,"nodeType":"486","messageId":"487","endLine":1,"endColumn":25},{"ruleId":"484","severity":1,"message":"569","line":1,"column":48,"nodeType":"486","messageId":"487","endLine":1,"endColumn":62},{"ruleId":"484","severity":1,"message":"570","line":3,"column":10,"nodeType":"486","messageId":"487","endLine":3,"endColumn":14},{"ruleId":"484","severity":1,"message":"567","line":84,"column":10,"nodeType":"486","messageId":"487","endLine":84,"endColumn":21},{"ruleId":"484","severity":1,"message":"571","line":85,"column":10,"nodeType":"486","messageId":"487","endLine":85,"endColumn":30},{"ruleId":"480","replacedBy":"577"},{"ruleId":"482","replacedBy":"578"},{"ruleId":"484","severity":1,"message":"566","line":1,"column":17,"nodeType":"486","messageId":"487","endLine":1,"endColumn":25},{"ruleId":"484","severity":1,"message":"554","line":22,"column":8,"nodeType":"486","messageId":"487","endLine":22,"endColumn":11},{"ruleId":"484","severity":1,"message":"567","line":83,"column":10,"nodeType":"486","messageId":"487","endLine":83,"endColumn":21},{"ruleId":"547","severity":1,"message":"548","line":152,"column":17,"nodeType":"549","messageId":"550","endLine":152,"endColumn":63},{"ruleId":"547","severity":1,"message":"548","line":248,"column":23,"nodeType":"549","messageId":"550","endLine":248,"endColumn":69},{"ruleId":"484","severity":1,"message":"579","line":7,"column":8,"nodeType":"486","messageId":"487","endLine":7,"endColumn":14},{"ruleId":"484","severity":1,"message":"580","line":15,"column":8,"nodeType":"486","messageId":"487","endLine":15,"endColumn":22},{"ruleId":"484","severity":1,"message":"581","line":21,"column":8,"nodeType":"486","messageId":"487","endLine":21,"endColumn":17},{"ruleId":"484","severity":1,"message":"582","line":22,"column":8,"nodeType":"486","messageId":"487","endLine":22,"endColumn":15},{"ruleId":"484","severity":1,"message":"583","line":25,"column":5,"nodeType":"486","messageId":"487","endLine":25,"endColumn":9},{"ruleId":"484","severity":1,"message":"584","line":37,"column":10,"nodeType":"486","messageId":"487","endLine":37,"endColumn":20},{"ruleId":"484","severity":1,"message":"585","line":40,"column":10,"nodeType":"486","messageId":"487","endLine":40,"endColumn":27},{"ruleId":"507","severity":1,"message":"543","line":77,"column":6,"nodeType":"527","endLine":77,"endColumn":8,"suggestions":"586"},{"ruleId":"516","severity":1,"message":"517","line":240,"column":25,"nodeType":"518","endLine":247,"endColumn":27},{"ruleId":"484","severity":1,"message":"570","line":13,"column":10,"nodeType":"486","messageId":"487","endLine":13,"endColumn":14},{"ruleId":"484","severity":1,"message":"572","line":16,"column":10,"nodeType":"486","messageId":"487","endLine":16,"endColumn":14},{"ruleId":"484","severity":1,"message":"573","line":23,"column":8,"nodeType":"486","messageId":"487","endLine":23,"endColumn":19},{"ruleId":"507","severity":1,"message":"574","line":85,"column":6,"nodeType":"527","endLine":85,"endColumn":15,"suggestions":"587"},{"ruleId":"484","severity":1,"message":"539","line":10,"column":20,"nodeType":"486","messageId":"487","endLine":10,"endColumn":26},{"ruleId":"484","severity":1,"message":"588","line":19,"column":17,"nodeType":"486","messageId":"487","endLine":19,"endColumn":20},{"ruleId":"480","replacedBy":"589"},{"ruleId":"482","replacedBy":"590"},{"ruleId":"484","severity":1,"message":"591","line":1,"column":27,"nodeType":"486","messageId":"487","endLine":1,"endColumn":35},{"ruleId":"484","severity":1,"message":"592","line":2,"column":10,"nodeType":"486","messageId":"487","endLine":2,"endColumn":13},{"ruleId":"484","severity":1,"message":"593","line":2,"column":15,"nodeType":"486","messageId":"487","endLine":2,"endColumn":18},{"ruleId":"484","severity":1,"message":"570","line":4,"column":3,"nodeType":"486","messageId":"487","endLine":4,"endColumn":7},{"ruleId":"484","severity":1,"message":"553","line":13,"column":10,"nodeType":"486","messageId":"487","endLine":13,"endColumn":16},{"ruleId":"484","severity":1,"message":"594","line":13,"column":18,"nodeType":"486","messageId":"487","endLine":13,"endColumn":23},{"ruleId":"484","severity":1,"message":"572","line":13,"column":25,"nodeType":"486","messageId":"487","endLine":13,"endColumn":29},{"ruleId":"484","severity":1,"message":"588","line":19,"column":17,"nodeType":"486","messageId":"487","endLine":19,"endColumn":20},{"ruleId":"484","severity":1,"message":"595","line":20,"column":11,"nodeType":"486","messageId":"487","endLine":20,"endColumn":12},{"ruleId":"484","severity":1,"message":"596","line":21,"column":9,"nodeType":"486","messageId":"487","endLine":21,"endColumn":11},{"ruleId":"507","severity":1,"message":"543","line":124,"column":6,"nodeType":"527","endLine":124,"endColumn":14,"suggestions":"597"},{"ruleId":"502","severity":1,"message":"503","line":137,"column":19,"nodeType":"504","messageId":"505","endLine":137,"endColumn":21},{"ruleId":"484","severity":1,"message":"533","line":17,"column":11,"nodeType":"486","messageId":"487","endLine":17,"endColumn":15},{"ruleId":"484","severity":1,"message":"588","line":17,"column":17,"nodeType":"486","messageId":"487","endLine":17,"endColumn":20},{"ruleId":"502","severity":1,"message":"503","line":112,"column":19,"nodeType":"504","messageId":"505","endLine":112,"endColumn":21},{"ruleId":"507","severity":1,"message":"598","line":157,"column":6,"nodeType":"527","endLine":157,"endColumn":14,"suggestions":"599"},{"ruleId":"484","severity":1,"message":"591","line":1,"column":27,"nodeType":"486","messageId":"487","endLine":1,"endColumn":35},{"ruleId":"484","severity":1,"message":"592","line":2,"column":10,"nodeType":"486","messageId":"487","endLine":2,"endColumn":13},{"ruleId":"484","severity":1,"message":"593","line":2,"column":15,"nodeType":"486","messageId":"487","endLine":2,"endColumn":18},{"ruleId":"484","severity":1,"message":"570","line":4,"column":3,"nodeType":"486","messageId":"487","endLine":4,"endColumn":7},{"ruleId":"484","severity":1,"message":"588","line":19,"column":17,"nodeType":"486","messageId":"487","endLine":19,"endColumn":20},{"ruleId":"484","severity":1,"message":"595","line":20,"column":11,"nodeType":"486","messageId":"487","endLine":20,"endColumn":12},{"ruleId":"484","severity":1,"message":"596","line":21,"column":9,"nodeType":"486","messageId":"487","endLine":21,"endColumn":11},{"ruleId":"484","severity":1,"message":"570","line":13,"column":10,"nodeType":"486","messageId":"487","endLine":13,"endColumn":14},{"ruleId":"484","severity":1,"message":"572","line":16,"column":10,"nodeType":"486","messageId":"487","endLine":16,"endColumn":14},{"ruleId":"484","severity":1,"message":"573","line":23,"column":8,"nodeType":"486","messageId":"487","endLine":23,"endColumn":19},{"ruleId":"507","severity":1,"message":"574","line":87,"column":6,"nodeType":"527","endLine":87,"endColumn":15,"suggestions":"600"},"no-native-reassign",["601"],"no-negated-in-lhs",["602"],"no-unused-vars","'Error404' is defined but never used.","Identifier","unusedVar","'activeVariants' is assigned a value but never used.","'getGrandTotal' is assigned a value but never used.","'value' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'handleDecrement' is assigned a value but never used.","'handelIncrement' is assigned a value but never used.","'addBaskets' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'sty' is defined but never used.","react-hooks/exhaustive-deps","Assignments to the 'varData' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","Expected '!==' and instead saw '!='.","Array.prototype.map() expects a return value from arrow function.","expectedInside","no-dupe-keys","Duplicate key 'indicators'.","ObjectExpression","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'Theme' is defined but never used.","'EditTheme' is defined but never used.","'CBreadcrumb' is defined but never used.","'CBreadcrumbItem' is defined but never used.","React Hook useEffect has missing dependencies: 'attributes.length' and 'id'. Either include them or remove the dependency array.","ArrayExpression",["603"],"no-redeclare","'uniqueResultOne' is already defined.","redeclared","'history' is assigned a value but never used.","'path' is assigned a value but never used.","'CategoryName' is assigned a value but never used.","'branchID' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["604"],"'Switch' is defined but never used.","'Router' is defined but never used.","'PrivateRoute' is defined but never used.","'SubCategory' is defined but never used.","'BrancheName' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'branchId'. Either include it or remove the dependency array.",["605"],"React Hook useEffect has a missing dependency: 'setVarantGrid'. Either include it or remove the dependency array.",["606"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps",["607"],"'SingleFileAutoSubmit' is defined but never used.","'Button' is defined but never used.","'Box' is defined but never used.","'BoxProps' is defined but never used.",["608"],"'CAccordionBody' is defined but never used.","'CListGroupItem' is defined but never used.","'CListGroup' is defined but never used.","'CAccordion' is defined but never used.","'CAccordionHeader' is defined but never used.","'CAccordionItem' is defined but never used.","'state' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'Route' is defined but never used.","'Fragment' is defined but never used.","'variantData' is assigned a value but never used.",["609"],"'SyntheticEvent' is defined but never used.","'Link' is defined but never used.","'variantsWithPictures' is assigned a value but never used.","'Form' is defined but never used.","'CardContent' is defined but never used.","React Hook useEffect has a missing dependency: 'templateId'. Either include it or remove the dependency array.",["610"],"'PropTypes' is defined but never used.",["601"],["602"],"'Footer' is defined but never used.","'InfiniteScroll' is defined but never used.","'PhoneIcon' is defined but never used.","'Toolbar' is defined but never used.","'hold' is assigned a value but never used.","'categories' is assigned a value but never used.","'activeSubCategory' is assigned a value but never used.",["611"],["612"],"'url' is assigned a value but never used.",["601"],["602"],"'useState' is defined but never used.","'Tab' is defined but never used.","'Nav' is defined but never used.","'Modal' is defined but never used.","'t' is assigned a value but never used.","'id' is assigned a value but never used.",["613"],"React Hook useEffect has missing dependencies: 'branchId' and 'productId'. Either include them or remove the dependency array.",["614"],["615"],"no-global-assign","no-unsafe-negation",{"desc":"616","fix":"617"},{"desc":"618","fix":"619"},{"desc":"620","fix":"621"},{"desc":"622","fix":"623"},{"desc":"624","fix":"625"},{"desc":"626","fix":"627"},{"desc":"620","fix":"628"},{"desc":"629","fix":"630"},{"desc":"620","fix":"631"},{"desc":"629","fix":"632"},{"desc":"633","fix":"634"},{"desc":"635","fix":"636"},{"desc":"629","fix":"637"},"Update the dependencies array to be: [attributes.length, id]",{"range":"638","text":"639"},"Update the dependencies array to be: [id, unitInsert]",{"range":"640","text":"641"},"Update the dependencies array to be: [branchId]",{"range":"642","text":"643"},"Update the dependencies array to be: [setVarantGrid, values]",{"range":"644","text":"645"},"Update the dependencies array to be: [id]",{"range":"646","text":"647"},"Update the dependencies array to be: [branchId, loading]",{"range":"648","text":"649"},{"range":"650","text":"643"},"Update the dependencies array to be: [loading, templateId]",{"range":"651","text":"652"},{"range":"653","text":"643"},{"range":"654","text":"652"},"Update the dependencies array to be: [branchId, insert]",{"range":"655","text":"656"},"Update the dependencies array to be: [branchId, insert, productId]",{"range":"657","text":"658"},{"range":"659","text":"652"},[3291,3293],"[attributes.length, id]",[3986,3998],"[id, unitInsert]",[2077,2079],"[branchId]",[738,746],"[setVarantGrid, values]",[3107,3109],"[id]",[4119,4128],"[branchId, loading]",[2626,2628],[2777,2786],"[loading, templateId]",[2977,2979],[2716,2725],[4502,4510],"[branchId, insert]",[5856,5864],"[branchId, insert, productId]",[2784,2793]]