[{"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\index.js":"1","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\App.js":"2","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\Consts.js":"3","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\PublicRoute.js":"4","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\pages\\Login.js":"5","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\pages\\Registration.js":"6","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Default\\ShowProducts.js":"7","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\ProductDetails.js":"8","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Default\\Main.js":"9","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\Main.js":"10","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Thrid\\Main.js":"11","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\OrderDetails.js":"12","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\First\\Main.js":"13","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Second\\Main.js":"14","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\index.js":"15","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\Footer.js":"16","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\Header.js":"17","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Products\\Extra.js":"18","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Products\\Ingredients.js":"19","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\utils\\index.js":"20","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\pages\\Error404.js":"21","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Attributes\\Attributes.js":"22","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Variants\\Gallary.js":"23","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Orders\\Basket.js":"24","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Orders\\Order.js":"25","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Branches\\Show.js":"26","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Branches\\Branches.js":"27","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Branches\\Tables.js":"28","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Inventories\\Inventory.js":"29","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Companies\\Company.js":"30","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Services\\ServiceArea.js":"31","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\layouts\\Footer.js":"32","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Dashboard\\Home\\Home.js":"33","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Dashboard\\Profile\\Profile.js":"34","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\PrivateRoute.js":"35","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Second\\Header.js":"36","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Second\\Footer.js":"37","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\Customization.js":"38","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Products\\Show.js":"39","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\layouts\\PageTitle.js":"40","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Show.js":"41","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Categories\\SubCategory.js":"42","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Categories\\Category.js":"43","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\layouts\\nav\\index.js":"44","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Default\\Customization.js":"45","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Products\\AddProduct.js":"46","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Products\\EditProduct.js":"47","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\layouts\\nav\\NavHader.js":"48","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\layouts\\nav\\Header.js":"49","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\layouts\\nav\\SideBar.js":"50","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\EditTheme.js":"51","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Theme.js":"52","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Design.js":"53","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Variants\\Variants.js":"54","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Products\\Product.js":"55","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Variants\\Grid.js":"56","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Second\\ProductDetails.js":"57","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Thrid\\ProductsList.js":"58","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Thrid\\ProductDetails.js":"59","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\First\\Header.js":"60","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\First\\Footer.js":"61","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\First\\ProductDetails.js":"62","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Default\\Counter.js":"63","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\Cart.js":"64","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\Counter.js":"65","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\pages\\ForgotPassword.js":"66"},{"size":1407,"mtime":1640787809097,"results":"67","hashOfConfig":"68"},{"size":5086,"mtime":1640828434559,"results":"69","hashOfConfig":"68"},{"size":67,"mtime":1638620992553,"results":"70","hashOfConfig":"68"},{"size":458,"mtime":1640826790413,"results":"71","hashOfConfig":"68"},{"size":5660,"mtime":1640830080102,"results":"72","hashOfConfig":"68"},{"size":6059,"mtime":1640830184121,"results":"73","hashOfConfig":"68"},{"size":14591,"mtime":1639765815460,"results":"74","hashOfConfig":"68"},{"size":24361,"mtime":1640779681850,"results":"75","hashOfConfig":"68"},{"size":9220,"mtime":1639810861346,"results":"76","hashOfConfig":"68"},{"size":14163,"mtime":1640831469535,"results":"77","hashOfConfig":"68"},{"size":11228,"mtime":1639835468094,"results":"78","hashOfConfig":"68"},{"size":16728,"mtime":1640750530408,"results":"79","hashOfConfig":"68"},{"size":9775,"mtime":1639825996236,"results":"80","hashOfConfig":"68"},{"size":11783,"mtime":1639810340751,"results":"81","hashOfConfig":"68"},{"size":2831,"mtime":1640843002035,"results":"82","hashOfConfig":"68"},{"size":1784,"mtime":1640620955610,"results":"83","hashOfConfig":"68"},{"size":4442,"mtime":1640727395345,"results":"84","hashOfConfig":"68"},{"size":9129,"mtime":1639201151455,"results":"85","hashOfConfig":"68"},{"size":9026,"mtime":1640845182221,"results":"86","hashOfConfig":"68"},{"size":214,"mtime":1638620673216,"results":"87","hashOfConfig":"68"},{"size":891,"mtime":1638903859046,"results":"88","hashOfConfig":"68"},{"size":9503,"mtime":1640843204072,"results":"89","hashOfConfig":"68"},{"size":7877,"mtime":1638620673201,"results":"90","hashOfConfig":"68"},{"size":7016,"mtime":1638620673187,"results":"91","hashOfConfig":"68"},{"size":4048,"mtime":1638620673187,"results":"92","hashOfConfig":"68"},{"size":8234,"mtime":1640847749884,"results":"93","hashOfConfig":"68"},{"size":19917,"mtime":1640847911196,"results":"94","hashOfConfig":"68"},{"size":16627,"mtime":1640847215760,"results":"95","hashOfConfig":"68"},{"size":10702,"mtime":1638956909054,"results":"96","hashOfConfig":"68"},{"size":10464,"mtime":1640845393836,"results":"97","hashOfConfig":"68"},{"size":9692,"mtime":1640417875174,"results":"98","hashOfConfig":"68"},{"size":489,"mtime":1638620673203,"results":"99","hashOfConfig":"68"},{"size":2243,"mtime":1640375675353,"results":"100","hashOfConfig":"68"},{"size":23716,"mtime":1638620673183,"results":"101","hashOfConfig":"68"},{"size":501,"mtime":1640789296441,"results":"102","hashOfConfig":"68"},{"size":1002,"mtime":1639810339555,"results":"103","hashOfConfig":"68"},{"size":543,"mtime":1639810327307,"results":"104","hashOfConfig":"68"},{"size":31843,"mtime":1640831370152,"results":"105","hashOfConfig":"68"},{"size":1151,"mtime":1639508335019,"results":"106","hashOfConfig":"68"},{"size":823,"mtime":1638620673204,"results":"107","hashOfConfig":"68"},{"size":1374,"mtime":1640415955697,"results":"108","hashOfConfig":"68"},{"size":16936,"mtime":1640847413070,"results":"109","hashOfConfig":"68"},{"size":18063,"mtime":1640847333389,"results":"110","hashOfConfig":"68"},{"size":688,"mtime":1638620673212,"results":"111","hashOfConfig":"68"},{"size":20606,"mtime":1639650122222,"results":"112","hashOfConfig":"68"},{"size":21871,"mtime":1640785429543,"results":"113","hashOfConfig":"68"},{"size":23514,"mtime":1640785390759,"results":"114","hashOfConfig":"68"},{"size":953,"mtime":1638620673212,"results":"115","hashOfConfig":"68"},{"size":7932,"mtime":1640847776592,"results":"116","hashOfConfig":"68"},{"size":5325,"mtime":1640847781488,"results":"117","hashOfConfig":"68"},{"size":15630,"mtime":1640831707143,"results":"118","hashOfConfig":"68"},{"size":21869,"mtime":1640831691317,"results":"119","hashOfConfig":"68"},{"size":28621,"mtime":1640845916330,"results":"120","hashOfConfig":"68"},{"size":8429,"mtime":1639500717470,"results":"121","hashOfConfig":"68"},{"size":12073,"mtime":1640849083571,"results":"122","hashOfConfig":"68"},{"size":7063,"mtime":1639377443808,"results":"123","hashOfConfig":"68"},{"size":19267,"mtime":1639819248353,"results":"124","hashOfConfig":"68"},{"size":6876,"mtime":1639820923985,"results":"125","hashOfConfig":"68"},{"size":18989,"mtime":1639819298495,"results":"126","hashOfConfig":"68"},{"size":3140,"mtime":1639833673832,"results":"127","hashOfConfig":"68"},{"size":632,"mtime":1639825744304,"results":"128","hashOfConfig":"68"},{"size":19291,"mtime":1639825838774,"results":"129","hashOfConfig":"68"},{"size":7926,"mtime":1640084115716,"results":"130","hashOfConfig":"68"},{"size":15009,"mtime":1640750030566,"results":"131","hashOfConfig":"68"},{"size":9877,"mtime":1640791511378,"results":"132","hashOfConfig":"68"},{"size":1842,"mtime":1640827588455,"results":"133","hashOfConfig":"68"},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},"i7z6n9",{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"136"},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"136"},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"136"},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"136"},{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"136"},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"136"},{"filePath":"167","messages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"136"},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"136"},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"179","messages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"183","messages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"185","messages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"189","messages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"191","messages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"193","messages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"195","messages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"199","messages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"136"},{"filePath":"202","messages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"204","messages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"136"},{"filePath":"207","messages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"209","messages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"211","messages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"213","messages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"215","messages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"217","messages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"219","messages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"221","messages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"136"},{"filePath":"224","messages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"226","messages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"136"},{"filePath":"229","messages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"136"},{"filePath":"232","messages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"136"},{"filePath":"235","messages":"236","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"237","messages":"238","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"136"},{"filePath":"240","messages":"241","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"136"},{"filePath":"243","messages":"244","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"136"},{"filePath":"246","messages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"248","messages":"249","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"250","messages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"252","messages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"136"},{"filePath":"255","messages":"256","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"136"},{"filePath":"258","messages":"259","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"136"},{"filePath":"261","messages":"262","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263","usedDeprecatedRules":"136"},{"filePath":"264","messages":"265","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"266","messages":"267","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"136"},{"filePath":"269","messages":"270","errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"136"},{"filePath":"272","messages":"273","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274","usedDeprecatedRules":"136"},{"filePath":"275","messages":"276","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277","usedDeprecatedRules":"136"},{"filePath":"278","messages":"279","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"136"},{"filePath":"281","messages":"282","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"283","messages":"284","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285","usedDeprecatedRules":"136"},{"filePath":"286","messages":"287","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"288","messages":"289","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"290","usedDeprecatedRules":"136"},{"filePath":"291","messages":"292","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"293","usedDeprecatedRules":"136"},{"filePath":"294","messages":"295","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\index.js",[],["296","297"],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\App.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\Consts.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\PublicRoute.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\pages\\Login.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\pages\\Registration.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Default\\ShowProducts.js",["298","299","300","301","302","303","304","305","306","307","308","309"],"import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { base_url, port } from \"../../../../../Consts\";\r\n\r\nimport { Zoom } from \"react-slideshow-image\";\r\nimport \"react-slideshow-image/dist/styles.css\";\r\nimport Accordion from \"@mui/material/Accordion\";\r\nimport AccordionSummary from \"@mui/material/AccordionSummary\";\r\nimport AccordionDetails from \"@mui/material/AccordionDetails\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport \"../style.css\";\r\nconst ShowProducts = (props) => {\r\n  // for localization\r\n  const { t } = useTranslation();\r\n\r\n  const id = atob(props.match.params.id);\r\n  const themes = props.history.location.state.themes;\r\n  let varData = [];\r\n  //for retriving data using laravel API\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [variantData, setVariantData] = useState([]);\r\n  const [showVaralint, setShowVarlist] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [skuarray, setSkuArray] = useState([]);\r\n  const [productDetails, setProductDetails] = useState({\r\n    price: 0,\r\n    stock: 0,\r\n    image: fetchData?.image,\r\n  });\r\n  useEffect(() => {\r\n    const getdata = async () => {\r\n      const product = await axios({\r\n        method: \"GET\",\r\n        url: `/api/GetProduct/${id}`,\r\n      });\r\n      const data = product.data.fetchData;\r\n\r\n      const res = await axios({\r\n        method: \"GET\",\r\n        url: `/api/Getvariations/${id}`,\r\n      });\r\n      setFetchData(data[0]);\r\n      if (res.data.fetchData !== \"\") {\r\n        varData = JSON.parse(res.data.fetchData);\r\n        parseVariants(varData);\r\n      }\r\n\r\n      setLoading(false);\r\n    };\r\n    getdata(); // axios\r\n  }, [id]);\r\n  const changePrice = (varName, variant) => {\r\n    const keys = Object.keys(showVaralint);\r\n    const varlineindex = keys.indexOf(varName);\r\n    const newSkuArray = skuarray;\r\n    newSkuArray[varlineindex] = variant;\r\n    setSkuArray(newSkuArray);\r\n    if (keys.length == newSkuArray.length) {\r\n      caluclatePrice(newSkuArray, variantData);\r\n    }\r\n  };\r\n  const caluclatePrice = (newSkuArray, variantData) => {\r\n    let sku = id + \"-\";\r\n    for (let i = 0; i < newSkuArray.length; i++) {\r\n      if (i == newSkuArray.length - 1) {\r\n        sku += newSkuArray[i];\r\n      } else {\r\n        sku += newSkuArray[i] + \"-\";\r\n      }\r\n    }\r\n\r\n    const priceList = variantData.filter((item) => {\r\n      return item.sku.replace(/\\s+/g, \"\") == sku.replace(/\\s+/g, \"\");\r\n    });\r\n    console.log(newSkuArray);\r\n    let productdetails = { price: 0, stock: 0 };\r\n    if (priceList.length !== 0) {\r\n      const line = priceList.pop();\r\n      const newProductDetails = {\r\n        price: line.price,\r\n        stock: line.stock,\r\n        image: line.image,\r\n      };\r\n      productdetails = newProductDetails;\r\n    } else {\r\n      const newProductDetails = {\r\n        price: 0,\r\n        stock: \"No Stock\",\r\n        image: fetchData.image,\r\n      };\r\n      productdetails = newProductDetails;\r\n    }\r\n    setProductDetails({ ...productdetails });\r\n  };\r\n  const parseVariants = (variantData) => {\r\n    const variants = [];\r\n    const savePostion = [\"postion\", \"sku\", \"price\", \"stock\", \"image\"];\r\n    const varLine = variantData[0];\r\n    const varlinekey = Object.keys(varLine);\r\n    for (let i = 0; i < varlinekey.length; i++) {\r\n      if (savePostion.indexOf(varlinekey[i]) == -1) {\r\n        let listvar = variantData.map((item) => {\r\n          return item[varlinekey[i]];\r\n        });\r\n        // get unique variants\r\n        listvar = listvar.filter(\r\n          (thing, index, self) =>\r\n            index ===\r\n            self.findIndex((t) => t.place === listvar.place && t === thing)\r\n        );\r\n        if (listvar[0] != 0) variants[varlinekey[i]] = listvar;\r\n      }\r\n    }\r\n    let def = [];\r\n    Object.keys(variants).map((item) => {\r\n      def.push(variants[item][0]);\r\n    });\r\n    setSkuArray(def);\r\n    caluclatePrice(def, variantData);\r\n    setShowVarlist(variants);\r\n    setVariantData(variantData);\r\n  };\r\n  const [ingredients, setIntgredients] = useState([]);\r\n  const changeIngredients = (label) => {\r\n    if (!ingredients.includes(label) === false) {\r\n      setIntgredients(ingredients.filter((item) => item !== label));\r\n    } else {\r\n      setIntgredients([...ingredients, label]);\r\n    }\r\n  };\r\n  let [sum, setSum] = useState(0);\r\n\r\n  const extraHandlers = (e, price) => {\r\n    if (e.target.checked) {\r\n      // console.log((sum += parseInt(price)));\r\n      setSum((sum += parseInt(price)));\r\n    } else {\r\n      setSum((sum -= parseInt(price)));\r\n    }\r\n  };\r\n\r\n  const zoomOutProperties = {\r\n    duration: 100,\r\n    transitionDuration: 5,\r\n    canSwipe: true,\r\n    indicators: true,\r\n    scale: false,\r\n    autoplay: false,\r\n    indicators: (i) => (\r\n      <div className=\"indicator\">\r\n        <img\r\n          src={\r\n            productDetails?.stock === \"No Stock\" || productDetails?.stock === 0\r\n              ? `http://${base_url}:${port}/images/products/${fetchData?.image}`\r\n              : `http://${base_url}:${port}/images/variants_pics/${productDetails.image[i]}`\r\n          }\r\n          width=\"40px\"\r\n          // className=\"p-1\"\r\n          // style={{ width: \"40px\" }}\r\n        />\r\n      </div>\r\n    ),\r\n  };\r\n\r\n  var viewImages_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"container \">\r\n        <div\r\n          className=\"spinner-border text-primary \"\r\n          role=\"status\"\r\n          style={{ position: \"fixed\", top: \"50%\", left: \"50%\" }}\r\n        >\r\n          <span className=\"sr-only\">{t(\"loading\")}</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewImages_HTMLTABLE = (\r\n      <div className=\"row p-2\">\r\n        <div className=\"col-xl-5 col-lg-5 col-md-12 col-sm-12\">\r\n          <div className=\"row col-md-12 text-center \">\r\n            <Zoom {...zoomOutProperties}>\r\n              {(() => {\r\n                if (Array.isArray(productDetails.image)) {\r\n                  return productDetails.image?.map((image) => {\r\n                    return (\r\n                      <div key={image} style={{ width: \"100%\" }}>\r\n                        <img\r\n                          src={`http://${base_url}:${port}/images/variants_pics/${image}`}\r\n                          style={{\r\n                            height: \"500px\",\r\n                            width: \"100%\",\r\n                            objectFit: \"contain\",\r\n                          }}\r\n                          // className=\"img-thumbnail\"\r\n                          alt=\"\"\r\n                        />\r\n                      </div>\r\n                    );\r\n                  });\r\n                } else {\r\n                  return (\r\n                    <div style={{ width: \"100%\" }}>\r\n                      <img\r\n                        src={\r\n                          productDetails.stock === \"No Stock\" ||\r\n                          productDetails?.stock === 0\r\n                            ? `http://${base_url}:${port}/images/products/${\r\n                                productDetails.image\r\n                                  ? productDetails?.image\r\n                                  : fetchData?.image\r\n                              }`\r\n                            : `http://${base_url}:${port}/images/variants_pics/${productDetails.image}`\r\n                        }\r\n                        style={{\r\n                          height: \"500px\",\r\n                          width: \"100%\",\r\n                          objectFit: \"contain\",\r\n                        }}\r\n                        alt=\"\"\r\n                      />\r\n                    </div>\r\n                  );\r\n                }\r\n              })()}\r\n            </Zoom>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"col-xl-7 col-lg-7 col-sm-12\">\r\n          <div className=\"card border\">\r\n            <div className=\"row mx-3 mt-3\">\r\n              <h4>\r\n                {t(\"product_name\")}: {fetchData?.ProductName}\r\n              </h4>\r\n              <p>\r\n                {t(\"description\")}: {fetchData?.Description}\r\n              </p>\r\n              <p>\r\n                {t(\"unit\")}: {fetchData?.UnitName}\r\n              </p>\r\n              {themes?.preparation_time != 0 ? (\r\n                <p>\r\n                  {t(\"preparation_Time\")}: {fetchData?.preparationTime} Minutes\r\n                </p>\r\n              ) : (\r\n                \" \"\r\n              )}\r\n              <p>\r\n                {t(\"price\")} :{\" \"}\r\n                {productDetails.price === 0\r\n                  ? fetchData?.price + sum\r\n                  : parseInt(productDetails.price) + sum}\r\n              </p>\r\n              <p>\r\n                {t(\"stock\")}:{\" \"}\r\n                {productDetails.stock === 0\r\n                  ? fetchData?.stock\r\n                  : productDetails.stock}\r\n              </p>\r\n            </div>\r\n            <div className=\"row mx-3\">\r\n              <h4> {t(\"ingredients\")}</h4>\r\n              <small>Please select the ingredients you want to remove.</small>\r\n            </div>\r\n            <div className=\"row mx-4\">\r\n              {JSON.parse(fetchData.ingredients)?.map((item, i) => {\r\n                return (\r\n                  <div\r\n                    className=\"col-md-auto col-sm-auto col-xl-auto col-lg-auto col-auto\"\r\n                    onClick={() => {\r\n                      changeIngredients(item.label);\r\n                    }}\r\n                    style={\r\n                      ingredients.includes(item.label)\r\n                        ? {\r\n                            cursor: \"pointer\",\r\n\r\n                            padding: \"3px\",\r\n                            margin: \"2px\",\r\n                            border: \"1px solid\",\r\n                            textAlign: \"center\",\r\n                            borderColor: \"red\",\r\n                            textDecoration: \"line-through\",\r\n                            color: \"red\",\r\n                          }\r\n                        : {\r\n                            cursor: \"pointer\",\r\n                            padding: \"3px\",\r\n                            margin: \"2px\",\r\n                            border: \"1px solid\",\r\n                            textAlign: \"center\",\r\n                            // borderRadius: \"10px\",\r\n                            borderColor: \"black\",\r\n                          }\r\n                    }\r\n                  >\r\n                    {item.label}\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n            <div className=\"row m-3\">\r\n              <Accordion>\r\n                <AccordionSummary\r\n                  expandIcon={<ExpandMoreIcon />}\r\n                  aria-controls=\"panel1a-content\"\r\n                  id=\"panel1a-header\"\r\n                >\r\n                  <Typography>{t(\"extras\")}</Typography>\r\n                </AccordionSummary>\r\n                <AccordionDetails>\r\n                  <Typography>\r\n                    <FormGroup>\r\n                      {JSON.parse(fetchData.extras)?.map((item, i) => {\r\n                        return (\r\n                          <FormControlLabel\r\n                            key={i}\r\n                            control={\r\n                              <Checkbox\r\n                                onChange={(e) => {\r\n                                  extraHandlers(e, item.price);\r\n                                }}\r\n                                color=\"secondary\"\r\n                              />\r\n                            }\r\n                            label={\r\n                              item.label + \" ( +\" + item.price + \".00\" + \" )\"\r\n                            }\r\n                          />\r\n                        );\r\n                      })}\r\n                    </FormGroup>\r\n                  </Typography>\r\n                </AccordionDetails>\r\n              </Accordion>\r\n            </div>\r\n\r\n            <div className=\"row m-3\">\r\n              <h4> {t(\"vatiants\")}</h4>\r\n            </div>\r\n\r\n            <div className=\"row mx-2\">\r\n              {Object.keys(showVaralint).map((list, i) => {\r\n                return (\r\n                  <div className=\"row \" key={i}>\r\n                    <div className=\"col-md-auto col-sm-auto col-xl-auto col-lg-auto col-auto\">\r\n                      {list}\r\n                      <div className=\"row\">\r\n                        {showVaralint[list].map((variant) => {\r\n                          return (\r\n                            <div className=\"col-md-auto col-sm-auto col-xl-auto col-lg-auto col-auto\">\r\n                              <div\r\n                                onClick={() => {\r\n                                  changePrice(list, variant);\r\n                                }}\r\n                                style={\r\n                                  skuarray[i] == variant\r\n                                    ? {\r\n                                        cursor: \"pointer\",\r\n                                        margin: \"2px\",\r\n                                        padding: \"5px\",\r\n                                        border: \"1px solid\",\r\n                                        textAlign: \"center\",\r\n                                        borderRadius: \"10px\",\r\n                                        borderColor: \"red\",\r\n                                      }\r\n                                    : {\r\n                                        cursor: \"pointer\",\r\n                                        margin: \"2px\",\r\n\r\n                                        padding: \"5px\",\r\n                                        border: \"1px solid\",\r\n                                        textAlign: \"center\",\r\n                                        borderRadius: \"10px\",\r\n                                        borderColor: \"black\",\r\n                                      }\r\n                                }\r\n                              >\r\n                                {variant}\r\n                              </div>\r\n                            </div>\r\n                          );\r\n                        })}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  return <> {viewImages_HTMLTABLE}</>;\r\n};\r\n\r\nexport default ShowProducts;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\ProductDetails.js",["310","311","312","313","314","315","316","317","318","319","320","321","322","323","324","325","326","327","328","329"],"import React, { useState, useRef, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// Import css files\r\nimport Footer from \"./Footer\";\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport Container from \"@mui/material/Container\";\r\nimport Header from \"./Header\";\r\nimport { base_url, port } from \"../../../../../Consts\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Card from \"@mui/material/Card\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\nimport \"react-slideshow-image/dist/styles.css\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport FavoriteIcon from \"@mui/icons-material/Favorite\";\r\nimport getSymbolFromCurrency from \"currency-symbol-map\";\r\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\"; // requires a loader\r\nimport { Swiper, SwiperSlide } from \"swiper/react\";\r\n\r\nimport \"swiper/swiper-bundle.min.css\";\r\nimport \"swiper/swiper.min.css\";\r\nimport SwiperCore, { Navigation, Thumbs } from \"swiper\";\r\n\r\n// install Swiper modules\r\nSwiperCore.use([Navigation, Thumbs]);\r\n\r\nconst ProductDetails = (props) => {\r\n  // for localization\r\n  const { t } = useTranslation();\r\n  const id = atob(props.match.params.id);\r\n  //for retriving data using laravel API\r\n  const custom = props.history.location.state.custom;\r\n  // design start\r\n  const theme = createTheme({\r\n    palette: {\r\n      background: {\r\n        default: custom?.bgColor ? custom.bgColor : \"#22252a\",\r\n      },\r\n    },\r\n    typography: {\r\n      fontFamily: custom?.font ? custom.font : \"sans-serif\",\r\n      // discription\r\n      subtitle1: {\r\n        fontSize: custom?.pDiscriptionSize\r\n          ? custom.pDiscriptionSize + \"rem\"\r\n          : \"0.75rem\",\r\n\r\n        color: custom?.product_discription_color\r\n          ? custom.product_discription_color\r\n          : \"#fff\",\r\n      },\r\n      // price\r\n      body1: {\r\n        fontSize: custom?.priceSize ? custom.priceSize + \"rem\" : \"1.25rem\",\r\n        color: custom?.price_color ? custom.price_color : \"#fff\",\r\n      },\r\n      // product Names\r\n      button: {\r\n        fontSize: custom?.pNameSize ? custom.pNameSize + \"rem\" : \"1rem\",\r\n        color: custom?.product_name_color ? custom.product_name_color : \"#fff\",\r\n      },\r\n      // Menus\r\n      h6: {\r\n        fontSize: custom?.menusSize ? custom.menusSize + \"rem\" : \"1rem\",\r\n        color: custom?.menusAcriveColor ? custom.menusAcriveColor : \"#f27d1e\",\r\n      },\r\n    },\r\n  });\r\n  // design end\r\n  const [swiper, setSwiper] = useState(null);\r\n\r\n  let varData = [];\r\n  //for retriving data using laravel API\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [variantData, setVariantData] = useState([]);\r\n  const [showVaralint, setShowVarlist] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [skuarray, setSkuArray] = useState([]);\r\n  const [varPics, setVarPics] = useState([]);\r\n  // console.log(variantData);\r\n  const [productDetails, setProductDetails] = useState({\r\n    price: 0,\r\n    stock: 0,\r\n    image: fetchData?.image,\r\n  });\r\n  useEffect(() => {\r\n    const getdata = async () => {\r\n      const product = await axios({\r\n        method: \"GET\",\r\n        url: `/api/GetProduct/${id}`,\r\n      });\r\n      const data = product.data.fetchData;\r\n\r\n      const res = await axios({\r\n        method: \"GET\",\r\n        url: `/api/Getvariations/${id}`,\r\n      });\r\n      setFetchData(data[0]);\r\n\r\n      if (res.data.fetchData !== \"\") {\r\n        varData = JSON.parse(res.data.fetchData);\r\n        setVarPics(JSON.parse(res.data.fetchData));\r\n\r\n        parseVariants(varData);\r\n      }\r\n      // console.log(variantData);\r\n      setLoading(false);\r\n    };\r\n    getdata(); // axios\r\n  }, [id]);\r\n  const changePrice = (varName, variant) => {\r\n    const keys = Object.keys(showVaralint);\r\n    const varlineindex = keys.indexOf(varName);\r\n    const newSkuArray = skuarray;\r\n    newSkuArray[varlineindex] = variant;\r\n    setSkuArray(newSkuArray);\r\n    if (keys.length == newSkuArray.length) {\r\n      caluclatePrice(newSkuArray, variantData);\r\n    }\r\n  };\r\n  const caluclatePrice = (newSkuArray, variantData) => {\r\n    let sku = id + \"-\";\r\n    for (let i = 0; i < newSkuArray.length; i++) {\r\n      if (i == newSkuArray.length - 1) {\r\n        sku += newSkuArray[i];\r\n      } else {\r\n        sku += newSkuArray[i] + \"-\";\r\n      }\r\n    }\r\n\r\n    const priceList = variantData.filter((item) => {\r\n      return item.sku.replace(/\\s+/g, \"\") == sku.replace(/\\s+/g, \"\");\r\n    });\r\n    let productdetails = { price: 0, stock: 0 };\r\n    if (priceList.length !== 0) {\r\n      const line = priceList.pop();\r\n      const newProductDetails = {\r\n        price: line.price,\r\n        stock: line.stock,\r\n        image: line.image,\r\n      };\r\n      productdetails = newProductDetails;\r\n    } else {\r\n      const newProductDetails = {\r\n        price: 0,\r\n        stock: \"No Stock\",\r\n        image: fetchData.image,\r\n      };\r\n      productdetails = newProductDetails;\r\n    }\r\n\r\n    setProductDetails({ ...productdetails });\r\n    if (swiper) {\r\n      let counter = 0;\r\n      varPics.map((section) => {\r\n        section.image.map((image, i) => {\r\n          if (Array.isArray(productDetails.image)) {\r\n            if (image === productDetails.image[0]) {\r\n              swiper.slideTo(counter);\r\n            }\r\n          } else {\r\n            swiper.slideTo(0);\r\n          }\r\n\r\n          counter++;\r\n        });\r\n      });\r\n    }\r\n  };\r\n  const parseVariants = (variantData) => {\r\n    const variants = [];\r\n    const savePostion = [\"postion\", \"sku\", \"price\", \"stock\", \"image\"];\r\n    const varLine = variantData[0];\r\n    const varlinekey = Object.keys(varLine);\r\n    for (let i = 0; i < varlinekey.length; i++) {\r\n      if (savePostion.indexOf(varlinekey[i]) == -1) {\r\n        let listvar = variantData.map((item) => {\r\n          return item[varlinekey[i]];\r\n        });\r\n        // get unique variants\r\n        listvar = listvar.filter(\r\n          (thing, index, self) =>\r\n            index ===\r\n            self.findIndex((t) => t.place === listvar.place && t === thing)\r\n        );\r\n        if (listvar[0] != 0) variants[varlinekey[i]] = listvar;\r\n      }\r\n    }\r\n    let def = [];\r\n    Object.keys(variants).map((item) => {\r\n      def.push(variants[item][0]);\r\n    });\r\n    setSkuArray(def);\r\n    caluclatePrice(def, variantData);\r\n    setShowVarlist(variants);\r\n    setVariantData(variantData);\r\n  };\r\n  const [ingredients, setIntgredients] = useState([]);\r\n  const changeIngredients = (label) => {\r\n    if (!ingredients.includes(label) === false) {\r\n      setIntgredients(ingredients.filter((item) => item !== label));\r\n    } else {\r\n      setIntgredients([...ingredients, label]);\r\n    }\r\n    // console.log(ingredients);\r\n  };\r\n  let [sum, setSum] = useState(0);\r\n  const [extraValue, setExtraValue] = useState([]);\r\n\r\n  const extraHandlers = (e, price) => {\r\n    if (e.target.checked) {\r\n      // console.log((sum += parseInt(price)));\r\n      setSum((sum += parseInt(price)));\r\n      setExtraValue([\r\n        ...extraValue,\r\n        {\r\n          value: e.target.value,\r\n        },\r\n      ]);\r\n    } else {\r\n      setSum((sum -= parseInt(price)));\r\n      setExtraValue(extraValue.filter((item) => item.value != e.target.value));\r\n    }\r\n    console.log(extraValue);\r\n  };\r\n  const [cart, setCart] = useState(\r\n    JSON.parse(localStorage.getItem(\"cart\")) || []\r\n  );\r\n  const [thumbsSwiper, setThumbsSwiper] = useState(null);\r\n\r\n  var viewImages_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"container \">\r\n        <div\r\n          className=\"spinner-border text-primary \"\r\n          role=\"status\"\r\n          style={{ position: \"fixed\", top: \"50%\", left: \"50%\" }}\r\n        >\r\n          <span className=\"sr-only\">{t(\"loading\")}</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewImages_HTMLTABLE = (\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12} sm={5} md={5} lg={5}>\r\n          {(() => {\r\n            if (varPics.length != 0) {\r\n              return (\r\n                <>\r\n                  <Swiper\r\n                    style={{\r\n                      \"--swiper-navigation-color\": \"#fff\",\r\n                      \"--swiper-pagination-color\": \"#fff\",\r\n                    }}\r\n                    spaceBetween={10}\r\n                    speed={2500}\r\n                    navigation={true}\r\n                    thumbs={{ swiper: thumbsSwiper }}\r\n                    onSwiper={(s) => {\r\n                      setSwiper(s);\r\n                    }}\r\n                    className=\"mySwiper2\"\r\n                  >\r\n                    {varPics?.map((section) => {\r\n                      return section.image?.map((image, i) => {\r\n                        return (\r\n                          <>\r\n                            <SwiperSlide key={image}>\r\n                              <img\r\n                                src={`http://${base_url}:${port}/images/variants_pics/${image}`}\r\n                                alt=\"\"\r\n                                style={{\r\n                                  height: \"400px\",\r\n                                  width: \"100%\",\r\n                                  borderRadius: \"5%\",\r\n                                  objectFit: \"contain\",\r\n                                }}\r\n                              />\r\n                            </SwiperSlide>\r\n                          </>\r\n                        );\r\n                      });\r\n                    })}\r\n                  </Swiper>\r\n                  <br></br>\r\n                  <Swiper\r\n                    onSwiper={setThumbsSwiper}\r\n                    spaceBetween={10}\r\n                    slidesPerView={5}\r\n                    freeMode={true}\r\n                    watchSlidesProgress={true}\r\n                    className=\"mySwiper\"\r\n                  >\r\n                    {varPics?.map((section) => {\r\n                      return section.image?.map((image) => {\r\n                        return (\r\n                          <SwiperSlide\r\n                            // onSwiper={productDetails.image[0]}\r\n                            key={image}\r\n                          >\r\n                            <img\r\n                              src={`http://${base_url}:${port}/images/variants_pics/${image}`}\r\n                              alt=\"\"\r\n                              style={{\r\n                                height: \"70px\",\r\n                                width: \"100%\",\r\n                                borderRadius: \"5%\",\r\n                                // objectFit: \"contain\",\r\n                              }}\r\n                            />\r\n                          </SwiperSlide>\r\n                        );\r\n                      });\r\n                    })}\r\n                  </Swiper>\r\n                </>\r\n              );\r\n            } else {\r\n              return (\r\n                <>\r\n                  <Swiper\r\n                   \r\n                    speed={2500}\r\n                    onSwiper={(s) => {\r\n                      setSwiper(s);\r\n                    }}\r\n                    className=\"mySwiper2\"\r\n                  >\r\n                    <SwiperSlide>\r\n                      <img\r\n                        src={\r\n                          productDetails.stock === \"No Stock\" ||\r\n                          productDetails?.stock === 0\r\n                            ? `http://${base_url}:${port}/images/products/${\r\n                                productDetails.image\r\n                                  ? productDetails?.image\r\n                                  : fetchData?.image\r\n                              }`\r\n                            : `http://${base_url}:${port}/images/variants_pics/${productDetails.image}`\r\n                        }\r\n                        alt=\"\"\r\n                        style={{\r\n                          height: \"400px\",\r\n                          width: \"100%\",\r\n                          borderRadius: \"5%\",\r\n                          objectFit: \"contain\",\r\n                        }}\r\n                      />\r\n                    </SwiperSlide>\r\n                  </Swiper>\r\n                </>\r\n              );\r\n            }\r\n          })()}\r\n        </Grid>\r\n\r\n        <Grid item xs={12} sm={7} md={7} lg={7}>\r\n          <Card\r\n            sx={{\r\n              // height: \"100%\",\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              borderRadius: \"5%\",\r\n              backgroundColor: custom?.BgColor ? custom.BgColor : \"#22252a\",\r\n            }}\r\n          >\r\n            <div className=\"row mx-3 mt-3\">\r\n              <Grid container spacing={2}>\r\n                <Grid item xs={10}>\r\n                  <Typography\r\n                    variant=\"button\"\r\n                    style={{ textTransform: \"capitalize\" }}\r\n                    // className=\"font-weight-bold\"\r\n                  >\r\n                    {fetchData.ProductName}\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item xs={2}>\r\n                  <FavoriteIcon sx={{ color: \"#ff751d\" }} />\r\n                </Grid>\r\n              </Grid>\r\n\r\n              <Typography variant=\"subtitle1\" gutterBottom>\r\n                {fetchData?.Description}\r\n              </Typography>\r\n              <Typography variant=\"subtitle1\" gutterBottom>\r\n                {custom?.preparation_time == 0 ||\r\n                fetchData?.preparationTime == null ? (\r\n                  \"\"\r\n                ) : (\r\n                  <>\r\n                    {t(\"preparation_Time\")}: {fetchData?.preparationTime}{\" \"}\r\n                    Minutes\r\n                  </>\r\n                )}\r\n              </Typography>\r\n\r\n              <Typography\r\n                variant=\"body1\"\r\n                gutterBottom\r\n                className=\"font-weight-bold\"\r\n              >\r\n                {t(\"price\")} :{\" \"}\r\n                {productDetails.price === 0\r\n                  ? (fetchData?.price + sum).toFixed(2)\r\n                  : (parseInt(productDetails.price) + sum).toFixed(2)}\r\n                {\"  \" + getSymbolFromCurrency(fetchData.currency_code)}\r\n              </Typography>\r\n              <Typography\r\n                variant=\"body1\"\r\n                gutterBottom\r\n                className=\"font-weight-bold\"\r\n              >\r\n                {t(\"stock\")}:{\" \"}\r\n                {productDetails.stock === 0\r\n                  ? fetchData?.stock\r\n                  : productDetails.stock}\r\n              </Typography>\r\n            </div>\r\n            {custom?.show_ingredients == 0 ||\r\n            JSON.parse(fetchData.ingredients).length === 0 ? (\r\n              \"\"\r\n            ) : (\r\n              <>\r\n                <div className=\"row mx-3\">\r\n                  <Typography variant=\"h6\" gutterBottom>\r\n                    {t(\"ingredients\")}\r\n                  </Typography>\r\n                  <Typography variant=\"subtitle1\" gutterBottom>\r\n                    Please select the ingredients you want to remove.\r\n                  </Typography>\r\n                </div>\r\n                <div className=\"row mx-4\">\r\n                  {JSON.parse(fetchData.ingredients)?.map((item, i) => {\r\n                    return (\r\n                      <div\r\n                        key={i}\r\n                        className=\"col-md-auto col-sm-auto col-xl-auto col-lg-auto col-auto\"\r\n                        onClick={() => {\r\n                          changeIngredients(item.label);\r\n                        }}\r\n                        style={\r\n                          ingredients.includes(item.label)\r\n                            ? {\r\n                                cursor: \"pointer\",\r\n\r\n                                padding: \"3px\",\r\n                                margin: \"2px\",\r\n                                border: \"1px solid\",\r\n                                textAlign: \"center\",\r\n                                borderRadius: \"5px\",\r\n                                borderColor: custom?.menusAcriveColor\r\n                                  ? custom.menusAcriveColor\r\n                                  : \"#f27d1e\",\r\n                                textDecoration: \"line-through\",\r\n                                color: custom?.menusAcriveColor\r\n                                  ? custom.menusAcriveColor\r\n                                  : \"#f27d1e\",\r\n                                fontSize: custom?.pDiscriptionSize\r\n                                  ? custom.pDiscriptionSize + \"rem\"\r\n                                  : \"0.75rem\",\r\n                              }\r\n                            : {\r\n                                cursor: \"pointer\",\r\n                                padding: \"3px\",\r\n                                margin: \"2px\",\r\n                                border: \"1px solid\",\r\n                                textAlign: \"center\",\r\n                                borderRadius: \"5px\",\r\n                                borderColor: custom?.menusDeactiveColor\r\n                                  ? custom.menusDeactiveColor\r\n                                  : \"#fff\",\r\n                                color: custom?.menusDeactiveColor\r\n                                  ? custom.menusDeactiveColor\r\n                                  : \"#fff\",\r\n                                fontSize: custom?.pDiscriptionSize\r\n                                  ? custom.pDiscriptionSize + \"rem\"\r\n                                  : \"0.75rem\",\r\n                              }\r\n                        }\r\n                      >\r\n                        {item.label}\r\n                      </div>\r\n                    );\r\n                  })}\r\n                </div>\r\n              </>\r\n            )}\r\n            {custom?.show_extras == 0 ||\r\n            JSON.parse(fetchData.extras).length === 0 ? (\r\n              \"\"\r\n            ) : (\r\n              <div className=\"row mx-3\">\r\n                <Typography variant=\"h6\" gutterBottom>\r\n                  {t(\"extras\")}\r\n                </Typography>\r\n                <FormGroup>\r\n                  {JSON.parse(fetchData.extras)?.map((item, i) => {\r\n                    return (\r\n                      <FormControlLabel\r\n                        key={i}\r\n                        control={\r\n                          <Checkbox\r\n                            onChange={(e) => {\r\n                              extraHandlers(e, item.price);\r\n                            }}\r\n                            color=\"default\"\r\n                            sx={{\r\n                              color: custom?.menusAcriveColor\r\n                                ? custom.menusAcriveColor\r\n                                : \"#ff751d\",\r\n                            }}\r\n                            value={\r\n                              item.label + \" ( +\" + item.price + \".00\" + \" )\"\r\n                            }\r\n                          />\r\n                        }\r\n                        label={\r\n                          <Typography variant=\"subtitle1\" gutterBottom>\r\n                            {item.label + \" ( +\" + item.price + \".00\" + \" )\"}\r\n                          </Typography>\r\n                        }\r\n                      />\r\n                    );\r\n                  })}\r\n                </FormGroup>\r\n              </div>\r\n            )}\r\n            {custom?.show_variants == 0 ||\r\n            Object.keys(showVaralint).length === 0 ? (\r\n              \"\"\r\n            ) : (\r\n              <>\r\n                <div className=\"row mx-3\">\r\n                  <Typography variant=\"h6\" gutterBottom>\r\n                    {t(\"vatiants\")}\r\n                  </Typography>\r\n                </div>\r\n\r\n                <div className=\"row mx-4 \">\r\n                  {Object.keys(showVaralint).map((list, i) => {\r\n                    return (\r\n                      <div className=\"row m-1\" key={i}>\r\n                        {/* {list} */}\r\n                        <div\r\n                          className=\"row d-flex justify-content-around\"\r\n                          style={{\r\n                            backgroundColor: custom?.cardBgColor\r\n                              ? custom.cardBgColor\r\n                              : \"#2d3134\",\r\n                            borderRadius: \"50px\",\r\n                            padding: \"5px\",\r\n                          }}\r\n                        >\r\n                          {showVaralint[list].map((variant, z) => {\r\n                            return (\r\n                              <div className=\"col\" key={z}>\r\n                                <div\r\n                                  onClick={() => {\r\n                                    changePrice(list, variant);\r\n                                  }}\r\n                                  style={\r\n                                    skuarray[i] == variant\r\n                                      ? {\r\n                                          cursor: \"pointer\",\r\n                                          border: \"1px solid\",\r\n                                          textAlign: \"center\",\r\n                                          borderRadius: \"50px\",\r\n                                          borderColor: \"black\",\r\n                                          backgroundColor:\r\n                                            custom?.menusAcriveColor\r\n                                              ? custom.menusAcriveColor\r\n                                              : \"black\",\r\n                                          color: custom?.menusDeactiveColor\r\n                                            ? custom.menusDeactiveColor\r\n                                            : \"#fff\",\r\n                                        }\r\n                                      : {\r\n                                          cursor: \"pointer\",\r\n                                          border: \"1px solid\",\r\n                                          textAlign: \"center\",\r\n                                          borderRadius: \"50px\",\r\n                                          borderColor: \"#2d3134\",\r\n                                          backgroundColor: \"#2d3134\",\r\n                                          color: custom?.menusDeactiveColor\r\n                                            ? custom.menusDeactiveColor\r\n                                            : \"#fff\",\r\n                                        }\r\n                                  }\r\n                                >\r\n                                  {variant}\r\n                                </div>\r\n                              </div>\r\n                            );\r\n                          })}\r\n                        </div>\r\n                      </div>\r\n                    );\r\n                  })}\r\n                </div>\r\n              </>\r\n            )}\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <Container maxWidth=\"lg\" className=\"mb-2\">\r\n        <Header subcategories={0} cart={cart.length} />\r\n        {viewImages_HTMLTABLE}\r\n      </Container>\r\n      <Footer\r\n        title=\"Checkout\"\r\n        theme={custom}\r\n        stock={\r\n          productDetails.stock === 0 ? fetchData?.stock : productDetails.stock\r\n        }\r\n        url={{\r\n          pathname: `/dark-template/product/order-details/${btoa(id)}`,\r\n          state: {\r\n            productName: fetchData.ProductName,\r\n            picture: productDetails.image\r\n              ? Array.isArray(productDetails.image)\r\n                ? productDetails.image[0]\r\n                : productDetails?.image\r\n              : fetchData?.image,\r\n            stock: productDetails.stock,\r\n            price:\r\n              productDetails.price === 0\r\n                ? fetchData?.price + sum\r\n                : parseInt(productDetails.price) + sum,\r\n            countryCode: fetchData.currency_code,\r\n            extraValue: extraValue,\r\n            orignalPrice:\r\n              productDetails.price === 0\r\n                ? fetchData?.price\r\n                : productDetails.price,\r\n            ingredients: ingredients,\r\n            custom: custom,\r\n          },\r\n        }}\r\n      />\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default ProductDetails;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Default\\Main.js",["330"],"import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Link as RLink } from \"react-router-dom\";\r\nimport \"react-awesome-slider/dist/styles.css\";\r\nimport { Col } from \"react-bootstrap\";\r\nimport {\r\n  CContainer,\r\n  CNavbar,\r\n  CNavbarBrand,\r\n  CNavbarToggler,\r\n  CCollapse,\r\n  CNavbarNav,\r\n  CNavItem,\r\n  CNavLink,\r\n} from \"@coreui/react\";\r\n// Import css files\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport Link from \"@mui/material/Link\";\r\n\r\nimport { base_url, port } from \"../../../../../Consts\";\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\nimport getSymbolFromCurrency from \"currency-symbol-map\";\r\n\r\nvar hold = 1;\r\n\r\nconst DefaultMain = (props) => {\r\n  const { t } = useTranslation();\r\n  const branchId = atob(props.match.params.id);\r\n  const [loading, setLoading] = useState(true);\r\n  const [data, setData] = useState([]);\r\n  const [categories, setCategories] = useState([]);\r\n  const [subcategories, setSubCategories] = useState([]);\r\n  const [products, setProducts] = useState([]);\r\n  const [activeCategory, setActiveCategory] = useState(0);\r\n  const [activeSubCategory, setActiveSubCategory] = useState(0);\r\n  const [themes, setThemes] = useState([]);\r\n  useEffect(() => {\r\n    axios.get(`/api/GetTempBasedOnBranch/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setThemes(res.data.fetchData?.Customization);\r\n      }\r\n    });\r\n    axios.get(`/api/GetBranchForShow/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setData(res.data.data[0]);\r\n      }\r\n      setLoading(false);\r\n    });\r\n    axios.get(`/api/GetCategories/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setCategories(res.data.fetchData);\r\n        // setActiveCategory(res.data.fetchData[0].id);\r\n      }\r\n    });\r\n    axios.get(`/api/getSubCateBasedOnBranch/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        // console.log(res.data.fetchData);\r\n        axios\r\n          .get(\r\n            `/api/GetProductsBasedOnSubCategory/${res.data.fetchData[0]?.sub_id}`\r\n          )\r\n          .then((res) => {\r\n            if (res.data.status === 200) {\r\n              setProducts(res.data.data);\r\n              setActiveSubCategory(res.data.data[0]?.sub_category_id);\r\n            }\r\n          });\r\n        setSubCategories(res.data.fetchData);\r\n      }\r\n    });\r\n  }, []);\r\n  const [changeState, setChangeState] = useState(true);\r\n  const fetchMoreData = () => {\r\n    if (hold < subcategories.length) {\r\n      axios.get(`/api/getSubCateBasedOnBranch/${branchId}`).then((res) => {\r\n        if (res.data.status === 200) {\r\n          // console.log(res.data.fetchData);\r\n          setActiveSubCategory(res.data.fetchData[hold].sub_id);\r\n          axios\r\n            .get(\r\n              `/api/GetProductsBasedOnSubCategory/${res.data.fetchData[hold].sub_id}`\r\n            )\r\n            .then((res) => {\r\n              if (res.data.status === 200) {\r\n                if (res.data.data?.length === 0) {\r\n                  hold = hold + 1;\r\n                  // console.log(res.data.fetchData);\r\n                  fetchMoreData();\r\n                } else {\r\n                  hold = hold + 1;\r\n                  setProducts(products.concat(res.data.data));\r\n                }\r\n              }\r\n            });\r\n\r\n          setSubCategories(res.data.fetchData);\r\n        }\r\n      });\r\n    } else {\r\n      setChangeState(false);\r\n    }\r\n    // console.log(hold);\r\n  };\r\n  const filterCategory = (cateId) => {\r\n    axios.get(`/api/GetSubCategories/${cateId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        // console.log(res.data.fetchData);\r\n        setSubCategories(res.data.fetchData);\r\n        // console.log(subcategories.length);\r\n        // setProducts([]);\r\n        // setVariants([]);\r\n      }\r\n    });\r\n    setActiveCategory(cateId);\r\n  };\r\n  // this function called by child (counter)\r\n  const filterProducts = (subCateID) => {\r\n    axios.get(`/api/GetProductsBasedOnSubCategory/${subCateID}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        // console.log(res.data.data);\r\n        setProducts(res.data.data);\r\n      }\r\n    });\r\n    setActiveSubCategory(subCateID);\r\n  };\r\n\r\n  const [visible, setVisible] = useState(false);\r\n  var viewShow_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div\r\n        className=\"spinner-border text-primary \"\r\n        role=\"status\"\r\n        style={{ position: \"fixed\", top: \"50%\", left: \"50%\" }}\r\n      >\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewShow_HTMLTABLE = products.map((item, i) => {\r\n      return (\r\n        <div\r\n          className=\"col-xl-2 col-lg-2 col-md-2 col-sm-4 col-6\"\r\n          key={i}\r\n          id={item.SubCategoryName}\r\n        >\r\n          <div className=\"card\">\r\n            <div className=\"card-body\">\r\n              <div className=\"new-arrival-product\">\r\n                <div className=\"text-center bg-white\">\r\n                  <img\r\n                    className=\"img-fluid w-40 img-thumbnail\"\r\n                    style={{ height: \"100px\", objectFit: \"contain\" }}\r\n                    src={`http://${base_url}:${port}/images/products/${item.image}`}\r\n                    alt=\"\"\r\n                  />\r\n                </div>\r\n                <RLink\r\n                  to={{\r\n                    pathname: `/standard-template/product/${btoa(item.id)}`,\r\n                    state: { themes: themes },\r\n                  }}\r\n                  className=\"text-black\"\r\n                >\r\n                  <div className=\"new-arrival-content text-center mt-3\">\r\n                    <h4>\r\n                      {item.ProductName}\r\n                      <p className=\"text-success\" style={{ fontSize: 10 }}>\r\n                        {item.UnitName}\r\n                      </p>\r\n                    </h4>\r\n\r\n                    <span className=\"price\">\r\n                      {item.price +\r\n                        \" \" +\r\n                        getSymbolFromCurrency(item.currency_code)}\r\n                    </span>\r\n                  </div>\r\n                </RLink>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <CNavbar expand=\"lg\" colorScheme=\"light\" className=\"bg-light\">\r\n        <CContainer fluid>\r\n          <CNavbarBrand className=\"text-center text-uppercase text-primary\">\r\n            {data?.BrancheName}\r\n          </CNavbarBrand>\r\n          <CNavbarToggler\r\n            aria-label=\"Toggle navigation\"\r\n            aria-expanded={visible}\r\n            onClick={() => setVisible(!visible)}\r\n          />\r\n          <CCollapse className=\"navbar-collapse\" visible={visible}>\r\n            <CNavbarNav>\r\n              {categories.map((data, i) => (\r\n                <CNavItem as=\"li\" key={i}>\r\n                  <CNavLink\r\n                    href=\"#\"\r\n                    onClick={() => filterCategory(data.id)}\r\n                    className={`text-capitalize font-weight-bold ${\r\n                      activeCategory === data.id\r\n                        ? \"active bg-primary text-white\"\r\n                        : \" \"\r\n                    }`}\r\n                  >\r\n                    {data.CategoryName}\r\n                  </CNavLink>\r\n                </CNavItem>\r\n              ))}\r\n            </CNavbarNav>\r\n          </CCollapse>\r\n        </CContainer>\r\n      </CNavbar>\r\n      <CNavbar colorScheme=\"light\" className=\"bg-white\" placement=\"sticky-top\">\r\n        <Col lg={12}>\r\n          <Toolbar\r\n            component=\"nav\"\r\n            variant=\"dense\"\r\n            sx={{ justifyContent: \"space-between\", overflowX: \"auto\" }}\r\n          >\r\n            {subcategories.map((item, i) => (\r\n              <Link\r\n                onClick={() => filterProducts(item.sub_id)}\r\n                noWrap\r\n                key={i}\r\n                underline=\"hover\"\r\n                variant=\"body2\"\r\n                to={`${item.SubCategoryName}`}\r\n                className={`text-capitalize ${\r\n                  activeSubCategory === item.sub_id\r\n                    ? \"active border border-primary text-primary\"\r\n                    : \" \"\r\n                }`}\r\n                style={{ cursor: \"pointer\" }}\r\n                sx={{ p: 1, flexShrink: 0 }}\r\n              >\r\n                {item.SubCategoryName}\r\n              </Link>\r\n            ))}\r\n          </Toolbar>\r\n        </Col>\r\n      </CNavbar>\r\n      <div className=\"row mt-1 mx-1\">{viewShow_HTMLTABLE}</div>\r\n      <InfiniteScroll\r\n        dataLength={products.length} //This is important field to render the next data\r\n        next={fetchMoreData}\r\n        hasMore={changeState}\r\n        loader={\r\n          <p className=\"text-center pt-5\">\r\n            <b>{t(\"loading\")}</b>\r\n          </p>\r\n        }\r\n        endMessage={\r\n          <p style={{ textAlign: \"center \" }}>\r\n            <b>{t(\"yay_you_have_seen_it_all\")}</b>\r\n          </p>\r\n        }\r\n      ></InfiniteScroll>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DefaultMain;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\Main.js",["331","332","333","334","335","336","337","338","339","340","341","342","343","344","345","346","347","348","349","350","351"],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Thrid\\Main.js",["352","353","354","355","356","357","358","359","360","361"],"import React, { useState, useEffect } from \"react\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Container from \"@mui/material/Container\";\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardMedia from \"@mui/material/CardMedia\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport axios from \"axios\";\r\nimport { base_url, port } from \"../../../../../Consts\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport Box from \"@mui/material/Box\";\r\nimport Tabs, { tabsClasses } from \"@mui/material/Tabs\";\r\nimport Tab from \"@mui/material/Tab\";\r\nimport getSymbolFromCurrency from \"currency-symbol-map\";\r\n\r\nvar hold = 1;\r\nexport default function Main(props) {\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  const [loading, setLoading] = useState(true);\r\n  const { t } = useTranslation();\r\n  const branchId = atob(props.match.params.id);\r\n  const [subcategories, setSubCategories] = useState([]);\r\n  const [products, setProducts] = useState([]);\r\n  const [themeCustomization, setThemeCustomization] = useState([]);\r\n  const [categories, setCategories] = useState([]);\r\n  const [activeCategory, setActiveCategory] = useState(0);\r\n\r\n  useEffect(() => {\r\n    axios.get(`/api/GetCategories/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setCategories(res.data.fetchData);\r\n        setActiveCategory(res.data.fetchData[0].id);\r\n        // console.log(res.data.fetchData);\r\n      }\r\n    });\r\n    axios.get(`/api/GetTempBasedOnBranch/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setThemeCustomization(res.data.fetchData[0]?.Customization);\r\n        // console.log(res.data.fetchData[0].Customization);\r\n      }\r\n    });\r\n    axios.get(`/api/getSubCateBasedOnBranch/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setSubCategories(res.data.fetchData);\r\n        // console.log(res.data.fetchData);\r\n      }\r\n      setLoading(false);\r\n    });\r\n  }, []);\r\n\r\n  // design start\r\n  const theme = createTheme({\r\n    // overrides: {\r\n    //   MuiButton: {\r\n    //     root: {\r\n    //       backgroundr: \"#d6e0ec\",\r\n    //     },\r\n    //   },\r\n    // },\r\n    palette: {\r\n      warning: {\r\n        // button background\r\n        main: themeCustomization?.button_background_color\r\n          ? themeCustomization.button_background_color\r\n          : \"#ff751d\",\r\n      },\r\n    },\r\n    typography: {\r\n      fontFamily: themeCustomization?.font\r\n        ? themeCustomization.font\r\n        : \"sans-serif\",\r\n      subtitle1: {\r\n        fontSize: themeCustomization?.product_discription_font_size\r\n          ? themeCustomization.product_discription_font_size\r\n          : 10,\r\n        color: themeCustomization?.product_discription_color\r\n          ? themeCustomization.product_discription_color\r\n          : \"#777\",\r\n      },\r\n      // price\r\n      body1: {\r\n        fontSize: themeCustomization?.price_font_size\r\n          ? themeCustomization.price_font_size\r\n          : 12,\r\n        color: themeCustomization?.price_color\r\n          ? themeCustomization.price_color\r\n          : \"#f1fcfe\",\r\n      },\r\n      // product Names\r\n      button: {\r\n        fontSize: themeCustomization?.product_name_font_size\r\n          ? themeCustomization.product_name_font_size\r\n          : 12,\r\n        color: themeCustomization?.product_name_color\r\n          ? themeCustomization.product_name_color\r\n          : \"#1f1d1f\",\r\n      },\r\n      // categories and sub categories\r\n      overline: {\r\n        fontSize: themeCustomization?.categories_and_sub_categoies_font_size\r\n          ? themeCustomization.categories_and_sub_categoies_font_size\r\n          : 12,\r\n        color: themeCustomization?.categories_and_sub_categoies_color\r\n          ? themeCustomization.categories_and_sub_categoies_color\r\n          : \"#ff751d\",\r\n      },\r\n      // branch Name\r\n      h4: {\r\n        fontSize: themeCustomization?.branch_name_font_size\r\n          ? themeCustomization.branch_name_font_size\r\n          : 28,\r\n        color: themeCustomization?.branch_name_color\r\n          ? themeCustomization.branch_name_color\r\n          : \"#aa3f32\",\r\n      },\r\n      subtitle2: {\r\n        fontSize: themeCustomization?.branch_name_font_size\r\n          ? themeCustomization.branch_name_font_size\r\n          : 12,\r\n        color: themeCustomization?.branch_name_color\r\n          ? themeCustomization.branch_name_color\r\n          : \"#1f1d1f\",\r\n      },\r\n    },\r\n    components: {\r\n      MuiButton: {\r\n        variants: [\r\n          {\r\n            // button\r\n            props: { variant: \"contained\" },\r\n            style: {\r\n              fontSize: themeCustomization?.button_text_font_size\r\n                ? themeCustomization.button_text_font_size\r\n                : 12,\r\n              color: themeCustomization?.button_text_color\r\n                ? themeCustomization.button_text_color\r\n                : \"#f1fcfe\",\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n  });\r\n  // design end\r\n  const filterCategory = (cateId) => {\r\n    axios.get(`/api/GetSubCategories/${cateId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setSubCategories(res.data.fetchData);\r\n      }\r\n    });\r\n    setActiveCategory(cateId);\r\n  };\r\n  var viewShow_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div\r\n        className=\"spinner-border text-primary \"\r\n        role=\"status\"\r\n        style={{ position: \"fixed\", top: \"50%\", left: \"50%\" }}\r\n      >\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewShow_HTMLTABLE = subcategories?.map((item, i) => {\r\n      return (\r\n        <Grid item xs={4} sm={4} md={2} key={i}>\r\n          <Card\r\n            sx={{\r\n              // width: \"300px\",\r\n              background: \"#ffffff\",\r\n\r\n              border: \"1px solid\",\r\n              textAlign: \"center\",\r\n              borderRadius: \"30px\",\r\n              borderColor: \"#ffffff\",\r\n            }}\r\n          >\r\n            <Link\r\n              to={{\r\n                pathname: `/thrid-template/products-list/${btoa(item.sub_id)}`,\r\n                state: {\r\n                  themes: themeCustomization,\r\n                  SubCategoryName: item.SubCategoryName,\r\n                },\r\n              }}\r\n            >\r\n              <CardContent sx={{ flexGrow: 1 }} className=\"text-center\">\r\n                <img\r\n                  style={{\r\n                    height: \"80px\",\r\n                    width: \"100px\",\r\n                    textAlign: \"center\",\r\n                    borderRadius: \"10%\",\r\n                  }}\r\n                  className=\"mb-2\"\r\n                  src={`http://${base_url}:${port}/images/sub_catagories/${item.SubCategoryIcon}`}\r\n                />\r\n                <Typography\r\n                  variant=\"subtitle2\"\r\n                  style={{ textTransform: \"capitalize\" }}\r\n                  className=\"font-weight-bold\"\r\n                >\r\n                  {item.SubCategoryName}\r\n                </Typography>\r\n              </CardContent>\r\n            </Link>\r\n          </Card>\r\n        </Grid>\r\n      );\r\n    });\r\n  }\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <Container\r\n        maxWidth=\"lg\"\r\n        className=\"p-2\"\r\n        // style={{ backgroundColor: \"#d6e0ec\" }}\r\n      >\r\n        <Grid item className=\"text-center\">\r\n          <Typography\r\n            variant=\"button\"\r\n            gutterBottom\r\n            className=\"font-weight-bold m-1\"\r\n          >\r\n            {subcategories[0].BrancheName}\r\n          </Typography>\r\n        </Grid>\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={12}>\r\n            <Box\r\n              sx={{\r\n                flexGrow: 1,\r\n                bgcolor: \"background.paper\",\r\n                display: \"flex\",\r\n                width: \"100%\",\r\n                marginBottom: \"10px\",\r\n              }}\r\n            >\r\n              <Tabs\r\n                variant=\"scrollable\"\r\n                scrollButtons=\"auto\"\r\n                aria-label=\"scrollable auto tabs example\"\r\n                value={value}\r\n                onChange={handleChange}\r\n                // variant=\"scrollable\"\r\n                // scrollButtons\r\n                TabIndicatorProps={{\r\n                  style: {\r\n                    display: \"none\",\r\n                  },\r\n                }}\r\n                sx={{\r\n                  [`& .${tabsClasses.scrollButtons}`]: {\r\n                    \"&.Mui-disabled\": { opacity: 0.3 },\r\n                  },\r\n                }}\r\n              >\r\n                {categories?.map((section, i) => (\r\n                  <Tab\r\n                    onClick={() => filterCategory(section.id)}\r\n                    style={\r\n                      activeCategory == section.id\r\n                        ? {\r\n                            cursor: \"pointer\",\r\n                            background: \"#f6753b\",\r\n                            margin: \"2px\",\r\n                            padding: \"5px\",\r\n                            border: \"1px solid\",\r\n                            textAlign: \"center\",\r\n                            borderRadius: \"10px\",\r\n                            borderColor: \"#f6753b\",\r\n                          }\r\n                        : {\r\n                            cursor: \"pointer\",\r\n                            margin: \"2px\",\r\n                            padding: \"5px\",\r\n                            textAlign: \"center\",\r\n                            borderRadius: \"10px\",\r\n                          }\r\n                    }\r\n                    icon={\r\n                      <img\r\n                        style={{\r\n                          height: \"40px\",\r\n                          width: \"60px\",\r\n                          borderRadius: \"10%\",\r\n                        }}\r\n                        src={`http://${base_url}:${port}/images/catagories/${section.CategoryIcon}`}\r\n                      />\r\n                    }\r\n                    label={\r\n                      <Typography\r\n                        style={\r\n                          activeCategory == section.id\r\n                            ? {\r\n                                color: \"white\",\r\n                                textTransform: \"capitalize\",\r\n                              }\r\n                            : {\r\n                                color: \"black\",\r\n                                textTransform: \"capitalize\",\r\n                              }\r\n                        }\r\n                        className=\"font-weight-bold\"\r\n                      >\r\n                        {section.CategoryName}\r\n                      </Typography>\r\n                    }\r\n                  />\r\n                ))}\r\n              </Tabs>\r\n            </Box>\r\n          </Grid>\r\n          <Grid container spacing={2} style={{ marginLeft: \"1px\" }}>\r\n            {viewShow_HTMLTABLE}\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\OrderDetails.js",["362","363","364","365","366","367","368","369","370","371"],"import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport axios from \"axios\";\r\n\r\n// Import css files\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport Container from \"@mui/material/Container\";\r\n// import Slider from \"react-slick\";\r\nimport Header from \"./Header\";\r\nimport { base_url, port } from \"../../../../../Consts\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Card from \"@mui/material/Card\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport FavoriteIcon from \"@mui/icons-material/Favorite\";\r\nimport Box from \"@mui/material/Box\";\r\nimport getSymbolFromCurrency from \"currency-symbol-map\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport TextareaAutosize from \"@mui/base/TextareaAutosize\";\r\nimport ReactWhatsapp from \"react-whatsapp\";\r\n\r\nconst OrderDetails = (props) => {\r\n  const custom = props.history.location.state.custom;\r\n  // design start\r\n  const theme = createTheme({\r\n    palette: {\r\n      background: {\r\n        default: custom?.bgColor ? custom.bgColor : \"#22252a\",\r\n      },\r\n    },\r\n    typography: {\r\n      fontFamily: custom?.font ? custom.font : \"sans-serif\",\r\n      // discription\r\n      subtitle1: {\r\n        fontSize: custom?.pDiscriptionSize\r\n          ? custom.pDiscriptionSize + \"rem\"\r\n          : \"0.75rem\",\r\n\r\n        color: custom?.product_discription_color\r\n          ? custom.product_discription_color\r\n          : \"#fff\",\r\n      },\r\n      // price\r\n      body1: {\r\n        fontSize: custom?.priceSize ? custom.priceSize + \"rem\" : \"1.25rem\",\r\n        color: custom?.price_color ? custom.price_color : \"#fff\",\r\n      },\r\n      // product Names\r\n      button: {\r\n        fontSize: custom?.pNameSize ? custom.pNameSize + \"rem\" : \"1rem\",\r\n        color: custom?.product_name_color ? custom.product_name_color : \"#fff\",\r\n      },\r\n      // Menus\r\n      h6: {\r\n        fontSize: custom?.menusSize ? custom.menusSize + \"rem\" : \"1rem\",\r\n        color: custom?.menusAcriveColor ? custom.menusAcriveColor : \"#f27d1e\",\r\n      },\r\n    },\r\n  });\r\n  // design end\r\n  const { t } = useTranslation();\r\n\r\n  const productName = props.history.location.state.productName;\r\n  const picture = props.history.location.state.picture;\r\n  const stock = props.history.location.state.stock;\r\n  const price = props.history.location.state.price;\r\n  const orignalPrice = props.history.location.state.orignalPrice;\r\n  const countryCode = props.history.location.state.countryCode;\r\n  const extraValue = props.history.location.state.extraValue;\r\n  const ingredients = props.history.location.state.ingredients;\r\n\r\n  const id = atob(props.match.params.id);\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const getdata = async () => {\r\n      const product = await axios({\r\n        method: \"GET\",\r\n        url: `/api/GetProduct/${id}`,\r\n      });\r\n      const data = product.data.fetchData;\r\n      setFetchData(JSON.parse(data[0].recommendations));\r\n\r\n      setLoading(false);\r\n    };\r\n    getdata(); // axios\r\n  }, [id]);\r\n  let [sum, setSum] = useState(0);\r\n\r\n  const extraHandlers = (e, price, id, qty) => {\r\n    if (e.target.checked) {\r\n      // console.log((sum += parseInt(price)));\r\n      setSum((sum += parseInt(price)));\r\n      setFetchData((fetchData) =>\r\n        fetchData.map((item) =>\r\n          id == item.value ? { ...item, show: true } : item\r\n        )\r\n      );\r\n    } else {\r\n      setSum((sum -= parseInt(price) * qty));\r\n      setFetchData((fetchData) =>\r\n        fetchData.map((item) =>\r\n          id == item.value ? { ...item, qty: 1, show: false } : item\r\n        )\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleDecrement = (e, qty, id, price) => {\r\n    e.preventDefault();\r\n    if (qty > 1) {\r\n      setFetchData((fetchData) =>\r\n        fetchData.map((item) =>\r\n          id == item.value\r\n            ? { ...item, qty: item.qty - (item.qty > 0 ? 1 : 0) }\r\n            : item\r\n        )\r\n      );\r\n      setSum((sum -= parseInt(price)));\r\n    }\r\n  };\r\n  const handelIncrement = (e, qty, id, price) => {\r\n    e.preventDefault();\r\n    setFetchData((fetchData) =>\r\n      fetchData.map((item) =>\r\n        id == item.value ? { ...item, qty: item.qty + 1 } : item\r\n      )\r\n    );\r\n    setSum((sum += parseInt(price)));\r\n  };\r\n  const [cart, setCart] = useState(\r\n    JSON.parse(localStorage.getItem(\"cart\")) || []\r\n  );\r\n\r\n  var viewImages_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"container \">\r\n        <div\r\n          className=\"spinner-border text-primary \"\r\n          role=\"status\"\r\n          style={{ position: \"fixed\", top: \"50%\", left: \"50%\" }}\r\n        >\r\n          {/* <span className=\"sr-only\">{t(\"loading\")}</span> */}\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewImages_HTMLTABLE = fetchData?.map((item, i) => {\r\n      return (\r\n        <Grid container spacing={2} key={i}>\r\n          <Grid item xs={8} sm={8} md={8}>\r\n            {/* {console.log(item)} */}\r\n          \r\n            <FormControlLabel\r\n              control={\r\n                <Checkbox\r\n                  color=\"default\"\r\n                  onChange={(e) => {\r\n                    extraHandlers(e, item.price, item.value, item.qty);\r\n                  }}\r\n                  sx={{\r\n                    color: custom?.menusAcriveColor\r\n                      ? custom.menusAcriveColor\r\n                      : \"#ff751d\",\r\n                  }}\r\n                />\r\n              }\r\n              label={\r\n                <Typography variant=\"subtitle1\" gutterBottom>\r\n                  {item.label +\r\n                    \" ( +\" +\r\n                    (item.price * item.qty).toFixed(2) +\r\n                    \" \" +\r\n                    getSymbolFromCurrency(countryCode) +\r\n                    \" )\"}\r\n                </Typography>\r\n              }\r\n            />\r\n          </Grid>\r\n          {item?.show ? (\r\n            <Grid item xs={4} sm={4} md={4}>\r\n              <div className=\"row mt-2\">\r\n                <div className={`row`}>\r\n                  <div className=\"col-4 \">\r\n                    <Typography\r\n                      onClick={(e) =>\r\n                        handleDecrement(e, item.qty, item.value, item.price)\r\n                      }\r\n                      style={{ cursor: \"pointer\" }}\r\n                      variant=\"h6\"\r\n                      gutterBottom\r\n                    >\r\n                      <svg\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                        width=\"16\"\r\n                        height=\"16\"\r\n                        fill=\"currentColor\"\r\n                        className=\"bi bi-dash-square-dotted  \"\r\n                        viewBox=\"0 0 16 16\"\r\n                      >\r\n                        <path d=\"M2.5 0c-.166 0-.33.016-.487.048l.194.98A1.51 1.51 0 0 1 2.5 1h.458V0H2.5zm2.292 0h-.917v1h.917V0zm1.833 0h-.917v1h.917V0zm1.833 0h-.916v1h.916V0zm1.834 0h-.917v1h.917V0zm1.833 0h-.917v1h.917V0zM13.5 0h-.458v1h.458c.1 0 .199.01.293.029l.194-.981A2.51 2.51 0 0 0 13.5 0zm2.079 1.11a2.511 2.511 0 0 0-.69-.689l-.556.831c.164.11.305.251.415.415l.83-.556zM1.11.421a2.511 2.511 0 0 0-.689.69l.831.556c.11-.164.251-.305.415-.415L1.11.422zM16 2.5c0-.166-.016-.33-.048-.487l-.98.194c.018.094.028.192.028.293v.458h1V2.5zM.048 2.013A2.51 2.51 0 0 0 0 2.5v.458h1V2.5c0-.1.01-.199.029-.293l-.981-.194zM0 3.875v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zM0 5.708v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zM0 7.542v.916h1v-.916H0zm15 .916h1v-.916h-1v.916zM0 9.375v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zm-16 .916v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zm-16 .917v.458c0 .166.016.33.048.487l.98-.194A1.51 1.51 0 0 1 1 13.5v-.458H0zm16 .458v-.458h-1v.458c0 .1-.01.199-.029.293l.981.194c.032-.158.048-.32.048-.487zM.421 14.89c.183.272.417.506.69.689l.556-.831a1.51 1.51 0 0 1-.415-.415l-.83.556zm14.469.689c.272-.183.506-.417.689-.69l-.831-.556c-.11.164-.251.305-.415.415l.556.83zm-12.877.373c.158.032.32.048.487.048h.458v-1H2.5c-.1 0-.199-.01-.293-.029l-.194.981zM13.5 16c.166 0 .33-.016.487-.048l-.194-.98A1.51 1.51 0 0 1 13.5 15h-.458v1h.458zm-9.625 0h.917v-1h-.917v1zm1.833 0h.917v-1h-.917v1zm1.834 0h.916v-1h-.916v1zm1.833 0h.917v-1h-.917v1zm1.833 0h.917v-1h-.917v1zM4.5 7.5a.5.5 0 0 0 0 1h7a.5.5 0 0 0 0-1h-7z\" />\r\n                      </svg>\r\n                    </Typography>\r\n                  </div>\r\n                  <div className=\"col-4\">\r\n                    <Typography\r\n                      variant=\"subtitle1\"\r\n                      gutterBottom\r\n                      className=\"mt-1\"\r\n                    >\r\n                      {item.qty}\r\n                    </Typography>\r\n                  </div>\r\n                  <div className=\"col-4\">\r\n                    <Typography\r\n                      onClick={(e) =>\r\n                        handelIncrement(e, item.qty, item.value, item.price)\r\n                      }\r\n                      style={{ cursor: \"pointer\" }}\r\n                      variant=\"h6\"\r\n                      gutterBottom\r\n                    >\r\n                      <svg\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                        width=\"16\"\r\n                        height=\"16\"\r\n                        fill=\"currentColor\"\r\n                        className=\"bi bi-plus-square-dotted\"\r\n                        viewBox=\"0 0 16 16\"\r\n                      >\r\n                        <path d=\"M2.5 0c-.166 0-.33.016-.487.048l.194.98A1.51 1.51 0 0 1 2.5 1h.458V0H2.5zm2.292 0h-.917v1h.917V0zm1.833 0h-.917v1h.917V0zm1.833 0h-.916v1h.916V0zm1.834 0h-.917v1h.917V0zm1.833 0h-.917v1h.917V0zM13.5 0h-.458v1h.458c.1 0 .199.01.293.029l.194-.981A2.51 2.51 0 0 0 13.5 0zm2.079 1.11a2.511 2.511 0 0 0-.69-.689l-.556.831c.164.11.305.251.415.415l.83-.556zM1.11.421a2.511 2.511 0 0 0-.689.69l.831.556c.11-.164.251-.305.415-.415L1.11.422zM16 2.5c0-.166-.016-.33-.048-.487l-.98.194c.018.094.028.192.028.293v.458h1V2.5zM.048 2.013A2.51 2.51 0 0 0 0 2.5v.458h1V2.5c0-.1.01-.199.029-.293l-.981-.194zM0 3.875v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zM0 5.708v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zM0 7.542v.916h1v-.916H0zm15 .916h1v-.916h-1v.916zM0 9.375v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zm-16 .916v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zm-16 .917v.458c0 .166.016.33.048.487l.98-.194A1.51 1.51 0 0 1 1 13.5v-.458H0zm16 .458v-.458h-1v.458c0 .1-.01.199-.029.293l.981.194c.032-.158.048-.32.048-.487zM.421 14.89c.183.272.417.506.69.689l.556-.831a1.51 1.51 0 0 1-.415-.415l-.83.556zm14.469.689c.272-.183.506-.417.689-.69l-.831-.556c-.11.164-.251.305-.415.415l.556.83zm-12.877.373c.158.032.32.048.487.048h.458v-1H2.5c-.1 0-.199-.01-.293-.029l-.194.981zM13.5 16c.166 0 .33-.016.487-.048l-.194-.98A1.51 1.51 0 0 1 13.5 15h-.458v1h.458zm-9.625 0h.917v-1h-.917v1zm1.833 0h.917v-1h-.917v1zm1.834-1v1h.916v-1h-.916zm1.833 1h.917v-1h-.917v1zm1.833 0h.917v-1h-.917v1zM8.5 4.5a.5.5 0 0 0-1 0v3h-3a.5.5 0 0 0 0 1h3v3a.5.5 0 0 0 1 0v-3h3a.5.5 0 0 0 0-1h-3v-3z\" />\r\n                      </svg>\r\n                    </Typography>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </Grid>\r\n          ) : (\r\n            \" \"\r\n          )}\r\n        </Grid>\r\n      );\r\n    });\r\n  }\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <Container maxWidth=\"lg \">\r\n        <Header subcategories={0} cart={cart.length} />\r\n\r\n        <Container className=\"mt-3 d-flex justify-content-center\">\r\n          <Grid container spacing={2} className=\"d-flex justify-content-center\">\r\n            <Grid item xs={12} sm={8} md={8}>\r\n              <Card\r\n                sx={{\r\n                  display: \"flex\",\r\n                  flexDirection: \"column\",\r\n                  borderRadius: \"5%\",\r\n                  backgroundColor: custom?.cardBgColor\r\n                    ? custom.cardBgColor\r\n                    : \"#2d3134\",\r\n                }}\r\n              >\r\n                <img\r\n                  style={{\r\n                    height: \"250px\",\r\n                    width: \"100%\",\r\n                    objectFit: \"contain\",\r\n                  }}\r\n                  src={\r\n                    stock === \"No Stock\" || stock === 0\r\n                      ? `http://${base_url}:${port}/images/products/${picture}`\r\n                      : `http://${base_url}:${port}/images/variants_pics/${picture}`\r\n                  }\r\n                  alt=\"Image\"\r\n                  className=\"m-1\"\r\n                />\r\n                <FavoriteIcon sx={{ color: \"#ff751d\" }} className=\"mx-4 my-2\" />\r\n\r\n                <div className=\"row mx-3\">\r\n                  <Typography\r\n                    variant=\"button\"\r\n                    style={{ textTransform: \"capitalize\" }}\r\n                  >\r\n                    {productName}{\" \"}\r\n                    {orignalPrice +\r\n                      \".00\" +\r\n                      \" \" +\r\n                      getSymbolFromCurrency(countryCode)}\r\n                  </Typography>\r\n                  <Typography variant=\"subtitle1\" gutterBottom>\r\n                    {ingredients?.map((item, i) => {\r\n                      if (ingredients.length == i + 1) {\r\n                        return item + \" - Not Included\";\r\n                      } else {\r\n                        return item + \" , \";\r\n                      }\r\n                    })}\r\n                  </Typography>\r\n                  <Typography variant=\"subtitle1\" gutterBottom>\r\n                    {extraValue?.map((item, i) => {\r\n                      if (extraValue.length == i + 1) {\r\n                        return item.value + \" - Included\";\r\n                      } else {\r\n                        return item.value + \" , \";\r\n                      }\r\n                    })}\r\n                  </Typography>\r\n                  {custom?.show_recommendation == 0 ||\r\n                  fetchData.length === 0 ? (\r\n                    \"\"\r\n                  ) : (\r\n                    <>\r\n                      <Typography variant=\"h6\" gutterBottom>\r\n                        {t(\"recommendation\")}\r\n                      </Typography>\r\n                      <FormGroup>{viewImages_HTMLTABLE}</FormGroup>\r\n                    </>\r\n                  )}\r\n                  <TextareaAutosize\r\n                    // aria-label=\"empty textarea\"\r\n                    className=\"my-3\"\r\n                    minRows={3}\r\n                    placeholder=\"Note\"\r\n                    style={{\r\n                      backgroundColor: custom?.cardBgColor\r\n                        ? custom.cardBgColor\r\n                        : \"#2d3134\",\r\n                      color: custom?.menusDeactiveColor\r\n                        ? custom.menusDeactiveColor\r\n                        : \"#fff\",\r\n                      fontSize: 12,\r\n                      borderColor: custom?.menusAcriveColor\r\n                        ? custom.menusAcriveColor\r\n                        : \"#ff751d\",\r\n                    }}\r\n                  />\r\n                </div>\r\n              </Card>\r\n            </Grid>\r\n          </Grid>\r\n        </Container>\r\n      </Container>\r\n      <Box\r\n        sx={{\r\n          borderRadius: \"5%\",\r\n          backgroundColor: \"light\",\r\n          position: \"sticky\",\r\n          bottom: \"0px\",\r\n        }}\r\n        className=\"bottom-0 text-center p-1\"\r\n      >\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={7}>\r\n            <Typography\r\n              variant=\"body1\"\r\n              gutterBottom\r\n              className=\"font-weight-bold text-center col-12 btn\"\r\n            >\r\n              {(parseInt(price) + sum).toFixed(2) +\r\n                \" \" +\r\n                getSymbolFromCurrency(countryCode)}\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={5}>\r\n            <Link\r\n              className=\"col-12 btn\"\r\n              style={{\r\n                textTransform: \"capitalize\",\r\n                backgroundColor: custom?.button_background_color\r\n                  ? custom.button_background_color\r\n                  : \"#ff751d\",\r\n                color: custom?.button_text_color\r\n                  ? custom.button_text_color\r\n                  : \"#f1fcfe\",\r\n                fontSize: custom?.bTextSize ? custom.bTextSize + \"rem\" : \"1rem\",\r\n              }}\r\n              to=\"\"\r\n            >\r\n              Add\r\n            </Link>\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default OrderDetails;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\First\\Main.js",["372","373","374","375","376","377","378","379","380"],"import React, { useState, useEffect } from \"react\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Container from \"@mui/material/Container\";\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport Header from \"./Header\";\r\nimport Footer from \"./Footer\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardMedia from \"@mui/material/CardMedia\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport axios from \"axios\";\r\nimport { base_url, port } from \"../../../../../Consts\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport { Link } from \"react-router-dom\";\r\nimport getSymbolFromCurrency from \"currency-symbol-map\";\r\n\r\nvar hold = 1;\r\nexport default function Main(props) {\r\n  const [loading, setLoading] = useState(true);\r\n  const { t } = useTranslation();\r\n  const branchId = atob(props.match.params.id);\r\n  const [branch, setBranch] = useState([]);\r\n  const [categories, setCategories] = useState([]);\r\n  const [subcategories, setSubCategories] = useState([]);\r\n  const [products, setProducts] = useState([]);\r\n  const [activeSubCategory, setActiveSubCategory] = useState(0);\r\n  const [themeCustomization, setThemeCustomization] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios.get(`/api/GetTempBasedOnBranch/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setThemeCustomization(res.data.fetchData?.Customization);\r\n\r\n        // console.log(res.data.fetchData[0].Customization);\r\n      }\r\n    });\r\n    axios.get(`/api/GetBranchForShow/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setBranch(res.data.data);\r\n      }\r\n    });\r\n    axios.get(`/api/GetCategories/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setCategories(res.data.fetchData);\r\n      }\r\n    });\r\n    axios.get(`/api/getSubCateBasedOnBranch/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setSubCategories(res.data.fetchData);\r\n        setActiveSubCategory(res.data.fetchData[0].sub_id);\r\n\r\n        axios\r\n          .get(\r\n            `/api/GetProductsBasedOnSubCategory/${res.data.fetchData[0]?.sub_id}`\r\n          )\r\n          .then((res) => {\r\n            if (res.data.status === 200) {\r\n              setProducts(res.data.data);\r\n            }\r\n          });\r\n        setLoading(false);\r\n      }\r\n    });\r\n  }, []);\r\n  const [changeState, setChangeState] = useState(true);\r\n  const fetchMoreData = () => {\r\n    if (hold < subcategories.length) {\r\n      axios.get(`/api/getSubCateBasedOnBranch/${branchId}`).then((res) => {\r\n        if (res.data.status === 200) {\r\n          setActiveSubCategory(res.data.fetchData[hold].sub_id);\r\n          // console.log(res.data.fetchData[hold].sub_id);\r\n\r\n          axios\r\n            .get(\r\n              `/api/GetProductsBasedOnSubCategory/${res.data.fetchData[hold].sub_id}`\r\n            )\r\n            .then((res) => {\r\n              if (res.data.status === 200) {\r\n                if (res.data.data.length === 0) {\r\n                  hold = hold + 1;\r\n                  // console.log(res.data.data);\r\n                  fetchMoreData();\r\n                } else {\r\n                  hold = hold + 1;\r\n                  setProducts(products.concat(res.data.data));\r\n                }\r\n              }\r\n            });\r\n\r\n          setSubCategories(res.data.fetchData);\r\n        }\r\n      });\r\n    } else {\r\n      setChangeState(false);\r\n    }\r\n    // console.log(hold);\r\n  };\r\n  // design start\r\n  const theme = createTheme({\r\n    palette: {\r\n      warning: {\r\n        // button background\r\n        main: themeCustomization?.button_background_color\r\n          ? themeCustomization.button_background_color\r\n          : \"#ff751d\",\r\n      },\r\n    },\r\n    typography: {\r\n      fontFamily: themeCustomization?.font\r\n        ? themeCustomization.font\r\n        : \"sans-serif\",\r\n      subtitle1: {\r\n        fontSize: themeCustomization?.product_discription_font_size\r\n          ? themeCustomization.product_discription_font_size\r\n          : 10,\r\n        color: themeCustomization?.product_discription_color\r\n          ? themeCustomization.product_discription_color\r\n          : \"#777\",\r\n      },\r\n      // price\r\n      body1: {\r\n        fontSize: themeCustomization?.price_font_size\r\n          ? themeCustomization.price_font_size\r\n          : 12,\r\n        color: themeCustomization?.price_color\r\n          ? themeCustomization.price_color\r\n          : \"#111\",\r\n      },\r\n      // product Names\r\n      button: {\r\n        fontSize: themeCustomization?.product_name_font_size\r\n          ? themeCustomization.product_name_font_size\r\n          : 12,\r\n        color: themeCustomization?.product_name_color\r\n          ? themeCustomization.product_name_color\r\n          : \"#111\",\r\n      },\r\n      // categories and sub categories\r\n      overline: {\r\n        fontSize: themeCustomization?.categories_and_sub_categoies_font_size\r\n          ? themeCustomization.categories_and_sub_categoies_font_size\r\n          : 12,\r\n        color: themeCustomization?.categories_and_sub_categoies_color\r\n          ? themeCustomization.categories_and_sub_categoies_color\r\n          : \"#ff751d\",\r\n      },\r\n      // branch Name\r\n      h6: {\r\n        fontSize: themeCustomization?.branch_name_font_size\r\n          ? themeCustomization.branch_name_font_size\r\n          : 14,\r\n        color: themeCustomization?.branch_name_color\r\n          ? themeCustomization.branch_name_color\r\n          : \"#ff751d\",\r\n      },\r\n    },\r\n    components: {\r\n      MuiButton: {\r\n        variants: [\r\n          {\r\n            // button\r\n            props: { variant: \"contained\" },\r\n            style: {\r\n              fontSize: themeCustomization?.button_text_font_size\r\n                ? themeCustomization.button_text_font_size\r\n                : 12,\r\n              color: themeCustomization?.button_text_color\r\n                ? themeCustomization.button_text_color\r\n                : \"#f1fcfe\",\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n  });\r\n  // design end\r\n\r\n  var viewShow_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div\r\n        className=\"spinner-border text-primary \"\r\n        role=\"status\"\r\n        style={{ position: \"fixed\", top: \"50%\", left: \"50%\" }}\r\n      >\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewShow_HTMLTABLE = products?.map((item, i) => {\r\n      return (\r\n        <Grid\r\n          item\r\n          xs={\r\n            themeCustomization?.number_of_products_in_each_row == 1\r\n              ? 12\r\n              : themeCustomization?.number_of_products_in_each_row == 2\r\n              ? 6\r\n              : themeCustomization?.number_of_products_in_each_row == 3\r\n              ? 4\r\n              : themeCustomization?.number_of_products_in_each_row == 4\r\n              ? 3\r\n              : themeCustomization?.number_of_products_in_each_row == 5\r\n              ? 3\r\n              : themeCustomization?.number_of_products_in_each_row == 6\r\n              ? 2\r\n              : 6\r\n          }\r\n          // sm={2} md={2}\r\n          key={i}\r\n        >\r\n          <Card\r\n            sx={{\r\n              // height: \"100%\",\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n            }}\r\n          >\r\n            <CardMedia\r\n              component=\"img\"\r\n              sx={{ height: \"100px\", objectFit: \"contain\" }}\r\n              image={`http://${base_url}:${port}/images/products/${item.image}`}\r\n              alt=\"Image\"\r\n            />\r\n            <Link\r\n              to={{\r\n                pathname: `/template-first/product/${btoa(item.id)}`,\r\n                state: { themes: themeCustomization },\r\n              }}\r\n            >\r\n              <CardContent sx={{ flexGrow: 1 }}>\r\n                <Typography variant=\"button\" display=\"block\" gutterBottom>\r\n                  {item.ProductName}\r\n                </Typography>\r\n                <Typography variant=\"subtitle1\" gutterBottom>\r\n                  {item.preparationTime}\r\n                  {\" Minutes\"}\r\n                </Typography>\r\n                <Typography variant=\"button\" gutterBottom>\r\n                  {item.price + \" \" + getSymbolFromCurrency(item.currency_code)}\r\n                </Typography>\r\n              </CardContent>\r\n            </Link>\r\n          </Card>\r\n        </Grid>\r\n      );\r\n    });\r\n  }\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <Container maxWidth=\"lg\">\r\n        <Header\r\n          title={branch[0]?.BrancheName}\r\n          subcategories={subcategories}\r\n          activeSubCategory={activeSubCategory}\r\n          setProducts={setProducts}\r\n          setActiveSubCategory={setActiveSubCategory}\r\n        />\r\n\r\n        <main>\r\n          <Grid container spacing={4} className=\"text-center\">\r\n            {viewShow_HTMLTABLE}\r\n          </Grid>\r\n        </main>\r\n        <InfiniteScroll\r\n          dataLength={products.length} //This is important field to render the next data\r\n          next={fetchMoreData}\r\n          hasMore={changeState}\r\n          loader={\r\n            <Typography\r\n              variant=\"subtitle1\"\r\n              gutterBottom\r\n              className=\"text-center pt-5\"\r\n            >\r\n              <b>{t(\"loading\")}</b>\r\n            </Typography>\r\n          }\r\n          endMessage={\r\n            <Typography\r\n              variant=\"subtitle1\"\r\n              gutterBottom\r\n              style={{ textAlign: \"center \" }}\r\n            >\r\n              <b>{t(\"yay_you_have_seen_it_all\")}</b>\r\n            </Typography>\r\n          }\r\n        ></InfiniteScroll>\r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Second\\Main.js",["381","382","383","384","385","386","387"],"import React, { useState, useEffect } from \"react\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Container from \"@mui/material/Container\";\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport Header from \"./Header\";\r\nimport Footer from \"./Footer\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardMedia from \"@mui/material/CardMedia\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport axios from \"axios\";\r\nimport { base_url, port } from \"../../../../../Consts\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport Box from \"@mui/material/Box\";\r\nimport Tabs, { tabsClasses } from \"@mui/material/Tabs\";\r\nimport Tab from \"@mui/material/Tab\";\r\nimport HorizontalScroller from \"react-horizontal-scroll-container\";\r\nimport getSymbolFromCurrency from \"currency-symbol-map\";\r\n\r\nvar hold = 1;\r\nexport default function Main(props) {\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  const [loading, setLoading] = useState(true);\r\n  const { t } = useTranslation();\r\n  const branchId = atob(props.match.params.id);\r\n  const [subcategories, setSubCategories] = useState([]);\r\n  const [products, setProducts] = useState([]);\r\n  const [activeSubCategory, setActiveSubCategory] = useState(0);\r\n  const [themeCustomization, setThemeCustomization] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios.get(`/api/GetTempBasedOnBranch/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setThemeCustomization(res.data.fetchData[0]?.Customization);\r\n        // console.log(res.data.fetchData[0].Customization);\r\n      }\r\n    });\r\n    axios.get(`/api/getSubCateBasedOnBranch/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setSubCategories(res.data.fetchData);\r\n        setActiveSubCategory(res.data.fetchData[0]?.sub_id);\r\n        setSubName(res.data.fetchData[0].SubCategoryName);\r\n\r\n        axios\r\n          .get(\r\n            `/api/GetProductsBasedOnSubCategory/${res.data.fetchData[0]?.sub_id}`\r\n          )\r\n          .then((res) => {\r\n            if (res.data.status === 200) {\r\n              setProducts(res.data.data);\r\n            }\r\n          });\r\n        setLoading(false);\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  // design start\r\n  const theme = createTheme({\r\n    palette: {\r\n      warning: {\r\n        // button background\r\n        main: themeCustomization?.button_background_color\r\n          ? themeCustomization.button_background_color\r\n          : \"#ff751d\",\r\n      },\r\n    },\r\n    typography: {\r\n      fontFamily: themeCustomization?.font\r\n        ? themeCustomization.font\r\n        : \"sans-serif\",\r\n      subtitle1: {\r\n        fontSize: themeCustomization?.product_discription_font_size\r\n          ? themeCustomization.product_discription_font_size\r\n          : 10,\r\n        color: themeCustomization?.product_discription_color\r\n          ? themeCustomization.product_discription_color\r\n          : \"#777\",\r\n      },\r\n      // price\r\n      body1: {\r\n        fontSize: themeCustomization?.price_font_size\r\n          ? themeCustomization.price_font_size\r\n          : 12,\r\n        color: themeCustomization?.price_color\r\n          ? themeCustomization.price_color\r\n          : \"#f1fcfe\",\r\n      },\r\n      // product Names\r\n      button: {\r\n        fontSize: themeCustomization?.product_name_font_size\r\n          ? themeCustomization.product_name_font_size\r\n          : 12,\r\n        color: themeCustomization?.product_name_color\r\n          ? themeCustomization.product_name_color\r\n          : \"#1f1d1f\",\r\n      },\r\n      // categories and sub categories\r\n      overline: {\r\n        fontSize: themeCustomization?.categories_and_sub_categoies_font_size\r\n          ? themeCustomization.categories_and_sub_categoies_font_size\r\n          : 12,\r\n        color: themeCustomization?.categories_and_sub_categoies_color\r\n          ? themeCustomization.categories_and_sub_categoies_color\r\n          : \"#ff751d\",\r\n      },\r\n      // branch Name\r\n      h4: {\r\n        fontSize: themeCustomization?.branch_name_font_size\r\n          ? themeCustomization.branch_name_font_size\r\n          : 28,\r\n        color: themeCustomization?.branch_name_color\r\n          ? themeCustomization.branch_name_color\r\n          : \"#aa3f32\",\r\n      },\r\n      h3: {\r\n        fontSize: themeCustomization?.branch_name_font_size\r\n          ? themeCustomization.branch_name_font_size\r\n          : 36,\r\n        color: themeCustomization?.branch_name_color\r\n          ? themeCustomization.branch_name_color\r\n          : \"#1f1d1f\",\r\n      },\r\n    },\r\n    components: {\r\n      MuiButton: {\r\n        variants: [\r\n          {\r\n            // button\r\n            props: { variant: \"contained\" },\r\n            style: {\r\n              fontSize: themeCustomization?.button_text_font_size\r\n                ? themeCustomization.button_text_font_size\r\n                : 12,\r\n              color: themeCustomization?.button_text_color\r\n                ? themeCustomization.button_text_color\r\n                : \"#f1fcfe\",\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n  });\r\n  // design end\r\n  let [subName, setSubName] = useState(\"\");\r\n  const filterProducts = (subCateID, name) => {\r\n    axios.get(`/api/GetProductsBasedOnSubCategory/${subCateID}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        // console.log(res.data.data);\r\n        setProducts(res.data.data);\r\n      }\r\n    });\r\n    setSubName(name);\r\n    setActiveSubCategory(subCateID);\r\n  };\r\n  var viewShow_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div\r\n        className=\"spinner-border text-primary \"\r\n        role=\"status\"\r\n        style={{ position: \"fixed\", top: \"50%\", left: \"50%\" }}\r\n      >\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewShow_HTMLTABLE = products?.map((item, i) => {\r\n      return (\r\n        <Grid\r\n          item\r\n          xs={12}\r\n          sm={12}\r\n          md={12}\r\n          key={i}\r\n          sx={{ height: \"500px\" }}\r\n          className=\"center\"\r\n        >\r\n          <Card\r\n            sx={{\r\n              width: \"300px\",\r\n              margin: \"30px\",\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n            }}\r\n          >\r\n            <CardMedia\r\n              component=\"img\"\r\n              sx={{ height: \"300px\", objectFit: \"contain\" }}\r\n              image={`http://${base_url}:${port}/images/products/${item.image}`}\r\n              alt=\"Image\"\r\n            />\r\n            <Link\r\n              to={{\r\n                pathname: `/second-template/product/${btoa(item.id)}`,\r\n                state: { themes: themeCustomization },\r\n              }}\r\n            >\r\n              <CardContent sx={{ flexGrow: 1 }} className=\"text-center\">\r\n                <Typography\r\n                  variant=\"button\"\r\n                  style={{ textTransform: \"capitalize\" }}\r\n                >\r\n                  {item.ProductName}\r\n                </Typography>\r\n                <Typography variant=\"subtitle1\" gutterBottom>\r\n                  {item.Description}\r\n                </Typography>\r\n                <Typography variant=\"h4\" gutterBottom>\r\n                  {item.price + \" \" + getSymbolFromCurrency(item.currency_code)}\r\n                </Typography>\r\n              </CardContent>\r\n            </Link>\r\n          </Card>\r\n        </Grid>\r\n      );\r\n    });\r\n  }\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <Container maxWidth=\"lg\">\r\n        <Typography\r\n          component=\"h2\"\r\n          variant=\"h3\"\r\n          align=\"left\"\r\n          style={{\r\n            marginLeft: 200,\r\n            paddingBottom: \"2px\",\r\n            marginBottom: \"10px\",\r\n            borderBottomStyle: \"solid\",\r\n            borderottomWidth: \"3.1px\",\r\n            width: \"fit-content\",\r\n            borderColor: \"#33cd6b\",\r\n          }}\r\n          noWrap\r\n          sx={{ flex: 1 }}\r\n        >\r\n          {subName}\r\n        </Typography>\r\n\r\n        <Card>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={2}>\r\n              <Box\r\n                sx={{\r\n                  flexGrow: 1,\r\n                  bgcolor: \"background.paper\",\r\n                  display: \"flex\",\r\n                  height: 500,\r\n                }}\r\n              >\r\n                <Tabs\r\n                  orientation=\"vertical\"\r\n                  value={value}\r\n                  onChange={handleChange}\r\n                  variant=\"scrollable\"\r\n                  scrollButtons\r\n                  aria-label=\"Vertical tabs example\"\r\n                  TabIndicatorProps={{\r\n                    style: {\r\n                      display: \"none\",\r\n                    },\r\n                  }}\r\n                  sx={{\r\n                    [`& .${tabsClasses.scrollButtons}`]: {\r\n                      \"&.Mui-disabled\": { opacity: 0.3 },\r\n                    },\r\n                  }}\r\n                >\r\n                  {subcategories?.map((section, i) => (\r\n                    <Tab\r\n                      className=\"mb-2\"\r\n                      onClick={() =>\r\n                        filterProducts(section.sub_id, section.SubCategoryName)\r\n                      }\r\n                      style={\r\n                        activeSubCategory == section.sub_id\r\n                          ? {\r\n                              cursor: \"pointer\",\r\n                              background: \"#33cd6b\",\r\n                              margin: \"2px\",\r\n                              padding: \"5px\",\r\n                              border: \"1px solid\",\r\n                              textAlign: \"center\",\r\n                              borderRadius: \"10px\",\r\n                              borderColor: \"#33cd6b\",\r\n                            }\r\n                          : {\r\n                              cursor: \"pointer\",\r\n                              margin: \"2px\",\r\n                              padding: \"5px\",\r\n                              textAlign: \"center\",\r\n                              borderRadius: \"10px\",\r\n                            }\r\n                      }\r\n                      icon={\r\n                        <img\r\n                          style={{\r\n                            height: \"50px\",\r\n                            width: \"50px\",\r\n                            objectFit: \"contain\",\r\n                          }}\r\n                          src={`http://${base_url}:${port}/images/sub_catagories/${section.SubCategoryIcon}`}\r\n                        />\r\n                      }\r\n                      label={\r\n                        <Typography\r\n                          style={\r\n                            activeSubCategory == section.sub_id\r\n                              ? {\r\n                                  color: \"white\",\r\n                                  textTransform: \"capitalize\",\r\n                                }\r\n                              : {\r\n                                  color: \"black\",\r\n                                  textTransform: \"capitalize\",\r\n                                }\r\n                          }\r\n                        >\r\n                          {section.SubCategoryName}\r\n                        </Typography>\r\n                      }\r\n                    />\r\n                  ))}\r\n                </Tabs>\r\n              </Box>\r\n            </Grid>\r\n            <Grid item xs={10}>\r\n              <HorizontalScroller>{viewShow_HTMLTABLE}</HorizontalScroller>\r\n            </Grid>\r\n          </Grid>\r\n        </Card>\r\n      </Container>\r\n      {/* <Footer /> */}\r\n    </ThemeProvider>\r\n  );\r\n}\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\index.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\Footer.js",["388","389"],"import * as React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Container from \"@mui/material/Container\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Footer(props) {\r\n  const { title, url, theme, stock } = props;\r\n\r\n  return (\r\n    <Box\r\n      component=\"footer\"\r\n      sx={{ bgcolor: \"light\", position: \"sticky\", bottom: \"0px\" }}\r\n      className=\"bottom-0 py-1\"\r\n    >\r\n      <Container maxWidth=\"sm\">\r\n        {stock == \"No Stock\" || stock == 0 ? (\r\n          <Link\r\n            className=\"col-12 btn disabled\"\r\n            style={{\r\n              textTransform: \"capitalize\",\r\n              backgroundColor: theme?.button_background_color\r\n                ? theme.button_background_color\r\n                : \"#ff751d\",\r\n              color: theme?.button_text_color\r\n                ? theme.button_text_color\r\n                : \"#f1fcfe\",\r\n              fontSize: theme?.bTextSize ? theme.bTextSize + \"rem\" : \"1rem\",\r\n            }}\r\n            to={url}\r\n          >\r\n            {title}\r\n          </Link>\r\n        ) : (\r\n          <Link\r\n            className=\"col-12 btn\"\r\n            style={{\r\n              textTransform: \"capitalize\",\r\n              backgroundColor: theme?.button_background_color\r\n                ? theme.button_background_color\r\n                : \"#ff751d\",\r\n              color: theme?.button_text_color\r\n                ? theme.button_text_color\r\n                : \"#f1fcfe\",\r\n              fontSize: theme?.bTextSize ? theme.bTextSize + \"rem\" : \"1rem\",\r\n            }}\r\n            to={url}\r\n          >\r\n            {title}\r\n          </Link>\r\n        )}\r\n      </Container>\r\n    </Box>\r\n  );\r\n}\r\n\r\nFooter.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Footer;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\Header.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Products\\Extra.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Products\\Ingredients.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\utils\\index.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\pages\\Error404.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Attributes\\Attributes.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Variants\\Gallary.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Orders\\Basket.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Orders\\Order.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Branches\\Show.js",["390"],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Branches\\Branches.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Branches\\Tables.js",["391"],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Inventories\\Inventory.js",["392","393"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { Button, Modal, Form } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { CBreadcrumb, CBreadcrumbItem } from \"@coreui/react\";\r\nimport { CSmartTable } from \"@coreui/react-pro\";\r\nconst Inventory = (props) => {\r\n  // for localization\r\n  const { t } = useTranslation();\r\n\r\n  const id = props.history.location.state.id;\r\n\r\n  // edit modal\r\n  const [editmodalCentered, setEditModalCentered] = useState(false);\r\n  const [editIventory, setEditInventory] = useState([]);\r\n  const editHandleInput = (e) => {\r\n    e.persist();\r\n    setEditInventory({ ...editIventory, [e.target.name]: e.target.value });\r\n  };\r\n  const fetchUnit = (e, id) => {\r\n    e.preventDefault();\r\n    axios.get(`/api/EditInventory/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setEditInventory(res.data.intenvtory);\r\n        setEditModalCentered(true);\r\n      } else if (res.data.status === 404) {\r\n        swal(\"Error\", res.data.message, \"error\");\r\n      }\r\n    });\r\n  };\r\n  const updateInventory = (e) => {\r\n    e.preventDefault();\r\n    axios.post(\"/api/UpdateInventory\", editIventory).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setEditInventory(\"\");\r\n        swal(\"Success\", res.data.message, \"success\");\r\n        setEditModalCentered(false);\r\n        //  this.props.history.push(\"/\")\r\n      } else if (res.data.status === 404) {\r\n        swal(\"Error\", res.data.message, \"error\");\r\n      }\r\n    });\r\n  };\r\n  // edit End\r\n  // delete start\r\n  const deleteInventory = (e, id) => {\r\n    e.preventDefault();\r\n    swal({\r\n      title: \"Are you sure?\",\r\n      text: \"Once deleted, you will not be able to recover this imaginary file!\",\r\n      icon: \"warning\",\r\n      buttons: [t(\"cancel\"), t(\"confirm\")],\r\n      dangerMode: true,\r\n    }).then((willDelete) => {\r\n      if (willDelete) {\r\n        axios.delete(`/api/DeleteInventory/${id}`).then((res) => {\r\n          if (res.data.status === 200) {\r\n            setEditInventory([]);\r\n            swal(\"Success\", res.data.message, \"success\");\r\n          } else if (res.data.status === 404) {\r\n            swal(\"Error\", res.data.message, \"error\");\r\n          }\r\n        });\r\n      } else {\r\n        swal(\"Your Data is safe now!\");\r\n      }\r\n    });\r\n  };\r\n  // delete end\r\n  //for retriving data using laravel API\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    axios.get(`/api/GetInventory/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setFetchData(res.data.fetchData);\r\n      }\r\n      setLoading(false);\r\n    });\r\n  }, [editIventory, id]);\r\n  const columns = [\r\n    {\r\n      key: \"variant_name\",\r\n    },\r\n    {\r\n      key: \"Buyingquantity\",\r\n    },\r\n    {\r\n      key: \"SellingQuantity\",\r\n    },\r\n    {\r\n      key: \"buyingPrice\",\r\n    },\r\n    {\r\n      key: \"sellingPrice\",\r\n    },\r\n    {\r\n      key: \"actions\",\r\n    },\r\n  ];\r\n\r\n  var viewInventory_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"spinner-border text-primary \" role=\"status\">\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewInventory_HTMLTABLE = (\r\n      // fetchData.map((item, i) => {\r\n      // return (\r\n      <CSmartTable\r\n        activePage={1}\r\n        cleaner\r\n        // clickableRows\r\n        columns={columns}\r\n        // columnFilter\r\n        columnSorter\r\n        // footer\r\n        items={fetchData}\r\n        itemsPerPageSelect\r\n        itemsPerPage={10}\r\n        pagination\r\n        scopedColumns={{\r\n          actions: (item) => {\r\n            return (\r\n              <td>\r\n                <Link to=\"\" onClick={(e) => fetchUnit(e, item.id)}>\r\n                  <svg\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    width=\"16\"\r\n                    height=\"16\"\r\n                    fill=\"currentColor\"\r\n                    className=\"bi bi-pencil-square\"\r\n                    viewBox=\"0 0 16 16\"\r\n                  >\r\n                    <path d=\"M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z\" />\r\n                    <path\r\n                      fill-rule=\"evenodd\"\r\n                      d=\"M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z\"\r\n                    />\r\n                  </svg>\r\n                </Link>\r\n                <span> | </span>\r\n                <Link to=\"\" onClick={(e) => deleteInventory(e, item.id)}>\r\n                  <svg\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    width=\"16\"\r\n                    height=\"16\"\r\n                    fill=\"currentColor\"\r\n                    className=\"bi bi-trash\"\r\n                    viewBox=\"0 0 16 16\"\r\n                  >\r\n                    <path d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z\" />\r\n                    <path\r\n                      fill-rule=\"evenodd\"\r\n                      d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\"\r\n                    />\r\n                  </svg>\r\n                </Link>\r\n              </td>\r\n            );\r\n          },\r\n        }}\r\n        // selectable\r\n        // sorterValue={{ column: 'name', state: 'asc' }}\r\n        tableFilter\r\n        // tableHeadProps={{\r\n        //   color: 'primary',\r\n        // }}\r\n        tableProps={{\r\n          striped: true,\r\n          hover: true,\r\n        }}\r\n      />\r\n    );\r\n    //     )\r\n    // })\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      {/* Edit Modal */}\r\n      <Modal\r\n        className=\"fade bd-example-modal-lg\"\r\n        show={editmodalCentered}\r\n        size=\"lg\"\r\n      >\r\n        <Form onSubmit={updateInventory} method=\"POST\">\r\n          <Modal.Header>\r\n            <Modal.Title> {t(\"edit_inventory\")} </Modal.Title>\r\n            <Button\r\n              onClick={() => setEditModalCentered(false)}\r\n              variant=\"\"\r\n              className=\"close\"\r\n            >\r\n              <span>&times;</span>\r\n            </Button>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <div className=\"row\">\r\n              <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    {\" \"}\r\n                    <strong>{t(\"variant_name\")}</strong>{\" \"}\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    placeholder={t(\"variant_name\")}\r\n                    name=\"variant_name\"\r\n                    required\r\n                    onChange={editHandleInput}\r\n                    value={editIventory.variant_name}\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    {\" \"}\r\n                    <strong>{t(\"buying_quantity\")}</strong>{\" \"}\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    placeholder={t(\"buying_quantity\")}\r\n                    name=\"Buyingquantity\"\r\n                    required\r\n                    onChange={editHandleInput}\r\n                    value={editIventory.Buyingquantity}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    {\" \"}\r\n                    <strong>{t(\"buying_price\")}</strong>{\" \"}\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    placeholder={t(\"buying_price\")}\r\n                    name=\"buyingPrice\"\r\n                    required\r\n                    onChange={editHandleInput}\r\n                    value={editIventory.buyingPrice}\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    {\" \"}\r\n                    <strong>{t(\"selling_price\")}</strong>{\" \"}\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    placeholder={t(\"selling_price\")}\r\n                    name=\"sellingPrice\"\r\n                    required\r\n                    onChange={editHandleInput}\r\n                    value={editIventory.sellingPrice}\r\n                  />\r\n                </div>\r\n              </div>\r\n              {/* <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                                <div className=\"form-group\">\r\n                                    <label className=\"mb-1 \"> <strong>SellingQuantity</strong> </label>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        className=\"form-control\"\r\n                                        placeholder=\"SellingQuantity\"\r\n                                        name=\"SellingQuantity\"\r\n                                        required\r\n                                        onChange={editHandleInput}  \r\n                                        value={editIventory.SellingQuantity}\r\n                                    />\r\n                                </div>\r\n                            </div> */}\r\n            </div>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button\r\n              onClick={() => setEditModalCentered(false)}\r\n              variant=\"danger light\"\r\n            >\r\n              {t(\"close\")}\r\n            </Button>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              {\" \"}\r\n              {t(\"update\")}{\" \"}\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Form>\r\n      </Modal>\r\n\r\n      {viewInventory_HTMLTABLE}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Inventory;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Companies\\Company.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Services\\ServiceArea.js",["394"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { Button, Modal, Form } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as yup from \"yup\";\r\n\r\nconst ServiceArea = (props) => {\r\n  // Validation Start\r\n  const schema = yup\r\n    .object()\r\n    .shape({\r\n      AreaName: yup.string().required(\"This field is a required field\"),\r\n    })\r\n    .required();\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors },\r\n  } = useForm({\r\n    resolver: yupResolver(schema),\r\n  });\r\n  // Validation End\r\n  // for localization\r\n  const { t } = useTranslation();\r\n  //ID\r\n  const id = props.history.location.state.id;\r\n\r\n  // insert Start\r\n  const [modalCentered, setModalCentered] = useState(false);\r\n  const [serviceAreaInsert, setServiceAreaInsert] = useState({\r\n    AreaName: \"\",\r\n    BranchID: id,\r\n  });\r\n  const handleInput = (e) => {\r\n    e.persist();\r\n    setServiceAreaInsert({\r\n      ...serviceAreaInsert,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n  const saveServiceAreas = (e) => {\r\n    // e.preventDefault();\r\n    axios.post(\"/api/InsertServicAreas\", serviceAreaInsert).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setServiceAreaInsert({\r\n          AreaName: \"\",\r\n          BranchID: id,\r\n        });\r\n        reset();\r\n        setCheck(!check);\r\n\r\n        swal(\"Success\", res.data.message, \"success\");\r\n        setModalCentered(false);\r\n        //  this.props.history.push(\"/\")\r\n      }\r\n    });\r\n  };\r\n  // insert End\r\n  // edit Start\r\n  const [editmodalCentered, setEditModalCentered] = useState(false);\r\n  const [editServiceAreas, setEditServiceAreas] = useState([]);\r\n  const editHandleInput = (e) => {\r\n    e.persist();\r\n    setEditServiceAreas({\r\n      ...editServiceAreas,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n  const fetchServiceArea = (e, id) => {\r\n    e.preventDefault();\r\n    axios.get(`/api/EditServiceAreas/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setEditServiceAreas(res.data.menu);\r\n        setEditModalCentered(true);\r\n      } else if (res.data.status === 404) {\r\n        swal(\"Error\", res.data.message, \"error\");\r\n      }\r\n    });\r\n  };\r\n  const updateServiceArea = (e) => {\r\n    e.preventDefault();\r\n    axios.post(\"/api/UpdateServiceAreas\", editServiceAreas).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setEditServiceAreas(\"\");\r\n        setCheck(!check);\r\n\r\n        swal(\"Success\", res.data.message, \"success\");\r\n        setEditModalCentered(false);\r\n        //  this.props.history.push(\"/\")\r\n      } else if (res.data.status === 404) {\r\n        swal(\"Error\", res.data.message, \"error\");\r\n      }\r\n    });\r\n  };\r\n  // Edit End\r\n\r\n  // delete Start\r\n  const deleteServiceArea = (e, id) => {\r\n    swal({\r\n      title: \"Are you sure?\",\r\n      text: \"Once deleted, you will not be able to recover this imaginary file!\",\r\n      icon: \"warning\",\r\n      buttons: [t(\"cancel\"), t(\"confirm\")],\r\n      dangerMode: true,\r\n    }).then((willDelete) => {\r\n      if (willDelete) {\r\n        axios.delete(`/api/DeleteServiceAreas/${id}`).then((res) => {\r\n          if (res.data.status === 200) {\r\n            swal(\"Success\", res.data.message, \"success\");\r\n            setCheck(!check);\r\n          } else if (res.data.status === 404) {\r\n            swal(\"Error\", res.data.message, \"error\");\r\n          }\r\n        });\r\n      } else {\r\n        swal(\"Your Data is safe now!\");\r\n      }\r\n    });\r\n  };\r\n  // delete End\r\n\r\n  //for retriving data using laravel API\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [check, setCheck] = useState(true);\r\n\r\n  useEffect(() => {\r\n    axios.get(`/api/GetServiceAreas/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setFetchData(res.data.fetchData);\r\n      }\r\n      setLoading(false);\r\n    });\r\n  }, [check]);\r\n\r\n  var viewProducts_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"spinner-border text-primary \" role=\"status\">\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewProducts_HTMLTABLE = fetchData.map((item, i) => {\r\n      return (\r\n        <tr key={item.id}>\r\n          <td>{i + 1}</td>\r\n\r\n          <td> {item.AreaName}</td>\r\n          <td>\r\n            <button\r\n              type=\"button\"\r\n              onClick={(e) => fetchServiceArea(e, item.id)}\r\n              className=\"btn btn-outline-danger btn-sm\"\r\n            >\r\n              {t(\"edit\")}\r\n            </button>\r\n            &nbsp;&nbsp;&nbsp;\r\n            <button\r\n              type=\"button\"\r\n              onClick={(e) => deleteServiceArea(e, item.id)}\r\n              className=\"btn btn-outline-warning btn-sm\"\r\n            >\r\n              {t(\"delete\")}\r\n            </button>\r\n          </td>\r\n        </tr>\r\n      );\r\n    });\r\n  }\r\n  return (\r\n    <Fragment>\r\n      {/* <CBreadcrumb style={{ \"--cui-breadcrumb-divider\": \"'>'\" }}>\r\n                <CBreadcrumbItem className=\"font-weight-bold\" href=\"/branches\" >{t('Branches')}</CBreadcrumbItem>\r\n                <CBreadcrumbItem active>{t('services_area')}</CBreadcrumbItem>\r\n            </CBreadcrumb> */}\r\n      {/* <!-- Insert  Modal --> */}\r\n      <Modal className=\"fade\" show={modalCentered}>\r\n        <Form\r\n          onSubmit={handleSubmit(saveServiceAreas)}\r\n          method=\"POST\"\r\n          encType=\"multipart/form-data\"\r\n        >\r\n          <Modal.Header>\r\n            <Modal.Title>{t(\"add_service_area\")}</Modal.Title>\r\n            <Button\r\n              onClick={() => setModalCentered(false)}\r\n              variant=\"\"\r\n              className=\"close\"\r\n            >\r\n              <span>&times;</span>\r\n            </Button>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>{t(\"service_area\")}</strong>{\" \"}\r\n              </label>\r\n              <textarea\r\n                type=\"text\"\r\n                {...register(\"AreaName\")}\r\n                className=\"form-control\"\r\n                placeholder={t(\"service_area\")}\r\n                name=\"AreaName\"\r\n                onChange={handleInput}\r\n                value={serviceAreaInsert.AreaName}\r\n              />\r\n              <div className=\"text-danger\">{errors.AreaName?.message}</div>\r\n            </div>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button\r\n              onClick={() => setModalCentered(false)}\r\n              variant=\"danger light\"\r\n            >\r\n              {t(\"close\")}\r\n            </Button>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              {t(\"save\")}\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Form>\r\n      </Modal>\r\n      {/* Edit Modal */}\r\n      <Modal className=\"fade\" show={editmodalCentered}>\r\n        <Form onSubmit={updateServiceArea} method=\"POST\">\r\n          <Modal.Header>\r\n            <Modal.Title>{t(\"edit_service_area\")}</Modal.Title>\r\n            <Button\r\n              onClick={() => setEditModalCentered(false)}\r\n              variant=\"\"\r\n              className=\"close\"\r\n            >\r\n              <span>&times;</span>\r\n            </Button>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>{t(\"service_area\")}</strong>{\" \"}\r\n              </label>\r\n              <textarea\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                placeholder={t(\"service_area\")}\r\n                name=\"AreaName\"\r\n                required\r\n                onChange={editHandleInput}\r\n                value={editServiceAreas.AreaName}\r\n              />\r\n            </div>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button\r\n              onClick={() => setEditModalCentered(false)}\r\n              variant=\"danger light\"\r\n            >\r\n              {t(\"close\")}\r\n            </Button>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              {t(\"update\")}{\" \"}\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Form>\r\n      </Modal>\r\n      <div className=\"row\">\r\n        <div className=\"col-xl-12 col-xxl-12 col-lg-12 col-sm-12\">\r\n          <div className=\"card\">\r\n            <div className=\"card-header border-0\">\r\n              <div>\r\n                <h4 className=\"card-title mb-2\">{t(\"service_area\")}</h4>\r\n              </div>\r\n              <div className=\"dropdown\">\r\n                <Button\r\n                  variant=\"primary\"\r\n                  type=\"button\"\r\n                  className=\"mb-2 mr-2\"\r\n                  onClick={() => setModalCentered(true)}\r\n                >\r\n                  {t(\"add_service_area\")}\r\n                </Button>\r\n              </div>\r\n            </div>\r\n            <div className=\"card-body p-0\">\r\n              <div className=\"table-responsive \">\r\n                <table className=\"table \">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>{t(\"number\")}</th>\r\n                      <th>{t(\"service_area\")}</th>\r\n                      <th>{t(\"actions\")}</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>{viewProducts_HTMLTABLE}</tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default ServiceArea;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\layouts\\Footer.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Dashboard\\Home\\Home.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Dashboard\\Profile\\Profile.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\PrivateRoute.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Second\\Header.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Second\\Footer.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\Customization.js",["395"],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Products\\Show.js",["396","397","398","399","400","401","402","403","404","405"],"import React, { Fragment, useState } from \"react\";\r\nimport { Tab, Nav } from \"react-bootstrap\";\r\nimport {\r\n  Link,\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  useRouteMatch,\r\n} from \"react-router-dom\";\r\n\r\nimport Product from \"../Products/Product\";\r\nimport PrivateRoute from \"../PrivateRoute\";\r\nimport Variants from \"../Variants/Variants\";\r\nimport { Button, Modal, Form } from \"react-bootstrap\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport AddProduct from \"./AddProduct\";\r\nimport EditProduct from \"./EditProduct\";\r\n\r\nconst ProductShow = (props) => {\r\n  const { path, url } = useRouteMatch();\r\n  const { t } = useTranslation();\r\n  const id = props.history.location.state.id;\r\n\r\n  return (\r\n    <Fragment>\r\n      <Router>\r\n        <Switch>\r\n          <PrivateRoute exact path={`${path}`} component={Product} />\r\n          <PrivateRoute path={`${path}/variants`} component={Variants} />\r\n          <PrivateRoute path={`${path}/add-product`} component={AddProduct} />\r\n          <PrivateRoute path={`${path}/edit-product`} component={EditProduct} />\r\n        </Switch>\r\n      </Router>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default ProductShow;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\layouts\\PageTitle.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Show.js",["406","407","408"],"import React, { Fragment } from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  useRouteMatch,\r\n} from \"react-router-dom\";\r\n\r\nimport Design from \"./Design\";\r\nimport PrivateRoute from \"../PrivateRoute\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport Customization from \"./Templates/Dark/Customization\";\r\nimport Theme from \"./Theme\";\r\nimport EditTheme from \"./EditTheme\";\r\nimport DefaultCustomization from \"./Templates/Default/Customization\";\r\n\r\nconst DesignShow = (props) => {\r\n  const { path, url } = useRouteMatch();\r\n  const { t } = useTranslation();\r\n  const id = props.history.location.state.id;\r\n\r\n  return (\r\n    <Fragment>\r\n      <Router>\r\n        <Switch>\r\n          <PrivateRoute exact path={`${path}`} component={Design} />\r\n          <PrivateRoute\r\n            path={`${path}/dark-template-customization`}\r\n            component={Customization}\r\n          />\r\n          <PrivateRoute\r\n            path={`${path}/defualt-template-customization`}\r\n            component={DefaultCustomization}\r\n          />\r\n          <PrivateRoute path={`${path}/add-theme`} component={Theme} />\r\n          <PrivateRoute path={`${path}/edit-theme`} component={EditTheme} />\r\n          {/* <PrivateRoute path={`${path}/edit-product`} component={EditProduct} /> */}\r\n        </Switch>\r\n      </Router>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default DesignShow;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Categories\\SubCategory.js",["409","410","411"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { Button, Modal, Form } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Link, useHistory, useRouteMatch } from \"react-router-dom\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as yup from \"yup\";\r\nimport { CBreadcrumb, CBreadcrumbItem } from \"@coreui/react\";\r\nimport { base_url, port } from \"../../../Consts\";\r\nimport DefaultPic from \"../../../images/hellomenu/sub_category.svg\";\r\nimport ViewComfyIcon from \"@mui/icons-material/ViewComfy\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport TableRowsIcon from \"@mui/icons-material/TableRows\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\n\r\nconst SubCategory = (props) => {\r\n  // validation start\r\n  const schema = yup\r\n    .object()\r\n    .shape({\r\n      SubCategoryName: yup.string().required(\"This field is a required field\"),\r\n    })\r\n    .required();\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors },\r\n  } = useForm({\r\n    resolver: yupResolver(schema),\r\n  });\r\n  // validation end\r\n  // for localization\r\n  const { t } = useTranslation();\r\n  const id = props.history.location.state.id;\r\n\r\n  const [check, setCheck] = useState(true);\r\n\r\n  // insert start\r\n  const [modalCentered, setModalCentered] = useState(false);\r\n  const [subCategoryInsert, setSubCategoryInsert] = useState({\r\n    SubCategoryName: \"\",\r\n    CategoryID: id,\r\n  });\r\n  const handleInput = (e) => {\r\n    e.persist();\r\n    setSubCategoryInsert({\r\n      ...subCategoryInsert,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n  const [imageState, setImageState] = useState([]);\r\n\r\n  const handleImage = (e) => {\r\n    setImageState({ ...imageState, SubCategoryIcon: e.target.files[0] });\r\n  };\r\n  const saveSubMenu = (e) => {\r\n    // e.preventDefault();\r\n    const formData = new FormData();\r\n    formData.append(\"SubCategoryName\", subCategoryInsert.SubCategoryName);\r\n    formData.append(\"CategoryID\", subCategoryInsert.CategoryID);\r\n    formData.append(\"SubCategoryIcon\", imageState.SubCategoryIcon);\r\n    axios.post(\"/api/InsertSubCategories\", formData).then((res) => {\r\n      if (res.data.status === 200) {\r\n        // console.log(res.data.status);\r\n        setSubCategoryInsert({\r\n          SubCategoryName: \"\",\r\n          CategoryID: id,\r\n        });\r\n        setImageState([]);\r\n        reset();\r\n        setCheck(!check);\r\n\r\n        swal(\"Success\", res.data.message, \"success\");\r\n        setModalCentered(false);\r\n        //  this.props.history.push(\"/\")\r\n      }\r\n    });\r\n  };\r\n  // insert End\r\n\r\n  // edit start\r\n  const [editmodalCentered, setEditModalCentered] = useState(false);\r\n  const [editSubMenu, setEditSubMenu] = useState([]);\r\n  const editHandleInput = (e) => {\r\n    e.persist();\r\n    setEditSubMenu({ ...editSubMenu, [e.target.name]: e.target.value });\r\n  };\r\n  const fetchSubMenus = (e, id) => {\r\n    e.preventDefault();\r\n\r\n    axios.get(`/api/EditSubCategories/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setEditSubMenu(res.data.menu);\r\n        setEditModalCentered(true);\r\n      } else if (res.data.status === 404) {\r\n        swal(\"Error\", res.data.message, \"error\");\r\n      }\r\n    });\r\n  };\r\n  const updateSubMenu = (e) => {\r\n    e.preventDefault();\r\n    const formData = new FormData();\r\n    formData.append(\"SubCategoryIcon\", imageState.SubCategoryIcon);\r\n    formData.append(\"SubCategoryName\", editSubMenu.SubCategoryName);\r\n    formData.append(\"CategoryID\", editSubMenu.CategoryID);\r\n    formData.append(\"id\", editSubMenu.id);\r\n    axios.post(\"/api/UpdateSubCategory\", formData).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setEditSubMenu({\r\n          SubCategoryName: \"\",\r\n          CategoryID: id,\r\n        });\r\n        swal(\"Success\", res.data.message, \"success\");\r\n        setEditModalCentered(false);\r\n        setCheck(!check);\r\n\r\n        //  this.props.history.push(\"/\")\r\n      } else if (res.data.status === 404) {\r\n        swal(\"Error\", res.data.message, \"error\");\r\n      }\r\n    });\r\n  };\r\n  // edit end\r\n  // delete start\r\n  const deleteSubMenu = (e, id) => {\r\n    e.preventDefault();\r\n    swal({\r\n      title: \"Are you sure?\",\r\n      text: \"Once deleted, you will not be able to recover this imaginary file!\",\r\n      icon: \"warning\",\r\n      buttons: [t(\"cancel\"), t(\"confirm\")],\r\n      dangerMode: true,\r\n    }).then((willDelete) => {\r\n      if (willDelete) {\r\n        axios.delete(`/api/DeleteSubCategories/${id}`).then((res) => {\r\n          if (res.data.status === 200) {\r\n            swal(\"Success\", res.data.message, \"success\");\r\n            setCheck(!check);\r\n\r\n            // thisClicked.closest(\"tr\").remove();\r\n          } else if (res.data.status === 404) {\r\n            swal(\"Error\", res.data.message, \"error\");\r\n          }\r\n        });\r\n      } else {\r\n        swal(\"Your Data is safe now!\");\r\n      }\r\n    });\r\n  };\r\n  // delete end\r\n\r\n  //for retriving data using laravel API\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  useEffect(() => {\r\n    axios.get(`/api/GetSubCategories/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setFetchData(res.data.fetchData);\r\n      }\r\n      setLoading(false);\r\n    });\r\n  }, [check]);\r\n  const [layout, setLayout] = useState(true);\r\n  const changeLayout = () => {\r\n    setLayout(!layout);\r\n  };\r\n  var viewProducts_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"spinner-border text-primary \" role=\"status\">\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewProducts_HTMLTABLE = fetchData.map((item, i) => {\r\n      return (\r\n        <div className=\"col-xl-3 col-lg-3 col-sm-6 col-md-3\" key={i}>\r\n          <div className=\"card overflow-hidden\">\r\n            <div className=\"card-body\">\r\n              <div className=\"text-center\">\r\n                <img\r\n                  style={{\r\n                    height: \"100px\",\r\n                    width: \"100%\",\r\n                    borderRadius: \"10%\",\r\n                    objectFit: \"contain\",\r\n                  }}\r\n                  src={\r\n                    item.SubCategoryIcon\r\n                      ? `http://${base_url}:${port}/images/sub_catagories/${item.SubCategoryIcon}`\r\n                      : DefaultPic\r\n                  }\r\n                  alt=\"sub category\"\r\n                />\r\n\r\n                <h4 className=\"mt-2\">{item.SubCategoryName}</h4>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"card-footer pt-0 pb-0 text-center\">\r\n              <div className=\"row\">\r\n                <div className=\"col-6 pt-3 pb-3 border-right\">\r\n                  <Link to=\"\" onClick={(e) => fetchSubMenus(e, item.sub_id)}>\r\n                    <span>{t(\"edit\")}</span>\r\n                  </Link>\r\n                </div>\r\n                <div className=\"col-6 pt-3 pb-3\">\r\n                  <Link to=\"\" onClick={(e) => deleteSubMenu(e, item.sub_id)}>\r\n                    <span>{t(\"delete\")}</span>\r\n                  </Link>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <CBreadcrumb style={{ \"--cui-breadcrumb-divider\": \"'>'\" }}>\r\n        <CBreadcrumbItem\r\n          className=\"font-weight-bold\"\r\n          // onClick={() => history.goBack()}\r\n        >\r\n          {t(\"categories\")}\r\n        </CBreadcrumbItem>\r\n        <CBreadcrumbItem active>{t(\"sub_category\")}</CBreadcrumbItem>\r\n      </CBreadcrumb>\r\n      {/* <!-- Insert  Modal --> */}\r\n      <Modal className=\"fade\" show={modalCentered}>\r\n        <Form\r\n          onSubmit={handleSubmit(saveSubMenu)}\r\n          method=\"POST\"\r\n          encType=\"multipart/form-data\"\r\n        >\r\n          <Modal.Header>\r\n            <Modal.Title>{t(\"add_sub_Category\")}</Modal.Title>\r\n            <Button\r\n              onClick={() => setModalCentered(false)}\r\n              variant=\"\"\r\n              className=\"close\"\r\n            >\r\n              <span>&times;</span>\r\n            </Button>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>{t(\"sub_category_icon\")}</strong>{\" \"}\r\n              </label>\r\n              <div className=\"input-group\">\r\n                <div className=\"custom-file\">\r\n                  <input\r\n                    type=\"file\"\r\n                    className=\"form-control\"\r\n                    placeholder={t(\"sub_category_icon\")}\r\n                    name=\"SubCategoryIcon\"\r\n                    onChange={handleImage}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>{t(\"sub_category_name\")}</strong>{\" \"}\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                {...register(\"SubCategoryName\")}\r\n                className=\"form-control\"\r\n                placeholder={t(\"sub_category_name\")}\r\n                name=\"SubCategoryName\"\r\n                onChange={handleInput}\r\n                value={subCategoryInsert.SubCategoryName}\r\n              />\r\n              <div className=\"text-danger\">\r\n                {errors.SubCategoryName?.message}\r\n              </div>\r\n            </div>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button\r\n              onClick={() => setModalCentered(false)}\r\n              variant=\"danger light\"\r\n            >\r\n              {t(\"close\")}\r\n            </Button>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              {t(\"save\")}\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Form>\r\n      </Modal>\r\n      {/* Edit Modal */}\r\n      <Modal className=\"fade\" show={editmodalCentered}>\r\n        <Form onSubmit={updateSubMenu} method=\"POST\">\r\n          <Modal.Header>\r\n            <Modal.Title>{t(\"edit_sub_category\")}</Modal.Title>\r\n            <Button\r\n              onClick={() => setEditModalCentered(false)}\r\n              variant=\"\"\r\n              className=\"close\"\r\n            >\r\n              <span>&times;</span>\r\n            </Button>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>{t(\"sub_category_icon\")}</strong>{\" \"}\r\n              </label>\r\n              <div className=\"input-group\">\r\n                <div className=\"custom-file\">\r\n                  <input\r\n                    type=\"file\"\r\n                    className=\"form-control\"\r\n                    placeholder={t(\"sub_category_icon\")}\r\n                    name=\"SubCategoryIcon\"\r\n                    onChange={handleImage}\r\n                  />\r\n                  <img\r\n                    src={\r\n                      editSubMenu.SubCategoryIcon\r\n                        ? `http://${base_url}:${port}/images/sub_catagories/${editSubMenu.SubCategoryIcon}`\r\n                        : DefaultPic\r\n                    }\r\n                    width=\"70\"\r\n                    alt=\" \"\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>{t(\"sub_category_name\")}</strong>{\" \"}\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                placeholder={t(\"sub_category_name\")}\r\n                name=\"SubCategoryName\"\r\n                required\r\n                onChange={editHandleInput}\r\n                value={editSubMenu.SubCategoryName}\r\n              />\r\n            </div>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button\r\n              onClick={() => setEditModalCentered(false)}\r\n              variant=\"danger light\"\r\n            >\r\n              {t(\"close\")}\r\n            </Button>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              {t(\"update\")}{\" \"}\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Form>\r\n      </Modal>\r\n      <div className=\"row justify-content-end\">\r\n        <div className=\"col-1\">\r\n          <IconButton aria-label=\"Example\" onClick={changeLayout}>\r\n            {layout ? <TableRowsIcon /> : <ViewComfyIcon />}\r\n          </IconButton>\r\n        </div>\r\n      </div>\r\n      {layout ? (\r\n        <div className=\"row\">\r\n          {viewProducts_HTMLTABLE}\r\n          <div className=\"col-xl-3 col-lg-3 col-sm-6 col-md-3\">\r\n            <div className=\"card overflow-hidden \">\r\n              <div\r\n                className=\"card-body d-flex justify-content-center text-center\"\r\n                style={{ border: \"2px dashed #f50b65\" }}\r\n              >\r\n                <div className=\"align-self-center text-center\">\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-outline-primary\"\r\n                    onClick={() => setModalCentered(true)}\r\n                  >\r\n                    <AddIcon />\r\n\r\n                    {t(\"add_sub_Category\")}\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div className=\"row\">\r\n          <div className=\"col-xl-12 col-xxl-12 col-lg-12 col-sm-12\">\r\n            <div className=\"card\">\r\n              <div className=\"card-header border-0\">\r\n                <div>\r\n                  <h4 className=\"card-title mb-2\">{t(\"categories\")}</h4>\r\n                </div>\r\n                <div className=\"dropdown\">\r\n                  <Button\r\n                    variant=\"primary\"\r\n                    type=\"button\"\r\n                    className=\"mb-2 mr-2\"\r\n                    onClick={() => setModalCentered(true)}\r\n                  >\r\n                    {t(\"add_category\")}\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n              <div className=\"card-body p-0\">\r\n                <div className=\"table-responsive \">\r\n                  <table className=\"table text-center \">\r\n                    <thead>\r\n                      <tr className=\"card-title\">\r\n                        <th>{t(\"image\")}</th>\r\n                        <th>{t(\"sub_category_name\")}</th>\r\n                        <th>{t(\"actions\")}</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      {fetchData.map((item, i) => {\r\n                        return (\r\n                          <tr key={item.id}>\r\n                            <td>\r\n                              <div>\r\n                                <img\r\n                                  style={{\r\n                                    height: \"50px\",\r\n                                    width: \"100%\",\r\n                                    borderRadius: \"10%\",\r\n                                    objectFit: \"contain\",\r\n                                  }}\r\n                                  src={\r\n                                    item.SubCategoryIcon\r\n                                      ? `http://${base_url}:${port}/images/sub_catagories/${item.SubCategoryIcon}`\r\n                                      : DefaultPic\r\n                                  }\r\n                                  alt=\"category\"\r\n                                />\r\n                              </div>\r\n                            </td>\r\n                            <td>{item.SubCategoryName}</td>\r\n\r\n                            <td>\r\n                              <button\r\n                                type=\"button\"\r\n                                onClick={(e) => fetchSubMenus(e, item.sub_id)}\r\n                                className=\"btn btn-outline-danger btn-sm\"\r\n                              >\r\n                                {t(\"edit\")}\r\n                              </button>\r\n                              &nbsp;&nbsp;&nbsp;\r\n                              <button\r\n                                type=\"button\"\r\n                                onClick={(e) => deleteSubMenu(e, item.sub_id)}\r\n                                className=\"btn btn-outline-warning btn-sm\"\r\n                              >\r\n                                {t(\"delete\")}\r\n                              </button>\r\n                            </td>\r\n                          </tr>\r\n                        );\r\n                      })}\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default SubCategory;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Categories\\Category.js",["412","413"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { Button, Modal, Form } from \"react-bootstrap\";\r\nimport { base_url, port } from \"../../../Consts\";\r\n/// Bootstrap\r\nimport { Row } from \"react-bootstrap\";\r\nimport { Link, useRouteMatch } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as yup from \"yup\";\r\nimport DefaultPic from \"../../../images/hellomenu/category.svg\";\r\nimport ViewComfyIcon from \"@mui/icons-material/ViewComfy\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport TableRowsIcon from \"@mui/icons-material/TableRows\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\n\r\nconst Category = (props) => {\r\n  const { path, url } = useRouteMatch();\r\n\r\n  // valiation start\r\n  const schema = yup\r\n    .object()\r\n    .shape({\r\n      CategoryName: yup.string().required(\"This field is a required field\"),\r\n    })\r\n    .required();\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors },\r\n  } = useForm({\r\n    resolver: yupResolver(schema),\r\n  });\r\n  // validation end\r\n\r\n  // for localization\r\n  const { t } = useTranslation();\r\n  // ID\r\n  const id = props.history.location.state.id;\r\n  const [check, setCheck] = useState(true);\r\n  // insert Start\r\n  const [modalCentered, setModalCentered] = useState(false);\r\n  const [categoryInsert, setCategoryInsert] = useState({\r\n    CategoryName: \"\",\r\n    CategoryIcon: \"\",\r\n    branchID: id,\r\n  });\r\n  const [imageState, setImageState] = useState([]);\r\n\r\n  const handleInput = (e) => {\r\n    e.persist();\r\n    setCategoryInsert({ ...categoryInsert, [e.target.name]: e.target.value });\r\n  };\r\n  const handleImage = (e) => {\r\n    setImageState({ ...imageState, CategoryIcon: e.target.files[0] });\r\n  };\r\n  const saveMenu = (e) => {\r\n    // e.preventDefault();\r\n    const formData = new FormData();\r\n    formData.append(\"CategoryIcon\", imageState.CategoryIcon);\r\n    formData.append(\"CategoryName\", categoryInsert.CategoryName);\r\n    formData.append(\"branchID\", categoryInsert.branchID);\r\n\r\n    axios.post(\"/api/InsertCategories\", formData).then((res) => {\r\n      if (res.data.status === 200) {\r\n        // console.log(res.data.status);\r\n        setCategoryInsert({\r\n          CategoryName: \"\",\r\n          CategoryIcon: \"\",\r\n          branchID: id,\r\n        });\r\n        setImageState([]);\r\n        reset();\r\n        setCheck(!check);\r\n        swal(\"Success\", res.data.message, \"success\");\r\n        setModalCentered(false);\r\n        //  this.props.history.push(\"/\")\r\n      }\r\n    });\r\n  };\r\n  // insert End\r\n  // edit start\r\n  const [editmodalCentered, setEditModalCentered] = useState(false);\r\n  const [editMenu, setEditMenu] = useState({\r\n    CategoryName: \"\",\r\n    CategoryIcon: \"\",\r\n    branchID: id,\r\n  });\r\n  const editHandleInput = (e) => {\r\n    e.persist();\r\n    setEditMenu({ ...editMenu, [e.target.name]: e.target.value });\r\n  };\r\n  const fetchMenus = (e, id) => {\r\n    e.preventDefault();\r\n    axios.get(`/api/EditCategories/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setEditMenu(res.data.menu);\r\n        setEditModalCentered(true);\r\n      } else if (res.data.status === 404) {\r\n        swal(\"Error\", res.data.message, \"error\");\r\n      }\r\n    });\r\n  };\r\n  const updateMenu = (e) => {\r\n    e.preventDefault();\r\n    const formData = new FormData();\r\n    formData.append(\"CategoryIcon\", imageState.CategoryIcon);\r\n    formData.append(\"CategoryName\", editMenu.CategoryName);\r\n    formData.append(\"branchID\", editMenu.branchID);\r\n    formData.append(\"id\", editMenu.id);\r\n    axios.post(\"/api/UpdateCategories\", formData).then((res) => {\r\n      if (res.data.status === 200) {\r\n        // console.log(res.data.status);\r\n        setEditMenu({\r\n          id: \"\",\r\n          CategoryName: \"\",\r\n          CategoryIcon: \"\",\r\n          branchID: id,\r\n        });\r\n        setCheck(!check);\r\n\r\n        swal(\"Success\", res.data.message, \"success\");\r\n        setEditModalCentered(false);\r\n      } else if (res.data.status === 404) {\r\n        swal(\"Error\", res.data.message, \"error\");\r\n      }\r\n    });\r\n  };\r\n  // edit end\r\n  // delete start\r\n  const deleteMenu = (e, id) => {\r\n    e.preventDefault();\r\n    swal({\r\n      title: \"Are you sure?\",\r\n      text: \"Once deleted, you will not be able to recover this imaginary file!\",\r\n      icon: \"warning\",\r\n      buttons: [t(\"cancel\"), t(\"confirm\")],\r\n      dangerMode: true,\r\n    }).then((willDelete) => {\r\n      if (willDelete) {\r\n        axios.delete(`/api/DeleteCategories/${id}`).then((res) => {\r\n          if (res.data.status === 200) {\r\n            swal(\"Success\", res.data.message, \"success\");\r\n            // thisClicked.closest(\"tr\").remove();\r\n            setCheck(!check);\r\n          } else if (res.data.status === 404) {\r\n            swal(\"Error\", res.data.message, \"error\");\r\n          }\r\n        });\r\n      } else {\r\n        swal(\"Your Data is safe now!\");\r\n      }\r\n    });\r\n  };\r\n  // delete end\r\n  //for retriving data using laravel API\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    axios.get(`/api/GetCategories/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setFetchData(res.data.fetchData);\r\n      }\r\n      setLoading(false);\r\n    });\r\n  }, [check]);\r\n  const [layout, setLayout] = useState(true);\r\n  const changeLayout = () => {\r\n    setLayout(!layout);\r\n  };\r\n  var viewProducts_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"spinner-border text-primary \" role=\"status\">\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewProducts_HTMLTABLE = fetchData.map((item, i) => {\r\n      return (\r\n        <div className=\"col-xl-3 col-lg-3 col-sm-6 col-md-3\" key={i}>\r\n          <div className=\"card overflow-hidden\">\r\n            <div className=\"card-body\">\r\n              <div className=\"text-center\">\r\n                <Link\r\n                  to={{\r\n                    pathname: `${url}/sub-category`,\r\n                    state: { id: item.id },\r\n                  }}\r\n                >\r\n                  <span>\r\n                    <img\r\n                      style={{\r\n                        height: \"150px\",\r\n                        width: \"100%\",\r\n                        borderRadius: \"10%\",\r\n                        objectFit: \"contain\",\r\n                      }}\r\n                      src={\r\n                        item.CategoryIcon\r\n                          ? `http://${base_url}:${port}/images/catagories/${item.CategoryIcon}`\r\n                          : DefaultPic\r\n                      }\r\n                      alt=\"category\"\r\n                    />\r\n                  </span>\r\n                  <h4 className=\"mt-2\">{item.CategoryName}</h4>\r\n                </Link>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"card-footer pt-0 pb-0 text-center\">\r\n              <div className=\"row\">\r\n                <div className=\"col-6 pt-3 pb-3 border-right\">\r\n                  <Link to=\"\" onClick={(e) => fetchMenus(e, item.id)}>\r\n                    <span>{t(\"edit\")}</span>\r\n                  </Link>\r\n                </div>\r\n                <div className=\"col-6 pt-3 pb-3\">\r\n                  <Link to=\"\" onClick={(e) => deleteMenu(e, item.id)}>\r\n                    <span>{t(\"delete\")}</span>\r\n                  </Link>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    });\r\n  }\r\n  return (\r\n    <Fragment>\r\n      <Modal className=\"fade\" show={modalCentered}>\r\n        <Form\r\n          onSubmit={handleSubmit(saveMenu)}\r\n          method=\"POST\"\r\n          encType=\"multipart/form-data\"\r\n        >\r\n          <Modal.Header>\r\n            <Modal.Title>{t(\"add_category\")} </Modal.Title>\r\n            <Button\r\n              onClick={() => setModalCentered(false)}\r\n              variant=\"\"\r\n              className=\"close\"\r\n            >\r\n              <span>&times;</span>\r\n            </Button>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>{t(\"category_icon\")}</strong>{\" \"}\r\n              </label>\r\n              <div className=\"input-group\">\r\n                <div className=\"custom-file\">\r\n                  <input\r\n                    type=\"file\"\r\n                    className=\"form-control\"\r\n                    placeholder={t(\"category_icon\")}\r\n                    name=\"CategoryIcon\"\r\n                    onChange={handleImage}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>{t(\"category_name\")}</strong>{\" \"}\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                {...register(\"CategoryName\")}\r\n                className=\"form-control\"\r\n                placeholder={t(\"category_name\")}\r\n                name=\"CategoryName\"\r\n                onChange={handleInput}\r\n                value={categoryInsert.CategoryName}\r\n              />\r\n              <div className=\"text-danger\">{errors.CategoryName?.message}</div>\r\n            </div>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button\r\n              onClick={() => setModalCentered(false)}\r\n              variant=\"danger light\"\r\n            >\r\n              {t(\"close\")}\r\n            </Button>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              {t(\"save\")}\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Form>\r\n      </Modal>\r\n      {/* Edit Modal */}\r\n      <Modal className=\"fade\" show={editmodalCentered}>\r\n        <Form onSubmit={updateMenu} method=\"POST\">\r\n          <Modal.Header>\r\n            <Modal.Title>{t(\"edit_category\")}</Modal.Title>\r\n            <Button\r\n              onClick={() => setEditModalCentered(false)}\r\n              variant=\"\"\r\n              className=\"close\"\r\n            >\r\n              <span>&times;</span>\r\n            </Button>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>{t(\"edit_category\")}</strong>{\" \"}\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                disabled=\"disabled\"\r\n                className=\"form-control\"\r\n                name=\"id\"\r\n                required\r\n                onChange={editHandleInput}\r\n                value={editMenu.id}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>{t(\"category_icon\")}</strong>{\" \"}\r\n              </label>\r\n              <div className=\"input-group\">\r\n                <div className=\"custom-file\">\r\n                  <input\r\n                    type=\"file\"\r\n                    className=\"form-control\"\r\n                    placeholder={t(\"category_icon\")}\r\n                    name=\"CategoryIcon\"\r\n                    onChange={handleImage}\r\n                  />\r\n                  <img\r\n                    src={\r\n                      editMenu.CategoryIcon\r\n                        ? `http://${base_url}:${port}/images/catagories/${editMenu.CategoryIcon}`\r\n                        : DefaultPic\r\n                    }\r\n                    width=\"70\"\r\n                    alt=\" \"\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>{t(\"category_name\")}</strong>{\" \"}\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                placeholder={t(\"category_name\")}\r\n                name=\"CategoryName\"\r\n                required\r\n                onChange={editHandleInput}\r\n                value={editMenu.CategoryName}\r\n              />\r\n            </div>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button\r\n              onClick={() => setEditModalCentered(false)}\r\n              variant=\"danger light\"\r\n            >\r\n              {t(\"close\")}\r\n            </Button>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              {t(\"update\")}{\" \"}\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Form>\r\n      </Modal>\r\n\r\n      <div className=\"row justify-content-end\">\r\n        <div className=\"col-1\">\r\n          <IconButton aria-label=\"Example\" onClick={changeLayout}>\r\n            {layout ? <TableRowsIcon /> : <ViewComfyIcon />}\r\n          </IconButton>\r\n        </div>\r\n      </div>\r\n      {layout ? (\r\n        <Row>\r\n          {viewProducts_HTMLTABLE}\r\n          <div className=\"col-xl-3 col-lg-3 col-sm-6 col-md-3\">\r\n            <div className=\"card overflow-hidden \">\r\n              <div\r\n                className=\"card-body d-flex justify-content-center text-center\"\r\n                style={{ border: \"2px dashed #f50b65\" }}\r\n              >\r\n                <div className=\"align-self-center text-center\">\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-outline-primary\"\r\n                    onClick={() => setModalCentered(true)}\r\n                  >\r\n                    <AddIcon />\r\n                    {t(\"add_category\")}\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Row>\r\n      ) : (\r\n        <div className=\"row\">\r\n          <div className=\"col-xl-12 col-xxl-12 col-lg-12 col-sm-12\">\r\n            <div className=\"card\">\r\n              <div className=\"card-header border-0\">\r\n                <div>\r\n                  <h4 className=\"card-title mb-2\">{t(\"categories\")}</h4>\r\n                </div>\r\n                <div className=\"dropdown\">\r\n                  <Button\r\n                    variant=\"primary\"\r\n                    type=\"button\"\r\n                    className=\"mb-2 mr-2\"\r\n                    onClick={() => setModalCentered(true)}\r\n                  >\r\n                    {t(\"add_category\")}\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n              <div className=\"card-body p-0\">\r\n                <div className=\"table-responsive \">\r\n                  <table className=\"table text-center \">\r\n                    <thead>\r\n                      <tr className=\"card-title\">\r\n                        <th>{t(\"image\")}</th>\r\n                        <th>{t(\"category_name\")}</th>\r\n                        <th>{t(\"actions\")}</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      {fetchData.map((item, i) => {\r\n                        return (\r\n                          <tr key={item.id}>\r\n                            <td>\r\n                              <Link\r\n                                to={{\r\n                                  pathname: `${url}/sub-category`,\r\n                                  state: {\r\n                                    id: item.id,\r\n                                  },\r\n                                }}\r\n                              >\r\n                                <div>\r\n                                  <img\r\n                                    style={{\r\n                                      height: \"50px\",\r\n                                      width: \"100%\",\r\n                                      borderRadius: \"10%\",\r\n                                      objectFit: \"contain\",\r\n                                    }}\r\n                                    src={\r\n                                      item.CategoryIcon\r\n                                        ? `http://${base_url}:${port}/images/catagories/${item.CategoryIcon}`\r\n                                        : DefaultPic\r\n                                    }\r\n                                    alt=\"category\"\r\n                                  />\r\n                                </div>\r\n                              </Link>\r\n                            </td>\r\n                            <td>\r\n                              <Link\r\n                                to={{\r\n                                  pathname: `${url}/sub-category`,\r\n                                  state: {\r\n                                    id: item.id,\r\n                                  },\r\n                                }}\r\n                              >\r\n                                {item.CategoryName}\r\n                              </Link>\r\n                            </td>\r\n\r\n                            <td>\r\n                              <button\r\n                                type=\"button\"\r\n                                onClick={(e) => fetchMenus(e, item.id)}\r\n                                className=\"btn btn-outline-danger btn-sm\"\r\n                              >\r\n                                {t(\"edit\")}\r\n                              </button>\r\n                              &nbsp;&nbsp;&nbsp;\r\n                              <button\r\n                                type=\"button\"\r\n                                onClick={(e) => deleteMenu(e, item.id)}\r\n                                className=\"btn btn-outline-warning btn-sm\"\r\n                              >\r\n                                {t(\"delete\")}\r\n                              </button>\r\n                            </td>\r\n                          </tr>\r\n                        );\r\n                      })}\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Category;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\layouts\\nav\\index.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Default\\Customization.js",["414"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CRow,\r\n  CFormLabel,\r\n  CCol,\r\n} from \"@coreui/react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// import Switch from \"react-switch\";\r\n\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport { FormControlLabel, RadioGroup, Radio } from \"@mui/material\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport Select from \"@mui/material/Select\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardMedia from \"@mui/material/CardMedia\";\r\nimport { CardActionArea } from \"@mui/material\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst DefaultCustomization = (props) => {\r\n  const { t } = useTranslation();\r\n  // const templateId = atob(props.match.params.id);\r\n  const templateId = props.history.location.state.id;\r\n\r\n  const history = useHistory();\r\n\r\n  const [settings, setSettings] = useState([]);\r\n  const handleInput = (e) => {\r\n    setSettings({ ...settings, [e.target.name]: e.target.value });\r\n    const formData = new FormData();\r\n    formData.append(\r\n      \"settings\",\r\n      JSON.stringify({ ...settings, [e.target.name]: e.target.value })\r\n    );\r\n    axios\r\n      .post(`/api/InsertCustomization/${templateId}`, formData)\r\n      .then((res) => {\r\n        if (res.data.status === 200) {\r\n          setLoading(true);\r\n        }\r\n      });\r\n  };\r\n  const reset = (e) => {\r\n    e.preventDefault();\r\n    axios.get(`/api/ResetCustomization/${templateId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setSettings([]);\r\n        setLoading(true);\r\n        swal(\"Success\", res.data.message, \"success\");\r\n      }\r\n    });\r\n  };\r\n  const [template, setTemplate] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    axios.get(`/api/GetTemplate/${templateId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setSettings(res.data.fetchData.Customization);\r\n        setTemplate(res.data.fetchData);\r\n      }\r\n      setLoading(false);\r\n    });\r\n    // const interval = setInterval(() => {\r\n    //   save();\r\n    // }, 15000);\r\n    // return () => clearInterval(interval);\r\n  }, [loading]);\r\n\r\n  var viewPreview_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    viewPreview_HTMLTABLE = (\r\n      <CCard>\r\n        <CCardHeader component=\"h5\">{t(\"preview\")}</CCardHeader>\r\n        <CCardBody>\r\n          <div\r\n            className=\"spinner-border text-primary\"\r\n            role=\"status\"\r\n            style={{ position: \"fixed\", top: \"0%\", left: \"50%\" }}\r\n          >\r\n            <span className=\"sr-only\">{t(\"loading\")}</span>\r\n          </div>\r\n        </CCardBody>\r\n      </CCard>\r\n    );\r\n  } else {\r\n    viewPreview_HTMLTABLE = (\r\n      <CCard>\r\n        <CCardHeader component=\"h5\">{t(\"preview\")}</CCardHeader>\r\n        <CCardBody>\r\n          <Card>\r\n            <CardActionArea>\r\n              <CardMedia\r\n                component=\"iframe\"\r\n                height=\"600\"\r\n                image={`/${template?.URL}/${btoa(1)}`}\r\n                alt=\"template\"\r\n              />\r\n            </CardActionArea>\r\n          </Card>\r\n        </CCardBody>\r\n      </CCard>\r\n    );\r\n  }\r\n  return (\r\n    <>\r\n      <div className=\"row\">\r\n        <div className=\"col-7\">\r\n          <CCard>\r\n            <CCardHeader component=\"h5\">{t(\"customization\")}</CCardHeader>\r\n            <CCardBody>\r\n              <CRow className=\"mb-2\">\r\n                <CFormLabel className=\"col-sm-6 col-form-label font-weight-bold\">\r\n                  {t(\"Name\")}\r\n                </CFormLabel>\r\n                <CFormLabel className=\"col-sm-3 col-form-label font-weight-bold\">\r\n                  {t(\"value\")}\r\n                </CFormLabel>\r\n                <CFormLabel className=\"col-sm-3 col-form-label text-center font-weight-bold\">\r\n                  {t(\"default\")}\r\n                </CFormLabel>\r\n              </CRow>\r\n              <CRow className=\"mb-2\">\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"branch_name_color\")}\r\n                </CFormLabel>\r\n                <CCol sm={2} className=\"text-left\">\r\n                  <input\r\n                    type=\"color\"\r\n                    onChange={handleInput}\r\n                    value={settings?.branch_name_color}\r\n                    name=\"branch_name_color\"\r\n                  />\r\n                </CCol>\r\n                <CCol sm={4} className=\"text-center\">\r\n                  <input type=\"color\" disabled value=\"#ff751d\" />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"branch_name_font_size\")}\r\n                </CFormLabel>\r\n                <CCol sm={2}>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    onChange={handleInput}\r\n                    value={settings?.branch_name_font_size}\r\n                    type=\"number\"\r\n                    name=\"branch_name_font_size\"\r\n                  />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-4 col-form-label text-center\"\r\n                >\r\n                  {t(\"14\")}\r\n                </CFormLabel>\r\n              </CRow>\r\n\r\n              <CRow className=\"mb-2\">\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"categories_and_sub_categoies_color\")}\r\n                </CFormLabel>\r\n                <CCol sm={3} className=\"text-left\">\r\n                  <input\r\n                    type=\"color\"\r\n                    onChange={handleInput}\r\n                    value={settings?.categories_and_sub_categoies_color}\r\n                    name=\"categories_and_sub_categoies_color\"\r\n                  />\r\n                </CCol>\r\n                <CCol sm={2} className=\"text-center\">\r\n                  <input type=\"color\" disabled value=\"#f1fcfe\" />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"categories_and_sub_categoies_font_size\")}\r\n                </CFormLabel>\r\n                <CCol sm={2}>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    onChange={handleInput}\r\n                    value={settings?.categories_and_sub_categoies_font_size}\r\n                    type=\"number\"\r\n                    name=\"categories_and_sub_categoies_font_size\"\r\n                  />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-4 col-form-label text-center\"\r\n                >\r\n                  {t(\"12\")}\r\n                </CFormLabel>\r\n              </CRow>\r\n\r\n              <CRow className=\"mb-2\">\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"product_name_color\")}\r\n                </CFormLabel>\r\n                <CCol sm={3} className=\"text-left\">\r\n                  <input\r\n                    type=\"color\"\r\n                    onChange={handleInput}\r\n                    value={settings?.product_name_color}\r\n                    name=\"product_name_color\"\r\n                  />\r\n                </CCol>\r\n                <CCol sm={2} className=\"text-center\">\r\n                  <input type=\"color\" disabled value=\"#ff751d\" />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"product_name_font_size\")}\r\n                </CFormLabel>\r\n                <CCol sm={2}>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    onChange={handleInput}\r\n                    value={settings?.product_name_font_size}\r\n                    type=\"number\"\r\n                    name=\"product_name_font_size\"\r\n                  />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-4 col-form-label text-center\"\r\n                >\r\n                  {t(\"12\")}\r\n                </CFormLabel>\r\n              </CRow>\r\n              <CRow className=\"mb-2\">\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"product_discription_color\")}\r\n                </CFormLabel>\r\n                <CCol sm={3} className=\"text-left\">\r\n                  <input\r\n                    type=\"color\"\r\n                    onChange={handleInput}\r\n                    value={settings?.product_discription_color}\r\n                    name=\"product_discription_color\"\r\n                  />\r\n                </CCol>\r\n                <CCol sm={2} className=\"text-center\">\r\n                  <input type=\"color\" disabled value=\"#777\" />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"product_discription_font_size\")}\r\n                </CFormLabel>\r\n                <CCol sm={2}>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    onChange={handleInput}\r\n                    value={settings?.product_discription_font_size}\r\n                    type=\"number\"\r\n                    name=\"product_discription_font_size\"\r\n                  />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-4 col-form-label text-center\"\r\n                >\r\n                  {t(\"10\")}\r\n                </CFormLabel>\r\n              </CRow>\r\n              <CRow className=\"mb-2\">\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"price_color\")}\r\n                </CFormLabel>\r\n                <CCol sm={3} className=\"text-left\">\r\n                  <input\r\n                    type=\"color\"\r\n                    onChange={handleInput}\r\n                    value={settings?.price_color}\r\n                    name=\"price_color\"\r\n                  />\r\n                </CCol>\r\n                <CCol sm={2} className=\"text-center\">\r\n                  <input type=\"color\" disabled value=\"#ff751d\" />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"price_font_size\")}\r\n                </CFormLabel>\r\n                <CCol sm={2}>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    onChange={handleInput}\r\n                    value={settings?.price_font_size}\r\n                    type=\"number\"\r\n                    name=\"price_font_size\"\r\n                  />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-4 col-form-label text-center\"\r\n                >\r\n                  {t(\"12\")}\r\n                </CFormLabel>\r\n              </CRow>\r\n              <CRow className=\"mb-2\">\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"button_text_color\")}\r\n                </CFormLabel>\r\n                <CCol sm={2} className=\"text-left\">\r\n                  <input\r\n                    type=\"color\"\r\n                    onChange={handleInput}\r\n                    value={settings?.button_text_color}\r\n                    // value={themes.TextColor}\r\n                    name=\"button_text_color\"\r\n                  />\r\n                </CCol>\r\n                <CCol sm={4} className=\"text-center\">\r\n                  <input\r\n                    type=\"color\"\r\n                    disabled\r\n                    // onChange={handleInput}\r\n                    value=\"#f1fcfe\"\r\n                  />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"button_background_color\")}\r\n                </CFormLabel>\r\n                <CCol sm={2} className=\"text-left\">\r\n                  <input\r\n                    type=\"color\"\r\n                    onChange={handleInput}\r\n                    value={settings?.button_background_color}\r\n                    //   value={themes.TextColor}\r\n                    name=\"button_background_color\"\r\n                  />\r\n                </CCol>\r\n                <CCol sm={4} className=\"text-center\">\r\n                  <input\r\n                    type=\"color\"\r\n                    disabled\r\n                    // onChange={handleInput}\r\n                    value=\"#ff751d\"\r\n                  />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"button_text_font_size\")}\r\n                </CFormLabel>\r\n                <CCol sm={2}>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    onChange={handleInput}\r\n                    value={settings?.button_text_font_size}\r\n                    type=\"number\"\r\n                    name=\"button_text_font_size\"\r\n                  />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-4 col-form-label text-center\"\r\n                >\r\n                  {t(\"12\")}\r\n                </CFormLabel>\r\n              </CRow>\r\n              <CRow className=\"mb-2\">\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"number_of_products_in_each_row\")}\r\n                </CFormLabel>\r\n                <CCol sm={2}>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    onChange={handleInput}\r\n                    type=\"number\"\r\n                    value={settings?.number_of_products_in_each_row}\r\n                    name=\"number_of_products_in_each_row\"\r\n                  />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-4 col-form-label text-center\"\r\n                >\r\n                  {t(\"2\")}\r\n                </CFormLabel>\r\n              </CRow>\r\n              <CRow>\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"mode\")}\r\n                </CFormLabel>\r\n\r\n                <CCol sm={2} className=\"text-left\">\r\n                  <RadioGroup\r\n                    row\r\n                    aria-label=\"dark\"\r\n                    defaultValue={settings?.mode ? settings.mode : \"dark\"}\r\n                    name=\"mode\"\r\n                    onChange={handleInput}\r\n                  >\r\n                    <FormControlLabel\r\n                      value=\"light\"\r\n                      control={<Radio />}\r\n                      label=\"Light\"\r\n                    />\r\n                    <FormControlLabel\r\n                      value=\"dark\"\r\n                      control={<Radio />}\r\n                      label=\"Dark\"\r\n                    />\r\n                  </RadioGroup>\r\n                </CCol>\r\n                <CCol sm={4} className=\"text-center\">\r\n                  <CFormLabel\r\n                    htmlFor=\"staticEmail\"\r\n                    className=\"col-sm-6 col-form-label \"\r\n                  >\r\n                    Dark\r\n                  </CFormLabel>\r\n                </CCol>\r\n              </CRow>\r\n              <CRow>\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"font\")}\r\n                </CFormLabel>\r\n\r\n                <CCol sm={2} className=\"text-left\">\r\n                  <FormControl fullWidth>\r\n                    <InputLabel id=\"demo-simple-select-label\">\r\n                      {t(\"fonts\")}\r\n                    </InputLabel>\r\n                    <Select\r\n                      labelId=\"demo-simple-select-label\"\r\n                      id=\"demo-simple-select\"\r\n                      //   value={age}\r\n                      label=\"fonts\"\r\n                      onChange={handleInput}\r\n                      name=\"font\"\r\n                      defaultValue={\r\n                        settings?.font ? settings.font : \"sans-serif\"\r\n                      }\r\n                    >\r\n                      <MenuItem value=\"-apple-system\">-apple-system</MenuItem>\r\n                      <MenuItem value=\"BlinkMacSystemFont\">\r\n                        BlinkMacSystemFont\r\n                      </MenuItem>\r\n                      <MenuItem value=\"Segoe UI\">Segoe UI</MenuItem>\r\n                      <MenuItem value=\"Roboto\">Roboto</MenuItem>\r\n                      <MenuItem value=\"Helvetica Neue\">Helvetica Neue</MenuItem>\r\n                      <MenuItem value=\"Arial\">Arial</MenuItem>\r\n                      <MenuItem value=\"sans-serif\">sans-serif</MenuItem>\r\n                      <MenuItem value=\"Apple Color Emoji\">\r\n                        Apple Color Emoji\r\n                      </MenuItem>\r\n                      <MenuItem value=\"Segoe UI Emoji\">Segoe UI Emoji</MenuItem>\r\n                      <MenuItem value=\"Segoe UI Symbol\">\r\n                        Segoe UI Symbol\r\n                      </MenuItem>\r\n                    </Select>\r\n                  </FormControl>\r\n                </CCol>\r\n                <CCol sm={4} className=\"text-center\">\r\n                  <CFormLabel\r\n                    htmlFor=\"staticEmail\"\r\n                    className=\"col-sm-6 col-form-label \"\r\n                  >\r\n                    sans-serif\r\n                  </CFormLabel>\r\n                </CCol>\r\n              </CRow>\r\n              <CRow>\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"show_preparation_time\")}\r\n                </CFormLabel>\r\n\r\n                <CCol sm={2} className=\"text-left\">\r\n                  <RadioGroup\r\n                    row\r\n                    aria-label=\"dark\"\r\n                    defaultValue={\r\n                      settings?.preparation_time\r\n                        ? settings.preparation_time\r\n                        : \"1\"\r\n                    }\r\n                    name=\"preparation_time\"\r\n                    onChange={handleInput}\r\n                  >\r\n                    <FormControlLabel\r\n                      value=\"1\"\r\n                      control={<Radio />}\r\n                      label=\"Yes\"\r\n                    />\r\n                    <FormControlLabel\r\n                      value=\"0\"\r\n                      control={<Radio />}\r\n                      label=\"No\"\r\n                    />\r\n                  </RadioGroup>\r\n                </CCol>\r\n                <CCol sm={4} className=\"text-center\">\r\n                  <CFormLabel\r\n                    htmlFor=\"staticEmail\"\r\n                    className=\"col-sm-6 col-form-label \"\r\n                  >\r\n                    Yes\r\n                  </CFormLabel>\r\n                </CCol>\r\n              </CRow>\r\n            </CCardBody>\r\n          </CCard>\r\n        </div>\r\n        <div className=\"col-5\">{viewPreview_HTMLTABLE}</div>\r\n      </div>\r\n      <div className=\"text-center mx-4 mb-4\">\r\n        <button className=\"btn btn-info m-1\" onClick={(e) => reset(e)}>\r\n          {t(\"reset_to_default\")}\r\n        </button>\r\n        <button className=\"btn btn-light m-1\" onClick={() => history.goBack()}>\r\n          {t(\"back\")}\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DefaultCustomization;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Products\\AddProduct.js",["415","416","417"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { Button, Modal, Form } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as yup from \"yup\";\r\nimport Select from \"react-select\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst AddProduct = (props) => {\r\n  const history = useHistory();\r\n\r\n  // for localization\r\n  const { t } = useTranslation();\r\n  const branchId = props.history.location.state.id;\r\n  // validation start\r\n  const schema = yup\r\n    .object()\r\n    .shape({\r\n      ProductName: yup.string().required(\"This field is a required field\"),\r\n      // UnitName: yup.string().required(\"This field is a required field\"),\r\n      category: yup.string().required(\"This field is a required field\"),\r\n      price: yup\r\n        .number()\r\n        .typeError(\"Amount must be a number\")\r\n        .required(\"Please provide plan cost.\")\r\n        .min(1, \"Too little\"),\r\n      stock: yup\r\n        .number()\r\n        .typeError(\"Amount must be a number\")\r\n        .required(\"Please provide plan cost.\")\r\n        .min(1, \"Too little\"),\r\n    })\r\n    .required();\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors },\r\n  } = useForm({\r\n    resolver: yupResolver(schema),\r\n  });\r\n\r\n  // validation End\r\n  const [modalCentered, setModalCentered] = useState(false);\r\n\r\n  const [imageState, setImageState] = useState([]);\r\n  const handleImage = (e) => {\r\n    setImageState({ ...imageState, photo: e.target.files[0] });\r\n  };\r\n  const [productInsert, setProductInsert] = useState([]);\r\n  const handleInput = (e) => {\r\n    e.persist();\r\n    setProductInsert({ ...productInsert, [e.target.name]: e.target.value });\r\n  };\r\n  const saveProduct = (e) => {\r\n    const formData = new FormData();\r\n    formData.append(\"image\", imageState.photo);\r\n    formData.append(\"Description\", productInsert.Description);\r\n    formData.append(\"ProductName\", productInsert.ProductName);\r\n    formData.append(\"sub_category\", productInsert.sub_category);\r\n    formData.append(\"category\", productInsert.category);\r\n    formData.append(\"price\", productInsert.price);\r\n    formData.append(\"stock\", productInsert.stock);\r\n    formData.append(\"preparationTime\", productInsert.preparationTime);\r\n    formData.append(\"ingredients\", JSON.stringify(productIngredient));\r\n    formData.append(\"extras\", JSON.stringify(productExtra));\r\n    formData.append(\"recommendations\", JSON.stringify(productRecom));\r\n    formData.append(\"UnitName\", productInsert.UnitName);\r\n    axios.post(`/api/InsertProducts`, formData).then((res) => {\r\n      if (res.data.status === 200) {\r\n        reset();\r\n        swal(\"Success\", res.data.message, \"success\").then((check) => {\r\n          if (check) {\r\n            history.push({\r\n              pathname: `/branches/show/products`,\r\n              state: { id: branchId },\r\n            });\r\n          }\r\n        });\r\n      }\r\n    });\r\n  };\r\n  const [insert, setInsert] = useState({\r\n    name: \"\",\r\n  });\r\n\r\n  const handleInputIngredients = (e) => {\r\n    e.persist();\r\n    setInsert({ ...insert, [e.target.name]: e.target.value });\r\n  };\r\n  const save = (e) => {\r\n    e.preventDefault();\r\n    axios.post(\"/api/InsertIngredient\", insert).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setInsert({\r\n          name: \"\",\r\n        });\r\n        setCheck(!check);\r\n\r\n        setModalCentered(false);\r\n\r\n        swal(\"Success\", res.data.message, \"success\");\r\n      }\r\n    });\r\n  };\r\n  //for retriving data using laravel API\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [subCategories, setSubCategories] = useState([]);\r\n  const [categories, setCategories] = useState([]);\r\n  const [intgredients, setIntgredients] = useState([]);\r\n  const [check, setCheck] = useState(true);\r\n\r\n  useEffect(() => {\r\n    axios.post(`/api/GetIngredient`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setIntgredients(res.data.fetchData);\r\n      }\r\n    });\r\n    axios.get(`/api/GetCategories/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setCategories(res.data.fetchData);\r\n      }\r\n    });\r\n    axios.get(`/api/GetProducts/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setFetchData(res.data.fetchData);\r\n      }\r\n      setLoading(false);\r\n    });\r\n  }, [check]);\r\n  const [productIngredient, setProductIngredient] = useState([]);\r\n  const handleSelectEvent = (e) => {\r\n    setProductIngredient(e);\r\n  };\r\n  const [productExtra, setProductExtra] = useState([]);\r\n  const handleSelectEventExtra = (e) => {\r\n    setProductExtra(e);\r\n  };\r\n  // const [extraPrices, setextraPrices] = useState({});\r\n\r\n  const extraHandle = (e, id) => {\r\n    let updatedList = productExtra.map((item) => {\r\n      if (item.id == id) {\r\n        return { ...item, price: e.target.value }; //gets everything that was already in item, and updates \"done\"\r\n      }\r\n      return item; // else return unmodified item\r\n    });\r\n    setProductExtra(updatedList);\r\n  };\r\n  const [productRecom, setProductRecom] = useState([]);\r\n  const handleSelectEventRecom = (e) => {\r\n    setProductRecom(e);\r\n  };\r\n  const getSubCategories = (e) => {\r\n    e.preventDefault();\r\n    axios\r\n      .get(\r\n        `/api/GetSubCategories/${e.target.value == \"\" ? null : e.target.value}`\r\n      )\r\n      .then((res) => {\r\n        if (res.data.status === 200) {\r\n          setSubCategories(res.data.fetchData);\r\n        }\r\n      });\r\n    setProductInsert({ ...productInsert, [e.target.name]: e.target.value });\r\n  };\r\n  var viewProducts_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"spinner-border text-primary \" role=\"status\">\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewProducts_HTMLTABLE = (\r\n      <div className=\"card\">\r\n        <div className=\"card-header\">\r\n          <div>\r\n            <h4 className=\"card-title\">{t(\"add_product\")}</h4>\r\n          </div>\r\n        </div>\r\n        <div className=\"card-body\">\r\n          <Form onSubmit={handleSubmit(saveProduct)} method=\"POST\">\r\n            <div className=\"row\">\r\n              <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    <strong>{t(\"categories\")}</strong>\r\n                  </label>\r\n                  <select\r\n                    type=\"text\"\r\n                    {...register(\"category\")}\r\n                    className={\r\n                      errors.category?.message\r\n                        ? \"form-control  is-invalid\"\r\n                        : \"form-control\"\r\n                    }\r\n                    placeholder={t(\"category\")}\r\n                    name=\"category\"\r\n                    // onChange={handleInput}\r\n                    value={productInsert.category}\r\n                    onChange={(e) => [getSubCategories(e)]}\r\n                  >\r\n                    <option value=\"\">{t(\"select_a_option\")}</option>\r\n                    {categories.map((item) => (\r\n                      <option value={item.id} key={item.id}>\r\n                        {item.CategoryName}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                  {errors.category?.message && (\r\n                    <div className=\"invalid-feedback\">\r\n                      {errors.category?.message}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n\r\n              <div\r\n                className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12 disable\"\r\n                disabled=\"\"\r\n              >\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    <strong>{t(\"sub_categories\")}</strong>\r\n                  </label>\r\n                  <select\r\n                    disabled={subCategories.length === 0 ? \"disabled\" : \"\"}\r\n                    type=\"text\"\r\n                    {...register(\"sub_category\")}\r\n                    className={\r\n                      errors.sub_category?.message\r\n                        ? \"form-control  is-invalid\"\r\n                        : \"form-control\"\r\n                    }\r\n                    placeholder={t(\"sub_category\")}\r\n                    name=\"sub_category\"\r\n                    onChange={handleInput}\r\n                    value={productInsert.sub_category}\r\n                  >\r\n                    <option value=\"\">{t(\"select_a_option\")}</option>\r\n                    {subCategories.map((item) => (\r\n                      <option value={item.sub_id} key={item.sub_id}>\r\n                        {item.SubCategoryName}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                  {errors.sub_category?.message && (\r\n                    <div className=\"invalid-feedback\">\r\n                      {errors.sub_category?.message}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    {\" \"}\r\n                    <strong>{t(\"unit\")}</strong>{\" \"}\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    {...register(\"UnitName\")}\r\n                    className={\r\n                      errors.UnitName?.message\r\n                        ? \"form-control  is-invalid\"\r\n                        : \"form-control\"\r\n                    }\r\n                    placeholder={t(\"Number, KGR...\")}\r\n                    name=\"UnitName\"\r\n                    onChange={handleInput}\r\n                    value={productInsert.UnitName}\r\n                  />\r\n\r\n                  {errors.UnitName?.message && (\r\n                    <div className=\"invalid-feedback\">\r\n                      {errors.UnitName?.message}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    {\" \"}\r\n                    <strong>{t(\"product_name\")}</strong>{\" \"}\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    {...register(\"ProductName\")}\r\n                    className={\r\n                      errors.ProductName?.message\r\n                        ? \"form-control  is-invalid\"\r\n                        : \"form-control\"\r\n                    }\r\n                    placeholder={t(\"product_name\")}\r\n                    name=\"ProductName\"\r\n                    onChange={handleInput}\r\n                    value={productInsert.ProductName}\r\n                  />\r\n                  {errors.ProductName?.message && (\r\n                    <div className=\"invalid-feedback\">\r\n                      {errors.ProductName?.message}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    {\" \"}\r\n                    <strong>{t(\"description\")}</strong>{\" \"}\r\n                  </label>\r\n                  <textarea\r\n                    type=\"text\"\r\n                    {...register(\"Description\")}\r\n                    className={\r\n                      errors.Description?.message\r\n                        ? \"form-control  is-invalid\"\r\n                        : \"form-control\"\r\n                    }\r\n                    placeholder={t(\"description\")}\r\n                    name=\"Description\"\r\n                    onChange={handleInput}\r\n                    value={productInsert.Description}\r\n                  />\r\n                  {errors.Description?.message && (\r\n                    <div className=\"invalid-feedback\">\r\n                      {errors.Description?.message}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    {\" \"}\r\n                    <strong>{t(\"price\")}</strong>{\" \"}\r\n                  </label>\r\n                  <input\r\n                    type=\"number\"\r\n                    {...register(\"price\")}\r\n                    className={\r\n                      errors.price?.message\r\n                        ? \"form-control  is-invalid\"\r\n                        : \"form-control\"\r\n                    }\r\n                    placeholder={t(\"price\")}\r\n                    name=\"price\"\r\n                    min=\"0\"\r\n                    onChange={handleInput}\r\n                    value={productInsert.price}\r\n                  />\r\n                  {errors.price?.message && (\r\n                    <div className=\"invalid-feedback\">\r\n                      {errors.price?.message}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    {\" \"}\r\n                    <strong>{t(\"stock\")}</strong>{\" \"}\r\n                  </label>\r\n                  <input\r\n                    type=\"number\"\r\n                    {...register(\"stock\")}\r\n                    className={\r\n                      errors.stock?.message\r\n                        ? \"form-control  is-invalid\"\r\n                        : \"form-control\"\r\n                    }\r\n                    placeholder={t(\"stock\")}\r\n                    name=\"stock\"\r\n                    onChange={handleInput}\r\n                    value={productInsert.stock}\r\n                  />\r\n                  {errors.stock?.message && (\r\n                    <div className=\"invalid-feedback\">\r\n                      {errors.stock?.message}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    <strong>{t(\"preparation_Time\")}(Minutes)</strong>\r\n                  </label>\r\n                  <input\r\n                    type=\"number\"\r\n                    {...register(\"preparationTime\")}\r\n                    className={\r\n                      errors.preparationTime?.message\r\n                        ? \"form-control  is-invalid\"\r\n                        : \"form-control\"\r\n                    }\r\n                    name=\"preparationTime\"\r\n                    placeholder=\"30\"\r\n                    onChange={handleInput}\r\n                    value={productInsert.preparationTime}\r\n                  />\r\n                  {errors.preparationTime?.message && (\r\n                    <div className=\"invalid-feedback\">\r\n                      {errors.preparationTime?.message}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    {\" \"}\r\n                    <strong>{t(\"image\")}</strong>{\" \"}\r\n                  </label>\r\n                  <input\r\n                    type=\"file\"\r\n                    className=\"form-control\"\r\n                    placeholder={t(\"image\")}\r\n                    name=\"photo\"\r\n                    required\r\n                    onChange={handleImage}\r\n                  />\r\n                  {/* </div> */}\r\n                </div>\r\n              </div>\r\n              <div className=\"col-xl-12 col-xxl-12 col-lg-12 col-sm-12\">\r\n                <div className=\"form-group\">\r\n                  <div className=\"d-flex justify-content-between\">\r\n                    <label className=\"mb-1 \">\r\n                      <strong>{t(\"ingredients\")}</strong>\r\n                    </label>\r\n                    <small\r\n                      onClick={() => setModalCentered(true)}\r\n                      style={{ cursor: \"pointer\" }}\r\n                    >\r\n                      {t(\"add_ingredient\")}\r\n                    </small>\r\n                  </div>\r\n                  <Select\r\n                    isMulti\r\n                    options={intgredients?.map((o, i) => {\r\n                      return { id: i, value: o.id, label: o.name };\r\n                    })}\r\n                    onChange={handleSelectEvent}\r\n                    className=\"basic-multi-select\"\r\n                    classNamePrefix=\"select\"\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"col-xl-12 col-xxl-12 col-lg-12 col-sm-12\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    <strong>{t(\"extras\")}</strong>\r\n                    <small>\r\n                      (Please first choose the fields and then set the input\r\n                      values.)\r\n                    </small>\r\n                  </label>\r\n\r\n                  <Select\r\n                    isMulti\r\n                    options={intgredients?.map((o, i) => {\r\n                      return { id: i, value: o.id, label: o.name, price: 0 };\r\n                    })}\r\n                    onChange={handleSelectEventExtra}\r\n                    className=\"basic-multi-select\"\r\n                    classNamePrefix=\"select\"\r\n                  />\r\n                </div>\r\n              </div>\r\n              {productExtra?.map((item, i) => {\r\n                return (\r\n                  <div className=\"col-xl-3 col-xxl-3 col-lg-3 col-sm-3\" key={i}>\r\n                    <div className=\"form-group\">\r\n                      <label className=\"mb-1 \">\r\n                        <strong>{item.label}</strong>\r\n                      </label>\r\n                      <input\r\n                        type=\"number\"\r\n                        min=\"0\"\r\n                        className=\"form-control\"\r\n                        onChange={(e) => extraHandle(e, item.id)}\r\n                        value={productExtra[i].price}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n\r\n              <div className=\"col-xl-12 col-xxl-12 col-lg-12 col-sm-12\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    <strong>{t(\"recommendation_products\")}</strong>\r\n                  </label>\r\n                  <Select\r\n                    isMulti\r\n                    options={fetchData?.map((o, i) => {\r\n                      return {\r\n                        price: o.price,\r\n                        value: o.id,\r\n                        label: o.ProductName,\r\n                        qty: 1,\r\n                      };\r\n                    })}\r\n                    onChange={handleSelectEventRecom}\r\n                    className=\"basic-multi-select\"\r\n                    classNamePrefix=\"select\"\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"card-footer\">\r\n              <Button\r\n                variant=\"danger light\"\r\n                className=\"m-1\"\r\n                onClick={() => history.goBack()}\r\n              >\r\n                {t(\"back\")}\r\n              </Button>\r\n              <Button variant=\"primary\" type=\"submit\">\r\n                {t(\"save\")}{\" \"}\r\n              </Button>\r\n            </div>\r\n          </Form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Fragment>\r\n        <div className=\"m-1\">\r\n          <Button\r\n            variant=\"danger light\"\r\n            className=\"m-1\"\r\n            onClick={() => history.goBack()}\r\n          >\r\n            List of Products\r\n          </Button>\r\n        </div>\r\n        {viewProducts_HTMLTABLE}\r\n\r\n        <Modal className=\"fade\" show={modalCentered}>\r\n          <Form onSubmit={save} method=\"POST\" encType=\"multipart/form-data\">\r\n            <Modal.Header>\r\n              <Modal.Title>{t(\"add_ingredient\")}</Modal.Title>\r\n              <Button\r\n                onClick={() => setModalCentered(false)}\r\n                variant=\"\"\r\n                className=\"close\"\r\n              >\r\n                <span>&times;</span>\r\n              </Button>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n              <div className=\"form-group\">\r\n                <label className=\"mb-1 \">\r\n                  {\" \"}\r\n                  <strong>{t(\"name\")} </strong>{\" \"}\r\n                </label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  placeholder={t(\"name\")}\r\n                  name=\"name\"\r\n                  onChange={handleInputIngredients}\r\n                  value={insert.name}\r\n                />\r\n              </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n              <Button\r\n                onClick={() => setModalCentered(false)}\r\n                variant=\"danger light\"\r\n              >\r\n                {t(\"close\")}\r\n              </Button>\r\n              <Button variant=\"primary\" type=\"submit\">\r\n                {t(\"save\")}\r\n              </Button>\r\n            </Modal.Footer>\r\n          </Form>\r\n        </Modal>\r\n      </Fragment>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddProduct;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Products\\EditProduct.js",["418","419","420","421","422"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { Button, Modal, Form } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as yup from \"yup\";\r\nimport { base_url, port } from \"../../../Consts\";\r\nimport { useRouteMatch } from \"react-router-dom\";\r\nimport Select from \"react-select\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst EditProduct = (props) => {\r\n  const history = useHistory();\r\n\r\n  const { path, url } = useRouteMatch();\r\n  // validation start\r\n  const schema = yup\r\n    .object()\r\n    .shape({\r\n      // Description: yup.string().required(\"This field is a required field\"),\r\n      ProductName: yup.string().required(\"This field is a required field\"),\r\n      // UnitID: yup.string().required(\"This field is a required field\"),\r\n      category_id: yup.string().required(\"This field is a required field\"),\r\n      price: yup\r\n        .number()\r\n        .typeError(\"Amount must be a number\")\r\n        .required(\"Please provide plan cost.\")\r\n        .min(1, \"Too little\"),\r\n      stock: yup\r\n        .number()\r\n        .typeError(\"Amount must be a number\")\r\n        .required(\"Please provide plan cost.\")\r\n        .min(1, \"Too little\"),\r\n      // preparationTime: yup.number().required(\"This field is a required field\"),\r\n    })\r\n    .required();\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm({\r\n    resolver: yupResolver(schema),\r\n  });\r\n  // validation End\r\n  // for localization\r\n  const { t } = useTranslation();\r\n  const branchId = props.history.location.state.id;\r\n  const productId = props.history.location.state.productId;\r\n\r\n  const [modalCentered, setModalCentered] = useState(false);\r\n  const [insert, setInsert] = useState({\r\n    name: \"\",\r\n  });\r\n  const handleInputIngredients = (e) => {\r\n    e.persist();\r\n    setInsert({ ...insert, [e.target.name]: e.target.value });\r\n  };\r\n  const save = (e) => {\r\n    e.preventDefault();\r\n    axios.post(\"/api/InsertIngredient\", insert).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setInsert({\r\n          name: \"\",\r\n        });\r\n        setCheck(!check);\r\n        setModalCentered(false);\r\n        swal(\"Success\", res.data.message, \"success\");\r\n      }\r\n    });\r\n  };\r\n  // insert modal\r\n  const [imageState, setImageState] = useState([]);\r\n  const handleImage = (e) => {\r\n    setImageState({ ...imageState, photo: e.target.files[0] });\r\n  };\r\n  // edit Start\r\n  const [editProduct, setEditProduct] = useState([]);\r\n  const editHandleInput = (e) => {\r\n    e.persist();\r\n    setEditProduct({ ...editProduct, [e.target.name]: e.target.value });\r\n  };\r\n  const updateProduct = (e) => {\r\n    const formData = new FormData();\r\n    formData.append(\"image\", imageState.photo);\r\n    formData.append(\"Description\", editProduct.Description);\r\n    formData.append(\"ProductName\", editProduct.ProductName);\r\n    formData.append(\"UnitName\", editProduct.UnitName);\r\n    formData.append(\"price\", editProduct.price);\r\n    formData.append(\"stock\", editProduct.stock);\r\n    formData.append(\"preparationTime\", editProduct.preparationTime);\r\n    formData.append(\"ingredients\", JSON.stringify(productIngredient));\r\n    formData.append(\"extras\", JSON.stringify(productExtra));\r\n    formData.append(\"recommendations\", JSON.stringify(productRecom));\r\n    formData.append(\"sub_category\", editProduct.sub_category_id);\r\n    formData.append(\"category\", editProduct.category_id);\r\n    formData.append(\"id\", editProduct.id);\r\n    axios.post(\"/api/UpdateProduct\", formData).then((res) => {\r\n      if (res.data.status === 200) {\r\n        swal(\"Success\", res.data.message, \"success\").then((check) => {\r\n          if (check) {\r\n            history.push({\r\n              pathname: `/branches/show/products`,\r\n              state: { id: branchId },\r\n            });\r\n          }\r\n        });\r\n        setCheck(!check);\r\n      }\r\n    });\r\n  };\r\n  // edit ENd\r\n  //for retriving data using laravel API\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [subCategories, setSubCategories] = useState([]);\r\n  const [categories, setCategories] = useState([]);\r\n  const [intgredients, setIntgredients] = useState([]);\r\n  const [productIngredient, setProductIngredient] = useState([]);\r\n  const [check, setCheck] = useState(true);\r\n\r\n  const handleSelectEvent = (e) => {\r\n    setProductIngredient(e);\r\n  };\r\n  const [productExtra, setProductExtra] = useState([]);\r\n  const handleSelectEventExtra = (e) => {\r\n    setProductExtra(e);\r\n  };\r\n  const extraHandle = (e, id) => {\r\n    let updatedList = productExtra.map((item) => {\r\n      if (item.id == id) {\r\n        return { ...item, price: e.target.value }; //gets everything that was already in item, and updates \"done\"\r\n      }\r\n      return item; // else return unmodified item\r\n    });\r\n    setProductExtra(updatedList);\r\n    console.log(productExtra);\r\n  };\r\n  const [productRecom, setProductRecom] = useState([]);\r\n  const handleSelectEventRecom = (e) => {\r\n    setProductRecom(e);\r\n  };\r\n  useEffect(() => {\r\n    axios.post(`/api/GetIngredient`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setIntgredients(res.data.fetchData);\r\n      }\r\n    });\r\n    axios.get(`/api/GetCategories/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setCategories(res.data.fetchData);\r\n      }\r\n    });\r\n\r\n    axios.get(`/api/GetProducts/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setFetchData(res.data.fetchData);\r\n      }\r\n    });\r\n    axios.get(`/api/EditProducts/${productId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setEditProduct(res.data.product);\r\n        setProductIngredient(JSON.parse(res.data.product.ingredients));\r\n        setProductExtra(JSON.parse(res.data.product.extras));\r\n        setProductRecom(JSON.parse(res.data.product.recommendations));\r\n        console.log(res.data.product);\r\n        axios\r\n          .get(`/api/GetSubCategories/${res.data.product.category_id}`)\r\n          .then((res) => {\r\n            if (res.data.status === 200) {\r\n              setSubCategories(res.data.fetchData);\r\n              // console.log(res.data.fetchData);\r\n            }\r\n          });\r\n        setLoading(false);\r\n      } else if (res.data.status === 404) {\r\n        swal(\"Error\", res.data.message, \"error\");\r\n      }\r\n    });\r\n  }, [check]);\r\n  const getSubCategories = (e) => {\r\n    e.preventDefault();\r\n    axios\r\n      .get(\r\n        `/api/GetSubCategories/${e.target.value == \"\" ? null : e.target.value}`\r\n      )\r\n      .then((res) => {\r\n        if (res.data.status === 200) {\r\n          setSubCategories(res.data.fetchData);\r\n        }\r\n      });\r\n    setEditProduct({ ...editProduct, [e.target.name]: e.target.value });\r\n  };\r\n  var viewProducts_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"spinner-border text-primary \" role=\"status\">\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewProducts_HTMLTABLE = (\r\n      <div className=\"card\">\r\n        <div className=\"card-header\">\r\n          <div>\r\n            <h4 className=\"card-title\">{t(\"edit_product\")}</h4>\r\n          </div>\r\n        </div>\r\n        <div className=\"card-body\">\r\n          <Form onSubmit={handleSubmit(updateProduct)} method=\"POST\">\r\n            <div className=\"row\">\r\n              <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    {\" \"}\r\n                    <strong>{t(\"categories\")}</strong>{\" \"}\r\n                  </label>\r\n                  <select\r\n                    type=\"text\"\r\n                    {...register(\"category_id\")}\r\n                    className={\r\n                      errors.category_id?.message\r\n                        ? \"form-control  is-invalid\"\r\n                        : \"form-control\"\r\n                    }\r\n                    placeholder={t(\"category_id\")}\r\n                    name=\"category_id\"\r\n                    onChange={(e) => [getSubCategories(e)]}\r\n                    value={editProduct.category_id}\r\n                  >\r\n                    <option value=\"\">{t(\"select_a_option\")}</option> )\r\n                    {categories.map((item) => (\r\n                      <option value={item.id} key={item.id}>\r\n                        {item.CategoryName}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                  {errors.category_id?.message && (\r\n                    <div className=\"invalid-feedback\">\r\n                      {errors.category_id?.message}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    {\" \"}\r\n                    <strong>{t(\"sub_categories\")}</strong>{\" \"}\r\n                  </label>\r\n                  <select\r\n                    type=\"text\"\r\n                    disabled={subCategories.length === 0 ? \"disabled\" : \"\"}\r\n                    {...register(\"sub_category_id\")}\r\n                    className={\r\n                      errors.sub_category_id?.message\r\n                        ? \"form-control  is-invalid\"\r\n                        : \"form-control\"\r\n                    }\r\n                    placeholder={t(\"sub_category\")}\r\n                    name=\"sub_category_id\"\r\n                    onChange={editHandleInput}\r\n                    value={editProduct.sub_category_id}\r\n                  >\r\n                    <option value=\"\">{t(\"select_a_option\")}</option> )\r\n                    {subCategories.map((item) => (\r\n                      <option value={item.sub_id} key={item.sub_id}>\r\n                        {item.SubCategoryName}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                  {errors.sub_category_id?.message && (\r\n                    <div className=\"invalid-feedback\">\r\n                      {errors.sub_category_id?.message}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    {\" \"}\r\n                    <strong>{t(\"unit\")}</strong>{\" \"}\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    {...register(\"UnitName\")}\r\n                    className={\r\n                      errors.UnitName?.message\r\n                        ? \"form-control  is-invalid\"\r\n                        : \"form-control\"\r\n                    }\r\n                    placeholder={t(\"UnitName\")}\r\n                    name=\"UnitName\"\r\n                    onChange={editHandleInput}\r\n                    value={editProduct.UnitName}\r\n                  />\r\n                  {errors.UnitName?.message && (\r\n                    <div className=\"invalid-feedback\">\r\n                      {errors.UnitName?.message}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    {\" \"}\r\n                    <strong>{t(\"product_name\")}</strong>{\" \"}\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    {...register(\"ProductName\")}\r\n                    className={\r\n                      errors.ProductName?.message\r\n                        ? \"form-control  is-invalid\"\r\n                        : \"form-control\"\r\n                    }\r\n                    placeholder={t(\"product_name\")}\r\n                    name=\"ProductName\"\r\n                    onChange={editHandleInput}\r\n                    value={editProduct.ProductName}\r\n                  />\r\n                  {errors.ProductName?.message && (\r\n                    <div className=\"invalid-feedback\">\r\n                      {errors.ProductName?.message}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    {\" \"}\r\n                    <strong>{t(\"description\")}</strong>{\" \"}\r\n                  </label>\r\n                  <textarea\r\n                    type=\"text\"\r\n                    {...register(\"Description\")}\r\n                    className={\r\n                      errors.Description?.message\r\n                        ? \"form-control  is-invalid\"\r\n                        : \"form-control\"\r\n                    }\r\n                    placeholder={t(\"description\")}\r\n                    name=\"Description\"\r\n                    onChange={editHandleInput}\r\n                    value={editProduct.Description}\r\n                  />\r\n                  {errors.Description?.message && (\r\n                    <div className=\"invalid-feedback\">\r\n                      {errors.Description?.message}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    {\" \"}\r\n                    <strong>{t(\"price\")}</strong>{\" \"}\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    {...register(\"price\")}\r\n                    className={\r\n                      errors.price?.message\r\n                        ? \"form-control  is-invalid\"\r\n                        : \"form-control\"\r\n                    }\r\n                    placeholder={t(\"price\")}\r\n                    name=\"price\"\r\n                    onChange={editHandleInput}\r\n                    value={editProduct.price}\r\n                  />\r\n                  {errors.price?.message && (\r\n                    <div className=\"invalid-feedback\">\r\n                      {errors.price?.message}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    {\" \"}\r\n                    <strong>{t(\"stock\")}</strong>{\" \"}\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    {...register(\"stock\")}\r\n                    className={\r\n                      errors.stock?.message\r\n                        ? \"form-control  is-invalid\"\r\n                        : \"form-control\"\r\n                    }\r\n                    placeholder={t(\"stock\")}\r\n                    name=\"stock\"\r\n                    onChange={editHandleInput}\r\n                    value={editProduct.stock}\r\n                  />\r\n                  {errors.stock?.message && (\r\n                    <div className=\"invalid-feedback\">\r\n                      {errors.stock?.message}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    <strong>{t(\"preparation_Time\")}(Minutes)</strong>\r\n                  </label>\r\n                  <input\r\n                    type=\"number\"\r\n                    {...register(\"preparationTime\")}\r\n                    className={\r\n                      errors.preparationTime?.message\r\n                        ? \"form-control  is-invalid\"\r\n                        : \"form-control\"\r\n                    }\r\n                    name=\"preparationTime\"\r\n                    placeholder=\"30 Minutes\"\r\n                    onChange={editHandleInput}\r\n                    value={editProduct.preparationTime}\r\n                  />\r\n                  {errors.preparationTime?.message && (\r\n                    <div className=\"invalid-feedback\">\r\n                      {errors.preparationTime?.message}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    {\" \"}\r\n                    <strong>{t(\"image\")}</strong>{\" \"}\r\n                  </label>\r\n                  <div className=\"input-group\">\r\n                    <div className=\"custom-file\">\r\n                      <input\r\n                        type=\"file\"\r\n                        className=\"form-control\"\r\n                        placeholder={t(\"image\")}\r\n                        name=\"photo\"\r\n                        onChange={handleImage}\r\n                      />\r\n                      <img\r\n                        src={`http://${base_url}:${port}/images/products/${editProduct.image}`}\r\n                        width=\"70\"\r\n                        alt=\" \"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"col-xl-12 col-xxl-12 col-lg-12 col-sm-12\">\r\n                <div className=\"form-group\">\r\n                  <div className=\"d-flex justify-content-between\">\r\n                    <label className=\"mb-1 \">\r\n                      <strong>{t(\"ingredients\")}</strong>\r\n                    </label>\r\n                    <small\r\n                      onClick={() => setModalCentered(true)}\r\n                      style={{ cursor: \"pointer\" }}\r\n                    >\r\n                      {t(\"add_ingredient\")}\r\n                    </small>\r\n                  </div>\r\n                  <Select\r\n                    defaultValue={productIngredient}\r\n                    isMulti\r\n                    options={intgredients?.map((o, i) => {\r\n                      return { id: i, value: o.id, label: o.name };\r\n                    })}\r\n                    onChange={handleSelectEvent}\r\n                    className=\"basic-multi-select\"\r\n                    classNamePrefix=\"select\"\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"col-xl-12 col-xxl-12 col-lg-12 col-sm-12\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    <strong>{t(\"extras\")}</strong>\r\n                    <small>\r\n                      (Please first choose the fields and then set the input\r\n                      values.)\r\n                    </small>\r\n                  </label>\r\n                  <Select\r\n                    defaultValue={productExtra}\r\n                    isMulti\r\n                    options={intgredients?.map((o, i) => {\r\n                      return { id: i, value: o.id, label: o.name, price: 0 };\r\n                    })}\r\n                    onChange={handleSelectEventExtra}\r\n                    className=\"basic-multi-select\"\r\n                    classNamePrefix=\"select\"\r\n                  />\r\n                </div>\r\n              </div>\r\n              {productExtra?.map((item, i) => {\r\n                return (\r\n                  <div className=\"col-xl-3 col-xxl-3 col-lg-3 col-sm-3\" key={i}>\r\n                    <div className=\"form-group\">\r\n                      <label className=\"mb-1 \">\r\n                        <strong>{item.label}</strong>\r\n                      </label>\r\n                      <input\r\n                        type=\"number\"\r\n                        className=\"form-control\"\r\n                        onChange={(e) => extraHandle(e, item.id)}\r\n                        value={productExtra[i].price}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n\r\n              <div className=\"col-xl-12 col-xxl-12 col-lg-12 col-sm-12\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    <strong>{t(\"recommendation_roducts\")}</strong>\r\n                  </label>\r\n                  <Select\r\n                    defaultValue={productRecom}\r\n                    isMulti\r\n                    options={fetchData?.map((o, i) => {\r\n                      return {\r\n                        price: o.price,\r\n                        value: o.id,\r\n                        label: o.ProductName,\r\n                        qty: 1,\r\n                      };\r\n                    })}\r\n                    onChange={handleSelectEventRecom}\r\n                    className=\"basic-multi-select\"\r\n                    classNamePrefix=\"select\"\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"card-footer\">\r\n              <Button\r\n                variant=\"danger light\"\r\n                className=\"m-1\"\r\n                onClick={() => history.goBack()}\r\n              >\r\n                {t(\"back\")}\r\n              </Button>\r\n              <Button variant=\"primary\" type=\"submit\">\r\n                {t(\"update\")}{\" \"}\r\n              </Button>\r\n            </div>\r\n          </Form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Fragment>\r\n        <div className=\"m-1\">\r\n          <Button\r\n            variant=\"danger light\"\r\n            className=\"m-1\"\r\n            onClick={() => history.goBack()}\r\n          >\r\n            List of Products\r\n          </Button>\r\n        </div>\r\n        {viewProducts_HTMLTABLE}\r\n        <Modal className=\"fade\" show={modalCentered}>\r\n          <Form onSubmit={save} method=\"POST\" encType=\"multipart/form-data\">\r\n            <Modal.Header>\r\n              <Modal.Title>{t(\"add_ingredient\")}</Modal.Title>\r\n              <Button\r\n                onClick={() => setModalCentered(false)}\r\n                variant=\"\"\r\n                className=\"close\"\r\n              >\r\n                <span>&times;</span>\r\n              </Button>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n              <div className=\"form-group\">\r\n                <label className=\"mb-1 \">\r\n                  {\" \"}\r\n                  <strong>{t(\"name\")} </strong>{\" \"}\r\n                </label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  placeholder={t(\"name\")}\r\n                  name=\"name\"\r\n                  onChange={handleInputIngredients}\r\n                  value={insert.name}\r\n                />\r\n              </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n              <Button\r\n                onClick={() => setModalCentered(false)}\r\n                variant=\"danger light\"\r\n              >\r\n                {t(\"close\")}\r\n              </Button>\r\n              <Button variant=\"primary\" type=\"submit\">\r\n                {t(\"save\")}\r\n              </Button>\r\n            </Modal.Footer>\r\n          </Form>\r\n        </Modal>\r\n      </Fragment>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EditProduct;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\layouts\\nav\\NavHader.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\layouts\\nav\\Header.js",["423"],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\layouts\\nav\\SideBar.js",["424"],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\EditTheme.js",["425","426"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CRow,\r\n  CFormLabel,\r\n  CCol,\r\n} from \"@coreui/react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport circle_menu_button from \"../../../images/hellomenu/circle_menu_button.png\";\r\nimport pill_menu_button from \"../../../images/hellomenu/pill_menu_button.png\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport Switch from \"@mui/material/Switch\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { FormControlLabel, RadioGroup, Radio } from \"@mui/material\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst EditTheme = (props) => {\r\n  const { t } = useTranslation();\r\n  const history = useHistory();\r\n  const id = props.history.location.state.id;\r\n\r\n  const [homeScreen, setHomeScreen] = useState(false);\r\n  const [menuScreen, setMenuScreen] = useState(false);\r\n  const [buttonShow, setButtonShow] = useState(1);\r\n  const [imageState, setImageState] = useState([]);\r\n  const handleImage = (e) => {\r\n    setImageState({ ...imageState, HomeScreenBackground: e.target.files[0] });\r\n  };\r\n  const [imageStateMenu, setImageStateMenu] = useState([]);\r\n  const handleImageMenu = (e) => {\r\n    setImageStateMenu({\r\n      ...imageStateMenu,\r\n      MenuScreenBackground: e.target.files[0],\r\n    });\r\n  };\r\n  // update Start\r\n  const [themes, setThemes] = useState([]);\r\n  const handleInput = (e) => {\r\n    e.persist();\r\n    setThemes({ ...themes, [e.target.name]: e.target.value });\r\n  };\r\n  const update = (e) => {\r\n    e.preventDefault();\r\n    // console.log(themes);\r\n    const formData = new FormData();\r\n    formData.append(\"HomeScreenBackground\", imageState.HomeScreenBackground);\r\n    formData.append(\r\n      \"MenuScreenBackground\",\r\n      imageStateMenu.MenuScreenBackground\r\n    );\r\n    formData.append(\"ThemeName\", themes.ThemeName);\r\n    // formData.append(\"Orientation\", themes.Orientation);\r\n    // formData.append(\"MenuStructure\", themes.MenuStructure);\r\n    formData.append(\"TextColor\", themes.TextColor);\r\n    formData.append(\"BackgroundColor\", themes.BackgroundColor);\r\n    formData.append(\"HighlightColor\", themes.HighlightColor);\r\n    // formData.append(\"QRCodeColor\", themes.QRCodeColor);\r\n    // formData.append(\"QRCodeBackgroundColor\", themes.QRCodeBackgroundColor);\r\n    formData.append(\"HomeScreenBackground\", themes.HomeScreenBackground);\r\n    formData.append(\"MenuScreenBackground\", themes.MenuScreenBackground);\r\n    formData.append(\"ShowButton\", themes.ShowButton);\r\n    formData.append(\"ButtonShape\", themes.ButtonShape);\r\n    axios.post(`/api/UpdateTheme/${id}`, formData).then((res) => {\r\n      if (res.data.status === 200) {\r\n        swal(\"Success\", res.data.message, \"success\").then((check) => {\r\n          if (check) {\r\n            history.goBack();\r\n          }\r\n        });\r\n\r\n        // setThemes([]);\r\n        // setImageStateMenu([]);\r\n        // setImageState([]);\r\n      }\r\n    });\r\n  };\r\n  // update End\r\n\r\n  useEffect(() => {\r\n    axios.get(`/api/EditTheme/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setThemes(res.data.data);\r\n      }\r\n    });\r\n  }, []);\r\n  return (\r\n    <>\r\n      <div className=\"\">\r\n        <Form onSubmit={update} method=\"POST\" encType=\"multipart/form-data\">\r\n          <div className=\"row\">\r\n            <div className=\"col-12 mb-2\">\r\n              <input\r\n                type=\"text\"\r\n                style={{ border: \"none\" }}\r\n                value={themes.ThemeName}\r\n                className=\"form-control\"\r\n                placeholder={t(\"theme_name\")}\r\n                onChange={handleInput}\r\n                value={themes.ThemeName}\r\n                name=\"ThemeName\"\r\n              />\r\n            </div>\r\n            <div className=\"col-6\">\r\n              <CCard>\r\n                <CCardHeader component=\"h5\">{t(\"theme_colors\")}</CCardHeader>\r\n                <CCardBody>\r\n                  <CRow className=\"mb-3\">\r\n                    <CFormLabel\r\n                      htmlFor=\"staticEmail\"\r\n                      className=\"col-sm-6 col-form-label\"\r\n                    >\r\n                      {t(\"text_color\")}\r\n                    </CFormLabel>\r\n                    <CCol sm={6} className=\"text-center\">\r\n                      <input\r\n                        type=\"color\"\r\n                        onChange={handleInput}\r\n                        value={themes.TextColor}\r\n                        id=\"favcolor\"\r\n                        name=\"TextColor\"\r\n                      />\r\n                    </CCol>\r\n                  </CRow>\r\n                  <CRow className=\"mb-3\">\r\n                    <CFormLabel\r\n                      htmlFor=\"inputPassword\"\r\n                      className=\"col-sm-6 col-form-label\"\r\n                    >\r\n                      {t(\"background_color\")}\r\n                    </CFormLabel>\r\n                    <CCol sm={6} className=\"text-center\">\r\n                      <input\r\n                        type=\"color\"\r\n                        id=\"favcolor\"\r\n                        onChange={handleInput}\r\n                        value={themes.BackgroundColor}\r\n                        name=\"BackgroundColor\"\r\n                      />\r\n                    </CCol>\r\n                  </CRow>\r\n                  <CRow className=\"mb-3\">\r\n                    <CFormLabel\r\n                      htmlFor=\"inputPassword\"\r\n                      className=\"col-sm-6 col-form-label\"\r\n                    >\r\n                      {t(\"highlight_color\")}\r\n                    </CFormLabel>\r\n                    <CCol sm={6} className=\"text-center\">\r\n                      <input\r\n                        type=\"color\"\r\n                        id=\"favcolor\"\r\n                        onChange={handleInput}\r\n                        value={themes.HighlightColor}\r\n                        name=\"HighlightColor\"\r\n                      />\r\n                    </CCol>\r\n                  </CRow>\r\n                  <CRow className=\"mb-3\">\r\n                    <button className=\"btn btn-light m-1\" type=\"button\">\r\n                      {t(\"advanced_customization\")}\r\n                    </button>\r\n                  </CRow>\r\n                </CCardBody>\r\n              </CCard>\r\n            </div>\r\n            <div className=\"col-6\">\r\n              <div className=\"row\">\r\n                <div className=\"col-12\">\r\n                  <CCard>\r\n                    <CCardHeader component=\"h5\">\r\n                      {t(\"home_screen_background\")}\r\n                    </CCardHeader>\r\n                    <CCardBody>\r\n                      <RadioGroup\r\n                        aria-label=\"HomeScreen\"\r\n                        defaultValue=\"1\"\r\n                        name=\"radio-buttons-group\"\r\n                      >\r\n                        <FormControlLabel\r\n                          value=\"1\"\r\n                          control={\r\n                            <Radio\r\n                              onClick={() => setHomeScreen(false)}\r\n                              color=\"secondary\"\r\n                            />\r\n                          }\r\n                          label={t(\"solid_color\")}\r\n                        />\r\n                        <FormControlLabel\r\n                          value=\"0\"\r\n                          control={\r\n                            <Radio\r\n                              onClick={() => setHomeScreen(true)}\r\n                              color=\"secondary\"\r\n                            />\r\n                          }\r\n                          label={t(\"image_or_video\")}\r\n                        />\r\n                      </RadioGroup>\r\n                      <CRow className=\"mb-3\">\r\n                        <CCol sm={12} className=\"text-right\">\r\n                          {homeScreen ? (\r\n                            \" \"\r\n                          ) : (\r\n                            <input\r\n                              type=\"color\"\r\n                              id=\"favcolor\"\r\n                              onChange={handleInput}\r\n                              value={themes.HomeScreenBackground}\r\n                              name=\"HomeScreenBackground\"\r\n                            />\r\n                          )}\r\n                        </CCol>\r\n                      </CRow>\r\n                      {homeScreen ? (\r\n                        <div className=\"form-group\">\r\n                          <div className=\"input-group\">\r\n                            <div className=\"custom-file\">\r\n                              <input\r\n                                type=\"file\"\r\n                                className=\"form-control\"\r\n                                name=\"HomeScreenBackground\"\r\n                                required\r\n                                onChange={handleImage}\r\n                              />\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      ) : (\r\n                        \" \"\r\n                      )}\r\n                    </CCardBody>\r\n                  </CCard>\r\n                </div>\r\n                <div className=\"col-12\">\r\n                  <CCard>\r\n                    <CCardHeader component=\"h5\">\r\n                      {t(\"menu_screen_background\")}\r\n                    </CCardHeader>\r\n                    <CCardBody>\r\n                      <RadioGroup\r\n                        aria-label=\"MenuScreen\"\r\n                        defaultValue=\"1\"\r\n                        name=\"radio-buttons-group\"\r\n                      >\r\n                        <FormControlLabel\r\n                          value=\"1\"\r\n                          control={\r\n                            <Radio\r\n                              onClick={() => setMenuScreen(false)}\r\n                              color=\"secondary\"\r\n                            />\r\n                          }\r\n                          label={t(\"solid_color\")}\r\n                        />\r\n                        <FormControlLabel\r\n                          value=\"0\"\r\n                          control={\r\n                            <Radio\r\n                              onClick={() => setMenuScreen(true)}\r\n                              color=\"secondary\"\r\n                            />\r\n                          }\r\n                          label={t(\"image\")}\r\n                        />\r\n                      </RadioGroup>\r\n                      <CRow className=\"mb-3\">\r\n                        <CCol sm={12} className=\"text-right\">\r\n                          {menuScreen ? (\r\n                            \" \"\r\n                          ) : (\r\n                            <input\r\n                              type=\"color\"\r\n                              onChange={handleInput}\r\n                              value={themes.MenuScreenBackground}\r\n                              name=\"MenuScreenBackground\"\r\n                            />\r\n                          )}\r\n                        </CCol>\r\n                      </CRow>\r\n                      {menuScreen ? (\r\n                        <div className=\"form-group\">\r\n                          <div className=\"input-group\">\r\n                            <div className=\"custom-file\">\r\n                              <input\r\n                                type=\"file\"\r\n                                className=\"form-control\"\r\n                                name=\"MenuScreenBackground\"\r\n                                required\r\n                                onChange={handleImageMenu}\r\n                              />\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      ) : (\r\n                        \" \"\r\n                      )}\r\n                    </CCardBody>\r\n                  </CCard>\r\n                </div>\r\n                <div className=\"col-12\">\r\n                  <CCard>\r\n                    <CCardHeader component=\"h5\">{t(\"menu_button\")}</CCardHeader>\r\n                    <CCardBody>\r\n                      <CRow className=\"mb-3\">\r\n                        <CFormLabel\r\n                          htmlFor=\"staticEmail\"\r\n                          className=\"col-sm-6 col-form-label\"\r\n                        >\r\n                          {t(\"show_button\")}\r\n                        </CFormLabel>\r\n                        <CCol sm={6} className=\"text-center\">\r\n                          <Switch\r\n                            defaultChecked\r\n                            onChange={() => setButtonShow(!buttonShow)}\r\n                            value={buttonShow}\r\n                            name=\"ShowButton\"\r\n                            color=\"secondary\"\r\n                          />\r\n                        </CCol>\r\n                      </CRow>\r\n                      {buttonShow ? (\r\n                        <CRow className=\"mb-3\">\r\n                          <CFormLabel\r\n                            htmlFor=\"inputPassword\"\r\n                            className=\"col-sm-12 col-form-label\"\r\n                          >\r\n                            {t(\"button_shape\")}\r\n                          </CFormLabel>\r\n                          <CCol sm={12} className=\"text-center\">\r\n                            <RadioGroup\r\n                              aria-label=\"menu_button\"\r\n                              defaultValue=\"P\"\r\n                              name=\"ButtonShape\"\r\n                              onChange={handleInput}\r\n                              value={themes.ButtonShape}\r\n                            >\r\n                              <FormControlLabel\r\n                                value=\"R\"\r\n                                control={\r\n                                  <div>\r\n                                    <Radio value=\"R\" color=\"secondary\" />{\" \"}\r\n                                    <img\r\n                                      src={circle_menu_button}\r\n                                      alt=\"\"\r\n                                      width=\"80\"\r\n                                    />\r\n                                  </div>\r\n                                }\r\n                                label={t(\"round\")}\r\n                              />\r\n                              <FormControlLabel\r\n                                value=\"P\"\r\n                                control={\r\n                                  <div>\r\n                                    <Radio value=\"P\" color=\"secondary\" />{\" \"}\r\n                                    <img\r\n                                      src={pill_menu_button}\r\n                                      alt=\"\"\r\n                                      width=\"80\"\r\n                                    />\r\n                                  </div>\r\n                                }\r\n                                label={t(\"pill\")}\r\n                              />\r\n                            </RadioGroup>\r\n                          </CCol>\r\n                        </CRow>\r\n                      ) : null}\r\n                    </CCardBody>\r\n                  </CCard>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"text-center mx-4 mb-4\">\r\n            <button className=\"btn btn-primary\" type=\"submit\">\r\n              {t(\"update\")}\r\n            </button>\r\n            <Link\r\n              className=\"btn btn-light m-1\"\r\n              to=\"\"\r\n              onClick={() => history.goBack()}\r\n            >\r\n              {t(\"back\")}\r\n            </Link>\r\n          </div>\r\n        </Form>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EditTheme;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Theme.js",["427","428","429"],"import React, { useState } from \"react\";\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CRow,\r\n  CFormLabel,\r\n  CCol,\r\n} from \"@coreui/react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// import Switch from \"react-switch\";\r\nimport circle_menu_button from \"../../../images/hellomenu/circle_menu_button.png\";\r\nimport pill_menu_button from \"../../../images/hellomenu/pill_menu_button.png\";\r\nimport Avatar from \"@mui/material/Avatar\";\r\nimport {\r\n  AvatarGroup,\r\n  Grid,\r\n  List,\r\n  ListItem,\r\n  ListItemButton,\r\n  ListItemText,\r\n} from \"@mui/material\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport Switch from \"@mui/material/Switch\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { FormControlLabel, RadioGroup, Radio } from \"@mui/material\";\r\nimport Accordion from \"@mui/material/Accordion\";\r\nimport AccordionDetails from \"@mui/material/AccordionDetails\";\r\nimport AccordionSummary from \"@mui/material/AccordionSummary\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Theme = (props) => {\r\n  const history = useHistory();\r\n\r\n  const { t } = useTranslation();\r\n  const branchId = props.history.location.state.id;\r\n\r\n  const [state, setState] = useState({ checked: false });\r\n  const [homeScreen, setHomeScreen] = useState(false);\r\n  const [menuScreen, setMenuScreen] = useState(false);\r\n  const [buttonShow, setButtonShow] = useState(1);\r\n  const handleChange = (checked) => {\r\n    setState({ checked });\r\n  };\r\n  const [imageState, setImageState] = useState([]);\r\n  const handleImage = (e) => {\r\n    setImageState({ ...imageState, HomeScreenBackground: e.target.files[0] });\r\n  };\r\n  const [imageStateMenu, setImageStateMenu] = useState([]);\r\n  const handleImageMenu = (e) => {\r\n    setImageStateMenu({\r\n      ...imageStateMenu,\r\n      MenuScreenBackground: e.target.files[0],\r\n    });\r\n  };\r\n  // Insert Start\r\n  const [themes, setThemes] = useState([]);\r\n  const handleInput = (e) => {\r\n    e.persist();\r\n    setThemes({ ...themes, [e.target.name]: e.target.value });\r\n  };\r\n  const changeColor = (first, second, thrid) => {\r\n    setThemes({\r\n      ...themes,\r\n      TextColor: first,\r\n      BackgroundColor: second,\r\n      HighlightColor: thrid,\r\n    });\r\n  };\r\n  const save = (e) => {\r\n    e.preventDefault();\r\n    // console.log(themes);\r\n    const formData = new FormData();\r\n    formData.append(\"HomeScreenBackground\", imageState.HomeScreenBackground);\r\n    formData.append(\r\n      \"MenuScreenBackground\",\r\n      imageStateMenu.MenuScreenBackground\r\n    );\r\n    formData.append(\"ThemeName\", themes.ThemeName);\r\n    // formData.append(\"Orientation\", themes.Orientation);\r\n    // formData.append(\"MenuStructure\", themes.MenuStructure);\r\n    formData.append(\"TextColor\", themes.TextColor);\r\n    formData.append(\"BackgroundColor\", themes.BackgroundColor);\r\n    formData.append(\"HighlightColor\", themes.HighlightColor);\r\n    // formData.append(\"QRCodeColor\", themes.QRCodeColor);\r\n    // formData.append(\"QRCodeBackgroundColor\", themes.QRCodeBackgroundColor);\r\n    formData.append(\"HomeScreenBackground\", themes.HomeScreenBackground);\r\n    formData.append(\"MenuScreenBackground\", themes.MenuScreenBackground);\r\n    formData.append(\"ShowButton\", themes.ShowButton);\r\n    formData.append(\"ButtonShape\", themes.ButtonShape);\r\n    axios.post(`/api/InsertTheme/${branchId}`, formData).then((res) => {\r\n      if (res.data.status === 200) {\r\n        swal(\"Success\", res.data.message, \"success\").then((check) => {\r\n          if (check) {\r\n            history.goBack();\r\n          }\r\n        });\r\n        // setThemes([]);\r\n        // setImageStateMenu([]);\r\n        // setImageState([]);\r\n      }\r\n    });\r\n  };\r\n  // insert End\r\n  const [expanded, setExpanded] = React.useState(false);\r\n\r\n  const handleChangePanel = (panel) => (event, isExpanded) => {\r\n    setExpanded(isExpanded ? panel : false);\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\" overflow-hidden border\">\r\n        <Form onSubmit={save} method=\"POST\" encType=\"multipart/form-data\">\r\n          <div className=\"row\">\r\n            <div className=\"col-12 mb-2\">\r\n              <div\r\n                className=\"col-6 mb-2\"\r\n                style={{ borderBottom: \"2px solid black\" }}\r\n              >\r\n                <input\r\n                  type=\"text\"\r\n                  style={{ border: \"none\" }}\r\n                  className=\"form-control\"\r\n                  placeholder={t(\"theme_name\")}\r\n                  onChange={handleInput}\r\n                  name=\"ThemeName\"\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"col-6\">\r\n              <CCard>\r\n                <CCardHeader component=\"h5\">{t(\"theme_colors\")}</CCardHeader>\r\n                <CCardBody>\r\n                  <div>\r\n                    <Accordion\r\n                      expanded={expanded === \"panel1\"}\r\n                      onChange={handleChangePanel(\"panel1\")}\r\n                      className=\"my-3\"\r\n                    >\r\n                      <AccordionSummary\r\n                        aria-controls=\"panel1bh-content\"\r\n                        id=\"panel1bh-header\"\r\n                      >\r\n                        <Grid container spacing={2}>\r\n                          <Grid item xs={6} md={8}>\r\n                            <Typography sx={{ width: \"33%\", flexShrink: 0 }}>\r\n                              {t(\"selected\")}\r\n                            </Typography>\r\n                          </Grid>\r\n                          <Grid item xs={6} md={4}>\r\n                            <Typography sx={{ color: \"text.secondary\" }}>\r\n                              <AvatarGroup max={4}>\r\n                                <Avatar\r\n                                  sx={{\r\n                                    bgcolor: themes.TextColor,\r\n                                    width: 20,\r\n                                    height: 20,\r\n                                  }}\r\n                                >\r\n                                  {\" \"}\r\n                                </Avatar>\r\n                                <Avatar\r\n                                  sx={{\r\n                                    bgcolor: themes.BackgroundColor,\r\n                                    width: 20,\r\n                                    height: 20,\r\n                                  }}\r\n                                >\r\n                                  {\" \"}\r\n                                </Avatar>\r\n                                <Avatar\r\n                                  sx={{\r\n                                    bgcolor: themes.HighlightColor,\r\n                                    width: 20,\r\n                                    height: 20,\r\n                                  }}\r\n                                >\r\n                                  {\" \"}\r\n                                </Avatar>\r\n                              </AvatarGroup>\r\n                            </Typography>\r\n                          </Grid>\r\n                        </Grid>\r\n                      </AccordionSummary>\r\n                      <AccordionDetails>\r\n                        <Typography>\r\n                          <List>\r\n                            <ListItem disablePadding>\r\n                              <ListItemButton\r\n                                onClick={() =>\r\n                                  changeColor(\"red\", \"green\", \"black\")\r\n                                }\r\n                              >\r\n                                <Grid container spacing={2}>\r\n                                  <Grid item xs={6} md={8}>\r\n                                    <ListItemText primary=\"First Color Theme\" />\r\n                                  </Grid>\r\n                                  <Grid item xs={6} md={4}>\r\n                                    <Typography\r\n                                      sx={{ color: \"text.secondary\" }}\r\n                                    >\r\n                                      <AvatarGroup max={4}>\r\n                                        <Avatar\r\n                                          sx={{\r\n                                            bgcolor: \"red\",\r\n                                            width: 20,\r\n                                            height: 20,\r\n                                          }}\r\n                                        >\r\n                                          {\" \"}\r\n                                        </Avatar>\r\n                                        <Avatar\r\n                                          sx={{\r\n                                            bgcolor: \"green\",\r\n                                            width: 20,\r\n                                            height: 20,\r\n                                          }}\r\n                                        >\r\n                                          {\" \"}\r\n                                        </Avatar>\r\n                                        <Avatar\r\n                                          sx={{\r\n                                            bgcolor: \"black\",\r\n                                            width: 20,\r\n                                            height: 20,\r\n                                          }}\r\n                                        >\r\n                                          {\" \"}\r\n                                        </Avatar>\r\n                                      </AvatarGroup>\r\n                                    </Typography>\r\n                                  </Grid>\r\n                                </Grid>\r\n                              </ListItemButton>\r\n                            </ListItem>\r\n                          </List>\r\n                        </Typography>\r\n                      </AccordionDetails>\r\n                    </Accordion>\r\n                  </div>\r\n                  <CRow className=\"mb-3\">\r\n                    <CFormLabel\r\n                      htmlFor=\"staticEmail\"\r\n                      className=\"col-sm-6 col-form-label\"\r\n                    >\r\n                      {t(\"text_color\")}\r\n                    </CFormLabel>\r\n                    <CCol sm={6} className=\"text-center\">\r\n                      <input\r\n                        type=\"color\"\r\n                        onChange={handleInput}\r\n                        value={themes.TextColor}\r\n                        name=\"TextColor\"\r\n                      />\r\n                    </CCol>\r\n                  </CRow>\r\n                  <CRow className=\"mb-3\">\r\n                    <CFormLabel\r\n                      htmlFor=\"inputPassword\"\r\n                      className=\"col-sm-6 col-form-label\"\r\n                    >\r\n                      {t(\"background_color\")}\r\n                    </CFormLabel>\r\n                    <CCol sm={6} className=\"text-center\">\r\n                      <input\r\n                        type=\"color\"\r\n                        onChange={handleInput}\r\n                        value={themes.BackgroundColor}\r\n                        name=\"BackgroundColor\"\r\n                      />\r\n                    </CCol>\r\n                  </CRow>\r\n                  <CRow className=\"mb-3\">\r\n                    <CFormLabel\r\n                      htmlFor=\"inputPassword\"\r\n                      className=\"col-sm-6 col-form-label\"\r\n                    >\r\n                      {t(\"highlight_color\")}\r\n                    </CFormLabel>\r\n                    <CCol sm={6} className=\"text-center\">\r\n                      <input\r\n                        type=\"color\"\r\n                        onChange={handleInput}\r\n                        value={themes.HighlightColor}\r\n                        name=\"HighlightColor\"\r\n                      />\r\n                    </CCol>\r\n                  </CRow>\r\n                  <CRow className=\"mb-3\">\r\n                    <button className=\"btn btn-light m-1\" type=\"button\">\r\n                      {t(\"advanced_customization\")}\r\n                    </button>\r\n                  </CRow>\r\n                </CCardBody>\r\n              </CCard>\r\n            </div>\r\n            <div className=\"col-6\">\r\n              <div className=\"row\">\r\n                <div className=\"col-12\">\r\n                  <CCard>\r\n                    <CCardHeader component=\"h5\">\r\n                      {t(\"home_screen_background\")}\r\n                    </CCardHeader>\r\n                    <CCardBody>\r\n                      <RadioGroup\r\n                        aria-label=\"HomeScreen\"\r\n                        defaultValue=\"1\"\r\n                        name=\"radio-buttons-group\"\r\n                      >\r\n                        <FormControlLabel\r\n                          value=\"1\"\r\n                          control={\r\n                            <Radio\r\n                              onClick={() => setHomeScreen(false)}\r\n                              color=\"secondary\"\r\n                            />\r\n                          }\r\n                          label={t(\"solid_color\")}\r\n                        />\r\n                        <FormControlLabel\r\n                          value=\"0\"\r\n                          control={\r\n                            <Radio\r\n                              onClick={() => setHomeScreen(true)}\r\n                              color=\"secondary\"\r\n                            />\r\n                          }\r\n                          label={t(\"image_or_video\")}\r\n                        />\r\n                      </RadioGroup>\r\n                      <CRow className=\"mb-3\">\r\n                        <CCol sm={12} className=\"text-right\">\r\n                          {homeScreen ? (\r\n                            \" \"\r\n                          ) : (\r\n                            <input\r\n                              type=\"color\"\r\n                              id=\"favcolor\"\r\n                              onChange={handleInput}\r\n                              value={themes.HomeScreenBackground}\r\n                              name=\"HomeScreenBackground\"\r\n                            />\r\n                          )}\r\n                        </CCol>\r\n                      </CRow>\r\n                      {homeScreen ? (\r\n                        <div className=\"form-group\">\r\n                          <div className=\"input-group\">\r\n                            <div className=\"custom-file\">\r\n                              <input\r\n                                type=\"file\"\r\n                                className=\"form-control\"\r\n                                name=\"HomeScreenBackground\"\r\n                                required\r\n                                onChange={handleImage}\r\n                              />\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      ) : (\r\n                        \" \"\r\n                      )}\r\n                    </CCardBody>\r\n                  </CCard>\r\n                </div>\r\n                <div className=\"col-12\">\r\n                  <CCard>\r\n                    <CCardHeader component=\"h5\">\r\n                      {t(\"menu_screen_background\")}\r\n                    </CCardHeader>\r\n                    <CCardBody>\r\n                      <RadioGroup\r\n                        aria-label=\"MenuScreen\"\r\n                        defaultValue=\"1\"\r\n                        name=\"radio-buttons-group\"\r\n                      >\r\n                        <FormControlLabel\r\n                          value=\"1\"\r\n                          control={\r\n                            <Radio\r\n                              onClick={() => setMenuScreen(false)}\r\n                              color=\"secondary\"\r\n                            />\r\n                          }\r\n                          label={t(\"solid_color\")}\r\n                        />\r\n                        <FormControlLabel\r\n                          value=\"0\"\r\n                          control={\r\n                            <Radio\r\n                              onClick={() => setMenuScreen(true)}\r\n                              color=\"secondary\"\r\n                            />\r\n                          }\r\n                          label={t(\"image\")}\r\n                        />\r\n                      </RadioGroup>\r\n                      <CRow className=\"mb-3\">\r\n                        <CCol sm={12} className=\"text-right\">\r\n                          {menuScreen ? (\r\n                            \" \"\r\n                          ) : (\r\n                            <input\r\n                              type=\"color\"\r\n                              onChange={handleInput}\r\n                              value={themes.MenuScreenBackground}\r\n                              name=\"MenuScreenBackground\"\r\n                            />\r\n                          )}\r\n                        </CCol>\r\n                      </CRow>\r\n                      {menuScreen ? (\r\n                        <div className=\"form-group\">\r\n                          <div className=\"input-group\">\r\n                            <div className=\"custom-file\">\r\n                              <input\r\n                                type=\"file\"\r\n                                className=\"form-control\"\r\n                                name=\"MenuScreenBackground\"\r\n                                required\r\n                                onChange={handleImageMenu}\r\n                              />\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      ) : (\r\n                        \" \"\r\n                      )}\r\n                    </CCardBody>\r\n                  </CCard>\r\n                </div>\r\n                <div className=\"col-12\">\r\n                  <CCard>\r\n                    <CCardHeader component=\"h5\">{t(\"menu_button\")}</CCardHeader>\r\n                    <CCardBody>\r\n                      <CRow className=\"mb-3\">\r\n                        <CFormLabel\r\n                          htmlFor=\"staticEmail\"\r\n                          className=\"col-sm-6 col-form-label\"\r\n                        >\r\n                          {t(\"show_button\")}\r\n                        </CFormLabel>\r\n                        <CCol sm={6} className=\"text-center\">\r\n                          <Switch\r\n                            defaultChecked\r\n                            onChange={() => setButtonShow(!buttonShow)}\r\n                            value={buttonShow}\r\n                            onChange={handleInput}\r\n                            name=\"ShowButton\"\r\n                            color=\"secondary\"\r\n                          />\r\n                        </CCol>\r\n                      </CRow>\r\n                      {buttonShow ? (\r\n                        <CRow className=\"mb-3\">\r\n                          <CFormLabel\r\n                            htmlFor=\"inputPassword\"\r\n                            className=\"col-sm-12 col-form-label\"\r\n                          >\r\n                            {t(\"button_shape\")}\r\n                          </CFormLabel>\r\n                          <CCol sm={12} className=\"text-center\">\r\n                            <RadioGroup\r\n                              aria-label=\"menu_button\"\r\n                              defaultValue=\"P\"\r\n                              name=\"radio-buttons-group\"\r\n                            >\r\n                              <FormControlLabel\r\n                                value=\"R\"\r\n                                control={\r\n                                  <div>\r\n                                    <Radio\r\n                                      onChange={handleInput}\r\n                                      name=\"ButtonShape\"\r\n                                      value=\"R\"\r\n                                      color=\"secondary\"\r\n                                    />{\" \"}\r\n                                    <img\r\n                                      src={circle_menu_button}\r\n                                      alt=\"\"\r\n                                      width=\"80\"\r\n                                    />\r\n                                  </div>\r\n                                }\r\n                                label={t(\"round\")}\r\n                              />\r\n                              <FormControlLabel\r\n                                value=\"P\"\r\n                                control={\r\n                                  <div>\r\n                                    <Radio\r\n                                      onChange={handleInput}\r\n                                      name=\"ButtonShape\"\r\n                                      value=\"P\"\r\n                                      color=\"secondary\"\r\n                                    />{\" \"}\r\n                                    <img\r\n                                      src={pill_menu_button}\r\n                                      alt=\"\"\r\n                                      width=\"80\"\r\n                                    />\r\n                                  </div>\r\n                                }\r\n                                label={t(\"pill\")}\r\n                              />\r\n                            </RadioGroup>\r\n                          </CCol>\r\n                        </CRow>\r\n                      ) : null}\r\n                    </CCardBody>\r\n                  </CCard>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"text-center mx-4 mb-4\">\r\n            <button className=\"btn btn-primary\" type=\"submit\">\r\n              {t(\"save\")}\r\n            </button>\r\n            <Link\r\n              className=\"btn btn-light m-1\"\r\n              to=\"\"\r\n              onClick={() => history.goBack()}\r\n            >\r\n              {t(\"back\")}\r\n            </Link>\r\n          </div>\r\n        </Form>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Theme;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Design.js",["430","431","432","433","434","435","436","437","438","439"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  CNav,\r\n  CNavItem,\r\n  CNavLink,\r\n  CTabContent,\r\n  CTabPane,\r\n  CCard,\r\n  CCardText,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCardImage,\r\n  CRow,\r\n  CFormLabel,\r\n  CCol,\r\n} from \"@coreui/react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport palette from \"../../../images/hellomenu/palette.svg\";\r\nimport { Link, useRouteMatch } from \"react-router-dom\";\r\nimport QRCode from \"qrcode.react\";\r\nimport axios from \"axios\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport swal from \"sweetalert\";\r\nimport Switch from \"@mui/material/Switch\";\r\nimport { FormControlLabel, RadioGroup, Radio } from \"@mui/material\";\r\nimport { base_url, port } from \"../../../Consts\";\r\nimport logo from \"../../../images/hellomenu/logo.svg\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardMedia from \"@mui/material/CardMedia\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { CardActionArea } from \"@mui/material\";\r\nimport CardActions from \"@mui/material/CardActions\";\r\nimport Grid from \"@mui/material/Grid\";\r\n// import profile from \"\";\r\n\r\nconst Design = (props) => {\r\n  const { path, url } = useRouteMatch();\r\n\r\n  const { t } = useTranslation();\r\n  // const branchId = atob(props.match.params.id);\r\n  const branchId = props.history.location.state.id;\r\n\r\n  const [activeKey, setActiveKey] = useState(1);\r\n  // Insert Start\r\n  const [themes, setThemes] = useState([]);\r\n  const [activeThemeId, setActiveThemeId] = useState([]);\r\n  const [check, setCheck] = useState(true);\r\n\r\n  const handleInput = (e) => {\r\n    e.persist();\r\n    setThemes({ ...themes, [e.target.name]: e.target.value });\r\n  };\r\n  const [imageState, setImageState] = useState([]);\r\n  const handleImage = (e) => {\r\n    setImageState({ ...imageState, Logo: e.target.files[0] });\r\n  };\r\n  const save = (e) => {\r\n    e.preventDefault();\r\n    // console.log(themes);\r\n    const formData = new FormData();\r\n    formData.append(\"Logo\", imageState.Logo);\r\n    formData.append(\"Orientation\", themes.Orientation);\r\n    formData.append(\"MenuStructure\", themes.MenuStructure);\r\n    formData.append(\"TextColor\", themes.TextColor);\r\n    formData.append(\"BackgroundColor\", themes.BackgroundColor);\r\n    formData.append(\"HighlightColor\", themes.HighlightColor);\r\n    formData.append(\"QRCodeColor\", themes.QRCodeColor);\r\n    formData.append(\"QRCodeBackgroundColor\", themes.QRCodeBackgroundColor);\r\n    // console.log(activeThemeId);\r\n    axios.post(`/api/UpdateTheme/${activeThemeId}`, formData).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setCheck(!check);\r\n        swal(\"Success\", res.data.message, \"success\");\r\n      }\r\n    });\r\n  };\r\n\r\n  // insert End\r\n  // change the active theme\r\n  const changeTheActiveTheme = (e, id) => {\r\n    axios.post(`/api/ThemeStatus/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setCheck(!check);\r\n      }\r\n    });\r\n  };\r\n  // change the active template\r\n  const changeTheActiveTemplate = (e, id) => {\r\n    axios.post(`/api/TemplateStatus/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setCheck(!check);\r\n      }\r\n    });\r\n  };\r\n  //for retriving data using laravel API\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [templates, setTemplates] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios.get(`/api/GetThemes/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setFetchData(res.data.fetchData);\r\n        res.data.fetchData.map((item, i) => {\r\n          if (item.Status == 1) {\r\n            setActiveThemeId(item.id);\r\n            setThemes(item);\r\n          }\r\n        });\r\n      }\r\n      setLoading(false);\r\n    });\r\n    axios.get(`/api/GetTemplates/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setTemplates(res.data.data);\r\n      }\r\n    });\r\n  }, [check]);\r\n  // delete start\r\n  const deleteTheme = (e, id) => {\r\n    e.preventDefault();\r\n    swal({\r\n      title: \"Are you sure?\",\r\n      text: \"Once deleted, you will not be able to recover this imaginary file!\",\r\n      icon: \"warning\",\r\n      buttons: [t(\"cancel\"), t(\"confirm\")],\r\n      dangerMode: true,\r\n    }).then((willDelete) => {\r\n      if (willDelete) {\r\n        axios.delete(`/api/DeleteTheme/${id}`).then((res) => {\r\n          if (res.data.status === 200) {\r\n            setCheck(!check);\r\n            swal(\"Success\", res.data.message, \"success\");\r\n            // thisClicked.closest(\"tr\").remove();\r\n          } else if (res.data.status === 404) {\r\n            swal(\"Error\", res.data.message, \"error\");\r\n          }\r\n        });\r\n      } else {\r\n        swal(\"Your Data is safe now!\");\r\n      }\r\n    });\r\n  };\r\n  // delete end\r\n  //   duplicate Theme\r\n  const duplicateTheme = (e, id) => {\r\n    e.preventDefault();\r\n    axios.get(`/api/duplicateTheme/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setCheck(!check);\r\n        // swal(\"Success\", res.data.message, \"success\");\r\n      }\r\n    });\r\n  };\r\n  var viewThemes_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"spinner-border text-primary \" role=\"status\">\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewThemes_HTMLTABLE = fetchData.map((item, i) => {\r\n      return (\r\n        <div className=\"col-xl-4 col-lg-4 col-sm-6\" key={i}>\r\n          <CCard>\r\n            <CCardImage\r\n              orientation=\"top\"\r\n              src={\r\n                item.Logo\r\n                  ? `http://${base_url}:${port}/images/Themes/${item.Logo}`\r\n                  : palette\r\n              }\r\n              style={{ height: \"250px\", objectFit: \"contain\" }}\r\n            />\r\n            <CCardBody>\r\n              <CCardText>\r\n                {/* <div className=\"row\"> */}\r\n                <Link\r\n                  to={{\r\n                    pathname: `${url}/edit-theme`,\r\n                    state: { id: branchId },\r\n                  }}\r\n                >\r\n                  <svg\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    width=\"16\"\r\n                    height=\"16\"\r\n                    fill=\"currentColor\"\r\n                    className=\"bi bi-pencil-square mx-2\"\r\n                    viewBox=\"0 0 16 16\"\r\n                  >\r\n                    <path d=\"M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z\" />\r\n                    <path\r\n                      fillRule=\"evenodd\"\r\n                      d=\"M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z\"\r\n                    />\r\n                  </svg>\r\n                  {t(\"edit\")}\r\n                </Link>\r\n                {item.Status == 1 ? (\r\n                  \" \"\r\n                ) : (\r\n                  <Link to=\"\" onClick={(e) => deleteTheme(e, item.id)}>\r\n                    <svg\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      width=\"16\"\r\n                      height=\"16\"\r\n                      fill=\"currentColor\"\r\n                      className=\"bi bi-trash mx-2\"\r\n                      viewBox=\"0 0 16 16\"\r\n                    >\r\n                      <path d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z\" />\r\n                      <path\r\n                        fillRule=\"evenodd\"\r\n                        d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\"\r\n                      />\r\n                    </svg>\r\n                    <span> {t(\"delete\")}</span>\r\n                  </Link>\r\n                )}\r\n                <Link to=\"\" onClick={(e) => duplicateTheme(e, item.id)}>\r\n                  <svg\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    width=\"16\"\r\n                    height=\"16\"\r\n                    fill=\"currentColor\"\r\n                    className=\"bi bi-front mx-2\"\r\n                    viewBox=\"0 0 16 16\"\r\n                  >\r\n                    <path d=\"M0 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v2h2a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2v-2H2a2 2 0 0 1-2-2V2zm5 10v2a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1h-2v5a2 2 0 0 1-2 2H5z\" />\r\n                  </svg>\r\n                  <span> {t(\"duplicate\")}</span>\r\n                </Link>\r\n                {/* </div> */}\r\n                <div className=\"row \">\r\n                  <div className=\"col-8 mt-2 text-primary font-weight-bold\">\r\n                    {item.ThemeName}\r\n                  </div>\r\n                  <div className=\"col-4 text-right\">\r\n                    <Switch\r\n                      disabled={item.Status == 1 ? true : false}\r\n                      checked={item.Status == 1 ? true : false}\r\n                      color=\"secondary\"\r\n                      onChange={(e) => changeTheActiveTheme(e, item.id)}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </CCardText>\r\n            </CCardBody>\r\n          </CCard>\r\n        </div>\r\n      );\r\n    });\r\n  }\r\n  return (\r\n    <>\r\n      <CNav variant=\"pills\" role=\"tablist\">\r\n        <CNavItem>\r\n          <CNavLink\r\n            style={{ cursor: \"pointer\" }}\r\n            active={activeKey === 1}\r\n            onClick={() => setActiveKey(1)}\r\n          >\r\n            {t(\"default_templates\")}\r\n          </CNavLink>\r\n        </CNavItem>\r\n        <CNavItem>\r\n          <CNavLink\r\n            // href=\"#\"\r\n            style={{ cursor: \"pointer\" }}\r\n            active={activeKey === 2}\r\n            onClick={() => setActiveKey(2)}\r\n          >\r\n            {t(\"custom_design\")}\r\n          </CNavLink>\r\n        </CNavItem>\r\n      </CNav>\r\n      <CTabContent>\r\n        <CTabPane\r\n          role=\"tabpanel\"\r\n          aria-labelledby=\"profile-tab\"\r\n          visible={activeKey === 1}\r\n        >\r\n          <div className=\" overflow-hidden border mt-2\">\r\n            <Grid container spacing={2}>\r\n              {templates.map((item) => {\r\n                return (\r\n                  <Grid item xs={4} sm={3} md={3} key={item.id}>\r\n                    <Card>\r\n                      <CardActionArea>\r\n                        <CardMedia\r\n                          component=\"img\"\r\n                          height=\"200\"\r\n                          image={`http://${base_url}:${port}/images/Templates/${item.ImageURL}`}\r\n                          alt=\"template\"\r\n                        />\r\n\r\n                        <CardContent>\r\n                          <Typography gutterBottom variant=\"h6\" component=\"div\">\r\n                            {item.TemplateName}\r\n                          </Typography>\r\n                        </CardContent>\r\n                        <CardActions>\r\n                          <Grid container spacing={2}>\r\n                            <Grid item xs={12}>\r\n                              <Link\r\n                                to={{\r\n                                  pathname: `/${item.URL}/${btoa(branchId)}`,\r\n                                  state: { id: item.id },\r\n                                }}\r\n                                target=\"_blank\"\r\n                              >\r\n                                Preview\r\n                              </Link>\r\n                            </Grid>\r\n                            <Grid item xs={8}>\r\n                              {item.Status == 1 ? (\r\n                                <Link\r\n                                  to={{\r\n                                    pathname: `${url}/${item.CustomizationURL}`,\r\n                                    state: { id: item.id, branchId: branchId },\r\n                                  }}\r\n                                >\r\n                                  Customization\r\n                                </Link>\r\n                              ) : (\r\n                                \"You must first activate the template before customization.\"\r\n                              )}\r\n                            </Grid>\r\n                            <Grid item xs={4}>\r\n                              <Switch\r\n                                disabled={item.Status == 1 ? true : false}\r\n                                checked={item.Status == 1 ? true : false}\r\n                                color=\"secondary\"\r\n                                onChange={(e) =>\r\n                                  changeTheActiveTemplate(e, item.id)\r\n                                }\r\n                              />\r\n                              {/* {item.Status == 1 ? (\r\n                                <Switch checked disabled color=\"secondary\" />\r\n                              ) : (\r\n                                <Switch\r\n                                  onChange={(e) =>\r\n                                    changeTheActiveTemplate(e, item.id)\r\n                                  }\r\n                                  color=\"secondary\"\r\n                                />\r\n                              )} */}\r\n                            </Grid>\r\n                          </Grid>\r\n                        </CardActions>\r\n                      </CardActionArea>\r\n                    </Card>\r\n                  </Grid>\r\n                );\r\n              })}\r\n            </Grid>\r\n          </div>\r\n        </CTabPane>\r\n        <CTabPane\r\n          role=\"tabpanel\"\r\n          aria-labelledby=\"home-tab\"\r\n          visible={activeKey === 2}\r\n        >\r\n          <div className=\" overflow-hidden border\">\r\n            <Form onSubmit={save} method=\"POST\" encType=\"multipart/form-data\">\r\n              <div className=\"row\">\r\n                <div className=\"col-6\">\r\n                  <CCard>\r\n                    <CCardHeader component=\"h5\">{t(\"logo\")}</CCardHeader>\r\n                    <CCardBody>\r\n                      <div className=\"mb-3\">{t(\"note_for_logo\")}</div>\r\n                      <div className=\"p-2\">\r\n                        <input\r\n                          type=\"file\"\r\n                          className=\"form-control\"\r\n                          name=\"Logo\"\r\n                          onChange={handleImage}\r\n                        />\r\n                        <img\r\n                          style={{ height: \"50px\", objectFit: \"contain\" }}\r\n                          src={\r\n                            themes.Logo\r\n                              ? `http://${base_url}:${port}/images/Themes/${themes.Logo}`\r\n                              : logo\r\n                          }\r\n                          // src={`http://${base_url}:${port}/images/Themes/${theme[0].Logo}`}\r\n                          className=\"w-40 mr-2\"\r\n                          alt=\"Menu\"\r\n                        />\r\n                      </div>\r\n                    </CCardBody>\r\n                  </CCard>\r\n                </div>\r\n                <div className=\"col-6\">\r\n                  <div className=\"row\">\r\n                    <div className=\"col-12\">\r\n                      <CCard>\r\n                        <CCardHeader component=\"h5\">\r\n                          {t(\"screen_orientation\")}\r\n                        </CCardHeader>\r\n                        <CCardBody>\r\n                          <RadioGroup\r\n                            row\r\n                            aria-label=\"Orientation\"\r\n                            defaultValue={themes.Orientation}\r\n                            name=\"Orientation\"\r\n                            onChange={handleInput}\r\n                          >\r\n                            <FormControlLabel\r\n                              value=\"P\"\r\n                              control={\r\n                                <div>\r\n                                  <Radio\r\n                                    value=\"P\"\r\n                                    name=\"Orientation\"\r\n                                    color=\"secondary\"\r\n                                  />\r\n                                  <svg\r\n                                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                                    width=\"64\"\r\n                                    height=\"64\"\r\n                                    fill=\"currentColor\"\r\n                                    className=\"bi bi-phone\"\r\n                                    viewBox=\"0 0 16 16\"\r\n                                  >\r\n                                    <path d=\"M11 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h6zM5 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H5z\" />\r\n                                    <path d=\"M8 14a1 1 0 1 0 0-2 1 1 0 0 0 0 2z\" />\r\n                                  </svg>\r\n                                </div>\r\n                              }\r\n                              label={t(\"portrait\")}\r\n                            />\r\n                            <FormControlLabel\r\n                              value=\"L\"\r\n                              control={\r\n                                <div>\r\n                                  <Radio\r\n                                    value=\"L\"\r\n                                    name=\"Orientation\"\r\n                                    color=\"secondary\"\r\n                                  />{\" \"}\r\n                                  <svg\r\n                                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                                    width=\"64\"\r\n                                    height=\"64\"\r\n                                    fill=\"currentColor\"\r\n                                    className=\"bi bi-phone-landscape mr-2\"\r\n                                    viewBox=\"0 0 16 16\"\r\n                                  >\r\n                                    <path d=\"M1 4.5a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1v6a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1v-6zm-1 6a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-6a2 2 0 0 0-2-2H2a2 2 0 0 0-2 2v6z\" />\r\n                                    <path d=\"M14 7.5a1 1 0 1 0-2 0 1 1 0 0 0 2 0z\" />\r\n                                  </svg>\r\n                                </div>\r\n                              }\r\n                              label={t(\"landscape\")}\r\n                            />\r\n                          </RadioGroup>\r\n                        </CCardBody>\r\n                      </CCard>\r\n                    </div>\r\n\r\n                    <div className=\"col-12\">\r\n                      <CCard>\r\n                        <CCardHeader component=\"h5\">\r\n                          {t(\"menu_structure\")}\r\n                        </CCardHeader>\r\n                        <CCardBody>\r\n                          <RadioGroup\r\n                            row\r\n                            aria-label=\"MenuStructure\"\r\n                            defaultValue={themes.MenuStructure}\r\n                            name=\"MenuStructure\"\r\n                            onChange={handleInput}\r\n                          >\r\n                            <FormControlLabel\r\n                              value=\"I\"\r\n                              control={\r\n                                <div>\r\n                                  <Radio\r\n                                    value=\"I\"\r\n                                    name=\"MenuStructure\"\r\n                                    color=\"secondary\"\r\n                                  />{\" \"}\r\n                                  <svg\r\n                                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                                    width=\"64\"\r\n                                    height=\"64\"\r\n                                    fill=\"currentColor\"\r\n                                    className=\"bi bi-file-post\"\r\n                                    viewBox=\"0 0 16 16\"\r\n                                  >\r\n                                    <path d=\"M4 3.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5zm0 2a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 .5.5v8a.5.5 0 0 1-.5.5h-7a.5.5 0 0 1-.5-.5v-8z\" />\r\n                                    <path d=\"M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2zm10-1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1z\" />\r\n                                  </svg>\r\n                                </div>\r\n                              }\r\n                              label={t(\"infinite_scroll\")}\r\n                            />\r\n                            <FormControlLabel\r\n                              value=\"C\"\r\n                              control={\r\n                                <div>\r\n                                  <Radio\r\n                                    value=\"C\"\r\n                                    name=\"MenuStructure\"\r\n                                    color=\"secondary\"\r\n                                  />{\" \"}\r\n                                  <svg\r\n                                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                                    width=\"64\"\r\n                                    height=\"64\"\r\n                                    fill=\"currentColor\"\r\n                                    className=\"bi bi-file-spreadsheet\"\r\n                                    viewBox=\"0 0 16 16\"\r\n                                  >\r\n                                    <path d=\"M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2zm2-1a1 1 0 0 0-1 1v4h10V2a1 1 0 0 0-1-1H4zm9 6h-3v2h3V7zm0 3h-3v2h3v-2zm0 3h-3v2h2a1 1 0 0 0 1-1v-1zm-4 2v-2H6v2h3zm-4 0v-2H3v1a1 1 0 0 0 1 1h1zm-2-3h2v-2H3v2zm0-3h2V7H3v2zm3-2v2h3V7H6zm3 3H6v2h3v-2z\" />\r\n                                  </svg>\r\n                                </div>\r\n                              }\r\n                              label={t(\"classic_layout\")}\r\n                            />\r\n                          </RadioGroup>\r\n                        </CCardBody>\r\n                      </CCard>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-6\">\r\n                  <CCard>\r\n                    <CCardHeader component=\"h5\">\r\n                      {t(\"theme_colors\")}\r\n                    </CCardHeader>\r\n                    <CCardBody>\r\n                      {/* <SketchPicker /> */}\r\n                      <CRow className=\"mb-3\">\r\n                        <CFormLabel\r\n                          htmlFor=\"staticEmail\"\r\n                          className=\"col-sm-6 col-form-label\"\r\n                        >\r\n                          {t(\"text_color\")}\r\n                        </CFormLabel>\r\n                        <CCol sm={6} className=\"text-center\">\r\n                          <input\r\n                            type=\"color\"\r\n                            onChange={handleInput}\r\n                            value={themes.TextColor}\r\n                            id=\"favcolor\"\r\n                            name=\"TextColor\"\r\n                          />\r\n                        </CCol>\r\n                      </CRow>\r\n                      <CRow className=\"mb-3\">\r\n                        <CFormLabel\r\n                          htmlFor=\"inputPassword\"\r\n                          className=\"col-sm-6 col-form-label\"\r\n                        >\r\n                          {t(\"bgColor\")}\r\n                        </CFormLabel>\r\n                        <CCol sm={6} className=\"text-center\">\r\n                          <input\r\n                            type=\"color\"\r\n                            onChange={handleInput}\r\n                            value={themes.BackgroundColor}\r\n                            id=\"favcolor\"\r\n                            name=\"BackgroundColor\"\r\n                          />\r\n                        </CCol>\r\n                      </CRow>\r\n                      <CRow className=\"mb-3\">\r\n                        <CFormLabel\r\n                          htmlFor=\"inputPassword\"\r\n                          className=\"col-sm-6 col-form-label\"\r\n                        >\r\n                          {t(\"highlight_color\")}\r\n                        </CFormLabel>\r\n                        <CCol sm={6} className=\"text-center\">\r\n                          <input\r\n                            type=\"color\"\r\n                            onChange={handleInput}\r\n                            value={themes.HighlightColor}\r\n                            id=\"favcolor\"\r\n                            name=\"HighlightColor\"\r\n                          />\r\n                        </CCol>\r\n                      </CRow>\r\n                    </CCardBody>\r\n                  </CCard>\r\n                </div>\r\n                <div className=\"col-6\">\r\n                  <CCard>\r\n                    <CCardHeader component=\"h5\">\r\n                      {t(\"your_helloMenu_QR\")}\r\n                    </CCardHeader>\r\n                    <CCardBody>\r\n                      <div className=\"text-center mb-3\">\r\n                        <QRCode\r\n                          level={\"H\"}\r\n                          size={256}\r\n                          bgColor={themes.QRCodeBackgroundColor}\r\n                          fgColor={themes.QRCodeColor}\r\n                          value={`http://192.168.1.103:3000/show-branch-details`}\r\n                          className=\"primary\"\r\n                        />\r\n                      </div>\r\n                      <CRow className=\"mb-3\">\r\n                        <CFormLabel\r\n                          htmlFor=\"staticEmail\"\r\n                          className=\"col-sm-6 col-form-label\"\r\n                        >\r\n                          {t(\"QR_code_color\")}\r\n                        </CFormLabel>\r\n                        <CCol sm={6} className=\"text-center\">\r\n                          <input\r\n                            type=\"color\"\r\n                            onChange={handleInput}\r\n                            value={themes.QRCodeColor}\r\n                            id=\"favcolor\"\r\n                            name=\"QRCodeColor\"\r\n                          />\r\n                        </CCol>\r\n                      </CRow>\r\n                      <CRow className=\"mb-3\">\r\n                        <CFormLabel\r\n                          htmlFor=\"inputPassword\"\r\n                          className=\"col-sm-6 col-form-label\"\r\n                        >\r\n                          {t(\"QR_code_background_color\")}\r\n                        </CFormLabel>\r\n                        <CCol sm={6} className=\"text-center\">\r\n                          <input\r\n                            type=\"color\"\r\n                            onChange={handleInput}\r\n                            value={themes.QRCodeBackgroundColor}\r\n                            id=\"favcolor\"\r\n                            name=\"QRCodeBackgroundColor\"\r\n                          />\r\n                        </CCol>\r\n                      </CRow>\r\n                    </CCardBody>\r\n                  </CCard>\r\n                </div>\r\n              </div>\r\n              <div className=\"text-right mx-4 mb-4\">\r\n                <button className=\"btn btn-primary\" type=\"submit\">\r\n                  {t(\"save\")}\r\n                </button>\r\n              </div>\r\n            </Form>\r\n          </div>\r\n          <div className=\"row mt-2\">\r\n            {viewThemes_HTMLTABLE}\r\n\r\n            <div className=\"col-xl-4 col-lg-4 col-sm-6\">\r\n              <div className=\"card overflow-hidden \">\r\n                <div\r\n                  className=\"card-body d-flex justify-content-center text-center\"\r\n                  style={{ border: \"2px dashed pink\" }}\r\n                >\r\n                  <div className=\"align-self-center text-center\">\r\n                    <div>\r\n                      <img src={palette} alt=\"\" />\r\n                    </div>\r\n                    <div className=\"pt-3\">\r\n                      <Link\r\n                        className=\"btn btn-outline-primary\"\r\n                        to={{\r\n                          pathname: `${url}/add-theme`,\r\n                          state: { id: branchId },\r\n                        }}\r\n                      >\r\n                        {t(\"new_theme\")}\r\n                      </Link>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </CTabPane>\r\n      </CTabContent>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Design;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Variants\\Variants.js",["440","441","442","443","444","445","446","447","448","449","450","451","452","453","454","455","456","457","458"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport Grid from \"./Grid\";\r\nimport { CBreadcrumb } from \"@coreui/react\";\r\nimport Select from \"react-select\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\n\r\nconst Variants = (props) => {\r\n  // for localization\r\n  const history = useHistory();\r\n\r\n  const { t } = useTranslation();\r\n  const id = props.history.location.state.id;\r\n\r\n  const [nameAttr, setNameAtter] = useState({});\r\n  const [attributes, setAttributes] = useState([]);\r\n  const [filterAttributes, setfilterAttributes] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [numberOfVar, setNumberOfVar] = useState([]);\r\n  const [jsonVaraints, setJsonVaratis] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const getdata = async () => {\r\n      const jsonvar = await axios({\r\n        method: \"GET\",\r\n        url: `/api/Getvariations/${id}`,\r\n      });\r\n      if (jsonvar.data.status == 200) {\r\n        setJsonVaratis(jsonvar.data.fetchData);\r\n      }\r\n\r\n      const res = await axios({\r\n        method: \"POST\",\r\n        url: \"/api/GetAttributes\",\r\n      });\r\n      const nameAtter = {};\r\n      res.data.fetchData.map((fetchData) => {\r\n        nameAtter[fetchData.attributeName] = \"\";\r\n      });\r\n      if (\r\n        res.data.fetchData.length !== attributes.length &&\r\n        jsonvar.data.fetchData == \"\"\r\n      ) {\r\n        const varLines = [];\r\n\r\n        res.data.fetchData.map((fetchData) => {\r\n          nameAtter[fetchData.attributeName] = \"\";\r\n        });\r\n\r\n        varLines.push({\r\n          postion: 0,\r\n          sku: \"\",\r\n          price: \"\",\r\n          stock: \"\",\r\n          image: [],\r\n          // ...nameAtter,\r\n        });\r\n        // setNameAtter(nameAtter);\r\n\r\n        setNumberOfVar(varLines);\r\n        setAttributes(res.data.fetchData);\r\n      } else {\r\n        const varLines = [];\r\n\r\n        const arrayVar = JSON.parse(jsonvar.data.fetchData);\r\n        const AttNames = {};\r\n\r\n        arrayVar.map((fetchData) => {\r\n          const attrFilterName = [];\r\n\r\n          let line = {};\r\n          let count = 0;\r\n          for (const [key, value] of Object.entries(fetchData)) {\r\n            if (\r\n              key == \"postion\" ||\r\n              key == \"sku\" ||\r\n              key == \"price\" ||\r\n              key == \"stock\" ||\r\n              key == \"image\"\r\n            ) {\r\n              line[key] = value;\r\n            } else if (nameAtter.hasOwnProperty(key)) {\r\n              line[key] = value;\r\n              attrFilterName.push({\r\n                value: key,\r\n                label: key,\r\n              });\r\n              AttNames[key] = \"\";\r\n            } else {\r\n              if (count < Object.keys(nameAtter).length) {\r\n                line[Object.keys(nameAtter)[count]] = value;\r\n              }\r\n              count++;\r\n            }\r\n          }\r\n\r\n          varLines.push(line);\r\n          setfilterAttributes(attrFilterName);\r\n        });\r\n        setNameAtter(AttNames);\r\n        // console.log(nameAttr);\r\n\r\n        setNumberOfVar(varLines);\r\n        setAttributes(res.data.fetchData);\r\n      }\r\n    };\r\n\r\n    getdata();\r\n    setLoading(false);\r\n  }, []);\r\n  const CreateNewVar = () => {\r\n    let postion = 0;\r\n    if (numberOfVar.length > 0) {\r\n      postion = numberOfVar.length;\r\n    }\r\n    setNumberOfVar([\r\n      ...numberOfVar,\r\n      {\r\n        postion: postion,\r\n        sku: \"\",\r\n        price: \"\",\r\n        stock: \"\",\r\n        image: [],\r\n        ...nameAttr,\r\n      },\r\n    ]);\r\n  };\r\n  const removeVar = () => {\r\n    const varsLines = numberOfVar;\r\n    varsLines.pop();\r\n    setNumberOfVar([...varsLines]);\r\n  };\r\n  // select box\r\n  const getJSONVaraints = (items) => {\r\n    setJsonVaratis(items);\r\n  };\r\n  const saveVaraiants = async () => {\r\n    if (numberOfVar.length === JSON.parse(jsonVaraints).length) {\r\n      const formdata = new FormData();\r\n      formdata.append(\"product_id\", id);\r\n      formdata.append(\"vars\", jsonVaraints);\r\n      const res = await axios({\r\n        method: \"post\",\r\n        data: formdata,\r\n        url: \"/api/saveVars\",\r\n      });\r\n      if (res.data.status === 200) {\r\n        swal(\"Success\", res.data.message, \"success\");\r\n      } else {\r\n        swal(\"error\", res.data.message, \"error\");\r\n      }\r\n    } else {\r\n      console.log(jsonVaraints);\r\n      return;\r\n    }\r\n  };\r\n  const recheckitem = (item) => {\r\n    console.log(item);\r\n  };\r\n\r\n  // select box\r\n  const handleSelectEvent = (e) => {\r\n    const nameAtter = {};\r\n    // console.log(filterAttributes);\r\n    // console.log(e);\r\n\r\n    const inputFilter = filterAttributes?.length ? filterAttributes?.length : 0;\r\n    const input = e?.length ? e?.length : 0;\r\n    if (input > inputFilter) {\r\n      if (inputFilter === 0) {\r\n        e?.map((item) => {\r\n          nameAtter[item.label] = \"\";\r\n          numberOfVar.map((vars) => {\r\n            vars[item.label] = vars[item.label] ? vars[item.label] : \"\";\r\n          });\r\n        });\r\n      } else {\r\n        e?.map((item) => {\r\n          nameAtter[item.label] = \"\";\r\n          numberOfVar.map((vars) => {\r\n            vars[item.label] = vars[item.label] ? vars[item.label] : \"\";\r\n          });\r\n        });\r\n      }\r\n    } else if (input < inputFilter) {\r\n      if (input === 0) {\r\n        var uniqueResultOne = filterAttributes;\r\n      } else {\r\n        var uniqueResultOne = filterAttributes.filter(function (obj) {\r\n          return !e.some(function (obj2) {\r\n            return obj.value == obj2.value;\r\n          });\r\n        });\r\n      }\r\n      const label = uniqueResultOne[0].label;\r\n      numberOfVar.map((vars) => {\r\n        delete vars[label];\r\n      });\r\n      e?.map((item) => {\r\n        nameAtter[item.label] = \"\";\r\n      });\r\n    }\r\n\r\n    // Object.keys(vars).splice(index, 1);\r\n    //   console.log(vars);\r\n    setfilterAttributes(e);\r\n    setNameAtter(nameAtter);\r\n    setNumberOfVar(numberOfVar);\r\n  };\r\n  if (loading) {\r\n    return (\r\n      <div className=\"spinner-border text-primary \" role=\"status\">\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <Fragment>\r\n        <CBreadcrumb style={{ \"--cui-breadcrumb-divider\": \"'>'\" }}>\r\n          <Link\r\n            className=\"font-weight-bold\"\r\n            to=\"\"\r\n            onClick={() => history.goBack()}\r\n          >\r\n            {t(\"back_to_products_list\")}\r\n          </Link>\r\n        </CBreadcrumb>\r\n\r\n        <div className=\"row\">\r\n          <div className=\"col-xl-12 col-lg-12 col-sm-12 \">\r\n            <div className=\"card \">\r\n              <Select\r\n                value={filterAttributes}\r\n                isMulti\r\n                options={attributes.map((o, i) => {\r\n                  return { value: o.attributeName, label: o.attributeName };\r\n                })}\r\n                onChange={handleSelectEvent}\r\n                // name=\"attributeName\"\r\n                className=\"basic-multi-select\"\r\n                classNamePrefix=\"select\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"row\">\r\n          <div className=\"col-xl-12 col-lg-12 col-sm-12 \">\r\n            <div className=\"card \">\r\n              <div className=\"col-xl-12 col-lg-12 col-sm-12 \">\r\n                <Grid\r\n                  recheck={(item) => {\r\n                    recheckitem(item);\r\n                  }}\r\n                  getJSONVaraints={(items) => getJSONVaraints(items)}\r\n                  numberOfVar={numberOfVar}\r\n                  filterAttributes={filterAttributes}\r\n                  productid={id}\r\n                ></Grid>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-xl-12 col-lg-12 col-sm-12\">\r\n            <div className=\"row \">\r\n              <div className=\"col-xl-1 col-lg-1 col-sm-1\">\r\n                <Button onClick={CreateNewVar}> Add Variant</Button>\r\n              </div>\r\n              <div className=\"col-xl-1 col-lg-1 col-sm-1\">\r\n                <Button onClick={removeVar}>Remove Variant</Button>\r\n              </div>\r\n              <div className=\"col-xl-1 col-lg-1 col-sm-1\">\r\n                <Button onClick={saveVaraiants}> Save Variants</Button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Variants;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Products\\Product.js",["459","460","461","462"],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Variants\\Grid.js",["463","464","465","466","467","468","469","470","471","472","473","474","475"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport axios from \"axios\";\r\nimport { base_url, port } from \"../../../Consts\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Tooltip from \"@mui/material/Tooltip\";\r\nconst VariantsLine = (props) => {\r\n  const { items, filterAttributes, productid, setVarantGrid } = props;\r\n  const [values, setValues] = useState(items);\r\n  if (Object.keys(items).length !== Object.keys(values).length) {\r\n    setValues(items);\r\n  }\r\n\r\n  let [errors, setErrors] = useState({});\r\n  useEffect(() => {\r\n    setVarantGrid({\r\n      ...values,\r\n    });\r\n    // setValues(items);\r\n  }, [values]);\r\n  const genrateSku = () => {\r\n    let sku = productid + \"-\";\r\n    let c = 1;\r\n    filterAttributes.map((atter) => {\r\n      if (values[atter.label] != \"\") {\r\n        if (c == filterAttributes.length) {\r\n          sku += values[atter.label];\r\n        } else {\r\n          sku += values[atter.label] + \"-\";\r\n        }\r\n      }\r\n      c++;\r\n    });\r\n\r\n    return sku;\r\n  };\r\n  const Change = (event) => {\r\n    if (event.target.name == \"image\") {\r\n      uploadImage(event);\r\n    } else {\r\n      setValues({\r\n        ...values,\r\n        [event.target.name]: event.target.value,\r\n      });\r\n    }\r\n    // console.log(values);\r\n  };\r\n  const uploadImage = (event) => {\r\n    const formData = new FormData();\r\n    for (let i = 0; i < event.target.files.length; i++) {\r\n      formData.append(\"file[]\", event.target.files[i]);\r\n    }\r\n    const images = [];\r\n\r\n    axios.post(\"/api/uploadImage\", formData).then((res) => {\r\n      if (res.data.status === 200) {\r\n        values.image.map((item) => {\r\n          images.push(item);\r\n        });\r\n        res.data.filenames.map((item) => {\r\n          images.push(item);\r\n        });\r\n        setValues({\r\n          ...values,\r\n          image: images,\r\n        });\r\n      }\r\n    });\r\n  };\r\n  const removeImage = (e, image) => {\r\n    e.preventDefault();\r\n    axios.post(`/api/removeImage/${image}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setValues({\r\n          ...values,\r\n          image: values.image.filter((item) => item !== image),\r\n        });\r\n        // setImagesName(imagesName.filter((item) => item !== image));\r\n      }\r\n    });\r\n  };\r\n  const changeSku = (event) => {\r\n    const name = event.target.name;\r\n    const check = filterAttributes.some((attribute) => {\r\n      return attribute.label === name;\r\n    });\r\n\r\n    if (!check) {\r\n      const error = {};\r\n      if (isNaN(event.target.value)) {\r\n        error[name] = true;\r\n        error[name + \"message\"] = \"Please Enter A Real Number\";\r\n        setErrors({ ...errors, ...error });\r\n      } else {\r\n        error[name] = false;\r\n        error[name + \"message\"] = \"\";\r\n        setErrors({ ...errors, ...error });\r\n      }\r\n    }\r\n    let sku = genrateSku();\r\n\r\n    if (sku != \"\") {\r\n      setValues({\r\n        ...values,\r\n        sku: sku,\r\n      });\r\n    }\r\n    console.log({\r\n      [event.target.name]: event.target.value,\r\n      ...values,\r\n      sku: sku,\r\n    });\r\n  };\r\n\r\n  // console.log(items);\r\n  // console.log(values);\r\n  const outputs = [];\r\n  for (const [key, value] of Object.entries(values)) {\r\n    if (key != \"postion\") {\r\n      outputs.push(\r\n        <div className=\"col-xl-2 col-lg-2 col-sm-2 p-4  \">\r\n          <input\r\n            className={\r\n              errors[key] ? \" form-control is-invalid\" : \"form-control\"\r\n            }\r\n            disabled={key == \"sku\"}\r\n            value={key == \"image\" ? \"\" : value}\r\n            onBlur={(event) => {\r\n              changeSku(event);\r\n            }}\r\n            onChange={(event) => Change(event)}\r\n            name={key}\r\n            type={key == \"image\" ? \"file\" : \"\"}\r\n            multiple\r\n          ></input>\r\n          {errors[key] ? (\r\n            <div className=\"invalid-feedback\">{errors[key + \"message\"]}</div>\r\n          ) : null}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      <div className=\"col-xl-12 col-lg-12 col-sm-12 \">\r\n        <div className=\"row\">{outputs}</div>\r\n      </div>\r\n      <div className=\"col-xl-12 col-lg-12 col-sm-12 \">\r\n        <div className=\"row\">\r\n          {values.image?.map((photo) => {\r\n            return (\r\n              <div className=\"col-xl-2 col-lg-2 col-sm-2\" key={photo}>\r\n                <div className=\"card \">\r\n                  <div className=\"text-center\">\r\n                    <img\r\n                      className=\"w-100\"\r\n                      src={`http://${base_url}:${port}/images/variants_pics/${photo}`}\r\n                      alt=\"\"\r\n                      key={photo}\r\n                      style={{\r\n                        // width: \"100px\",\r\n                        height: \"100px\",\r\n                        objectFit: \"contain\",\r\n                      }}\r\n                    />\r\n                  </div>\r\n\r\n                  <div className=\"card-footer pt-0 pb-0 text-center\">\r\n                    <div className=\"row\">\r\n                      <Tooltip title=\"Delete\">\r\n                        <IconButton onClick={(e) => removeImage(e, photo)}>\r\n                          <DeleteIcon fontSize=\"small\" />\r\n                        </IconButton>\r\n                      </Tooltip>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst VariantsGrid = (props) => {\r\n  const { t } = useTranslation();\r\n\r\n  const { filterAttributes, numberOfVar, productid, getJSONVaraints, recheck } =\r\n    props;\r\n  const [varintGrid, setVariantGrid] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (numberOfVar.length !== 0) {\r\n      setVariantGrid(numberOfVar);\r\n    }\r\n  }, [numberOfVar]);\r\n  const vars = numberOfVar.map((item, i) => (\r\n    <VariantsLine\r\n      key={i}\r\n      recheck={recheck}\r\n      key={item.postion}\r\n      setVarantGrid={(item) => setVarantGrid(item)}\r\n      items={item}\r\n      productid={productid}\r\n      filterAttributes={filterAttributes}\r\n    ></VariantsLine>\r\n  ));\r\n\r\n  const setVarantGrid = (item) => {\r\n    if (item.sku !== \"\") {\r\n      let modifyVariant = varintGrid;\r\n\r\n      modifyVariant[item.postion] = item;\r\n      setVariantGrid(modifyVariant);\r\n      getJSONVaraints(JSON.stringify(varintGrid));\r\n    } else {\r\n      console.log(\"fssds\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"col-xl-12 col-lg-12 col-sm-12 \">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-2  p-4\">{t(\"sku\")}</div>\r\n          <div className=\"col-md-2  p-4\">{t(\"price\")}</div>\r\n          <div className=\"col-md-2  p-4\">{t(\"stock\")}</div>\r\n          <div className=\"col-md-2  p-4\">{t(\"image\")}</div>\r\n\r\n          {filterAttributes?.map((sec, i) => (\r\n            <div className=\"col-md-2  p-4\" key={i}>\r\n              {sec.label}\r\n            </div>\r\n          ))}\r\n        </div>\r\n        {vars}\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\nexport default VariantsGrid;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Second\\ProductDetails.js",["476","477","478","479","480","481","482","483","484","485","486","487","488","489","490","491","492","493","494","495","496","497"],"import React, { Fragment, useState, useEffect, SyntheticEvent } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// Import css files\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport Footer from \"./Footer\";\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport Container from \"@mui/material/Container\";\r\n// import Slider from \"react-slick\";\r\nimport Header from \"./Header\";\r\nimport { base_url, port } from \"../../../../../Consts\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardMedia from \"@mui/material/CardMedia\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Tabs from \"@mui/material/Tabs\";\r\nimport Tab from \"@mui/material/Tab\";\r\nimport Box from \"@mui/material/Box\";\r\n\r\nimport { Zoom } from \"react-slideshow-image\";\r\nimport \"react-slideshow-image/dist/styles.css\";\r\nimport Accordion from \"@mui/material/Accordion\";\r\nimport AccordionSummary from \"@mui/material/AccordionSummary\";\r\nimport AccordionDetails from \"@mui/material/AccordionDetails\";\r\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport \"../style.css\";\r\nconst ProductDetails = (props) => {\r\n  const [themeCustomization, setThemeCustomization] = useState([]);\r\n\r\n  const theme = createTheme({\r\n    palette: {\r\n      warning: {\r\n        // button background\r\n        main: themeCustomization?.button_background_color\r\n          ? themeCustomization.button_background_color\r\n          : \"#ff751d\",\r\n      },\r\n    },\r\n    typography: {\r\n      fontFamily: themeCustomization?.font\r\n        ? themeCustomization.font\r\n        : \"sans-serif\",\r\n      subtitle1: {\r\n        fontSize: themeCustomization?.product_discription_font_size\r\n          ? themeCustomization.product_discription_font_size\r\n          : 10,\r\n        color: themeCustomization?.product_discription_color\r\n          ? themeCustomization.product_discription_color\r\n          : \"#777\",\r\n      },\r\n      // price\r\n      body1: {\r\n        fontSize: themeCustomization?.price_font_size\r\n          ? themeCustomization.price_font_size\r\n          : 12,\r\n        color: themeCustomization?.price_color\r\n          ? themeCustomization.price_color\r\n          : \"#f1fcfe\",\r\n      },\r\n      // product Names\r\n      button: {\r\n        fontSize: themeCustomization?.product_name_font_size\r\n          ? themeCustomization.product_name_font_size\r\n          : 12,\r\n        color: themeCustomization?.product_name_color\r\n          ? themeCustomization.product_name_color\r\n          : \"#ff751d\",\r\n      },\r\n      // categories and sub categories\r\n      overline: {\r\n        fontSize: themeCustomization?.categories_and_sub_categoies_font_size\r\n          ? themeCustomization.categories_and_sub_categoies_font_size\r\n          : 12,\r\n        color: themeCustomization?.categories_and_sub_categoies_color\r\n          ? themeCustomization.categories_and_sub_categoies_color\r\n          : \"#ff751d\",\r\n      },\r\n      // branch Name\r\n      h6: {\r\n        fontSize: themeCustomization?.branch_name_font_size\r\n          ? themeCustomization.branch_name_font_size\r\n          : 14,\r\n        color: themeCustomization?.branch_name_color\r\n          ? themeCustomization.branch_name_color\r\n          : \"#ff751d\",\r\n      },\r\n    },\r\n    components: {\r\n      MuiButton: {\r\n        variants: [\r\n          {\r\n            // button\r\n            props: { variant: \"contained\" },\r\n            style: {\r\n              fontSize: themeCustomization?.button_text_font_size\r\n                ? themeCustomization.button_text_font_size\r\n                : 12,\r\n              color: themeCustomization?.button_text_color\r\n                ? themeCustomization.button_text_color\r\n                : \"#f1fcfe\",\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n  });\r\n  // for localization\r\n  const { t } = useTranslation();\r\n  const id = atob(props.match.params.id);\r\n  //for retriving data using laravel API\r\n  const themes = props.history.location.state.themes;\r\n  let varData = [];\r\n  //for retriving data using laravel API\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [variantData, setVariantData] = useState([]);\r\n  const [showVaralint, setShowVarlist] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [skuarray, setSkuArray] = useState([]);\r\n  const [productDetails, setProductDetails] = useState({\r\n    price: 0,\r\n    stock: 0,\r\n    image: fetchData?.image,\r\n  });\r\n  useEffect(() => {\r\n    const getdata = async () => {\r\n      const product = await axios({\r\n        method: \"GET\",\r\n        url: `/api/GetProduct/${id}`,\r\n      });\r\n      const data = product.data.fetchData;\r\n\r\n      const res = await axios({\r\n        method: \"GET\",\r\n        url: `/api/Getvariations/${id}`,\r\n      });\r\n      setFetchData(data[0]);\r\n      if (res.data.fetchData !== \"\") {\r\n        varData = JSON.parse(res.data.fetchData);\r\n        parseVariants(varData);\r\n      }\r\n\r\n      setLoading(false);\r\n    };\r\n    getdata(); // axios\r\n  }, [id]);\r\n  const changePrice = (varName, variant) => {\r\n    const keys = Object.keys(showVaralint);\r\n    const varlineindex = keys.indexOf(varName);\r\n    const newSkuArray = skuarray;\r\n    newSkuArray[varlineindex] = variant;\r\n    setSkuArray(newSkuArray);\r\n    if (keys.length == newSkuArray.length) {\r\n      caluclatePrice(newSkuArray, variantData);\r\n    }\r\n  };\r\n  const caluclatePrice = (newSkuArray, variantData) => {\r\n    let sku = id + \"-\";\r\n    for (let i = 0; i < newSkuArray.length; i++) {\r\n      if (i == newSkuArray.length - 1) {\r\n        sku += newSkuArray[i];\r\n      } else {\r\n        sku += newSkuArray[i] + \"-\";\r\n      }\r\n    }\r\n\r\n    const priceList = variantData.filter((item) => {\r\n      return item.sku.replace(/\\s+/g, \"\") == sku.replace(/\\s+/g, \"\");\r\n    });\r\n    console.log(newSkuArray);\r\n    let productdetails = { price: 0, stock: 0 };\r\n    if (priceList.length !== 0) {\r\n      const line = priceList.pop();\r\n      const newProductDetails = {\r\n        price: line.price,\r\n        stock: line.stock,\r\n        image: line.image,\r\n      };\r\n      productdetails = newProductDetails;\r\n    } else {\r\n      const newProductDetails = {\r\n        price: 0,\r\n        stock: \"No Stock\",\r\n        image: fetchData.image,\r\n      };\r\n      productdetails = newProductDetails;\r\n    }\r\n    setProductDetails({ ...productdetails });\r\n  };\r\n  const parseVariants = (variantData) => {\r\n    const variants = [];\r\n    const savePostion = [\"postion\", \"sku\", \"price\", \"stock\", \"image\"];\r\n    const varLine = variantData[0];\r\n    const varlinekey = Object.keys(varLine);\r\n    for (let i = 0; i < varlinekey.length; i++) {\r\n      if (savePostion.indexOf(varlinekey[i]) == -1) {\r\n        let listvar = variantData.map((item) => {\r\n          return item[varlinekey[i]];\r\n        });\r\n        // get unique variants\r\n        listvar = listvar.filter(\r\n          (thing, index, self) =>\r\n            index ===\r\n            self.findIndex((t) => t.place === listvar.place && t === thing)\r\n        );\r\n        if (listvar[0] != 0) variants[varlinekey[i]] = listvar;\r\n      }\r\n    }\r\n    let def = [];\r\n    Object.keys(variants).map((item) => {\r\n      def.push(variants[item][0]);\r\n    });\r\n    setSkuArray(def);\r\n    caluclatePrice(def, variantData);\r\n    setShowVarlist(variants);\r\n    setVariantData(variantData);\r\n  };\r\n  const [ingredients, setIntgredients] = useState([]);\r\n  const changeIngredients = (label) => {\r\n    if (!ingredients.includes(label) === false) {\r\n      setIntgredients(ingredients.filter((item) => item !== label));\r\n    } else {\r\n      setIntgredients([...ingredients, label]);\r\n    }\r\n  };\r\n  let [sum, setSum] = useState(0);\r\n\r\n  const extraHandlers = (e, price) => {\r\n    if (e.target.checked) {\r\n      // console.log((sum += parseInt(price)));\r\n      setSum((sum += parseInt(price)));\r\n    } else {\r\n      setSum((sum -= parseInt(price)));\r\n    }\r\n  };\r\n\r\n  const zoomOutProperties = {\r\n    duration: 100,\r\n    transitionDuration: 5,\r\n    canSwipe: true,\r\n    indicators: true,\r\n    scale: false,\r\n    autoplay: false,\r\n    indicators: (i) => (\r\n      <div className=\"indicator\">\r\n        <img\r\n          src={\r\n            productDetails?.stock === \"No Stock\" || productDetails?.stock === 0\r\n              ? `http://${base_url}:${port}/images/products/${fetchData?.image}`\r\n              : `http://${base_url}:${port}/images/variants_pics/${productDetails.image[i]}`\r\n          }\r\n          width=\"40px\"\r\n          // className=\"p-1\"\r\n          // style={{ width: \"40px\" }}\r\n        />\r\n      </div>\r\n    ),\r\n  };\r\n\r\n  var viewImages_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"container \">\r\n        <div\r\n          className=\"spinner-border text-primary \"\r\n          role=\"status\"\r\n          style={{ position: \"fixed\", top: \"50%\", left: \"50%\" }}\r\n        >\r\n          <span className=\"sr-only\">{t(\"loading\")}</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewImages_HTMLTABLE = (\r\n      <Grid container>\r\n        <Grid item xs={12} sm={5} md={5} lg={5}>\r\n          <div className=\"row col-md-12 text-center \">\r\n            <Zoom {...zoomOutProperties}>\r\n              {(() => {\r\n                if (Array.isArray(productDetails.image)) {\r\n                  return productDetails.image?.map((image) => {\r\n                    return (\r\n                      <div key={image} style={{ width: \"100%\" }}>\r\n                        <img\r\n                          src={`http://${base_url}:${port}/images/variants_pics/${image}`}\r\n                          style={{\r\n                            height: \"500px\",\r\n                            width: \"100%\",\r\n                            objectFit: \"contain\",\r\n                          }}\r\n                          // className=\"img-thumbnail\"\r\n                          alt=\"\"\r\n                        />\r\n                      </div>\r\n                    );\r\n                  });\r\n                } else {\r\n                  return (\r\n                    <div style={{ width: \"100%\" }}>\r\n                      <img\r\n                        src={\r\n                          productDetails.stock === \"No Stock\" ||\r\n                          productDetails?.stock === 0\r\n                            ? `http://${base_url}:${port}/images/products/${\r\n                                productDetails.image\r\n                                  ? productDetails?.image\r\n                                  : fetchData?.image\r\n                              }`\r\n                            : `http://${base_url}:${port}/images/variants_pics/${productDetails.image}`\r\n                        }\r\n                        style={{\r\n                          height: \"500px\",\r\n                          width: \"100%\",\r\n                          objectFit: \"contain\",\r\n                        }}\r\n                        alt=\"\"\r\n                      />\r\n                    </div>\r\n                  );\r\n                }\r\n              })()}\r\n            </Zoom>\r\n          </div>\r\n        </Grid>\r\n\r\n        <Grid item xs={12} sm={7} md={7} lg={7}>\r\n          <Card\r\n            sx={{\r\n              // height: \"100%\",\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n            }}\r\n          >\r\n            <div className=\"row mx-3 mt-3\">\r\n              <Typography variant=\"overline\" gutterBottom>\r\n                {t(\"product_name\")}: {fetchData?.ProductName}\r\n              </Typography>\r\n              <Typography variant=\"body2\" gutterBottom>\r\n                {t(\"description\")}: {fetchData?.Description}\r\n              </Typography>\r\n              <Typography variant=\"body2\" gutterBottom>\r\n                {t(\"unit\")}: {fetchData?.UnitName}\r\n              </Typography>\r\n\r\n              {themes?.preparation_time != 0 ? (\r\n                <Typography variant=\"body2\" gutterBottom>\r\n                  {t(\"preparation_Time\")}: {fetchData?.preparationTime} Minutes\r\n                </Typography>\r\n              ) : (\r\n                \" \"\r\n              )}\r\n              <p>\r\n                {t(\"price\")} :{\" \"}\r\n                {productDetails.price === 0\r\n                  ? fetchData?.price + sum\r\n                  : parseInt(productDetails.price) + sum}\r\n              </p>\r\n              <p>\r\n                {t(\"stock\")}:{\" \"}\r\n                {productDetails.stock === 0\r\n                  ? fetchData?.stock\r\n                  : productDetails.stock}\r\n              </p>\r\n            </div>\r\n            <div className=\"row mx-3\">\r\n              <Typography variant=\"overline\" gutterBottom>\r\n                {t(\"ingredients\")}\r\n              </Typography>\r\n              <small>Please select the ingredients you want to remove.</small>\r\n            </div>\r\n            <div className=\"row mx-4\">\r\n              {JSON.parse(fetchData.ingredients)?.map((item, i) => {\r\n                return (\r\n                  <div\r\n                    className=\"col-md-auto col-sm-auto col-xl-auto col-lg-auto col-auto\"\r\n                    onClick={() => {\r\n                      changeIngredients(item.label);\r\n                    }}\r\n                    style={\r\n                      ingredients.includes(item.label)\r\n                        ? {\r\n                            cursor: \"pointer\",\r\n\r\n                            padding: \"3px\",\r\n                            margin: \"2px\",\r\n                            border: \"1px solid\",\r\n                            textAlign: \"center\",\r\n                            borderColor: \"red\",\r\n                            textDecoration: \"line-through\",\r\n                            color: \"red\",\r\n                          }\r\n                        : {\r\n                            cursor: \"pointer\",\r\n                            padding: \"3px\",\r\n                            margin: \"2px\",\r\n                            border: \"1px solid\",\r\n                            textAlign: \"center\",\r\n                            // borderRadius: \"10px\",\r\n                            borderColor: \"black\",\r\n                          }\r\n                    }\r\n                  >\r\n                    {item.label}\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n            <div className=\"row m-3\">\r\n              <Accordion>\r\n                <AccordionSummary\r\n                  expandIcon={<ExpandMoreIcon />}\r\n                  aria-controls=\"panel1a-content\"\r\n                  id=\"panel1a-header\"\r\n                >\r\n                  <Typography variant=\"overline\" gutterBottom>\r\n                    {t(\"extras\")}\r\n                  </Typography>\r\n                </AccordionSummary>\r\n                <AccordionDetails>\r\n                  <FormGroup>\r\n                    {JSON.parse(fetchData.extras)?.map((item, i) => {\r\n                      return (\r\n                        <FormControlLabel\r\n                          key={i}\r\n                          control={\r\n                            <Checkbox\r\n                              onChange={(e) => {\r\n                                extraHandlers(e, item.price);\r\n                              }}\r\n                              color=\"default\"\r\n                              sx={{\r\n                                color: themeCustomization?.branch_name_color\r\n                                  ? themeCustomization.branch_name_color\r\n                                  : \"#ff751d\",\r\n                              }}\r\n                            />\r\n                          }\r\n                          label={\r\n                            <Typography variant=\"body2\" gutterBottom>\r\n                              {item.label + \" ( +\" + item.price + \".00\" + \" )\"}\r\n                            </Typography>\r\n                          }\r\n                        />\r\n                      );\r\n                    })}\r\n                  </FormGroup>\r\n                </AccordionDetails>\r\n              </Accordion>\r\n            </div>\r\n\r\n            <div className=\"row m-3\">\r\n              <Typography variant=\"overline\" gutterBottom>\r\n                {t(\"vatiants\")}\r\n              </Typography>\r\n            </div>\r\n\r\n            <div className=\"row mx-2\">\r\n              {Object.keys(showVaralint).map((list, i) => {\r\n                return (\r\n                  <div className=\"row \" key={i}>\r\n                    <div className=\"col-md-auto col-sm-auto col-xl-auto col-lg-auto col-auto\">\r\n                      {list}\r\n                      <div className=\"row\">\r\n                        {showVaralint[list].map((variant) => {\r\n                          return (\r\n                            <div className=\"col-md-auto col-sm-auto col-xl-auto col-lg-auto col-auto\">\r\n                              <div\r\n                                onClick={() => {\r\n                                  changePrice(list, variant);\r\n                                }}\r\n                                style={\r\n                                  skuarray[i] == variant\r\n                                    ? {\r\n                                        cursor: \"pointer\",\r\n                                        margin: \"2px\",\r\n                                        padding: \"5px\",\r\n                                        border: \"1px solid\",\r\n                                        textAlign: \"center\",\r\n                                        borderRadius: \"10px\",\r\n                                        borderColor: \"red\",\r\n                                      }\r\n                                    : {\r\n                                        cursor: \"pointer\",\r\n                                        margin: \"2px\",\r\n\r\n                                        padding: \"5px\",\r\n                                        border: \"1px solid\",\r\n                                        textAlign: \"center\",\r\n                                        borderRadius: \"10px\",\r\n                                        borderColor: \"black\",\r\n                                      }\r\n                                }\r\n                              >\r\n                                {variant}\r\n                              </div>\r\n                            </div>\r\n                          );\r\n                        })}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <Container maxWidth=\"lg\">\r\n        <Header\r\n          // title={branch[0]?.BrancheName}\r\n          categories={0}\r\n          subcategories={0}\r\n          // setSubCategories={setSubCategories}\r\n          // activeSubCategory={activeSubCategory}\r\n        />\r\n        <main>\r\n          <Grid container spacing={2}>\r\n            {viewImages_HTMLTABLE}\r\n          </Grid>\r\n        </main>\r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default ProductDetails;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Thrid\\ProductsList.js",["498","499"],"import React, { useState, useEffect } from \"react\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Container from \"@mui/material/Container\";\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardMedia from \"@mui/material/CardMedia\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport axios from \"axios\";\r\nimport { base_url, port } from \"../../../../../Consts\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport Box from \"@mui/material/Box\";\r\nimport getSymbolFromCurrency from \"currency-symbol-map\";\r\n\r\nexport default function ProductsList(props) {\r\n  const [loading, setLoading] = useState(true);\r\n  const { t } = useTranslation();\r\n  const cateId = atob(props.match.params.id);\r\n  const SubCategoryName = props.history.location.state.SubCategoryName;\r\n\r\n  const [products, setProducts] = useState([]);\r\n  const [themeCustomization, setThemeCustomization] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios.get(`/api/GetProductsBasedOnSubCategory/${cateId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setProducts(res.data.data);\r\n        console.log(res.data.data);\r\n      }\r\n      setLoading(false);\r\n    });\r\n  }, []);\r\n\r\n  // design start\r\n  const theme = createTheme({\r\n    palette: {\r\n      warning: {\r\n        // button background\r\n        main: themeCustomization?.button_background_color\r\n          ? themeCustomization.button_background_color\r\n          : \"#ff751d\",\r\n      },\r\n    },\r\n    typography: {\r\n      fontFamily: themeCustomization?.font\r\n        ? themeCustomization.font\r\n        : \"sans-serif\",\r\n      subtitle1: {\r\n        fontSize: themeCustomization?.product_discription_font_size\r\n          ? themeCustomization.product_discription_font_size\r\n          : 10,\r\n        color: themeCustomization?.product_discription_color\r\n          ? themeCustomization.product_discription_color\r\n          : \"#777\",\r\n      },\r\n      // price\r\n      body1: {\r\n        fontSize: themeCustomization?.price_font_size\r\n          ? themeCustomization.price_font_size\r\n          : 12,\r\n        color: themeCustomization?.price_color\r\n          ? themeCustomization.price_color\r\n          : \"#f1fcfe\",\r\n      },\r\n      // product Names\r\n      button: {\r\n        fontSize: themeCustomization?.product_name_font_size\r\n          ? themeCustomization.product_name_font_size\r\n          : 14,\r\n        color: themeCustomization?.product_name_color\r\n          ? themeCustomization.product_name_color\r\n          : \"#1f1d1f\",\r\n      },\r\n      // categories and sub categories\r\n      overline: {\r\n        fontSize: themeCustomization?.categories_and_sub_categoies_font_size\r\n          ? themeCustomization.categories_and_sub_categoies_font_size\r\n          : 12,\r\n        color: themeCustomization?.categories_and_sub_categoies_color\r\n          ? themeCustomization.categories_and_sub_categoies_color\r\n          : \"#ff751d\",\r\n      },\r\n      // branch Name\r\n      h4: {\r\n        fontSize: themeCustomization?.branch_name_font_size\r\n          ? themeCustomization.branch_name_font_size\r\n          : 28,\r\n        color: themeCustomization?.branch_name_color\r\n          ? themeCustomization.branch_name_color\r\n          : \"#aa3f32\",\r\n      },\r\n      subtitle2: {\r\n        fontSize: themeCustomization?.branch_name_font_size\r\n          ? themeCustomization.branch_name_font_size\r\n          : 12,\r\n        color: themeCustomization?.branch_name_color\r\n          ? themeCustomization.branch_name_color\r\n          : \"#1f1d1f\",\r\n      },\r\n    },\r\n    components: {\r\n      MuiButton: {\r\n        variants: [\r\n          {\r\n            // button\r\n            props: { variant: \"contained\" },\r\n            style: {\r\n              fontSize: themeCustomization?.button_text_font_size\r\n                ? themeCustomization.button_text_font_size\r\n                : 12,\r\n              color: themeCustomization?.button_text_color\r\n                ? themeCustomization.button_text_color\r\n                : \"#f1fcfe\",\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n  });\r\n  // design end\r\n\r\n  var viewShow_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div\r\n        className=\"spinner-border text-primary \"\r\n        role=\"status\"\r\n        style={{ position: \"fixed\", top: \"50%\", left: \"50%\" }}\r\n      >\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewShow_HTMLTABLE = products?.map((item, i) => {\r\n      return (\r\n        <Grid item xs={12} sm={6} md={6} key={i}>\r\n          <Card sx={{ display: \"flex\" }}>\r\n            <CardMedia\r\n              component=\"img\"\r\n              sx={{\r\n                height: \"150px\",\r\n                width: \"40%\",\r\n                borderRadius: \"10%\",\r\n              }}\r\n              image={`http://${base_url}:${port}/images/products/${item.image}`}\r\n              alt=\"Live from space album cover\"\r\n            />\r\n            <Box sx={{ display: \"flex\", flexDirection: \"column\" }}>\r\n              <Link\r\n                to={{\r\n                  pathname: `/thrid-template/products-list/product-details/${btoa(\r\n                    item.id\r\n                  )}`,\r\n                  state: { themes: themeCustomization },\r\n                }}\r\n              >\r\n                <CardContent sx={{ flexGrow: 1 }}>\r\n                  <Typography\r\n                    variant=\"button\"\r\n                    display=\"block\"\r\n                    gutterBottom\r\n                    className=\"font-weight-bold\"\r\n                  >\r\n                    {item.ProductName}\r\n                  </Typography>\r\n                  <Typography variant=\"subtitle1\" gutterBottom>\r\n                    {item.Description}\r\n                  </Typography>\r\n                  <Typography\r\n                    variant=\"button\"\r\n                    gutterBottom\r\n                    className=\"font-weight-bold\"\r\n                  >\r\n                    {item.price +\r\n                      \" \" +\r\n                      getSymbolFromCurrency(item.currency_code)}\r\n                  </Typography>\r\n                </CardContent>\r\n              </Link>\r\n            </Box>\r\n          </Card>\r\n        </Grid>\r\n      );\r\n    });\r\n  }\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <Container maxWidth=\"lg\" className=\"p-2\">\r\n        <Grid item className=\"text-center\">\r\n          <Typography\r\n            variant=\"button\"\r\n            gutterBottom\r\n            className=\"font-weight-bold m-1\"\r\n          >\r\n            {SubCategoryName}\r\n          </Typography>\r\n        </Grid>\r\n\r\n        <Grid container spacing={2} className=\"mt-1\">\r\n          {viewShow_HTMLTABLE}\r\n        </Grid>\r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Thrid\\ProductDetails.js",["500","501","502","503","504","505","506","507","508","509","510","511","512","513","514","515","516","517","518","519","520"],"import React, { Fragment, useState, useEffect, SyntheticEvent } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// Import css files\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport Container from \"@mui/material/Container\";\r\n// import Slider from \"react-slick\";\r\nimport { base_url, port } from \"../../../../../Consts\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardMedia from \"@mui/material/CardMedia\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Tabs from \"@mui/material/Tabs\";\r\nimport Tab from \"@mui/material/Tab\";\r\nimport Box from \"@mui/material/Box\";\r\n\r\nimport { Zoom } from \"react-slideshow-image\";\r\nimport \"react-slideshow-image/dist/styles.css\";\r\nimport Accordion from \"@mui/material/Accordion\";\r\nimport AccordionSummary from \"@mui/material/AccordionSummary\";\r\nimport AccordionDetails from \"@mui/material/AccordionDetails\";\r\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport \"../style.css\";\r\nconst ProductDetails = (props) => {\r\n  const [themeCustomization, setThemeCustomization] = useState([]);\r\n\r\n  const theme = createTheme({\r\n    palette: {\r\n      warning: {\r\n        // button background\r\n        main: themeCustomization?.button_background_color\r\n          ? themeCustomization.button_background_color\r\n          : \"#ff751d\",\r\n      },\r\n    },\r\n    typography: {\r\n      fontFamily: themeCustomization?.font\r\n        ? themeCustomization.font\r\n        : \"sans-serif\",\r\n      subtitle1: {\r\n        fontSize: themeCustomization?.product_discription_font_size\r\n          ? themeCustomization.product_discription_font_size\r\n          : 10,\r\n        color: themeCustomization?.product_discription_color\r\n          ? themeCustomization.product_discription_color\r\n          : \"#777\",\r\n      },\r\n      // price\r\n      body1: {\r\n        fontSize: themeCustomization?.price_font_size\r\n          ? themeCustomization.price_font_size\r\n          : 12,\r\n        color: themeCustomization?.price_color\r\n          ? themeCustomization.price_color\r\n          : \"#f1fcfe\",\r\n      },\r\n      // product Names\r\n      button: {\r\n        fontSize: themeCustomization?.product_name_font_size\r\n          ? themeCustomization.product_name_font_size\r\n          : 12,\r\n        color: themeCustomization?.product_name_color\r\n          ? themeCustomization.product_name_color\r\n          : \"#ff751d\",\r\n      },\r\n      // categories and sub categories\r\n      overline: {\r\n        fontSize: themeCustomization?.categories_and_sub_categoies_font_size\r\n          ? themeCustomization.categories_and_sub_categoies_font_size\r\n          : 12,\r\n        color: themeCustomization?.categories_and_sub_categoies_color\r\n          ? themeCustomization.categories_and_sub_categoies_color\r\n          : \"#ff751d\",\r\n      },\r\n      // branch Name\r\n      h6: {\r\n        fontSize: themeCustomization?.branch_name_font_size\r\n          ? themeCustomization.branch_name_font_size\r\n          : 14,\r\n        color: themeCustomization?.branch_name_color\r\n          ? themeCustomization.branch_name_color\r\n          : \"#ff751d\",\r\n      },\r\n    },\r\n    components: {\r\n      MuiButton: {\r\n        variants: [\r\n          {\r\n            // button\r\n            props: { variant: \"contained\" },\r\n            style: {\r\n              fontSize: themeCustomization?.button_text_font_size\r\n                ? themeCustomization.button_text_font_size\r\n                : 12,\r\n              color: themeCustomization?.button_text_color\r\n                ? themeCustomization.button_text_color\r\n                : \"#f1fcfe\",\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n  });\r\n  // for localization\r\n  const { t } = useTranslation();\r\n  const id = atob(props.match.params.id);\r\n  //for retriving data using laravel API\r\n  const themes = props.history.location.state.themes;\r\n  let varData = [];\r\n  //for retriving data using laravel API\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [variantData, setVariantData] = useState([]);\r\n  const [showVaralint, setShowVarlist] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [skuarray, setSkuArray] = useState([]);\r\n  const [productDetails, setProductDetails] = useState({\r\n    price: 0,\r\n    stock: 0,\r\n    image: fetchData?.image,\r\n  });\r\n  useEffect(() => {\r\n    const getdata = async () => {\r\n      const product = await axios({\r\n        method: \"GET\",\r\n        url: `/api/GetProduct/${id}`,\r\n      });\r\n      const data = product.data.fetchData;\r\n\r\n      const res = await axios({\r\n        method: \"GET\",\r\n        url: `/api/Getvariations/${id}`,\r\n      });\r\n      setFetchData(data[0]);\r\n      if (res.data.fetchData !== \"\") {\r\n        varData = JSON.parse(res.data.fetchData);\r\n        parseVariants(varData);\r\n      }\r\n\r\n      setLoading(false);\r\n    };\r\n    getdata(); // axios\r\n  }, [id]);\r\n  const changePrice = (varName, variant) => {\r\n    const keys = Object.keys(showVaralint);\r\n    const varlineindex = keys.indexOf(varName);\r\n    const newSkuArray = skuarray;\r\n    newSkuArray[varlineindex] = variant;\r\n    setSkuArray(newSkuArray);\r\n    if (keys.length == newSkuArray.length) {\r\n      caluclatePrice(newSkuArray, variantData);\r\n    }\r\n  };\r\n  const caluclatePrice = (newSkuArray, variantData) => {\r\n    let sku = id + \"-\";\r\n    for (let i = 0; i < newSkuArray.length; i++) {\r\n      if (i == newSkuArray.length - 1) {\r\n        sku += newSkuArray[i];\r\n      } else {\r\n        sku += newSkuArray[i] + \"-\";\r\n      }\r\n    }\r\n\r\n    const priceList = variantData.filter((item) => {\r\n      return item.sku.replace(/\\s+/g, \"\") == sku.replace(/\\s+/g, \"\");\r\n    });\r\n    console.log(newSkuArray);\r\n    let productdetails = { price: 0, stock: 0 };\r\n    if (priceList.length !== 0) {\r\n      const line = priceList.pop();\r\n      const newProductDetails = {\r\n        price: line.price,\r\n        stock: line.stock,\r\n        image: line.image,\r\n      };\r\n      productdetails = newProductDetails;\r\n    } else {\r\n      const newProductDetails = {\r\n        price: 0,\r\n        stock: \"No Stock\",\r\n        image: fetchData.image,\r\n      };\r\n      productdetails = newProductDetails;\r\n    }\r\n    setProductDetails({ ...productdetails });\r\n  };\r\n  const parseVariants = (variantData) => {\r\n    const variants = [];\r\n    const savePostion = [\"postion\", \"sku\", \"price\", \"stock\", \"image\"];\r\n    const varLine = variantData[0];\r\n    const varlinekey = Object.keys(varLine);\r\n    for (let i = 0; i < varlinekey.length; i++) {\r\n      if (savePostion.indexOf(varlinekey[i]) == -1) {\r\n        let listvar = variantData.map((item) => {\r\n          return item[varlinekey[i]];\r\n        });\r\n        // get unique variants\r\n        listvar = listvar.filter(\r\n          (thing, index, self) =>\r\n            index ===\r\n            self.findIndex((t) => t.place === listvar.place && t === thing)\r\n        );\r\n        if (listvar[0] != 0) variants[varlinekey[i]] = listvar;\r\n      }\r\n    }\r\n    let def = [];\r\n    Object.keys(variants).map((item) => {\r\n      def.push(variants[item][0]);\r\n    });\r\n    setSkuArray(def);\r\n    caluclatePrice(def, variantData);\r\n    setShowVarlist(variants);\r\n    setVariantData(variantData);\r\n  };\r\n  const [ingredients, setIntgredients] = useState([]);\r\n  const changeIngredients = (label) => {\r\n    if (!ingredients.includes(label) === false) {\r\n      setIntgredients(ingredients.filter((item) => item !== label));\r\n    } else {\r\n      setIntgredients([...ingredients, label]);\r\n    }\r\n  };\r\n  let [sum, setSum] = useState(0);\r\n\r\n  const extraHandlers = (e, price) => {\r\n    if (e.target.checked) {\r\n      // console.log((sum += parseInt(price)));\r\n      setSum((sum += parseInt(price)));\r\n    } else {\r\n      setSum((sum -= parseInt(price)));\r\n    }\r\n  };\r\n\r\n  const zoomOutProperties = {\r\n    duration: 100,\r\n    transitionDuration: 5,\r\n    canSwipe: true,\r\n    indicators: true,\r\n    scale: false,\r\n    autoplay: false,\r\n    indicators: (i) => (\r\n      <div className=\"indicator\">\r\n        <img\r\n          src={\r\n            productDetails?.stock === \"No Stock\" || productDetails?.stock === 0\r\n              ? `http://${base_url}:${port}/images/products/${fetchData?.image}`\r\n              : `http://${base_url}:${port}/images/variants_pics/${productDetails.image[i]}`\r\n          }\r\n          width=\"40px\"\r\n          // className=\"p-1\"\r\n          // style={{ width: \"40px\" }}\r\n        />\r\n      </div>\r\n    ),\r\n  };\r\n\r\n  var viewImages_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"container \">\r\n        <div\r\n          className=\"spinner-border text-primary \"\r\n          role=\"status\"\r\n          style={{ position: \"fixed\", top: \"50%\", left: \"50%\" }}\r\n        >\r\n          <span className=\"sr-only\">{t(\"loading\")}</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewImages_HTMLTABLE = (\r\n      <Grid container>\r\n        <Grid item xs={12} sm={5} md={5} lg={5}>\r\n          <div className=\"row col-md-12 text-center \">\r\n            <Zoom {...zoomOutProperties}>\r\n              {(() => {\r\n                if (Array.isArray(productDetails.image)) {\r\n                  return productDetails.image?.map((image) => {\r\n                    return (\r\n                      <div key={image} style={{ width: \"100%\" }}>\r\n                        <img\r\n                          src={`http://${base_url}:${port}/images/variants_pics/${image}`}\r\n                          style={{\r\n                            height: \"500px\",\r\n                            width: \"100%\",\r\n                            objectFit: \"contain\",\r\n                          }}\r\n                          // className=\"img-thumbnail\"\r\n                          alt=\"\"\r\n                        />\r\n                      </div>\r\n                    );\r\n                  });\r\n                } else {\r\n                  return (\r\n                    <div style={{ width: \"100%\" }}>\r\n                      <img\r\n                        src={\r\n                          productDetails.stock === \"No Stock\" ||\r\n                          productDetails?.stock === 0\r\n                            ? `http://${base_url}:${port}/images/products/${\r\n                                productDetails.image\r\n                                  ? productDetails?.image\r\n                                  : fetchData?.image\r\n                              }`\r\n                            : `http://${base_url}:${port}/images/variants_pics/${productDetails.image}`\r\n                        }\r\n                        style={{\r\n                          height: \"500px\",\r\n                          width: \"100%\",\r\n                          objectFit: \"contain\",\r\n                        }}\r\n                        alt=\"\"\r\n                      />\r\n                    </div>\r\n                  );\r\n                }\r\n              })()}\r\n            </Zoom>\r\n          </div>\r\n        </Grid>\r\n\r\n        <Grid item xs={12} sm={7} md={7} lg={7}>\r\n          <Card\r\n            sx={{\r\n              // height: \"100%\",\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n            }}\r\n          >\r\n            <div className=\"row mx-3 mt-3\">\r\n              <Typography variant=\"overline\" gutterBottom>\r\n                {t(\"product_name\")}: {fetchData?.ProductName}\r\n              </Typography>\r\n              <Typography variant=\"body2\" gutterBottom>\r\n                {t(\"description\")}: {fetchData?.Description}\r\n              </Typography>\r\n              <Typography variant=\"body2\" gutterBottom>\r\n                {t(\"unit\")}: {fetchData?.UnitName}\r\n              </Typography>\r\n\r\n              {themes?.preparation_time != 0 ? (\r\n                <Typography variant=\"body2\" gutterBottom>\r\n                  {t(\"preparation_Time\")}: {fetchData?.preparationTime} Minutes\r\n                </Typography>\r\n              ) : (\r\n                \" \"\r\n              )}\r\n              <p>\r\n                {t(\"price\")} :{\" \"}\r\n                {productDetails.price === 0\r\n                  ? fetchData?.price + sum\r\n                  : parseInt(productDetails.price) + sum}\r\n              </p>\r\n              <p>\r\n                {t(\"stock\")}:{\" \"}\r\n                {productDetails.stock === 0\r\n                  ? fetchData?.stock\r\n                  : productDetails.stock}\r\n              </p>\r\n            </div>\r\n            <div className=\"row mx-3\">\r\n              <Typography variant=\"overline\" gutterBottom>\r\n                {t(\"ingredients\")}\r\n              </Typography>\r\n              <small>Please select the ingredients you want to remove.</small>\r\n            </div>\r\n            <div className=\"row mx-4\">\r\n              {JSON.parse(fetchData.ingredients)?.map((item, i) => {\r\n                return (\r\n                  <div\r\n                    className=\"col-md-auto col-sm-auto col-xl-auto col-lg-auto col-auto\"\r\n                    onClick={() => {\r\n                      changeIngredients(item.label);\r\n                    }}\r\n                    style={\r\n                      ingredients.includes(item.label)\r\n                        ? {\r\n                            cursor: \"pointer\",\r\n\r\n                            padding: \"3px\",\r\n                            margin: \"2px\",\r\n                            border: \"1px solid\",\r\n                            textAlign: \"center\",\r\n                            borderColor: \"red\",\r\n                            textDecoration: \"line-through\",\r\n                            color: \"red\",\r\n                          }\r\n                        : {\r\n                            cursor: \"pointer\",\r\n                            padding: \"3px\",\r\n                            margin: \"2px\",\r\n                            border: \"1px solid\",\r\n                            textAlign: \"center\",\r\n                            // borderRadius: \"10px\",\r\n                            borderColor: \"black\",\r\n                          }\r\n                    }\r\n                  >\r\n                    {item.label}\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n            <div className=\"row m-3\">\r\n              <Accordion>\r\n                <AccordionSummary\r\n                  expandIcon={<ExpandMoreIcon />}\r\n                  aria-controls=\"panel1a-content\"\r\n                  id=\"panel1a-header\"\r\n                >\r\n                  <Typography variant=\"overline\" gutterBottom>\r\n                    {t(\"extras\")}\r\n                  </Typography>\r\n                </AccordionSummary>\r\n                <AccordionDetails>\r\n                  <FormGroup>\r\n                    {JSON.parse(fetchData.extras)?.map((item, i) => {\r\n                      return (\r\n                        <FormControlLabel\r\n                          key={i}\r\n                          control={\r\n                            <Checkbox\r\n                              onChange={(e) => {\r\n                                extraHandlers(e, item.price);\r\n                              }}\r\n                              color=\"default\"\r\n                              sx={{\r\n                                color: themeCustomization?.branch_name_color\r\n                                  ? themeCustomization.branch_name_color\r\n                                  : \"#ff751d\",\r\n                              }}\r\n                            />\r\n                          }\r\n                          label={\r\n                            <Typography variant=\"body2\" gutterBottom>\r\n                              {item.label + \" ( +\" + item.price + \".00\" + \" )\"}\r\n                            </Typography>\r\n                          }\r\n                        />\r\n                      );\r\n                    })}\r\n                  </FormGroup>\r\n                </AccordionDetails>\r\n              </Accordion>\r\n            </div>\r\n\r\n            <div className=\"row m-3\">\r\n              <Typography variant=\"overline\" gutterBottom>\r\n                {t(\"vatiants\")}\r\n              </Typography>\r\n            </div>\r\n\r\n            <div className=\"row mx-2\">\r\n              {Object.keys(showVaralint).map((list, i) => {\r\n                return (\r\n                  <div className=\"row \" key={i}>\r\n                    <div className=\"col-md-auto col-sm-auto col-xl-auto col-lg-auto col-auto\">\r\n                      {list}\r\n                      <div className=\"row\">\r\n                        {showVaralint[list].map((variant) => {\r\n                          return (\r\n                            <div className=\"col-md-auto col-sm-auto col-xl-auto col-lg-auto col-auto\">\r\n                              <div\r\n                                onClick={() => {\r\n                                  changePrice(list, variant);\r\n                                }}\r\n                                style={\r\n                                  skuarray[i] == variant\r\n                                    ? {\r\n                                        cursor: \"pointer\",\r\n                                        margin: \"2px\",\r\n                                        padding: \"5px\",\r\n                                        border: \"1px solid\",\r\n                                        textAlign: \"center\",\r\n                                        borderRadius: \"10px\",\r\n                                        borderColor: \"red\",\r\n                                      }\r\n                                    : {\r\n                                        cursor: \"pointer\",\r\n                                        margin: \"2px\",\r\n\r\n                                        padding: \"5px\",\r\n                                        border: \"1px solid\",\r\n                                        textAlign: \"center\",\r\n                                        borderRadius: \"10px\",\r\n                                        borderColor: \"black\",\r\n                                      }\r\n                                }\r\n                              >\r\n                                {variant}\r\n                              </div>\r\n                            </div>\r\n                          );\r\n                        })}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <Container maxWidth=\"lg\" className=\"mt-5\">\r\n        <main>\r\n          <Grid container spacing={2}>\r\n            {viewImages_HTMLTABLE}\r\n          </Grid>\r\n        </main>\r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default ProductDetails;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\First\\Header.js",["521","522"],"import React, { useState } from \"react\";\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport axios from \"axios\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\nimport ArrowBackIosIcon from \"@mui/icons-material/ArrowBackIos\";\r\nfunction Header(props) {\r\n  const history = useHistory();\r\n  const { t } = useTranslation();\r\n\r\n  const {\r\n    title,\r\n    subcategories,\r\n    activeSubCategory,\r\n    setProducts,\r\n    setActiveSubCategory,\r\n  } = props;\r\n  // console.log(subcategories);\r\n\r\n  const filterProducts = (subCateID) => {\r\n    axios.get(`/api/GetProductsBasedOnSubCategory/${subCateID}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        // console.log(res.data.data);\r\n        setProducts(res.data.data);\r\n      }\r\n    });\r\n    setActiveSubCategory(subCateID);\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <Toolbar\r\n        sx={{ borderBottom: 1, borderColor: \"divider\", position: \"sticky\" }}\r\n        className=\"top-0 \"\r\n      >\r\n        <IconButton onClick={() => history.goBack()}>\r\n          <ArrowBackIosIcon />\r\n        </IconButton>\r\n        <Typography\r\n          component=\"h2\"\r\n          variant=\"h6\"\r\n          align=\"center\"\r\n          noWrap\r\n          sx={{ flex: 1 }}\r\n        >\r\n          {title}\r\n        </Typography>\r\n        <IconButton>\r\n          <SearchIcon />\r\n        </IconButton>\r\n      </Toolbar>\r\n\r\n      {subcategories === 0 ? (\r\n        \" \"\r\n      ) : (\r\n        <div>\r\n          <Toolbar\r\n            component=\"nav\"\r\n            variant=\"dense\"\r\n            className=\"border mb-2\"\r\n            sx={{ justifyContent: \"space-between\", overflowX: \"auto\" }}\r\n          >\r\n            {subcategories?.map((section, i) => (\r\n              <div\r\n                style={\r\n                  activeSubCategory === section.sub_id\r\n                    ? {\r\n                        cursor: \"pointer\",\r\n                        background: \"black\",\r\n                        margin: \"2px\",\r\n                        padding: \"5px\",\r\n                        border: \"1px solid\",\r\n                        textAlign: \"center\",\r\n                        borderRadius: \"10px\",\r\n                        color: \"#fff\",\r\n                      }\r\n                    : {\r\n                        cursor: \"pointer\",\r\n                        color: \"black\",\r\n                        margin: \"2px\",\r\n                        padding: \"5px\",\r\n                        textAlign: \"center\",\r\n                        borderRadius: \"10px\",\r\n                      }\r\n                }\r\n                key={i}\r\n                underline=\"hover\"\r\n                variant=\"body2\"\r\n                sx={{ p: 1, flexShrink: 0, cursor: \"pointer\" }}\r\n                onClick={() => filterProducts(section.sub_id)}\r\n              >\r\n                {section.SubCategoryName}\r\n              </div>\r\n            ))}\r\n          </Toolbar>\r\n        </div>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\First\\Footer.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\First\\ProductDetails.js",["523","524","525","526","527","528","529","530","531","532","533","534","535","536","537","538","539","540","541","542","543"],"import React, { Fragment, useState, useEffect, SyntheticEvent } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// Import css files\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport Footer from \"./Footer\";\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport Container from \"@mui/material/Container\";\r\n// import Slider from \"react-slick\";\r\nimport Header from \"./Header\";\r\nimport { base_url, port } from \"../../../../../Consts\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardMedia from \"@mui/material/CardMedia\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Tabs from \"@mui/material/Tabs\";\r\nimport Tab from \"@mui/material/Tab\";\r\nimport Box from \"@mui/material/Box\";\r\n\r\nimport { Zoom } from \"react-slideshow-image\";\r\nimport \"react-slideshow-image/dist/styles.css\";\r\nimport Accordion from \"@mui/material/Accordion\";\r\nimport AccordionSummary from \"@mui/material/AccordionSummary\";\r\nimport AccordionDetails from \"@mui/material/AccordionDetails\";\r\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport \"../style.css\";\r\nconst ProductDetails = (props) => {\r\n  const [themeCustomization, setThemeCustomization] = useState([]);\r\n\r\n  const theme = createTheme({\r\n    palette: {\r\n      warning: {\r\n        // button background\r\n        main: themeCustomization?.button_background_color\r\n          ? themeCustomization.button_background_color\r\n          : \"#111\",\r\n      },\r\n    },\r\n    typography: {\r\n      fontFamily: themeCustomization?.font\r\n        ? themeCustomization.font\r\n        : \"sans-serif\",\r\n      subtitle1: {\r\n        fontSize: themeCustomization?.product_discription_font_size\r\n          ? themeCustomization.product_discription_font_size\r\n          : 10,\r\n        color: themeCustomization?.product_discription_color\r\n          ? themeCustomization.product_discription_color\r\n          : \"#777\",\r\n      },\r\n      // price\r\n      body1: {\r\n        fontSize: themeCustomization?.price_font_size\r\n          ? themeCustomization.price_font_size\r\n          : 12,\r\n        color: themeCustomization?.price_color\r\n          ? themeCustomization.price_color\r\n          : \"#111\",\r\n      },\r\n      // product Names\r\n      button: {\r\n        fontSize: themeCustomization?.product_name_font_size\r\n          ? themeCustomization.product_name_font_size\r\n          : 12,\r\n        color: themeCustomization?.product_name_color\r\n          ? themeCustomization.product_name_color\r\n          : \"#111\",\r\n      },\r\n      // categories and sub categories\r\n      overline: {\r\n        fontSize: themeCustomization?.categories_and_sub_categoies_font_size\r\n          ? themeCustomization.categories_and_sub_categoies_font_size\r\n          : 12,\r\n        color: themeCustomization?.categories_and_sub_categoies_color\r\n          ? themeCustomization.categories_and_sub_categoies_color\r\n          : \"#111\",\r\n      },\r\n      // branch Name\r\n      h6: {\r\n        fontSize: themeCustomization?.branch_name_font_size\r\n          ? themeCustomization.branch_name_font_size\r\n          : 14,\r\n        color: themeCustomization?.branch_name_color\r\n          ? themeCustomization.branch_name_color\r\n          : \"#111\",\r\n      },\r\n    },\r\n    components: {\r\n      MuiButton: {\r\n        variants: [\r\n          {\r\n            // button\r\n            props: { variant: \"contained\" },\r\n            style: {\r\n              fontSize: themeCustomization?.button_text_font_size\r\n                ? themeCustomization.button_text_font_size\r\n                : 12,\r\n              color: themeCustomization?.button_text_color\r\n                ? themeCustomization.button_text_color\r\n                : \"#fff\",\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n  });\r\n  // for localization\r\n  const { t } = useTranslation();\r\n  const id = atob(props.match.params.id);\r\n  //for retriving data using laravel API\r\n  const themes = props.history.location.state.themes;\r\n  let varData = [];\r\n  //for retriving data using laravel API\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [variantData, setVariantData] = useState([]);\r\n  const [showVaralint, setShowVarlist] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [skuarray, setSkuArray] = useState([]);\r\n  const [productDetails, setProductDetails] = useState({\r\n    price: 0,\r\n    stock: 0,\r\n    image: fetchData?.image,\r\n  });\r\n  useEffect(() => {\r\n    const getdata = async () => {\r\n      const product = await axios({\r\n        method: \"GET\",\r\n        url: `/api/GetProduct/${id}`,\r\n      });\r\n      const data = product.data.fetchData;\r\n\r\n      const res = await axios({\r\n        method: \"GET\",\r\n        url: `/api/Getvariations/${id}`,\r\n      });\r\n      setFetchData(data[0]);\r\n      if (res.data.fetchData !== \"\") {\r\n        varData = JSON.parse(res.data.fetchData);\r\n        parseVariants(varData);\r\n      }\r\n\r\n      setLoading(false);\r\n    };\r\n    getdata(); // axios\r\n  }, [id]);\r\n  const changePrice = (varName, variant) => {\r\n    const keys = Object.keys(showVaralint);\r\n    const varlineindex = keys.indexOf(varName);\r\n    const newSkuArray = skuarray;\r\n    newSkuArray[varlineindex] = variant;\r\n    setSkuArray(newSkuArray);\r\n    if (keys.length == newSkuArray.length) {\r\n      caluclatePrice(newSkuArray, variantData);\r\n    }\r\n  };\r\n  const caluclatePrice = (newSkuArray, variantData) => {\r\n    let sku = id + \"-\";\r\n    for (let i = 0; i < newSkuArray.length; i++) {\r\n      if (i == newSkuArray.length - 1) {\r\n        sku += newSkuArray[i];\r\n      } else {\r\n        sku += newSkuArray[i] + \"-\";\r\n      }\r\n    }\r\n\r\n    const priceList = variantData.filter((item) => {\r\n      return item.sku.replace(/\\s+/g, \"\") == sku.replace(/\\s+/g, \"\");\r\n    });\r\n    console.log(newSkuArray);\r\n    let productdetails = { price: 0, stock: 0 };\r\n    if (priceList.length !== 0) {\r\n      const line = priceList.pop();\r\n      const newProductDetails = {\r\n        price: line.price,\r\n        stock: line.stock,\r\n        image: line.image,\r\n      };\r\n      productdetails = newProductDetails;\r\n    } else {\r\n      const newProductDetails = {\r\n        price: 0,\r\n        stock: \"No Stock\",\r\n        image: fetchData.image,\r\n      };\r\n      productdetails = newProductDetails;\r\n    }\r\n    setProductDetails({ ...productdetails });\r\n  };\r\n  const parseVariants = (variantData) => {\r\n    const variants = [];\r\n    const savePostion = [\"postion\", \"sku\", \"price\", \"stock\", \"image\"];\r\n    const varLine = variantData[0];\r\n    const varlinekey = Object.keys(varLine);\r\n    for (let i = 0; i < varlinekey.length; i++) {\r\n      if (savePostion.indexOf(varlinekey[i]) == -1) {\r\n        let listvar = variantData.map((item) => {\r\n          return item[varlinekey[i]];\r\n        });\r\n        // get unique variants\r\n        listvar = listvar.filter(\r\n          (thing, index, self) =>\r\n            index ===\r\n            self.findIndex((t) => t.place === listvar.place && t === thing)\r\n        );\r\n        if (listvar[0] != 0) variants[varlinekey[i]] = listvar;\r\n      }\r\n    }\r\n    let def = [];\r\n    Object.keys(variants).map((item) => {\r\n      def.push(variants[item][0]);\r\n    });\r\n    setSkuArray(def);\r\n    caluclatePrice(def, variantData);\r\n    setShowVarlist(variants);\r\n    setVariantData(variantData);\r\n  };\r\n  const [ingredients, setIntgredients] = useState([]);\r\n  const changeIngredients = (label) => {\r\n    if (!ingredients.includes(label) === false) {\r\n      setIntgredients(ingredients.filter((item) => item !== label));\r\n    } else {\r\n      setIntgredients([...ingredients, label]);\r\n    }\r\n  };\r\n  let [sum, setSum] = useState(0);\r\n\r\n  const extraHandlers = (e, price) => {\r\n    if (e.target.checked) {\r\n      // console.log((sum += parseInt(price)));\r\n      setSum((sum += parseInt(price)));\r\n    } else {\r\n      setSum((sum -= parseInt(price)));\r\n    }\r\n  };\r\n\r\n  const zoomOutProperties = {\r\n    duration: 100,\r\n    transitionDuration: 5,\r\n    canSwipe: true,\r\n    indicators: true,\r\n    scale: false,\r\n    autoplay: false,\r\n    indicators: (i) => (\r\n      <div className=\"indicator\">\r\n        <img\r\n          src={\r\n            productDetails?.stock === \"No Stock\" || productDetails?.stock === 0\r\n              ? `http://${base_url}:${port}/images/products/${fetchData?.image}`\r\n              : `http://${base_url}:${port}/images/variants_pics/${productDetails.image[i]}`\r\n          }\r\n          width=\"40px\"\r\n          // className=\"p-1\"\r\n          // style={{ width: \"40px\" }}\r\n        />\r\n      </div>\r\n    ),\r\n  };\r\n\r\n  var viewImages_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"container \">\r\n        <div\r\n          className=\"spinner-border text-primary \"\r\n          role=\"status\"\r\n          style={{ position: \"fixed\", top: \"50%\", left: \"50%\" }}\r\n        >\r\n          <span className=\"sr-only\">{t(\"loading\")}</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewImages_HTMLTABLE = (\r\n      <Grid container>\r\n        <Grid item xs={12} sm={5} md={5} lg={5}>\r\n          <div className=\"row col-md-12 text-center \">\r\n            <Zoom {...zoomOutProperties}>\r\n              {(() => {\r\n                if (Array.isArray(productDetails.image)) {\r\n                  return productDetails.image?.map((image) => {\r\n                    return (\r\n                      <div key={image} style={{ width: \"100%\" }}>\r\n                        <img\r\n                          src={`http://${base_url}:${port}/images/variants_pics/${image}`}\r\n                          style={{\r\n                            height: \"500px\",\r\n                            width: \"100%\",\r\n                            objectFit: \"contain\",\r\n                          }}\r\n                          // className=\"img-thumbnail\"\r\n                          alt=\"\"\r\n                        />\r\n                      </div>\r\n                    );\r\n                  });\r\n                } else {\r\n                  return (\r\n                    <div style={{ width: \"100%\" }}>\r\n                      <img\r\n                        src={\r\n                          productDetails.stock === \"No Stock\" ||\r\n                          productDetails?.stock === 0\r\n                            ? `http://${base_url}:${port}/images/products/${\r\n                                productDetails.image\r\n                                  ? productDetails?.image\r\n                                  : fetchData?.image\r\n                              }`\r\n                            : `http://${base_url}:${port}/images/variants_pics/${productDetails.image}`\r\n                        }\r\n                        style={{\r\n                          height: \"500px\",\r\n                          width: \"100%\",\r\n                          objectFit: \"contain\",\r\n                        }}\r\n                        alt=\"\"\r\n                      />\r\n                    </div>\r\n                  );\r\n                }\r\n              })()}\r\n            </Zoom>\r\n          </div>\r\n        </Grid>\r\n\r\n        <Grid item xs={12} sm={7} md={7} lg={7}>\r\n          <Card\r\n            sx={{\r\n              // height: \"100%\",\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n            }}\r\n          >\r\n            <div className=\"row mx-3 mt-3\">\r\n              <Typography variant=\"overline\" gutterBottom>\r\n                {t(\"product_name\")}: {fetchData?.ProductName}\r\n              </Typography>\r\n              <Typography variant=\"body2\" gutterBottom>\r\n                {t(\"description\")}: {fetchData?.Description}\r\n              </Typography>\r\n              <Typography variant=\"body2\" gutterBottom>\r\n                {t(\"unit\")}: {fetchData?.UnitName}\r\n              </Typography>\r\n\r\n              {themes?.preparation_time != 0 ? (\r\n                <Typography variant=\"body2\" gutterBottom>\r\n                  {t(\"preparation_Time\")}: {fetchData?.preparationTime} Minutes\r\n                </Typography>\r\n              ) : (\r\n                \" \"\r\n              )}\r\n              <p>\r\n                {t(\"price\")} :{\" \"}\r\n                {productDetails.price === 0\r\n                  ? fetchData?.price + sum\r\n                  : parseInt(productDetails.price) + sum}\r\n              </p>\r\n              <p>\r\n                {t(\"stock\")}:{\" \"}\r\n                {productDetails.stock === 0\r\n                  ? fetchData?.stock\r\n                  : productDetails.stock}\r\n              </p>\r\n            </div>\r\n            <div className=\"row mx-3\">\r\n              <Typography variant=\"overline\" gutterBottom>\r\n                {t(\"ingredients\")}\r\n              </Typography>\r\n              <small>Please select the ingredients you want to remove.</small>\r\n            </div>\r\n            <div className=\"row mx-4\">\r\n              {JSON.parse(fetchData.ingredients)?.map((item, i) => {\r\n                return (\r\n                  <div\r\n                    className=\"col-md-auto col-sm-auto col-xl-auto col-lg-auto col-auto\"\r\n                    onClick={() => {\r\n                      changeIngredients(item.label);\r\n                    }}\r\n                    style={\r\n                      ingredients.includes(item.label)\r\n                        ? {\r\n                            cursor: \"pointer\",\r\n\r\n                            padding: \"3px\",\r\n                            margin: \"2px\",\r\n                            border: \"1px solid\",\r\n                            textAlign: \"center\",\r\n                            borderColor: \"red\",\r\n                            textDecoration: \"line-through\",\r\n                            color: \"red\",\r\n                          }\r\n                        : {\r\n                            cursor: \"pointer\",\r\n                            padding: \"3px\",\r\n                            margin: \"2px\",\r\n                            border: \"1px solid\",\r\n                            textAlign: \"center\",\r\n                            // borderRadius: \"10px\",\r\n                            borderColor: \"black\",\r\n                          }\r\n                    }\r\n                  >\r\n                    {item.label}\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n            <div className=\"row m-3\">\r\n              <Accordion>\r\n                <AccordionSummary\r\n                  expandIcon={<ExpandMoreIcon />}\r\n                  aria-controls=\"panel1a-content\"\r\n                  id=\"panel1a-header\"\r\n                >\r\n                  <Typography variant=\"overline\" gutterBottom>\r\n                    {t(\"extras\")}\r\n                  </Typography>\r\n                </AccordionSummary>\r\n                <AccordionDetails>\r\n                  <FormGroup>\r\n                    {JSON.parse(fetchData.extras)?.map((item, i) => {\r\n                      return (\r\n                        <FormControlLabel\r\n                          key={i}\r\n                          control={\r\n                            <Checkbox\r\n                              onChange={(e) => {\r\n                                extraHandlers(e, item.price);\r\n                              }}\r\n                              color=\"default\"\r\n                              sx={{\r\n                                color: themeCustomization?.branch_name_color\r\n                                  ? themeCustomization.branch_name_color\r\n                                  : \"#ff751d\",\r\n                              }}\r\n                            />\r\n                          }\r\n                          label={\r\n                            <Typography variant=\"body2\" gutterBottom>\r\n                              {item.label + \" ( +\" + item.price + \".00\" + \" )\"}\r\n                            </Typography>\r\n                          }\r\n                        />\r\n                      );\r\n                    })}\r\n                  </FormGroup>\r\n                </AccordionDetails>\r\n              </Accordion>\r\n            </div>\r\n\r\n            <div className=\"row m-3\">\r\n              <Typography variant=\"overline\" gutterBottom>\r\n                {t(\"vatiants\")}\r\n              </Typography>\r\n            </div>\r\n\r\n            <div className=\"row mx-2\">\r\n              {Object.keys(showVaralint).map((list, i) => {\r\n                return (\r\n                  <div className=\"row \" key={i}>\r\n                    <div className=\"col-md-auto col-sm-auto col-xl-auto col-lg-auto col-auto\">\r\n                      {list}\r\n                      <div className=\"row\">\r\n                        {showVaralint[list].map((variant) => {\r\n                          return (\r\n                            <div className=\"col-md-auto col-sm-auto col-xl-auto col-lg-auto col-auto\">\r\n                              <div\r\n                                onClick={() => {\r\n                                  changePrice(list, variant);\r\n                                }}\r\n                                style={\r\n                                  skuarray[i] == variant\r\n                                    ? {\r\n                                        cursor: \"pointer\",\r\n                                        margin: \"2px\",\r\n                                        padding: \"5px\",\r\n                                        border: \"1px solid\",\r\n                                        textAlign: \"center\",\r\n                                        borderRadius: \"10px\",\r\n                                        borderColor: \"red\",\r\n                                      }\r\n                                    : {\r\n                                        cursor: \"pointer\",\r\n                                        margin: \"2px\",\r\n\r\n                                        padding: \"5px\",\r\n                                        border: \"1px solid\",\r\n                                        textAlign: \"center\",\r\n                                        borderRadius: \"10px\",\r\n                                        borderColor: \"black\",\r\n                                      }\r\n                                }\r\n                              >\r\n                                {variant}\r\n                              </div>\r\n                            </div>\r\n                          );\r\n                        })}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <Container maxWidth=\"lg\">\r\n        <Header\r\n          // title={branch[0]?.BrancheName}\r\n          categories={0}\r\n          subcategories={0}\r\n          // setSubCategories={setSubCategories}\r\n          // activeSubCategory={activeSubCategory}\r\n        />\r\n        <main>\r\n          <Grid container spacing={2}>\r\n            {viewImages_HTMLTABLE}\r\n          </Grid>\r\n        </main>\r\n\r\n        <Footer title=\"Add to Card\" />\r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default ProductDetails;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Default\\Counter.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\Cart.js",["544","545","546","547","548","549"],"import React, { useState, useEffect } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// Import css files\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport Container from \"@mui/material/Container\";\r\n// import Slider from \"react-slick\";\r\nimport Header from \"./Header\";\r\nimport { base_url, port } from \"../../../../../Consts\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Card from \"@mui/material/Card\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\nimport \"react-slideshow-image/dist/styles.css\";\r\nimport getSymbolFromCurrency from \"currency-symbol-map\";\r\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\"; // requires a loader\r\n// import { Carousel } from \"react-responsive-carousel\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport ClearIcon from \"@mui/icons-material/Clear\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport { Link } from \"react-router-dom\";\r\nimport ReactWhatsapp from \"react-whatsapp\";\r\n\r\nimport \"../style.css\";\r\nvar message = \"\";\r\n\r\nconst Cart = (props) => {\r\n  // for localization\r\n  const { t } = useTranslation();\r\n  const custom = props.history.location.state.custom;\r\n  // design start\r\n  const theme = createTheme({\r\n    palette: {\r\n      background: {\r\n        default: custom?.bgColor ? custom.bgColor : \"#22252a\",\r\n      },\r\n    },\r\n    typography: {\r\n      fontFamily: custom?.font ? custom.font : \"sans-serif\",\r\n      // discription\r\n      subtitle1: {\r\n        fontSize: custom?.pDiscriptionSize\r\n          ? custom.pDiscriptionSize + \"rem\"\r\n          : \"0.75rem\",\r\n\r\n        color: custom?.product_discription_color\r\n          ? custom.product_discription_color\r\n          : \"#fff\",\r\n      },\r\n      // price\r\n      body1: {\r\n        fontSize: custom?.priceSize ? custom.priceSize + \"rem\" : \"1.25rem\",\r\n        color: custom?.price_color ? custom.price_color : \"#fff\",\r\n      },\r\n      // product Names\r\n      button: {\r\n        fontSize: custom?.pNameSize ? custom.pNameSize + \"rem\" : \"1rem\",\r\n        color: custom?.product_name_color ? custom.product_name_color : \"#fff\",\r\n      },\r\n      // Menus\r\n      h6: {\r\n        fontSize: custom?.menusSize ? custom.menusSize + \"rem\" : \"1rem\",\r\n        color: custom?.menusAcriveColor ? custom.menusAcriveColor : \"#f27d1e\",\r\n      },\r\n    },\r\n  });\r\n  // design end\r\n  const [cart, setCart] = useState(\r\n    JSON.parse(localStorage.getItem(\"cart\")) || []\r\n  );\r\n  const [loading, setLoading] = useState(true);\r\n  let [sum, setSum] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setLoading(false);\r\n    cart.map((item) => {\r\n      sum += item.price * item.qty;\r\n    });\r\n    setSum(sum);\r\n  }, []);\r\n\r\n  const handleDecrement = (e, qty, id, price) => {\r\n    e.preventDefault();\r\n    let vars = cart.map((item) =>\r\n      id == item.id\r\n        ? {\r\n            ...item,\r\n            qty: item.qty - (item.qty > 0 ? 1 : 0),\r\n          }\r\n        : item\r\n    );\r\n    if (qty > 1) {\r\n      setCart((cart) => vars);\r\n      setSum((sum -= parseInt(price)));\r\n      localStorage.setItem(\"cart\", JSON.stringify(vars));\r\n    }\r\n  };\r\n  const handelIncrement = (e, qty, id, price) => {\r\n    e.preventDefault();\r\n    let vars = cart.map((item) =>\r\n      id == item.id ? { ...item, qty: qty + 1 } : item\r\n    );\r\n    setCart((cart) => vars);\r\n    localStorage.setItem(\"cart\", JSON.stringify(vars));\r\n\r\n    setSum((sum += parseInt(price)));\r\n  };\r\n  const remItem = (id, qty, price) => {\r\n    setSum((sum -= price * qty));\r\n\r\n    const data = cart.filter((cart) => {\r\n      return cart.id !== id;\r\n    });\r\n    localStorage.setItem(\"cart\", JSON.stringify(data));\r\n    setCart(data);\r\n  };\r\n\r\n  var viewImages_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"container \">\r\n        <div\r\n          className=\"spinner-border text-primary \"\r\n          role=\"status\"\r\n          style={{ position: \"fixed\", top: \"50%\", left: \"50%\" }}\r\n        >\r\n          <span className=\"sr-only\">{t(\"loading\")}</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewImages_HTMLTABLE = cart?.map((item, i) => {\r\n      message =\r\n        message +\r\n        `*Product Name*: ${item.ProductName} *Category*: ${\r\n          item.CategoryName\r\n        } *Sub Category*: ${item.SubCategoryName} *QTY*: ${item.qty} *Price*: ${\r\n          item.price\r\n        } *Total Price*: ${item.qty * item.price} *${getSymbolFromCurrency(\r\n          item.currency_code\r\n        )}* \\n`;\r\n      return (\r\n        <Card\r\n          key={i}\r\n          sx={{\r\n            // height: \"100%\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            // borderRadius: \"%\",\r\n            backgroundColor: custom?.cardBgColor\r\n              ? custom.cardBgColor\r\n              : \"#2d3134\",\r\n          }}\r\n          className=\"m-1\"\r\n        >\r\n          <div className=\"text-right\">\r\n            <IconButton onClick={() => remItem(item.id, item.qty, item.price)}>\r\n              <ClearIcon\r\n                sx={{\r\n                  color: custom?.menusAcriveColor\r\n                    ? custom.menusAcriveColor\r\n                    : \"#f27d1e\",\r\n                }}\r\n              />\r\n            </IconButton>\r\n          </div>\r\n\r\n          <CardContent sx={{ flexGrow: 1 }}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={3} sm={3} md={3}>\r\n                <img\r\n                  style={{\r\n                    height: \"100px\",\r\n                    width: \"100%\",\r\n                    borderRadius: \"15%\",\r\n                    objectFit: \"contain\",\r\n                  }}\r\n                  src={`http://${base_url}:${port}/images/products/${item.image}`}\r\n                  alt=\"Image\"\r\n                  // className=\"h-100\"\r\n                />\r\n              </Grid>\r\n              <Grid item xs={5} sm={5} md={5}>\r\n                <Typography\r\n                  variant=\"button\"\r\n                  style={{ textTransform: \"capitalize\" }}\r\n                  // className=\"font-weight-bold\"\r\n                >\r\n                  {item.ProductName}\r\n                </Typography>\r\n                <Typography\r\n                  variant=\"body1\"\r\n                  gutterBottom\r\n                  className=\"font-weight-bold\"\r\n                >\r\n                  {getSymbolFromCurrency(item.currency_code) +\r\n                    \"  \" +\r\n                    (item.price * item.qty).toFixed(2)}\r\n                </Typography>\r\n                <Typography variant=\"subtitle1\" gutterBottom>\r\n                  {item.UnitName}\r\n                </Typography>\r\n                <Typography variant=\"subtitle1\" gutterBottom>\r\n                  {item.Description}\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item xs={4} sm={4} md={4}>\r\n                <div className=\"row mt-2\">\r\n                  <div className={`row`}>\r\n                    <div className=\"col-4 \">\r\n                      <Typography\r\n                        onClick={(e) =>\r\n                          handleDecrement(e, item.qty, item.id, item.price)\r\n                        }\r\n                        style={{ cursor: \"pointer\" }}\r\n                        variant=\"h6\"\r\n                        gutterBottom\r\n                      >\r\n                        <svg\r\n                          xmlns=\"http://www.w3.org/2000/svg\"\r\n                          width=\"16\"\r\n                          height=\"16\"\r\n                          fill=\"currentColor\"\r\n                          className=\"bi bi-dash-square-dotted  \"\r\n                          viewBox=\"0 0 16 16\"\r\n                        >\r\n                          <path d=\"M2.5 0c-.166 0-.33.016-.487.048l.194.98A1.51 1.51 0 0 1 2.5 1h.458V0H2.5zm2.292 0h-.917v1h.917V0zm1.833 0h-.917v1h.917V0zm1.833 0h-.916v1h.916V0zm1.834 0h-.917v1h.917V0zm1.833 0h-.917v1h.917V0zM13.5 0h-.458v1h.458c.1 0 .199.01.293.029l.194-.981A2.51 2.51 0 0 0 13.5 0zm2.079 1.11a2.511 2.511 0 0 0-.69-.689l-.556.831c.164.11.305.251.415.415l.83-.556zM1.11.421a2.511 2.511 0 0 0-.689.69l.831.556c.11-.164.251-.305.415-.415L1.11.422zM16 2.5c0-.166-.016-.33-.048-.487l-.98.194c.018.094.028.192.028.293v.458h1V2.5zM.048 2.013A2.51 2.51 0 0 0 0 2.5v.458h1V2.5c0-.1.01-.199.029-.293l-.981-.194zM0 3.875v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zM0 5.708v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zM0 7.542v.916h1v-.916H0zm15 .916h1v-.916h-1v.916zM0 9.375v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zm-16 .916v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zm-16 .917v.458c0 .166.016.33.048.487l.98-.194A1.51 1.51 0 0 1 1 13.5v-.458H0zm16 .458v-.458h-1v.458c0 .1-.01.199-.029.293l.981.194c.032-.158.048-.32.048-.487zM.421 14.89c.183.272.417.506.69.689l.556-.831a1.51 1.51 0 0 1-.415-.415l-.83.556zm14.469.689c.272-.183.506-.417.689-.69l-.831-.556c-.11.164-.251.305-.415.415l.556.83zm-12.877.373c.158.032.32.048.487.048h.458v-1H2.5c-.1 0-.199-.01-.293-.029l-.194.981zM13.5 16c.166 0 .33-.016.487-.048l-.194-.98A1.51 1.51 0 0 1 13.5 15h-.458v1h.458zm-9.625 0h.917v-1h-.917v1zm1.833 0h.917v-1h-.917v1zm1.834 0h.916v-1h-.916v1zm1.833 0h.917v-1h-.917v1zm1.833 0h.917v-1h-.917v1zM4.5 7.5a.5.5 0 0 0 0 1h7a.5.5 0 0 0 0-1h-7z\" />\r\n                        </svg>\r\n                      </Typography>\r\n                    </div>\r\n                    <div className=\"col-4\">\r\n                      <Typography\r\n                        variant=\"subtitle1\"\r\n                        gutterBottom\r\n                        className=\"mt-1\"\r\n                      >\r\n                        {item.qty}\r\n                      </Typography>\r\n                    </div>\r\n                    <div className=\"col-4\">\r\n                      <Typography\r\n                        onClick={(e) =>\r\n                          handelIncrement(e, item.qty, item.id, item.price)\r\n                        }\r\n                        style={{ cursor: \"pointer\" }}\r\n                        variant=\"h6\"\r\n                        gutterBottom\r\n                      >\r\n                        <svg\r\n                          xmlns=\"http://www.w3.org/2000/svg\"\r\n                          width=\"16\"\r\n                          height=\"16\"\r\n                          fill=\"currentColor\"\r\n                          className=\"bi bi-plus-square-dotted\"\r\n                          viewBox=\"0 0 16 16\"\r\n                        >\r\n                          <path d=\"M2.5 0c-.166 0-.33.016-.487.048l.194.98A1.51 1.51 0 0 1 2.5 1h.458V0H2.5zm2.292 0h-.917v1h.917V0zm1.833 0h-.917v1h.917V0zm1.833 0h-.916v1h.916V0zm1.834 0h-.917v1h.917V0zm1.833 0h-.917v1h.917V0zM13.5 0h-.458v1h.458c.1 0 .199.01.293.029l.194-.981A2.51 2.51 0 0 0 13.5 0zm2.079 1.11a2.511 2.511 0 0 0-.69-.689l-.556.831c.164.11.305.251.415.415l.83-.556zM1.11.421a2.511 2.511 0 0 0-.689.69l.831.556c.11-.164.251-.305.415-.415L1.11.422zM16 2.5c0-.166-.016-.33-.048-.487l-.98.194c.018.094.028.192.028.293v.458h1V2.5zM.048 2.013A2.51 2.51 0 0 0 0 2.5v.458h1V2.5c0-.1.01-.199.029-.293l-.981-.194zM0 3.875v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zM0 5.708v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zM0 7.542v.916h1v-.916H0zm15 .916h1v-.916h-1v.916zM0 9.375v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zm-16 .916v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zm-16 .917v.458c0 .166.016.33.048.487l.98-.194A1.51 1.51 0 0 1 1 13.5v-.458H0zm16 .458v-.458h-1v.458c0 .1-.01.199-.029.293l.981.194c.032-.158.048-.32.048-.487zM.421 14.89c.183.272.417.506.69.689l.556-.831a1.51 1.51 0 0 1-.415-.415l-.83.556zm14.469.689c.272-.183.506-.417.689-.69l-.831-.556c-.11.164-.251.305-.415.415l.556.83zm-12.877.373c.158.032.32.048.487.048h.458v-1H2.5c-.1 0-.199-.01-.293-.029l-.194.981zM13.5 16c.166 0 .33-.016.487-.048l-.194-.98A1.51 1.51 0 0 1 13.5 15h-.458v1h.458zm-9.625 0h.917v-1h-.917v1zm1.833 0h.917v-1h-.917v1zm1.834-1v1h.916v-1h-.916zm1.833 1h.917v-1h-.917v1zm1.833 0h.917v-1h-.917v1zM8.5 4.5a.5.5 0 0 0-1 0v3h-3a.5.5 0 0 0 0 1h3v3a.5.5 0 0 0 1 0v-3h3a.5.5 0 0 0 0-1h-3v-3z\" />\r\n                        </svg>\r\n                      </Typography>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </Grid>\r\n            </Grid>\r\n          </CardContent>\r\n        </Card>\r\n      );\r\n    });\r\n  }\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <Container maxWidth=\"lg\" className=\"mb-2\">\r\n        <Header subcategories={0} cart={cart.length} />\r\n        {cart.length === 0 ? (\r\n          <Grid container spacing={2} className=\"text-center\">\r\n            <Grid item xs={12} sm={12} md={12}>\r\n              No Item Available\r\n            </Grid>\r\n          </Grid>\r\n        ) : (\r\n          <>\r\n            {viewImages_HTMLTABLE}\r\n            <Card\r\n              sx={{\r\n                // height: \"100%\",\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                // borderRadius: \"%\",\r\n                backgroundColor: custom?.cardBgColor\r\n                  ? custom.cardBgColor\r\n                  : \"#2d3134\",\r\n              }}\r\n              className=\"m-1\"\r\n            >\r\n              <CardContent sx={{ flexGrow: 1 }}>\r\n                <Grid container spacing={2}>\r\n                  <Grid item xs={6} sm={6} md={6}>\r\n                    <Typography\r\n                      variant=\"body1\"\r\n                      className=\"font-weight-bold col-12 btn\"\r\n                    >\r\n                      {sum.toFixed(2) +\r\n                        \"  \" +\r\n                        getSymbolFromCurrency(cart[0]?.currency_code)}\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={6} sm={6} md={6}>\r\n                    <p className=\"d-none\">\r\n                      {console.log(message)}\r\n                      {(message = `\\n${message} *Grand Total*: ${sum}`)}\r\n                    </p>\r\n                    {console.log(message)}\r\n\r\n                    <ReactWhatsapp\r\n                      className=\"col-12 btn\"\r\n                      style={{\r\n                        textTransform: \"capitalize\",\r\n                        backgroundColor: theme?.button_background_color\r\n                          ? theme.button_background_color\r\n                          : \"#ff751d\",\r\n                        color: theme?.button_text_color\r\n                          ? theme.button_text_color\r\n                          : \"#f1fcfe\",\r\n                        fontSize: theme?.bTextSize\r\n                          ? theme.bTextSize + \"rem\"\r\n                          : \"1rem\",\r\n                      }}\r\n                      number=\"905411251310\"\r\n                      message={message}\r\n                      max=\"4096\"\r\n                      type=\"submit\"\r\n                    >\r\n                      {t(\"send_order\")}{\" \"}\r\n                    </ReactWhatsapp>\r\n                  </Grid>\r\n                </Grid>\r\n              </CardContent>\r\n            </Card>\r\n          </>\r\n        )}\r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default Cart;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\Counter.js",["550","551","552","553","554","555","556","557","558"],"import React, { useState } from \"react\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\nconst Counter = (props) => {\r\n  const { custom, products, item, cart, setCart } = props;\r\n  // const [show, setShow] = useState(false);\r\n\r\n  const handleDecrement = (e, qty, id) => {\r\n    e.preventDefault();\r\n    if (qty > 1) {\r\n      let vars = cart.map((item) =>\r\n        id === item.id\r\n          ? {\r\n              ...item,\r\n              qty: item.qty - (item.qty > 0 ? 1 : 0),\r\n            }\r\n          : item\r\n      );\r\n      setCart((cart) => vars);\r\n      item.qty = qty - 1;\r\n      localStorage.setItem(\"cart\", JSON.stringify(vars));\r\n    }\r\n  };\r\n  const handelIncrement = (e, qty, id) => {\r\n    e.preventDefault();\r\n    let vars = cart.map((item) =>\r\n      id === item.id ? { ...item, qty: item.qty + 1 } : item\r\n    );\r\n    setCart((cart) => vars);\r\n    item.qty = qty + 1;\r\n    localStorage.setItem(\"cart\", JSON.stringify(vars));\r\n  };\r\n\r\n  const addItem = (id) => {\r\n    const check = cart.every((item) => {\r\n      return item.id !== id;\r\n    });\r\n    if (check) {\r\n      const data = products.filter((product) => {\r\n        return product.id === id;\r\n      });\r\n      localStorage.setItem(\"cart\", JSON.stringify(cart.concat(data)));\r\n      setCart(cart.concat(data));\r\n    } else {\r\n      //  if available\r\n    }\r\n  };\r\n  const remItem = (id) => {\r\n    const data = cart.filter((cart) => {\r\n      return cart.id !== id;\r\n    });\r\n    localStorage.setItem(\"cart\", JSON.stringify(data));\r\n    setCart(data);\r\n    // setShow(false);\r\n  };\r\n  var cartItem = [];\r\n  const getvalue = JSON.parse(localStorage.getItem(\"cart\")) || [];\r\n  if (getvalue) {\r\n    cartItem = getvalue.filter((cart) => {\r\n      return cart.id == item.id;\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className={`col-12 ${cartItem.length == 0 ? \" \" : \"d-none\"} `}>\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width=\"16\"\r\n          height=\"16\"\r\n          fill=\"currentColor\"\r\n          className=\"bi bi-plus-square-dotted\"\r\n          onClick={(e) => [addItem(item.id)]}\r\n          style={{ cursor: \"pointer\" }}\r\n          style={{\r\n            color: custom?.menusDeactiveColor\r\n              ? custom.menusDeactiveColor\r\n              : \"#fff\",\r\n          }}\r\n          viewBox=\"0 0 16 16\"\r\n        >\r\n          <path d=\"M2.5 0c-.166 0-.33.016-.487.048l.194.98A1.51 1.51 0 0 1 2.5 1h.458V0H2.5zm2.292 0h-.917v1h.917V0zm1.833 0h-.917v1h.917V0zm1.833 0h-.916v1h.916V0zm1.834 0h-.917v1h.917V0zm1.833 0h-.917v1h.917V0zM13.5 0h-.458v1h.458c.1 0 .199.01.293.029l.194-.981A2.51 2.51 0 0 0 13.5 0zm2.079 1.11a2.511 2.511 0 0 0-.69-.689l-.556.831c.164.11.305.251.415.415l.83-.556zM1.11.421a2.511 2.511 0 0 0-.689.69l.831.556c.11-.164.251-.305.415-.415L1.11.422zM16 2.5c0-.166-.016-.33-.048-.487l-.98.194c.018.094.028.192.028.293v.458h1V2.5zM.048 2.013A2.51 2.51 0 0 0 0 2.5v.458h1V2.5c0-.1.01-.199.029-.293l-.981-.194zM0 3.875v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zM0 5.708v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zM0 7.542v.916h1v-.916H0zm15 .916h1v-.916h-1v.916zM0 9.375v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zm-16 .916v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zm-16 .917v.458c0 .166.016.33.048.487l.98-.194A1.51 1.51 0 0 1 1 13.5v-.458H0zm16 .458v-.458h-1v.458c0 .1-.01.199-.029.293l.981.194c.032-.158.048-.32.048-.487zM.421 14.89c.183.272.417.506.69.689l.556-.831a1.51 1.51 0 0 1-.415-.415l-.83.556zm14.469.689c.272-.183.506-.417.689-.69l-.831-.556c-.11.164-.251.305-.415.415l.556.83zm-12.877.373c.158.032.32.048.487.048h.458v-1H2.5c-.1 0-.199-.01-.293-.029l-.194.981zM13.5 16c.166 0 .33-.016.487-.048l-.194-.98A1.51 1.51 0 0 1 13.5 15h-.458v1h.458zm-9.625 0h.917v-1h-.917v1zm1.833 0h.917v-1h-.917v1zm1.834-1v1h.916v-1h-.916zm1.833 1h.917v-1h-.917v1zm1.833 0h.917v-1h-.917v1zM8.5 4.5a.5.5 0 0 0-1 0v3h-3a.5.5 0 0 0 0 1h3v3a.5.5 0 0 0 1 0v-3h3a.5.5 0 0 0 0-1h-3v-3z\" />\r\n        </svg>\r\n      </div>\r\n      <div className={`col-12  ${cartItem.length != 0 ? \" \" : \"d-none\"}`}>\r\n        <div className=\"col-4\">\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            {(cartItem.length != 0 ? cartItem[0].qty : item.qty) === 1 ? (\r\n              <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                width=\"16\"\r\n                height=\"16\"\r\n                fill=\"currentColor\"\r\n                className=\"bi bi-trash text-danger\"\r\n                viewBox=\"0 0 16 16\"\r\n                onClick={() => remItem(item.id)}\r\n                style={{ cursor: \"pointer\" }}\r\n              >\r\n                <path d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z\" />\r\n                <path\r\n                  fillRule=\"evenodd\"\r\n                  d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\"\r\n                />\r\n              </svg>\r\n            ) : (\r\n              <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                width=\"16\"\r\n                height=\"16\"\r\n                fill=\"currentColor\"\r\n                className=\"bi bi-dash-square-dotted  \"\r\n                viewBox=\"0 0 16 16\"\r\n                onClick={(e) =>\r\n                  handleDecrement(\r\n                    e,\r\n                    cartItem.length != 0 ? cartItem[0].qty : item.qty,\r\n                    item.id,\r\n                    item.price\r\n                  )\r\n                }\r\n                style={{ cursor: \"pointer\" }}\r\n              >\r\n                <path d=\"M2.5 0c-.166 0-.33.016-.487.048l.194.98A1.51 1.51 0 0 1 2.5 1h.458V0H2.5zm2.292 0h-.917v1h.917V0zm1.833 0h-.917v1h.917V0zm1.833 0h-.916v1h.916V0zm1.834 0h-.917v1h.917V0zm1.833 0h-.917v1h.917V0zM13.5 0h-.458v1h.458c.1 0 .199.01.293.029l.194-.981A2.51 2.51 0 0 0 13.5 0zm2.079 1.11a2.511 2.511 0 0 0-.69-.689l-.556.831c.164.11.305.251.415.415l.83-.556zM1.11.421a2.511 2.511 0 0 0-.689.69l.831.556c.11-.164.251-.305.415-.415L1.11.422zM16 2.5c0-.166-.016-.33-.048-.487l-.98.194c.018.094.028.192.028.293v.458h1V2.5zM.048 2.013A2.51 2.51 0 0 0 0 2.5v.458h1V2.5c0-.1.01-.199.029-.293l-.981-.194zM0 3.875v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zM0 5.708v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zM0 7.542v.916h1v-.916H0zm15 .916h1v-.916h-1v.916zM0 9.375v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zm-16 .916v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zm-16 .917v.458c0 .166.016.33.048.487l.98-.194A1.51 1.51 0 0 1 1 13.5v-.458H0zm16 .458v-.458h-1v.458c0 .1-.01.199-.029.293l.981.194c.032-.158.048-.32.048-.487zM.421 14.89c.183.272.417.506.69.689l.556-.831a1.51 1.51 0 0 1-.415-.415l-.83.556zm14.469.689c.272-.183.506-.417.689-.69l-.831-.556c-.11.164-.251.305-.415.415l.556.83zm-12.877.373c.158.032.32.048.487.048h.458v-1H2.5c-.1 0-.199-.01-.293-.029l-.194.981zM13.5 16c.166 0 .33-.016.487-.048l-.194-.98A1.51 1.51 0 0 1 13.5 15h-.458v1h.458zm-9.625 0h.917v-1h-.917v1zm1.833 0h.917v-1h-.917v1zm1.834 0h.916v-1h-.916v1zm1.833 0h.917v-1h-.917v1zm1.833 0h.917v-1h-.917v1zM4.5 7.5a.5.5 0 0 0 0 1h7a.5.5 0 0 0 0-1h-7z\" />\r\n              </svg>\r\n            )}{\" \"}\r\n          </Typography>\r\n        </div>\r\n        <div className=\"col-4\">\r\n          {\" \"}\r\n          <Typography variant=\"subtitle1\" gutterBottom className=\"mt-1\">\r\n            {cartItem.length != 0 ? cartItem[0].qty : item.qty}\r\n          </Typography>\r\n        </div>\r\n\r\n        <div className=\"col-4\">\r\n          <Typography\r\n            variant=\"h6\"\r\n            gutterBottom\r\n            onClick={(e) =>\r\n              handelIncrement(\r\n                e,\r\n                cartItem.length != 0 ? cartItem[0].qty : item.qty,\r\n                item.id,\r\n                item.price\r\n              )\r\n            }\r\n            style={{ cursor: \"pointer\" }}\r\n          >\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              width=\"16\"\r\n              height=\"16\"\r\n              fill=\"currentColor\"\r\n              className=\"bi bi-plus-square-dotted \"\r\n              viewBox=\"0 0 16 16\"\r\n            >\r\n              <path d=\"M2.5 0c-.166 0-.33.016-.487.048l.194.98A1.51 1.51 0 0 1 2.5 1h.458V0H2.5zm2.292 0h-.917v1h.917V0zm1.833 0h-.917v1h.917V0zm1.833 0h-.916v1h.916V0zm1.834 0h-.917v1h.917V0zm1.833 0h-.917v1h.917V0zM13.5 0h-.458v1h.458c.1 0 .199.01.293.029l.194-.981A2.51 2.51 0 0 0 13.5 0zm2.079 1.11a2.511 2.511 0 0 0-.69-.689l-.556.831c.164.11.305.251.415.415l.83-.556zM1.11.421a2.511 2.511 0 0 0-.689.69l.831.556c.11-.164.251-.305.415-.415L1.11.422zM16 2.5c0-.166-.016-.33-.048-.487l-.98.194c.018.094.028.192.028.293v.458h1V2.5zM.048 2.013A2.51 2.51 0 0 0 0 2.5v.458h1V2.5c0-.1.01-.199.029-.293l-.981-.194zM0 3.875v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zM0 5.708v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zM0 7.542v.916h1v-.916H0zm15 .916h1v-.916h-1v.916zM0 9.375v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zm-16 .916v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zm-16 .917v.458c0 .166.016.33.048.487l.98-.194A1.51 1.51 0 0 1 1 13.5v-.458H0zm16 .458v-.458h-1v.458c0 .1-.01.199-.029.293l.981.194c.032-.158.048-.32.048-.487zM.421 14.89c.183.272.417.506.69.689l.556-.831a1.51 1.51 0 0 1-.415-.415l-.83.556zm14.469.689c.272-.183.506-.417.689-.69l-.831-.556c-.11.164-.251.305-.415.415l.556.83zm-12.877.373c.158.032.32.048.487.048h.458v-1H2.5c-.1 0-.199-.01-.293-.029l-.194.981zM13.5 16c.166 0 .33-.016.487-.048l-.194-.98A1.51 1.51 0 0 1 13.5 15h-.458v1h.458zm-9.625 0h.917v-1h-.917v1zm1.833 0h.917v-1h-.917v1zm1.834-1v1h.916v-1h-.916zm1.833 1h.917v-1h-.917v1zm1.833 0h.917v-1h-.917v1zM8.5 4.5a.5.5 0 0 0-1 0v3h-3a.5.5 0 0 0 0 1h3v3a.5.5 0 0 0 1 0v-3h3a.5.5 0 0 0 0-1h-3v-3z\" />\r\n            </svg>\r\n          </Typography>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Counter;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\pages\\ForgotPassword.js",[],{"ruleId":"559","replacedBy":"560"},{"ruleId":"561","replacedBy":"562"},{"ruleId":"563","severity":1,"message":"564","line":49,"column":19,"nodeType":"565","endLine":49,"endColumn":49},{"ruleId":"566","severity":1,"message":"567","line":63,"column":21,"nodeType":"568","messageId":"569","endLine":63,"endColumn":23},{"ruleId":"566","severity":1,"message":"567","line":70,"column":13,"nodeType":"568","messageId":"569","endLine":70,"endColumn":15},{"ruleId":"566","severity":1,"message":"567","line":78,"column":43,"nodeType":"568","messageId":"569","endLine":78,"endColumn":45},{"ruleId":"566","severity":1,"message":"567","line":106,"column":46,"nodeType":"568","messageId":"569","endLine":106,"endColumn":48},{"ruleId":"566","severity":1,"message":"570","line":116,"column":24,"nodeType":"568","messageId":"569","endLine":116,"endColumn":26},{"ruleId":"571","severity":1,"message":"572","line":120,"column":38,"nodeType":"573","messageId":"574","endLine":120,"endColumn":40},{"ruleId":"575","severity":1,"message":"576","line":154,"column":5,"nodeType":"577","messageId":"569","endLine":154,"endColumn":15},{"ruleId":"578","severity":1,"message":"579","line":156,"column":9,"nodeType":"580","endLine":165,"endColumn":11},{"ruleId":"566","severity":1,"message":"570","line":248,"column":41,"nodeType":"568","messageId":"569","endLine":248,"endColumn":43},{"ruleId":"581","severity":1,"message":"582","line":334,"column":72,"nodeType":"568","messageId":"583","endLine":334,"endColumn":73},{"ruleId":"566","severity":1,"message":"567","line":364,"column":47,"nodeType":"568","messageId":"569","endLine":364,"endColumn":49},{"ruleId":"584","severity":1,"message":"585","line":1,"column":27,"nodeType":"586","messageId":"587","endLine":1,"endColumn":33},{"ruleId":"563","severity":1,"message":"564","line":105,"column":19,"nodeType":"565","endLine":105,"endColumn":49},{"ruleId":"566","severity":1,"message":"567","line":121,"column":21,"nodeType":"568","messageId":"569","endLine":121,"endColumn":23},{"ruleId":"566","severity":1,"message":"567","line":128,"column":13,"nodeType":"568","messageId":"569","endLine":128,"endColumn":15},{"ruleId":"566","severity":1,"message":"567","line":136,"column":43,"nodeType":"568","messageId":"569","endLine":136,"endColumn":45},{"ruleId":"571","severity":1,"message":"572","line":159,"column":29,"nodeType":"573","messageId":"574","endLine":159,"endColumn":31},{"ruleId":"571","severity":1,"message":"572","line":160,"column":38,"nodeType":"573","messageId":"574","endLine":160,"endColumn":40},{"ruleId":"566","severity":1,"message":"567","line":180,"column":46,"nodeType":"568","messageId":"569","endLine":180,"endColumn":48},{"ruleId":"566","severity":1,"message":"570","line":190,"column":24,"nodeType":"568","messageId":"569","endLine":190,"endColumn":26},{"ruleId":"571","severity":1,"message":"572","line":194,"column":38,"nodeType":"573","messageId":"574","endLine":194,"endColumn":40},{"ruleId":"566","severity":1,"message":"570","line":226,"column":60,"nodeType":"568","messageId":"569","endLine":226,"endColumn":62},{"ruleId":"584","severity":1,"message":"588","line":230,"column":16,"nodeType":"586","messageId":"587","endLine":230,"endColumn":23},{"ruleId":"566","severity":1,"message":"570","line":253,"column":32,"nodeType":"568","messageId":"569","endLine":253,"endColumn":34},{"ruleId":"566","severity":1,"message":"567","line":393,"column":43,"nodeType":"568","messageId":"569","endLine":393,"endColumn":45},{"ruleId":"566","severity":1,"message":"567","line":426,"column":39,"nodeType":"568","messageId":"569","endLine":426,"endColumn":41},{"ruleId":"566","severity":1,"message":"567","line":495,"column":34,"nodeType":"568","messageId":"569","endLine":495,"endColumn":36},{"ruleId":"581","severity":1,"message":"582","line":520,"column":72,"nodeType":"568","messageId":"583","endLine":520,"endColumn":73},{"ruleId":"581","severity":1,"message":"582","line":526,"column":71,"nodeType":"568","messageId":"583","endLine":526,"endColumn":72},{"ruleId":"566","severity":1,"message":"567","line":535,"column":36,"nodeType":"568","messageId":"569","endLine":535,"endColumn":38},{"ruleId":"566","severity":1,"message":"567","line":569,"column":49,"nodeType":"568","messageId":"569","endLine":569,"endColumn":51},{"ruleId":"563","severity":1,"message":"589","line":74,"column":6,"nodeType":"590","endLine":74,"endColumn":8,"suggestions":"591"},{"ruleId":"563","severity":1,"message":"589","line":81,"column":6,"nodeType":"590","endLine":81,"endColumn":8,"suggestions":"592"},{"ruleId":"566","severity":1,"message":"567","line":205,"column":24,"nodeType":"568","messageId":"569","endLine":205,"endColumn":26},{"ruleId":"566","severity":1,"message":"567","line":215,"column":49,"nodeType":"568","messageId":"569","endLine":215,"endColumn":51},{"ruleId":"566","severity":1,"message":"567","line":217,"column":51,"nodeType":"568","messageId":"569","endLine":217,"endColumn":53},{"ruleId":"566","severity":1,"message":"567","line":219,"column":51,"nodeType":"568","messageId":"569","endLine":219,"endColumn":53},{"ruleId":"566","severity":1,"message":"567","line":221,"column":51,"nodeType":"568","messageId":"569","endLine":221,"endColumn":53},{"ruleId":"566","severity":1,"message":"567","line":222,"column":51,"nodeType":"568","messageId":"569","endLine":222,"endColumn":53},{"ruleId":"566","severity":1,"message":"567","line":224,"column":51,"nodeType":"568","messageId":"569","endLine":224,"endColumn":53},{"ruleId":"566","severity":1,"message":"567","line":231,"column":49,"nodeType":"568","messageId":"569","endLine":231,"endColumn":51},{"ruleId":"566","severity":1,"message":"567","line":233,"column":51,"nodeType":"568","messageId":"569","endLine":233,"endColumn":53},{"ruleId":"566","severity":1,"message":"567","line":235,"column":51,"nodeType":"568","messageId":"569","endLine":235,"endColumn":53},{"ruleId":"566","severity":1,"message":"567","line":237,"column":51,"nodeType":"568","messageId":"569","endLine":237,"endColumn":53},{"ruleId":"566","severity":1,"message":"567","line":238,"column":51,"nodeType":"568","messageId":"569","endLine":238,"endColumn":53},{"ruleId":"566","severity":1,"message":"567","line":240,"column":51,"nodeType":"568","messageId":"569","endLine":240,"endColumn":53},{"ruleId":"566","severity":1,"message":"567","line":247,"column":51,"nodeType":"568","messageId":"569","endLine":247,"endColumn":53},{"ruleId":"566","severity":1,"message":"567","line":249,"column":53,"nodeType":"568","messageId":"569","endLine":249,"endColumn":55},{"ruleId":"566","severity":1,"message":"567","line":251,"column":53,"nodeType":"568","messageId":"569","endLine":251,"endColumn":55},{"ruleId":"566","severity":1,"message":"567","line":253,"column":53,"nodeType":"568","messageId":"569","endLine":253,"endColumn":55},{"ruleId":"566","severity":1,"message":"567","line":254,"column":53,"nodeType":"568","messageId":"569","endLine":254,"endColumn":55},{"ruleId":"566","severity":1,"message":"567","line":256,"column":53,"nodeType":"568","messageId":"569","endLine":256,"endColumn":55},{"ruleId":"593","severity":1,"message":"594","line":304,"column":19,"nodeType":"580","endLine":314,"endColumn":21},{"ruleId":"584","severity":1,"message":"595","line":8,"column":8,"nodeType":"586","messageId":"587","endLine":8,"endColumn":17},{"ruleId":"584","severity":1,"message":"596","line":18,"column":8,"nodeType":"586","messageId":"587","endLine":18,"endColumn":29},{"ruleId":"584","severity":1,"message":"597","line":20,"column":5,"nodeType":"586","messageId":"587","endLine":20,"endColumn":9},{"ruleId":"584","severity":1,"message":"598","line":32,"column":10,"nodeType":"586","messageId":"587","endLine":32,"endColumn":18},{"ruleId":"584","severity":1,"message":"599","line":32,"column":20,"nodeType":"586","messageId":"587","endLine":32,"endColumn":31},{"ruleId":"563","severity":1,"message":"589","line":58,"column":6,"nodeType":"590","endLine":58,"endColumn":8,"suggestions":"600"},{"ruleId":"578","severity":1,"message":"579","line":198,"column":17,"nodeType":"580","endLine":207,"endColumn":19},{"ruleId":"566","severity":1,"message":"567","line":273,"column":38,"nodeType":"568","messageId":"569","endLine":273,"endColumn":40},{"ruleId":"578","severity":1,"message":"579","line":293,"column":23,"nodeType":"580","endLine":300,"endColumn":25},{"ruleId":"566","severity":1,"message":"567","line":305,"column":42,"nodeType":"568","messageId":"569","endLine":305,"endColumn":44},{"ruleId":"584","severity":1,"message":"601","line":25,"column":8,"nodeType":"586","messageId":"587","endLine":25,"endColumn":21},{"ruleId":"566","severity":1,"message":"567","line":102,"column":14,"nodeType":"568","messageId":"569","endLine":102,"endColumn":16},{"ruleId":"566","severity":1,"message":"567","line":109,"column":14,"nodeType":"568","messageId":"569","endLine":109,"endColumn":16},{"ruleId":"566","severity":1,"message":"567","line":120,"column":14,"nodeType":"568","messageId":"569","endLine":120,"endColumn":16},{"ruleId":"566","severity":1,"message":"567","line":132,"column":12,"nodeType":"568","messageId":"569","endLine":132,"endColumn":14},{"ruleId":"584","severity":1,"message":"588","line":137,"column":16,"nodeType":"586","messageId":"587","endLine":137,"endColumn":23},{"ruleId":"593","severity":1,"message":"594","line":271,"column":17,"nodeType":"580","endLine":284,"endColumn":19},{"ruleId":"566","severity":1,"message":"567","line":300,"column":46,"nodeType":"568","messageId":"569","endLine":300,"endColumn":48},{"ruleId":"566","severity":1,"message":"567","line":309,"column":45,"nodeType":"568","messageId":"569","endLine":309,"endColumn":47},{"ruleId":"566","severity":1,"message":"567","line":316,"column":48,"nodeType":"568","messageId":"569","endLine":316,"endColumn":50},{"ruleId":"584","severity":1,"message":"602","line":7,"column":8,"nodeType":"586","messageId":"587","endLine":7,"endColumn":14},{"ruleId":"584","severity":1,"message":"603","line":25,"column":10,"nodeType":"586","messageId":"587","endLine":25,"endColumn":20},{"ruleId":"563","severity":1,"message":"589","line":66,"column":6,"nodeType":"590","endLine":66,"endColumn":8,"suggestions":"604"},{"ruleId":"566","severity":1,"message":"567","line":197,"column":64,"nodeType":"568","messageId":"569","endLine":197,"endColumn":66},{"ruleId":"566","severity":1,"message":"567","line":199,"column":68,"nodeType":"568","messageId":"569","endLine":199,"endColumn":70},{"ruleId":"566","severity":1,"message":"567","line":201,"column":68,"nodeType":"568","messageId":"569","endLine":201,"endColumn":70},{"ruleId":"566","severity":1,"message":"567","line":203,"column":68,"nodeType":"568","messageId":"569","endLine":203,"endColumn":70},{"ruleId":"566","severity":1,"message":"567","line":205,"column":68,"nodeType":"568","messageId":"569","endLine":205,"endColumn":70},{"ruleId":"566","severity":1,"message":"567","line":207,"column":68,"nodeType":"568","messageId":"569","endLine":207,"endColumn":70},{"ruleId":"584","severity":1,"message":"605","line":6,"column":8,"nodeType":"586","messageId":"587","endLine":6,"endColumn":14},{"ruleId":"584","severity":1,"message":"602","line":7,"column":8,"nodeType":"586","messageId":"587","endLine":7,"endColumn":14},{"ruleId":"584","severity":1,"message":"597","line":23,"column":5,"nodeType":"586","messageId":"587","endLine":23,"endColumn":9},{"ruleId":"563","severity":1,"message":"589","line":64,"column":6,"nodeType":"590","endLine":64,"endColumn":8,"suggestions":"606"},{"ruleId":"566","severity":1,"message":"567","line":286,"column":43,"nodeType":"568","messageId":"569","endLine":286,"endColumn":45},{"ruleId":"578","severity":1,"message":"579","line":306,"column":25,"nodeType":"580","endLine":313,"endColumn":27},{"ruleId":"566","severity":1,"message":"567","line":318,"column":47,"nodeType":"568","messageId":"569","endLine":318,"endColumn":49},{"ruleId":"566","severity":1,"message":"567","line":17,"column":16,"nodeType":"568","messageId":"569","endLine":17,"endColumn":18},{"ruleId":"566","severity":1,"message":"567","line":17,"column":39,"nodeType":"568","messageId":"569","endLine":17,"endColumn":41},{"ruleId":"563","severity":1,"message":"607","line":46,"column":6,"nodeType":"590","endLine":46,"endColumn":13,"suggestions":"608"},{"ruleId":"563","severity":1,"message":"607","line":148,"column":6,"nodeType":"590","endLine":148,"endColumn":13,"suggestions":"609"},{"ruleId":"584","severity":1,"message":"610","line":7,"column":10,"nodeType":"586","messageId":"587","endLine":7,"endColumn":21},{"ruleId":"584","severity":1,"message":"611","line":7,"column":23,"nodeType":"586","messageId":"587","endLine":7,"endColumn":38},{"ruleId":"563","severity":1,"message":"607","line":138,"column":6,"nodeType":"590","endLine":138,"endColumn":13,"suggestions":"612"},{"ruleId":"563","severity":1,"message":"613","line":87,"column":6,"nodeType":"590","endLine":87,"endColumn":15,"suggestions":"614"},{"ruleId":"584","severity":1,"message":"615","line":1,"column":27,"nodeType":"586","messageId":"587","endLine":1,"endColumn":35},{"ruleId":"584","severity":1,"message":"616","line":2,"column":10,"nodeType":"586","messageId":"587","endLine":2,"endColumn":13},{"ruleId":"584","severity":1,"message":"617","line":2,"column":15,"nodeType":"586","messageId":"587","endLine":2,"endColumn":18},{"ruleId":"584","severity":1,"message":"618","line":4,"column":3,"nodeType":"586","messageId":"587","endLine":4,"endColumn":7},{"ruleId":"584","severity":1,"message":"619","line":13,"column":10,"nodeType":"586","messageId":"587","endLine":13,"endColumn":16},{"ruleId":"584","severity":1,"message":"620","line":13,"column":18,"nodeType":"586","messageId":"587","endLine":13,"endColumn":23},{"ruleId":"584","severity":1,"message":"621","line":13,"column":25,"nodeType":"586","messageId":"587","endLine":13,"endColumn":29},{"ruleId":"584","severity":1,"message":"622","line":19,"column":17,"nodeType":"586","messageId":"587","endLine":19,"endColumn":20},{"ruleId":"584","severity":1,"message":"623","line":20,"column":11,"nodeType":"586","messageId":"587","endLine":20,"endColumn":12},{"ruleId":"584","severity":1,"message":"624","line":21,"column":9,"nodeType":"586","messageId":"587","endLine":21,"endColumn":11},{"ruleId":"584","severity":1,"message":"622","line":17,"column":17,"nodeType":"586","messageId":"587","endLine":17,"endColumn":20},{"ruleId":"584","severity":1,"message":"623","line":18,"column":11,"nodeType":"586","messageId":"587","endLine":18,"endColumn":12},{"ruleId":"584","severity":1,"message":"624","line":19,"column":9,"nodeType":"586","messageId":"587","endLine":19,"endColumn":11},{"ruleId":"584","severity":1,"message":"625","line":6,"column":16,"nodeType":"586","messageId":"587","endLine":6,"endColumn":26},{"ruleId":"584","severity":1,"message":"626","line":6,"column":28,"nodeType":"586","messageId":"587","endLine":6,"endColumn":41},{"ruleId":"563","severity":1,"message":"607","line":165,"column":6,"nodeType":"590","endLine":165,"endColumn":13,"suggestions":"627"},{"ruleId":"584","severity":1,"message":"628","line":20,"column":11,"nodeType":"586","messageId":"587","endLine":20,"endColumn":15},{"ruleId":"563","severity":1,"message":"607","line":170,"column":6,"nodeType":"590","endLine":170,"endColumn":13,"suggestions":"629"},{"ruleId":"563","severity":1,"message":"613","line":73,"column":6,"nodeType":"590","endLine":73,"endColumn":15,"suggestions":"630"},{"ruleId":"563","severity":1,"message":"589","line":134,"column":6,"nodeType":"590","endLine":134,"endColumn":13,"suggestions":"631"},{"ruleId":"566","severity":1,"message":"567","line":147,"column":19,"nodeType":"568","messageId":"569","endLine":147,"endColumn":21},{"ruleId":"566","severity":1,"message":"567","line":162,"column":49,"nodeType":"568","messageId":"569","endLine":162,"endColumn":51},{"ruleId":"584","severity":1,"message":"628","line":17,"column":11,"nodeType":"586","messageId":"587","endLine":17,"endColumn":15},{"ruleId":"584","severity":1,"message":"622","line":17,"column":17,"nodeType":"586","messageId":"587","endLine":17,"endColumn":20},{"ruleId":"566","severity":1,"message":"567","line":132,"column":19,"nodeType":"568","messageId":"569","endLine":132,"endColumn":21},{"ruleId":"563","severity":1,"message":"632","line":181,"column":6,"nodeType":"590","endLine":181,"endColumn":13,"suggestions":"633"},{"ruleId":"566","severity":1,"message":"567","line":186,"column":49,"nodeType":"568","messageId":"569","endLine":186,"endColumn":51},{"ruleId":"634","severity":1,"message":"635","line":118,"column":17,"nodeType":"580","endLine":123,"endColumn":18},{"ruleId":"636","severity":1,"message":"637","line":49,"column":53,"nodeType":"638","messageId":"639","endLine":49,"endColumn":54,"suggestions":"640"},{"ruleId":"563","severity":1,"message":"607","line":89,"column":6,"nodeType":"590","endLine":89,"endColumn":8,"suggestions":"641"},{"ruleId":"642","severity":1,"message":"643","line":103,"column":17,"nodeType":"644","messageId":"645","endLine":103,"endColumn":41},{"ruleId":"584","severity":1,"message":"646","line":41,"column":10,"nodeType":"586","messageId":"587","endLine":41,"endColumn":15},{"ruleId":"584","severity":1,"message":"647","line":45,"column":9,"nodeType":"586","messageId":"587","endLine":45,"endColumn":21},{"ruleId":"642","severity":1,"message":"643","line":451,"column":29,"nodeType":"644","messageId":"645","endLine":451,"endColumn":51},{"ruleId":"584","severity":1,"message":"628","line":38,"column":11,"nodeType":"586","messageId":"587","endLine":38,"endColumn":15},{"ruleId":"571","severity":1,"message":"572","line":105,"column":42,"nodeType":"573","messageId":"574","endLine":105,"endColumn":44},{"ruleId":"566","severity":1,"message":"567","line":106,"column":27,"nodeType":"568","messageId":"569","endLine":106,"endColumn":29},{"ruleId":"563","severity":1,"message":"589","line":119,"column":6,"nodeType":"590","endLine":119,"endColumn":13,"suggestions":"648"},{"ruleId":"566","severity":1,"message":"567","line":202,"column":30,"nodeType":"568","messageId":"569","endLine":202,"endColumn":32},{"ruleId":"566","severity":1,"message":"567","line":243,"column":45,"nodeType":"568","messageId":"569","endLine":243,"endColumn":47},{"ruleId":"566","severity":1,"message":"567","line":244,"column":44,"nodeType":"568","messageId":"569","endLine":244,"endColumn":46},{"ruleId":"566","severity":1,"message":"567","line":319,"column":44,"nodeType":"568","messageId":"569","endLine":319,"endColumn":46},{"ruleId":"566","severity":1,"message":"567","line":334,"column":55,"nodeType":"568","messageId":"569","endLine":334,"endColumn":57},{"ruleId":"566","severity":1,"message":"567","line":335,"column":54,"nodeType":"568","messageId":"569","endLine":335,"endColumn":56},{"ruleId":"566","severity":1,"message":"567","line":31,"column":31,"nodeType":"568","messageId":"569","endLine":31,"endColumn":33},{"ruleId":"571","severity":1,"message":"572","line":40,"column":42,"nodeType":"573","messageId":"574","endLine":40,"endColumn":44},{"ruleId":"566","severity":1,"message":"567","line":45,"column":32,"nodeType":"568","messageId":"569","endLine":45,"endColumn":34},{"ruleId":"571","severity":1,"message":"572","line":49,"column":44,"nodeType":"573","messageId":"574","endLine":49,"endColumn":46},{"ruleId":"571","severity":1,"message":"572","line":71,"column":34,"nodeType":"573","messageId":"574","endLine":71,"endColumn":36},{"ruleId":"566","severity":1,"message":"567","line":78,"column":19,"nodeType":"568","messageId":"569","endLine":78,"endColumn":21},{"ruleId":"566","severity":1,"message":"567","line":79,"column":19,"nodeType":"568","messageId":"569","endLine":79,"endColumn":21},{"ruleId":"566","severity":1,"message":"567","line":80,"column":19,"nodeType":"568","messageId":"569","endLine":80,"endColumn":21},{"ruleId":"566","severity":1,"message":"567","line":81,"column":19,"nodeType":"568","messageId":"569","endLine":81,"endColumn":21},{"ruleId":"566","severity":1,"message":"567","line":82,"column":19,"nodeType":"568","messageId":"569","endLine":82,"endColumn":21},{"ruleId":"563","severity":1,"message":"649","line":113,"column":6,"nodeType":"590","endLine":113,"endColumn":8,"suggestions":"650"},{"ruleId":"571","severity":1,"message":"572","line":174,"column":23,"nodeType":"573","messageId":"574","endLine":174,"endColumn":25},{"ruleId":"571","severity":1,"message":"572","line":176,"column":34,"nodeType":"573","messageId":"574","endLine":176,"endColumn":36},{"ruleId":"571","severity":1,"message":"572","line":181,"column":23,"nodeType":"573","messageId":"574","endLine":181,"endColumn":25},{"ruleId":"571","severity":1,"message":"572","line":183,"column":34,"nodeType":"573","messageId":"574","endLine":183,"endColumn":36},{"ruleId":"651","severity":1,"message":"652","line":192,"column":13,"nodeType":"586","messageId":"653","endLine":192,"endColumn":28},{"ruleId":"566","severity":1,"message":"567","line":194,"column":30,"nodeType":"568","messageId":"569","endLine":194,"endColumn":32},{"ruleId":"571","severity":1,"message":"572","line":199,"column":30,"nodeType":"573","messageId":"574","endLine":199,"endColumn":32},{"ruleId":"571","severity":1,"message":"572","line":202,"column":21,"nodeType":"573","messageId":"574","endLine":202,"endColumn":23},{"ruleId":"584","severity":1,"message":"654","line":18,"column":8,"nodeType":"586","messageId":"587","endLine":18,"endColumn":15},{"ruleId":"584","severity":1,"message":"628","line":20,"column":11,"nodeType":"586","messageId":"587","endLine":20,"endColumn":15},{"ruleId":"563","severity":1,"message":"589","line":64,"column":6,"nodeType":"590","endLine":64,"endColumn":13,"suggestions":"655"},{"ruleId":"581","severity":1,"message":"582","line":164,"column":74,"nodeType":"568","messageId":"583","endLine":164,"endColumn":75},{"ruleId":"563","severity":1,"message":"656","line":21,"column":6,"nodeType":"590","endLine":21,"endColumn":14,"suggestions":"657"},{"ruleId":"571","severity":1,"message":"572","line":25,"column":34,"nodeType":"573","messageId":"574","endLine":25,"endColumn":36},{"ruleId":"566","severity":1,"message":"570","line":26,"column":31,"nodeType":"568","messageId":"569","endLine":26,"endColumn":33},{"ruleId":"566","severity":1,"message":"567","line":27,"column":15,"nodeType":"568","messageId":"569","endLine":27,"endColumn":17},{"ruleId":"566","severity":1,"message":"567","line":39,"column":27,"nodeType":"568","messageId":"569","endLine":39,"endColumn":29},{"ruleId":"571","severity":1,"message":"572","line":58,"column":33,"nodeType":"573","messageId":"574","endLine":58,"endColumn":35},{"ruleId":"571","severity":1,"message":"572","line":61,"column":39,"nodeType":"573","messageId":"574","endLine":61,"endColumn":41},{"ruleId":"566","severity":1,"message":"570","line":103,"column":13,"nodeType":"568","messageId":"569","endLine":103,"endColumn":15},{"ruleId":"566","severity":1,"message":"570","line":120,"column":13,"nodeType":"568","messageId":"569","endLine":120,"endColumn":15},{"ruleId":"566","severity":1,"message":"567","line":127,"column":27,"nodeType":"568","messageId":"569","endLine":127,"endColumn":29},{"ruleId":"566","severity":1,"message":"567","line":128,"column":24,"nodeType":"568","messageId":"569","endLine":128,"endColumn":26},{"ruleId":"566","severity":1,"message":"567","line":134,"column":23,"nodeType":"568","messageId":"569","endLine":134,"endColumn":25},{"ruleId":"642","severity":1,"message":"643","line":204,"column":7,"nodeType":"644","messageId":"645","endLine":204,"endColumn":25},{"ruleId":"584","severity":1,"message":"658","line":1,"column":17,"nodeType":"586","messageId":"587","endLine":1,"endColumn":25},{"ruleId":"584","severity":1,"message":"659","line":1,"column":48,"nodeType":"586","messageId":"587","endLine":1,"endColumn":62},{"ruleId":"584","severity":1,"message":"618","line":3,"column":10,"nodeType":"586","messageId":"587","endLine":3,"endColumn":14},{"ruleId":"584","severity":1,"message":"602","line":8,"column":8,"nodeType":"586","messageId":"587","endLine":8,"endColumn":14},{"ruleId":"584","severity":1,"message":"660","line":17,"column":8,"nodeType":"586","messageId":"587","endLine":17,"endColumn":19},{"ruleId":"584","severity":1,"message":"595","line":18,"column":8,"nodeType":"586","messageId":"587","endLine":18,"endColumn":17},{"ruleId":"584","severity":1,"message":"661","line":20,"column":8,"nodeType":"586","messageId":"587","endLine":20,"endColumn":12},{"ruleId":"584","severity":1,"message":"616","line":21,"column":8,"nodeType":"586","messageId":"587","endLine":21,"endColumn":11},{"ruleId":"584","severity":1,"message":"662","line":22,"column":8,"nodeType":"586","messageId":"587","endLine":22,"endColumn":11},{"ruleId":"584","severity":1,"message":"663","line":35,"column":30,"nodeType":"586","messageId":"587","endLine":35,"endColumn":51},{"ruleId":"563","severity":1,"message":"564","line":145,"column":19,"nodeType":"565","endLine":145,"endColumn":49},{"ruleId":"566","severity":1,"message":"567","line":159,"column":21,"nodeType":"568","messageId":"569","endLine":159,"endColumn":23},{"ruleId":"566","severity":1,"message":"567","line":166,"column":13,"nodeType":"568","messageId":"569","endLine":166,"endColumn":15},{"ruleId":"566","severity":1,"message":"567","line":174,"column":43,"nodeType":"568","messageId":"569","endLine":174,"endColumn":45},{"ruleId":"566","severity":1,"message":"567","line":202,"column":46,"nodeType":"568","messageId":"569","endLine":202,"endColumn":48},{"ruleId":"566","severity":1,"message":"570","line":212,"column":24,"nodeType":"568","messageId":"569","endLine":212,"endColumn":26},{"ruleId":"571","severity":1,"message":"572","line":216,"column":38,"nodeType":"573","messageId":"574","endLine":216,"endColumn":40},{"ruleId":"575","severity":1,"message":"576","line":250,"column":5,"nodeType":"577","messageId":"569","endLine":250,"endColumn":15},{"ruleId":"578","severity":1,"message":"579","line":252,"column":9,"nodeType":"580","endLine":261,"endColumn":11},{"ruleId":"566","severity":1,"message":"570","line":351,"column":41,"nodeType":"568","messageId":"569","endLine":351,"endColumn":43},{"ruleId":"581","severity":1,"message":"582","line":446,"column":73,"nodeType":"568","messageId":"583","endLine":446,"endColumn":74},{"ruleId":"566","severity":1,"message":"567","line":478,"column":47,"nodeType":"568","messageId":"569","endLine":478,"endColumn":49},{"ruleId":"584","severity":1,"message":"663","line":25,"column":30,"nodeType":"586","messageId":"587","endLine":25,"endColumn":51},{"ruleId":"563","severity":1,"message":"664","line":35,"column":6,"nodeType":"590","endLine":35,"endColumn":8,"suggestions":"665"},{"ruleId":"584","severity":1,"message":"658","line":1,"column":17,"nodeType":"586","messageId":"587","endLine":1,"endColumn":25},{"ruleId":"584","severity":1,"message":"659","line":1,"column":48,"nodeType":"586","messageId":"587","endLine":1,"endColumn":62},{"ruleId":"584","severity":1,"message":"618","line":3,"column":10,"nodeType":"586","messageId":"587","endLine":3,"endColumn":14},{"ruleId":"584","severity":1,"message":"660","line":15,"column":8,"nodeType":"586","messageId":"587","endLine":15,"endColumn":19},{"ruleId":"584","severity":1,"message":"595","line":16,"column":8,"nodeType":"586","messageId":"587","endLine":16,"endColumn":17},{"ruleId":"584","severity":1,"message":"661","line":18,"column":8,"nodeType":"586","messageId":"587","endLine":18,"endColumn":12},{"ruleId":"584","severity":1,"message":"616","line":19,"column":8,"nodeType":"586","messageId":"587","endLine":19,"endColumn":11},{"ruleId":"584","severity":1,"message":"662","line":20,"column":8,"nodeType":"586","messageId":"587","endLine":20,"endColumn":11},{"ruleId":"584","severity":1,"message":"663","line":33,"column":30,"nodeType":"586","messageId":"587","endLine":33,"endColumn":51},{"ruleId":"563","severity":1,"message":"564","line":143,"column":19,"nodeType":"565","endLine":143,"endColumn":49},{"ruleId":"566","severity":1,"message":"567","line":157,"column":21,"nodeType":"568","messageId":"569","endLine":157,"endColumn":23},{"ruleId":"566","severity":1,"message":"567","line":164,"column":13,"nodeType":"568","messageId":"569","endLine":164,"endColumn":15},{"ruleId":"566","severity":1,"message":"567","line":172,"column":43,"nodeType":"568","messageId":"569","endLine":172,"endColumn":45},{"ruleId":"566","severity":1,"message":"567","line":200,"column":46,"nodeType":"568","messageId":"569","endLine":200,"endColumn":48},{"ruleId":"566","severity":1,"message":"570","line":210,"column":24,"nodeType":"568","messageId":"569","endLine":210,"endColumn":26},{"ruleId":"571","severity":1,"message":"572","line":214,"column":38,"nodeType":"573","messageId":"574","endLine":214,"endColumn":40},{"ruleId":"575","severity":1,"message":"576","line":248,"column":5,"nodeType":"577","messageId":"569","endLine":248,"endColumn":15},{"ruleId":"578","severity":1,"message":"579","line":250,"column":9,"nodeType":"580","endLine":259,"endColumn":11},{"ruleId":"566","severity":1,"message":"570","line":349,"column":41,"nodeType":"568","messageId":"569","endLine":349,"endColumn":43},{"ruleId":"581","severity":1,"message":"582","line":444,"column":73,"nodeType":"568","messageId":"583","endLine":444,"endColumn":74},{"ruleId":"566","severity":1,"message":"567","line":476,"column":47,"nodeType":"568","messageId":"569","endLine":476,"endColumn":49},{"ruleId":"584","severity":1,"message":"615","line":1,"column":17,"nodeType":"586","messageId":"587","endLine":1,"endColumn":25},{"ruleId":"584","severity":1,"message":"623","line":12,"column":11,"nodeType":"586","messageId":"587","endLine":12,"endColumn":12},{"ruleId":"584","severity":1,"message":"658","line":1,"column":17,"nodeType":"586","messageId":"587","endLine":1,"endColumn":25},{"ruleId":"584","severity":1,"message":"659","line":1,"column":48,"nodeType":"586","messageId":"587","endLine":1,"endColumn":62},{"ruleId":"584","severity":1,"message":"618","line":3,"column":10,"nodeType":"586","messageId":"587","endLine":3,"endColumn":14},{"ruleId":"584","severity":1,"message":"660","line":17,"column":8,"nodeType":"586","messageId":"587","endLine":17,"endColumn":19},{"ruleId":"584","severity":1,"message":"595","line":18,"column":8,"nodeType":"586","messageId":"587","endLine":18,"endColumn":17},{"ruleId":"584","severity":1,"message":"661","line":20,"column":8,"nodeType":"586","messageId":"587","endLine":20,"endColumn":12},{"ruleId":"584","severity":1,"message":"616","line":21,"column":8,"nodeType":"586","messageId":"587","endLine":21,"endColumn":11},{"ruleId":"584","severity":1,"message":"662","line":22,"column":8,"nodeType":"586","messageId":"587","endLine":22,"endColumn":11},{"ruleId":"584","severity":1,"message":"663","line":35,"column":30,"nodeType":"586","messageId":"587","endLine":35,"endColumn":51},{"ruleId":"563","severity":1,"message":"564","line":145,"column":19,"nodeType":"565","endLine":145,"endColumn":49},{"ruleId":"566","severity":1,"message":"567","line":159,"column":21,"nodeType":"568","messageId":"569","endLine":159,"endColumn":23},{"ruleId":"566","severity":1,"message":"567","line":166,"column":13,"nodeType":"568","messageId":"569","endLine":166,"endColumn":15},{"ruleId":"566","severity":1,"message":"567","line":174,"column":43,"nodeType":"568","messageId":"569","endLine":174,"endColumn":45},{"ruleId":"566","severity":1,"message":"567","line":202,"column":46,"nodeType":"568","messageId":"569","endLine":202,"endColumn":48},{"ruleId":"566","severity":1,"message":"570","line":212,"column":24,"nodeType":"568","messageId":"569","endLine":212,"endColumn":26},{"ruleId":"571","severity":1,"message":"572","line":216,"column":38,"nodeType":"573","messageId":"574","endLine":216,"endColumn":40},{"ruleId":"575","severity":1,"message":"576","line":250,"column":5,"nodeType":"577","messageId":"569","endLine":250,"endColumn":15},{"ruleId":"578","severity":1,"message":"579","line":252,"column":9,"nodeType":"580","endLine":261,"endColumn":11},{"ruleId":"566","severity":1,"message":"570","line":351,"column":41,"nodeType":"568","messageId":"569","endLine":351,"endColumn":43},{"ruleId":"581","severity":1,"message":"582","line":446,"column":73,"nodeType":"568","messageId":"583","endLine":446,"endColumn":74},{"ruleId":"566","severity":1,"message":"567","line":478,"column":47,"nodeType":"568","messageId":"569","endLine":478,"endColumn":49},{"ruleId":"584","severity":1,"message":"618","line":23,"column":10,"nodeType":"586","messageId":"587","endLine":23,"endColumn":14},{"ruleId":"571","severity":1,"message":"572","line":78,"column":21,"nodeType":"573","messageId":"574","endLine":78,"endColumn":23},{"ruleId":"563","severity":1,"message":"666","line":79,"column":14,"nodeType":"568","endLine":79,"endColumn":35},{"ruleId":"566","severity":1,"message":"567","line":87,"column":10,"nodeType":"568","messageId":"569","endLine":87,"endColumn":12},{"ruleId":"566","severity":1,"message":"567","line":103,"column":10,"nodeType":"568","messageId":"569","endLine":103,"endColumn":12},{"ruleId":"593","severity":1,"message":"594","line":173,"column":17,"nodeType":"580","endLine":183,"endColumn":19},{"ruleId":"584","severity":1,"message":"615","line":1,"column":17,"nodeType":"586","messageId":"587","endLine":1,"endColumn":25},{"ruleId":"566","severity":1,"message":"567","line":60,"column":22,"nodeType":"568","messageId":"569","endLine":60,"endColumn":24},{"ruleId":"566","severity":1,"message":"567","line":66,"column":49,"nodeType":"568","messageId":"569","endLine":66,"endColumn":51},{"ruleId":"642","severity":1,"message":"643","line":75,"column":11,"nodeType":"644","messageId":"645","endLine":79,"endColumn":13},{"ruleId":"566","severity":1,"message":"570","line":85,"column":50,"nodeType":"568","messageId":"569","endLine":85,"endColumn":52},{"ruleId":"566","severity":1,"message":"570","line":88,"column":31,"nodeType":"568","messageId":"569","endLine":88,"endColumn":33},{"ruleId":"566","severity":1,"message":"570","line":116,"column":37,"nodeType":"568","messageId":"569","endLine":116,"endColumn":39},{"ruleId":"566","severity":1,"message":"570","line":131,"column":30,"nodeType":"568","messageId":"569","endLine":131,"endColumn":32},{"ruleId":"566","severity":1,"message":"570","line":142,"column":33,"nodeType":"568","messageId":"569","endLine":142,"endColumn":35},"no-native-reassign",["667"],"no-negated-in-lhs",["668"],"react-hooks/exhaustive-deps","Assignments to the 'varData' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-dupe-keys","Duplicate key 'indicators'.","ObjectExpression","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'setCart' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'branchId'. Either include it or remove the dependency array.","ArrayExpression",["669"],["670"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'CardMedia' is defined but never used.","'getSymbolFromCurrency' is defined but never used.","'hold' is assigned a value but never used.","'products' is assigned a value but never used.","'setProducts' is assigned a value but never used.",["671"],"'ReactWhatsapp' is defined but never used.","'Footer' is defined but never used.","'categories' is assigned a value but never used.",["672"],"'Header' is defined but never used.",["673"],"React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["674"],["675"],"'CBreadcrumb' is defined but never used.","'CBreadcrumbItem' is defined but never used.",["676"],"React Hook useEffect has a missing dependency: 'templateId'. Either include it or remove the dependency array.",["677"],"'useState' is defined but never used.","'Tab' is defined but never used.","'Nav' is defined but never used.","'Link' is defined but never used.","'Button' is defined but never used.","'Modal' is defined but never used.","'Form' is defined but never used.","'url' is assigned a value but never used.","'t' is assigned a value but never used.","'id' is assigned a value but never used.","'useHistory' is defined but never used.","'useRouteMatch' is defined but never used.",["678"],"'path' is assigned a value but never used.",["679"],["680"],["681"],"React Hook useEffect has missing dependencies: 'branchId' and 'productId'. Either include them or remove the dependency array.",["682"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-useless-escape","Unnecessary escape character: \\/.","Literal","unnecessaryEscape",["683","684"],["685"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'state' is assigned a value but never used.","'handleChange' is assigned a value but never used.",["686"],"React Hook useEffect has missing dependencies: 'attributes.length' and 'id'. Either include them or remove the dependency array.",["687"],"no-redeclare","'uniqueResultOne' is already defined.","redeclared","'AddIcon' is defined but never used.",["688"],"React Hook useEffect has a missing dependency: 'setVarantGrid'. Either include it or remove the dependency array.",["689"],"'Fragment' is defined but never used.","'SyntheticEvent' is defined but never used.","'CardContent' is defined but never used.","'Tabs' is defined but never used.","'Box' is defined but never used.","'setThemeCustomization' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'cateId'. Either include it or remove the dependency array.",["690"],"Assignments to the 'sum' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","no-global-assign","no-unsafe-negation",{"desc":"691","fix":"692"},{"desc":"691","fix":"693"},{"desc":"691","fix":"694"},{"desc":"691","fix":"695"},{"desc":"691","fix":"696"},{"desc":"697","fix":"698"},{"desc":"697","fix":"699"},{"desc":"697","fix":"700"},{"desc":"701","fix":"702"},{"desc":"697","fix":"703"},{"desc":"697","fix":"704"},{"desc":"701","fix":"705"},{"desc":"706","fix":"707"},{"desc":"708","fix":"709"},{"messageId":"710","fix":"711","desc":"712"},{"messageId":"713","fix":"714","desc":"715"},{"desc":"716","fix":"717"},{"desc":"706","fix":"718"},{"desc":"719","fix":"720"},{"desc":"706","fix":"721"},{"desc":"722","fix":"723"},{"desc":"724","fix":"725"},"Update the dependencies array to be: [branchId]",{"range":"726","text":"727"},{"range":"728","text":"727"},{"range":"729","text":"727"},{"range":"730","text":"727"},{"range":"731","text":"727"},"Update the dependencies array to be: [check, id]",{"range":"732","text":"733"},{"range":"734","text":"733"},{"range":"735","text":"733"},"Update the dependencies array to be: [loading, templateId]",{"range":"736","text":"737"},{"range":"738","text":"733"},{"range":"739","text":"733"},{"range":"740","text":"737"},"Update the dependencies array to be: [branchId, check]",{"range":"741","text":"742"},"Update the dependencies array to be: [branchId, check, productId]",{"range":"743","text":"744"},"removeEscape",{"range":"745","text":"746"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"747","text":"748"},"Replace the `\\` with `\\\\` to include the actual backslash character.","Update the dependencies array to be: [id]",{"range":"749","text":"750"},{"range":"751","text":"742"},"Update the dependencies array to be: [attributes.length, id]",{"range":"752","text":"753"},{"range":"754","text":"742"},"Update the dependencies array to be: [setVarantGrid, values]",{"range":"755","text":"756"},"Update the dependencies array to be: [cateId]",{"range":"757","text":"758"},[2543,2545],"[branchId]",[2907,2909],[2270,2272],[2505,2507],[2446,2448],[1473,1480],"[check, id]",[4506,4513],[4062,4069],[2781,2790],"[loading, templateId]",[5391,5398],[5431,5438],[2289,2298],[4515,4522],"[branchId, check]",[6539,6546],"[branchId, check, productId]",[1172,1173],"",[1172,1172],"\\",[3191,3193],"[id]",[3930,3937],[3291,3293],"[attributes.length, id]",[2363,2370],[738,746],"[setVarantGrid, values]",[1371,1373],"[cateId]"]