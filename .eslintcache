[{"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\index.js":"1","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\App.js":"2","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\Consts.js":"3","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\PublicRoute.js":"4","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\pages\\Login.js":"5","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\pages\\Registration.js":"6","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Default\\ShowProducts.js":"7","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\ProductDetails.js":"8","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Default\\Main.js":"9","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\Main.js":"10","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Thrid\\Main.js":"11","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\OrderDetails.js":"12","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\First\\Main.js":"13","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Second\\Main.js":"14","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\index.js":"15","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\Footer.js":"16","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\Header.js":"17","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Products\\Extra.js":"18","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Products\\Ingredients.js":"19","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\utils\\index.js":"20","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\pages\\Error404.js":"21","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Attributes\\Attributes.js":"22","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Variants\\Gallary.js":"23","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Orders\\Basket.js":"24","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Orders\\Order.js":"25","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Branches\\Show.js":"26","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Branches\\Branches.js":"27","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Branches\\Tables.js":"28","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Inventories\\Inventory.js":"29","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Companies\\Company.js":"30","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Services\\ServiceArea.js":"31","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\layouts\\Footer.js":"32","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Dashboard\\Home\\Home.js":"33","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Dashboard\\Profile\\Profile.js":"34","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\PrivateRoute.js":"35","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Second\\Header.js":"36","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Second\\Footer.js":"37","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\Customization.js":"38","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Products\\Show.js":"39","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\layouts\\PageTitle.js":"40","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Show.js":"41","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Categories\\SubCategory.js":"42","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Categories\\Category.js":"43","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\layouts\\nav\\index.js":"44","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Default\\Customization.js":"45","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Products\\AddProduct.js":"46","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Products\\EditProduct.js":"47","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\layouts\\nav\\NavHader.js":"48","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\layouts\\nav\\Header.js":"49","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\layouts\\nav\\SideBar.js":"50","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\EditTheme.js":"51","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Theme.js":"52","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Design.js":"53","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Variants\\Variants.js":"54","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Products\\Product.js":"55","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Variants\\Grid.js":"56","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Second\\ProductDetails.js":"57","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Thrid\\ProductsList.js":"58","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Thrid\\ProductDetails.js":"59","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\First\\Header.js":"60","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\First\\Footer.js":"61","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\First\\ProductDetails.js":"62","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Default\\Counter.js":"63","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\Cart.js":"64","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\Counter.js":"65","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\pages\\ForgotPassword.js":"66","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Areas\\Area.js":"67","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\FilterSelection.js":"68","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Categories\\Shared.js":"69","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\CustomAlert.js":"70","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Variants\\NewGrid.js":"71"},{"size":1407,"mtime":1640787809097,"results":"72","hashOfConfig":"73"},{"size":5351,"mtime":1641833743737,"results":"74","hashOfConfig":"73"},{"size":67,"mtime":1638620992553,"results":"75","hashOfConfig":"73"},{"size":458,"mtime":1640826790413,"results":"76","hashOfConfig":"73"},{"size":7415,"mtime":1641989641682,"results":"77","hashOfConfig":"73"},{"size":8331,"mtime":1641989729895,"results":"78","hashOfConfig":"73"},{"size":14591,"mtime":1639765815460,"results":"79","hashOfConfig":"73"},{"size":26031,"mtime":1642267346797,"results":"80","hashOfConfig":"73"},{"size":9220,"mtime":1639810861346,"results":"81","hashOfConfig":"73"},{"size":13840,"mtime":1642094068098,"results":"82","hashOfConfig":"73"},{"size":11228,"mtime":1639835468094,"results":"83","hashOfConfig":"73"},{"size":17144,"mtime":1642082863661,"results":"84","hashOfConfig":"73"},{"size":9775,"mtime":1639825996236,"results":"85","hashOfConfig":"73"},{"size":11783,"mtime":1639810340751,"results":"86","hashOfConfig":"73"},{"size":2916,"mtime":1640866563777,"results":"87","hashOfConfig":"73"},{"size":3111,"mtime":1642260870940,"results":"88","hashOfConfig":"73"},{"size":4442,"mtime":1640727395345,"results":"89","hashOfConfig":"73"},{"size":9129,"mtime":1639201151455,"results":"90","hashOfConfig":"73"},{"size":12501,"mtime":1641925573084,"results":"91","hashOfConfig":"73"},{"size":214,"mtime":1641506094776,"results":"92","hashOfConfig":"73"},{"size":891,"mtime":1638903859046,"results":"93","hashOfConfig":"73"},{"size":9961,"mtime":1641921549350,"results":"94","hashOfConfig":"73"},{"size":7877,"mtime":1638620673201,"results":"95","hashOfConfig":"73"},{"size":7016,"mtime":1638620673187,"results":"96","hashOfConfig":"73"},{"size":4048,"mtime":1638620673187,"results":"97","hashOfConfig":"73"},{"size":8779,"mtime":1642094006832,"results":"98","hashOfConfig":"73"},{"size":19996,"mtime":1641921585458,"results":"99","hashOfConfig":"73"},{"size":16703,"mtime":1641921571485,"results":"100","hashOfConfig":"73"},{"size":10702,"mtime":1638956909054,"results":"101","hashOfConfig":"73"},{"size":10524,"mtime":1641923456734,"results":"102","hashOfConfig":"73"},{"size":17821,"mtime":1641923718584,"results":"103","hashOfConfig":"73"},{"size":489,"mtime":1638620673203,"results":"104","hashOfConfig":"73"},{"size":2243,"mtime":1640375675353,"results":"105","hashOfConfig":"73"},{"size":23716,"mtime":1638620673183,"results":"106","hashOfConfig":"73"},{"size":501,"mtime":1640789296441,"results":"107","hashOfConfig":"73"},{"size":1002,"mtime":1639810339555,"results":"108","hashOfConfig":"73"},{"size":543,"mtime":1639810327307,"results":"109","hashOfConfig":"73"},{"size":31843,"mtime":1640831370152,"results":"110","hashOfConfig":"73"},{"size":1040,"mtime":1640889931270,"results":"111","hashOfConfig":"73"},{"size":823,"mtime":1638620673204,"results":"112","hashOfConfig":"73"},{"size":1383,"mtime":1640889887789,"results":"113","hashOfConfig":"73"},{"size":17679,"mtime":1641923229694,"results":"114","hashOfConfig":"73"},{"size":24958,"mtime":1641922688373,"results":"115","hashOfConfig":"73"},{"size":688,"mtime":1638620673212,"results":"116","hashOfConfig":"73"},{"size":20606,"mtime":1639650122222,"results":"117","hashOfConfig":"73"},{"size":23557,"mtime":1642091800405,"results":"118","hashOfConfig":"73"},{"size":25131,"mtime":1641926442975,"results":"119","hashOfConfig":"73"},{"size":953,"mtime":1638620673212,"results":"120","hashOfConfig":"73"},{"size":8195,"mtime":1641833791621,"results":"121","hashOfConfig":"73"},{"size":5742,"mtime":1640866376721,"results":"122","hashOfConfig":"73"},{"size":15630,"mtime":1640831707143,"results":"123","hashOfConfig":"73"},{"size":21869,"mtime":1640831691317,"results":"124","hashOfConfig":"73"},{"size":29275,"mtime":1641926714821,"results":"125","hashOfConfig":"73"},{"size":15522,"mtime":1642355700045,"results":"126","hashOfConfig":"73"},{"size":12383,"mtime":1641244703628,"results":"127","hashOfConfig":"73"},{"size":7088,"mtime":1642205220669,"results":"128","hashOfConfig":"73"},{"size":19267,"mtime":1639819248353,"results":"129","hashOfConfig":"73"},{"size":6876,"mtime":1639820923985,"results":"130","hashOfConfig":"73"},{"size":18989,"mtime":1639819298495,"results":"131","hashOfConfig":"73"},{"size":3140,"mtime":1639833673832,"results":"132","hashOfConfig":"73"},{"size":632,"mtime":1639825744304,"results":"133","hashOfConfig":"73"},{"size":19291,"mtime":1639825838774,"results":"134","hashOfConfig":"73"},{"size":7926,"mtime":1640084115716,"results":"135","hashOfConfig":"73"},{"size":16399,"mtime":1641211678443,"results":"136","hashOfConfig":"73"},{"size":10014,"mtime":1641068482654,"results":"137","hashOfConfig":"73"},{"size":1842,"mtime":1640827588455,"results":"138","hashOfConfig":"73"},{"size":13356,"mtime":1641922372028,"results":"139","hashOfConfig":"73"},{"size":3992,"mtime":1642084941448,"results":"140","hashOfConfig":"73"},{"size":2337,"mtime":1641922955500,"results":"141","hashOfConfig":"73"},{"size":1622,"mtime":1641921955835,"results":"142","hashOfConfig":"73"},{"size":9061,"mtime":1642357399666,"results":"143","hashOfConfig":"73"},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},"i7z6n9",{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"146"},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"146"},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"146"},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"146"},{"filePath":"169","messages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"146"},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"146"},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"146"},{"filePath":"178","messages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"146"},{"filePath":"181","messages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"183","messages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"146"},{"filePath":"186","messages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"190","messages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"146"},{"filePath":"193","messages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"195","messages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"197","messages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"199","messages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"201","messages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"203","messages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"205","messages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"146"},{"filePath":"208","messages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"146"},{"filePath":"211","messages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"146"},{"filePath":"214","messages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"146"},{"filePath":"217","messages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"146"},{"filePath":"220","messages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"146"},{"filePath":"223","messages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"225","messages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"227","messages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"229","messages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"231","messages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"233","messages":"234","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"235","messages":"236","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"146"},{"filePath":"238","messages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"146"},{"filePath":"241","messages":"242","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"243","messages":"244","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"146"},{"filePath":"246","messages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"146"},{"filePath":"249","messages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"146"},{"filePath":"252","messages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"254","messages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"146"},{"filePath":"257","messages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"146"},{"filePath":"260","messages":"261","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"146"},{"filePath":"263","messages":"264","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"265","messages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267","usedDeprecatedRules":"146"},{"filePath":"268","messages":"269","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"146"},{"filePath":"271","messages":"272","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273","usedDeprecatedRules":"146"},{"filePath":"274","messages":"275","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276","usedDeprecatedRules":"146"},{"filePath":"277","messages":"278","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279","usedDeprecatedRules":"146"},{"filePath":"280","messages":"281","errorCount":0,"fatalErrorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"282","messages":"283","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284","usedDeprecatedRules":"146"},{"filePath":"285","messages":"286","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"287","usedDeprecatedRules":"146"},{"filePath":"288","messages":"289","errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"290","usedDeprecatedRules":"146"},{"filePath":"291","messages":"292","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"293","usedDeprecatedRules":"146"},{"filePath":"294","messages":"295","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"296","usedDeprecatedRules":"146"},{"filePath":"297","messages":"298","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"299","usedDeprecatedRules":"146"},{"filePath":"300","messages":"301","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"302","messages":"303","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"304","usedDeprecatedRules":"146"},{"filePath":"305","messages":"306","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"307","messages":"308","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"309","usedDeprecatedRules":"146"},{"filePath":"310","messages":"311","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"146"},{"filePath":"313","messages":"314","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"315","messages":"316","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"317","usedDeprecatedRules":"146"},{"filePath":"318","messages":"319","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"320","usedDeprecatedRules":"146"},{"filePath":"321","messages":"322","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"323","usedDeprecatedRules":"146"},{"filePath":"324","messages":"325","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"326","usedDeprecatedRules":"146"},{"filePath":"327","messages":"328","errorCount":0,"fatalErrorCount":0,"warningCount":36,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\index.js",[],["329","330"],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\App.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\Consts.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\PublicRoute.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\pages\\Login.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\pages\\Registration.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Default\\ShowProducts.js",["331","332","333","334","335","336","337","338","339","340","341","342"],"import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { base_url, port } from \"../../../../../Consts\";\r\n\r\nimport { Zoom } from \"react-slideshow-image\";\r\nimport \"react-slideshow-image/dist/styles.css\";\r\nimport Accordion from \"@mui/material/Accordion\";\r\nimport AccordionSummary from \"@mui/material/AccordionSummary\";\r\nimport AccordionDetails from \"@mui/material/AccordionDetails\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport \"../style.css\";\r\nconst ShowProducts = (props) => {\r\n  // for localization\r\n  const { t } = useTranslation();\r\n\r\n  const id = atob(props.match.params.id);\r\n  const themes = props.history.location.state.themes;\r\n  let varData = [];\r\n  //for retriving data using laravel API\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [variantData, setVariantData] = useState([]);\r\n  const [showVaralint, setShowVarlist] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [skuarray, setSkuArray] = useState([]);\r\n  const [productDetails, setProductDetails] = useState({\r\n    price: 0,\r\n    stock: 0,\r\n    image: fetchData?.image,\r\n  });\r\n  useEffect(() => {\r\n    const getdata = async () => {\r\n      const product = await axios({\r\n        method: \"GET\",\r\n        url: `/api/GetProduct/${id}`,\r\n      });\r\n      const data = product.data.fetchData;\r\n\r\n      const res = await axios({\r\n        method: \"GET\",\r\n        url: `/api/Getvariations/${id}`,\r\n      });\r\n      setFetchData(data[0]);\r\n      if (res.data.fetchData !== \"\") {\r\n        varData = JSON.parse(res.data.fetchData);\r\n        parseVariants(varData);\r\n      }\r\n\r\n      setLoading(false);\r\n    };\r\n    getdata(); // axios\r\n  }, [id]);\r\n  const changePrice = (varName, variant) => {\r\n    const keys = Object.keys(showVaralint);\r\n    const varlineindex = keys.indexOf(varName);\r\n    const newSkuArray = skuarray;\r\n    newSkuArray[varlineindex] = variant;\r\n    setSkuArray(newSkuArray);\r\n    if (keys.length == newSkuArray.length) {\r\n      caluclatePrice(newSkuArray, variantData);\r\n    }\r\n  };\r\n  const caluclatePrice = (newSkuArray, variantData) => {\r\n    let sku = id + \"-\";\r\n    for (let i = 0; i < newSkuArray.length; i++) {\r\n      if (i == newSkuArray.length - 1) {\r\n        sku += newSkuArray[i];\r\n      } else {\r\n        sku += newSkuArray[i] + \"-\";\r\n      }\r\n    }\r\n\r\n    const priceList = variantData.filter((item) => {\r\n      return item.sku.replace(/\\s+/g, \"\") == sku.replace(/\\s+/g, \"\");\r\n    });\r\n    console.log(newSkuArray);\r\n    let productdetails = { price: 0, stock: 0 };\r\n    if (priceList.length !== 0) {\r\n      const line = priceList.pop();\r\n      const newProductDetails = {\r\n        price: line.price,\r\n        stock: line.stock,\r\n        image: line.image,\r\n      };\r\n      productdetails = newProductDetails;\r\n    } else {\r\n      const newProductDetails = {\r\n        price: 0,\r\n        stock: \"No Stock\",\r\n        image: fetchData.image,\r\n      };\r\n      productdetails = newProductDetails;\r\n    }\r\n    setProductDetails({ ...productdetails });\r\n  };\r\n  const parseVariants = (variantData) => {\r\n    const variants = [];\r\n    const savePostion = [\"postion\", \"sku\", \"price\", \"stock\", \"image\"];\r\n    const varLine = variantData[0];\r\n    const varlinekey = Object.keys(varLine);\r\n    for (let i = 0; i < varlinekey.length; i++) {\r\n      if (savePostion.indexOf(varlinekey[i]) == -1) {\r\n        let listvar = variantData.map((item) => {\r\n          return item[varlinekey[i]];\r\n        });\r\n        // get unique variants\r\n        listvar = listvar.filter(\r\n          (thing, index, self) =>\r\n            index ===\r\n            self.findIndex((t) => t.place === listvar.place && t === thing)\r\n        );\r\n        if (listvar[0] != 0) variants[varlinekey[i]] = listvar;\r\n      }\r\n    }\r\n    let def = [];\r\n    Object.keys(variants).map((item) => {\r\n      def.push(variants[item][0]);\r\n    });\r\n    setSkuArray(def);\r\n    caluclatePrice(def, variantData);\r\n    setShowVarlist(variants);\r\n    setVariantData(variantData);\r\n  };\r\n  const [ingredients, setIntgredients] = useState([]);\r\n  const changeIngredients = (label) => {\r\n    if (!ingredients.includes(label) === false) {\r\n      setIntgredients(ingredients.filter((item) => item !== label));\r\n    } else {\r\n      setIntgredients([...ingredients, label]);\r\n    }\r\n  };\r\n  let [sum, setSum] = useState(0);\r\n\r\n  const extraHandlers = (e, price) => {\r\n    if (e.target.checked) {\r\n      // console.log((sum += parseInt(price)));\r\n      setSum((sum += parseInt(price)));\r\n    } else {\r\n      setSum((sum -= parseInt(price)));\r\n    }\r\n  };\r\n\r\n  const zoomOutProperties = {\r\n    duration: 100,\r\n    transitionDuration: 5,\r\n    canSwipe: true,\r\n    indicators: true,\r\n    scale: false,\r\n    autoplay: false,\r\n    indicators: (i) => (\r\n      <div className=\"indicator\">\r\n        <img\r\n          src={\r\n            productDetails?.stock === \"No Stock\" || productDetails?.stock === 0\r\n              ? `http://${base_url}:${port}/images/products/${fetchData?.image}`\r\n              : `http://${base_url}:${port}/images/variants_pics/${productDetails.image[i]}`\r\n          }\r\n          width=\"40px\"\r\n          // className=\"p-1\"\r\n          // style={{ width: \"40px\" }}\r\n        />\r\n      </div>\r\n    ),\r\n  };\r\n\r\n  var viewImages_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"container \">\r\n        <div\r\n          className=\"spinner-border text-primary \"\r\n          role=\"status\"\r\n          style={{ position: \"fixed\", top: \"50%\", left: \"50%\" }}\r\n        >\r\n          <span className=\"sr-only\">{t(\"loading\")}</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewImages_HTMLTABLE = (\r\n      <div className=\"row p-2\">\r\n        <div className=\"col-xl-5 col-lg-5 col-md-12 col-sm-12\">\r\n          <div className=\"row col-md-12 text-center \">\r\n            <Zoom {...zoomOutProperties}>\r\n              {(() => {\r\n                if (Array.isArray(productDetails.image)) {\r\n                  return productDetails.image?.map((image) => {\r\n                    return (\r\n                      <div key={image} style={{ width: \"100%\" }}>\r\n                        <img\r\n                          src={`http://${base_url}:${port}/images/variants_pics/${image}`}\r\n                          style={{\r\n                            height: \"500px\",\r\n                            width: \"100%\",\r\n                            objectFit: \"contain\",\r\n                          }}\r\n                          // className=\"img-thumbnail\"\r\n                          alt=\"\"\r\n                        />\r\n                      </div>\r\n                    );\r\n                  });\r\n                } else {\r\n                  return (\r\n                    <div style={{ width: \"100%\" }}>\r\n                      <img\r\n                        src={\r\n                          productDetails.stock === \"No Stock\" ||\r\n                          productDetails?.stock === 0\r\n                            ? `http://${base_url}:${port}/images/products/${\r\n                                productDetails.image\r\n                                  ? productDetails?.image\r\n                                  : fetchData?.image\r\n                              }`\r\n                            : `http://${base_url}:${port}/images/variants_pics/${productDetails.image}`\r\n                        }\r\n                        style={{\r\n                          height: \"500px\",\r\n                          width: \"100%\",\r\n                          objectFit: \"contain\",\r\n                        }}\r\n                        alt=\"\"\r\n                      />\r\n                    </div>\r\n                  );\r\n                }\r\n              })()}\r\n            </Zoom>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"col-xl-7 col-lg-7 col-sm-12\">\r\n          <div className=\"card border\">\r\n            <div className=\"row mx-3 mt-3\">\r\n              <h4>\r\n                {t(\"product_name\")}: {fetchData?.ProductName}\r\n              </h4>\r\n              <p>\r\n                {t(\"description\")}: {fetchData?.Description}\r\n              </p>\r\n              <p>\r\n                {t(\"unit\")}: {fetchData?.UnitName}\r\n              </p>\r\n              {themes?.preparation_time != 0 ? (\r\n                <p>\r\n                  {t(\"preparation_Time\")}: {fetchData?.preparationTime} Minutes\r\n                </p>\r\n              ) : (\r\n                \" \"\r\n              )}\r\n              <p>\r\n                {t(\"price\")} :{\" \"}\r\n                {productDetails.price === 0\r\n                  ? fetchData?.price + sum\r\n                  : parseInt(productDetails.price) + sum}\r\n              </p>\r\n              <p>\r\n                {t(\"stock\")}:{\" \"}\r\n                {productDetails.stock === 0\r\n                  ? fetchData?.stock\r\n                  : productDetails.stock}\r\n              </p>\r\n            </div>\r\n            <div className=\"row mx-3\">\r\n              <h4> {t(\"ingredients\")}</h4>\r\n              <small>Please select the ingredients you want to remove.</small>\r\n            </div>\r\n            <div className=\"row mx-4\">\r\n              {JSON.parse(fetchData.ingredients)?.map((item, i) => {\r\n                return (\r\n                  <div\r\n                    className=\"col-md-auto col-sm-auto col-xl-auto col-lg-auto col-auto\"\r\n                    onClick={() => {\r\n                      changeIngredients(item.label);\r\n                    }}\r\n                    style={\r\n                      ingredients.includes(item.label)\r\n                        ? {\r\n                            cursor: \"pointer\",\r\n\r\n                            padding: \"3px\",\r\n                            margin: \"2px\",\r\n                            border: \"1px solid\",\r\n                            textAlign: \"center\",\r\n                            borderColor: \"red\",\r\n                            textDecoration: \"line-through\",\r\n                            color: \"red\",\r\n                          }\r\n                        : {\r\n                            cursor: \"pointer\",\r\n                            padding: \"3px\",\r\n                            margin: \"2px\",\r\n                            border: \"1px solid\",\r\n                            textAlign: \"center\",\r\n                            // borderRadius: \"10px\",\r\n                            borderColor: \"black\",\r\n                          }\r\n                    }\r\n                  >\r\n                    {item.label}\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n            <div className=\"row m-3\">\r\n              <Accordion>\r\n                <AccordionSummary\r\n                  expandIcon={<ExpandMoreIcon />}\r\n                  aria-controls=\"panel1a-content\"\r\n                  id=\"panel1a-header\"\r\n                >\r\n                  <Typography>{t(\"extras\")}</Typography>\r\n                </AccordionSummary>\r\n                <AccordionDetails>\r\n                  <Typography>\r\n                    <FormGroup>\r\n                      {JSON.parse(fetchData.extras)?.map((item, i) => {\r\n                        return (\r\n                          <FormControlLabel\r\n                            key={i}\r\n                            control={\r\n                              <Checkbox\r\n                                onChange={(e) => {\r\n                                  extraHandlers(e, item.price);\r\n                                }}\r\n                                color=\"secondary\"\r\n                              />\r\n                            }\r\n                            label={\r\n                              item.label + \" ( +\" + item.price + \".00\" + \" )\"\r\n                            }\r\n                          />\r\n                        );\r\n                      })}\r\n                    </FormGroup>\r\n                  </Typography>\r\n                </AccordionDetails>\r\n              </Accordion>\r\n            </div>\r\n\r\n            <div className=\"row m-3\">\r\n              <h4> {t(\"vatiants\")}</h4>\r\n            </div>\r\n\r\n            <div className=\"row mx-2\">\r\n              {Object.keys(showVaralint).map((list, i) => {\r\n                return (\r\n                  <div className=\"row \" key={i}>\r\n                    <div className=\"col-md-auto col-sm-auto col-xl-auto col-lg-auto col-auto\">\r\n                      {list}\r\n                      <div className=\"row\">\r\n                        {showVaralint[list].map((variant) => {\r\n                          return (\r\n                            <div className=\"col-md-auto col-sm-auto col-xl-auto col-lg-auto col-auto\">\r\n                              <div\r\n                                onClick={() => {\r\n                                  changePrice(list, variant);\r\n                                }}\r\n                                style={\r\n                                  skuarray[i] == variant\r\n                                    ? {\r\n                                        cursor: \"pointer\",\r\n                                        margin: \"2px\",\r\n                                        padding: \"5px\",\r\n                                        border: \"1px solid\",\r\n                                        textAlign: \"center\",\r\n                                        borderRadius: \"10px\",\r\n                                        borderColor: \"red\",\r\n                                      }\r\n                                    : {\r\n                                        cursor: \"pointer\",\r\n                                        margin: \"2px\",\r\n\r\n                                        padding: \"5px\",\r\n                                        border: \"1px solid\",\r\n                                        textAlign: \"center\",\r\n                                        borderRadius: \"10px\",\r\n                                        borderColor: \"black\",\r\n                                      }\r\n                                }\r\n                              >\r\n                                {variant}\r\n                              </div>\r\n                            </div>\r\n                          );\r\n                        })}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  return <> {viewImages_HTMLTABLE}</>;\r\n};\r\n\r\nexport default ShowProducts;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\ProductDetails.js",["343","344","345","346","347","348","349","350","351","352","353","354","355","356","357","358","359","360","361"],"import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// Import css files\r\nimport Footer from \"./Footer\";\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport Container from \"@mui/material/Container\";\r\nimport Header from \"./Header\";\r\nimport { base_url, port } from \"../../../../../Consts\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Card from \"@mui/material/Card\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\nimport \"react-slideshow-image/dist/styles.css\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport FavoriteIcon from \"@mui/icons-material/Favorite\";\r\nimport getSymbolFromCurrency from \"currency-symbol-map\";\r\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\"; // requires a loader\r\nimport { Swiper, SwiperSlide } from \"swiper/react\";\r\n\r\nimport \"swiper/swiper-bundle.min.css\";\r\nimport \"swiper/swiper.min.css\";\r\nimport SwiperCore, { Navigation, Thumbs } from \"swiper\";\r\n\r\n// install Swiper modules\r\nSwiperCore.use([Navigation, Thumbs]);\r\n\r\nconst ProductDetails = (props) => {\r\n  // for localization\r\n  const { t } = useTranslation();\r\n  const id = atob(props.match.params.id);\r\n  //for retriving data using laravel API\r\n  const custom = props.history.location.state.custom;\r\n  const deliveryFees = props.history.location.state.deliveryFees;\r\n  // design start\r\n  const theme = createTheme({\r\n    palette: {\r\n      background: {\r\n        default: custom?.bgColor ? custom.bgColor : \"#22252a\",\r\n      },\r\n    },\r\n    typography: {\r\n      fontFamily: custom?.font ? custom.font : \"sans-serif\",\r\n      // discription\r\n      subtitle1: {\r\n        fontSize: custom?.pDiscriptionSize\r\n          ? custom.pDiscriptionSize + \"rem\"\r\n          : \"0.75rem\",\r\n\r\n        color: custom?.product_discription_color\r\n          ? custom.product_discription_color\r\n          : \"#fff\",\r\n      },\r\n      // price\r\n      body1: {\r\n        fontSize: custom?.priceSize ? custom.priceSize + \"rem\" : \"1.25rem\",\r\n        color: custom?.price_color ? custom.price_color : \"#fff\",\r\n      },\r\n      // product Names\r\n      button: {\r\n        fontSize: custom?.pNameSize ? custom.pNameSize + \"rem\" : \"1rem\",\r\n        color: custom?.product_name_color ? custom.product_name_color : \"#fff\",\r\n      },\r\n      // Menus\r\n      h6: {\r\n        fontSize: custom?.menusSize ? custom.menusSize + \"rem\" : \"1rem\",\r\n        color: custom?.menusAcriveColor ? custom.menusAcriveColor : \"#f27d1e\",\r\n      },\r\n    },\r\n  });\r\n  // design end\r\n  const [swiper, setSwiper] = useState(null);\r\n\r\n  let varData = [];\r\n  //for retriving data using laravel API\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [variantData, setVariantData] = useState([]);\r\n  const [showVaralint, setShowVarlist] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [skuarray, setSkuArray] = useState([]);\r\n  const [varPics, setVarPics] = useState([]);\r\n  // console.log(variantData);\r\n  const [productDetails, setProductDetails] = useState({\r\n    price: 0,\r\n    stock: 0,\r\n    image: fetchData?.image,\r\n  });\r\n  useEffect(() => {\r\n    const getdata = async () => {\r\n      const product = await axios({\r\n        method: \"GET\",\r\n        url: `/api/GetProduct/${id}`,\r\n      });\r\n      const data = product.data.fetchData;\r\n\r\n      const res = await axios({\r\n        method: \"GET\",\r\n        url: `/api/Getvariations/${id}`,\r\n      });\r\n      setFetchData(data[0]);\r\n      if (res.data.fetchData !== \"\") {\r\n        varData = JSON.parse(res.data.fetchData.variants);\r\n        setVarPics(JSON.parse(res.data.fetchData.variants));\r\n\r\n        parseVariants(varData);\r\n      }\r\n      // console.log(variantData);\r\n      setLoading(false);\r\n    };\r\n    getdata(); // axios\r\n  }, [id]);\r\n  const changePrice = (varName, variant) => {\r\n    const keys = Object.keys(showVaralint);\r\n    const varlineindex = keys.indexOf(varName);\r\n    const newSkuArray = skuarray;\r\n    newSkuArray[varlineindex] = variant;\r\n\r\n    setSkuArray(newSkuArray);\r\n    if (keys.length == newSkuArray.length) {\r\n      caluclatePrice(newSkuArray, variantData);\r\n    }\r\n  };\r\n  const caluclatePrice = (newSkuArray, variantData) => {\r\n    let sku = id + \"-\";\r\n\r\n    for (let i = 0; i < newSkuArray.length; i++) {\r\n      if (i == newSkuArray.length - 1) {\r\n        sku += newSkuArray[i];\r\n      } else {\r\n        sku += newSkuArray[i] + \"-\";\r\n      }\r\n    }\r\n\r\n    const priceList = variantData.filter((item) => {\r\n      return item.sku.replace(/\\s+/g, \"\") == sku.replace(/\\s+/g, \"\");\r\n    });\r\n\r\n    let productdetails = { price: 0, stock: 0 };\r\n    if (priceList.length !== 0) {\r\n      const line = priceList.pop();\r\n      const newProductDetails = {\r\n        price: line.price,\r\n        stock: line.stock,\r\n        image: line.image,\r\n      };\r\n\r\n      productdetails = newProductDetails;\r\n    } else {\r\n      const newProductDetails = {\r\n        price: 0,\r\n        stock: \"No Stock\",\r\n        image: fetchData.image,\r\n      };\r\n\r\n      productdetails = newProductDetails;\r\n    }\r\n\r\n    setProductDetails({ ...productdetails });\r\n    if (swiper) {\r\n      let counter = 0;\r\n      varPics.map((section) => {\r\n        section.image.map((image, i) => {\r\n          if (Array.isArray(productDetails.image)) {\r\n            if (image === productDetails.image[0]) {\r\n              swiper.slideTo(counter);\r\n            }\r\n          } else {\r\n            swiper.slideTo(0);\r\n          }\r\n\r\n          counter++;\r\n        });\r\n      });\r\n    }\r\n  };\r\n  const parseVariants = (variantData) => {\r\n    const variants = [];\r\n    const savePostion = [\"postion\", \"sku\", \"price\", \"stock\", \"image\"];\r\n    const varLine = variantData[0];\r\n    const varlinekey = Object.keys(varLine);\r\n    for (let i = 0; i < varlinekey.length; i++) {\r\n      if (savePostion.indexOf(varlinekey[i]) == -1) {\r\n        let listvar = variantData.map((item) => {\r\n          return item[varlinekey[i]];\r\n        });\r\n        // get unique variants\r\n        listvar = listvar.filter(\r\n          (thing, index, self) =>\r\n            index ===\r\n            self.findIndex((t) => t.place === listvar.place && t === thing)\r\n        );\r\n        if (listvar[0] != 0) variants[varlinekey[i]] = listvar;\r\n      }\r\n    }\r\n    let def = [];\r\n    Object.keys(variants).map((item) => {\r\n      def.push(variants[item][0]);\r\n    });\r\n    setSkuArray(def);\r\n    caluclatePrice(def, variantData);\r\n    setShowVarlist(variants);\r\n    setVariantData(variantData);\r\n  };\r\n  const [ingredients, setIntgredients] = useState([]);\r\n  const changeIngredients = (label) => {\r\n    if (!ingredients.includes(label) === false) {\r\n      setIntgredients(ingredients.filter((item) => item !== label));\r\n    } else {\r\n      setIntgredients([...ingredients, label]);\r\n    }\r\n    // console.log(ingredients);\r\n  };\r\n  let [sum, setSum] = useState(0);\r\n  const [extraValue, setExtraValue] = useState([]);\r\n\r\n  const extraHandlers = (e, price) => {\r\n    if (e.target.checked) {\r\n      // console.log((sum += parseInt(price)));\r\n      setSum((sum += parseInt(price)));\r\n      setExtraValue([\r\n        ...extraValue,\r\n        {\r\n          value: e.target.value,\r\n        },\r\n      ]);\r\n    } else {\r\n      setSum((sum -= parseInt(price)));\r\n      setExtraValue(extraValue.filter((item) => item.value != e.target.value));\r\n    }\r\n    console.log(extraValue);\r\n  };\r\n  const [cart, setCart] = useState(\r\n    JSON.parse(localStorage.getItem(\"cart\")) || []\r\n  );\r\n  const [thumbsSwiper, setThumbsSwiper] = useState(null);\r\n\r\n  var viewImages_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"container \">\r\n        <div\r\n          className=\"spinner-border text-primary \"\r\n          role=\"status\"\r\n          style={{ position: \"fixed\", top: \"50%\", left: \"50%\" }}\r\n        >\r\n          <span className=\"sr-only\">{t(\"loading\")}</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewImages_HTMLTABLE = (\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12} sm={5} md={5} lg={5}>\r\n          {(() => {\r\n            if (varPics.length != 0) {\r\n              return (\r\n                <>\r\n                  <Swiper\r\n                    style={{\r\n                      \"--swiper-navigation-color\": \"#fff\",\r\n                      \"--swiper-pagination-color\": \"#fff\",\r\n                    }}\r\n                    spaceBetween={10}\r\n                    speed={2500}\r\n                    navigation={true}\r\n                    thumbs={{ swiper: thumbsSwiper }}\r\n                    onSwiper={(s) => {\r\n                      setSwiper(s);\r\n                    }}\r\n                    className=\"mySwiper2\"\r\n                  >\r\n                    {varPics?.map((section) => {\r\n                      return section.image?.map((image, i) => {\r\n                        return (\r\n                          <>\r\n                            <SwiperSlide key={image}>\r\n                              <img\r\n                                src={`http://${base_url}:${port}/images/variants_pics/${image}`}\r\n                                alt=\"\"\r\n                                style={{\r\n                                  height: \"400px\",\r\n                                  width: \"100%\",\r\n                                  borderRadius: \"5%\",\r\n                                  objectFit: \"contain\",\r\n                                }}\r\n                              />\r\n                            </SwiperSlide>\r\n                          </>\r\n                        );\r\n                      });\r\n                    })}\r\n                  </Swiper>\r\n                  <br></br>\r\n                  <Swiper\r\n                    onSwiper={setThumbsSwiper}\r\n                    spaceBetween={10}\r\n                    slidesPerView={5}\r\n                    freeMode={true}\r\n                    watchSlidesProgress={true}\r\n                    className=\"mySwiper\"\r\n                  >\r\n                    {varPics?.map((section) => {\r\n                      return section.image?.map((image) => {\r\n                        return (\r\n                          <SwiperSlide\r\n                            // onSwiper={productDetails.image[0]}\r\n                            key={image}\r\n                          >\r\n                            <img\r\n                              src={`http://${base_url}:${port}/images/variants_pics/${image}`}\r\n                              alt=\"\"\r\n                              style={{\r\n                                height: \"70px\",\r\n                                width: \"100%\",\r\n                                borderRadius: \"5%\",\r\n                                // objectFit: \"contain\",\r\n                              }}\r\n                            />\r\n                          </SwiperSlide>\r\n                        );\r\n                      });\r\n                    })}\r\n                  </Swiper>\r\n                </>\r\n              );\r\n            } else {\r\n              return (\r\n                <>\r\n                  <Swiper\r\n                    spaceBetween={10}\r\n                    speed={2500}\r\n                    navigation={true}\r\n                    thumbs={{ swiper: thumbsSwiper }}\r\n                    onSwiper={(s) => {\r\n                      setSwiper(s);\r\n                    }}\r\n                    className=\"mySwiper2\"\r\n                  >\r\n                    {JSON.parse(fetchData.image).map((image) => {\r\n                      return (\r\n                        <SwiperSlide key={image}>\r\n                          <img\r\n                            src={\r\n                              productDetails.stock === \"No Stock\" ||\r\n                              productDetails?.stock === 0\r\n                                ? `http://${base_url}:${port}/images/products/${\r\n                                    productDetails.image\r\n                                      ? productDetails?.image\r\n                                      : image\r\n                                  }`\r\n                                : `http://${base_url}:${port}/images/variants_pics/${productDetails.image}`\r\n                            }\r\n                            alt=\"\"\r\n                            style={{\r\n                              height: \"400px\",\r\n                              width: \"100%\",\r\n                              borderRadius: \"5%\",\r\n                              objectFit: \"contain\",\r\n                            }}\r\n                          />\r\n                        </SwiperSlide>\r\n                      );\r\n                    })}\r\n                  </Swiper>\r\n                  <br></br>\r\n                  <Swiper\r\n                    onSwiper={setThumbsSwiper}\r\n                    spaceBetween={10}\r\n                    slidesPerView={5}\r\n                    freeMode={true}\r\n                    watchSlidesProgress={true}\r\n                    className=\"mySwiper\"\r\n                  >\r\n                    {JSON.parse(fetchData.image)?.map((image) => {\r\n                      return (\r\n                        <SwiperSlide\r\n                          // onSwiper={productDetails.image[0]}\r\n                          key={image}\r\n                        >\r\n                          <img\r\n                            src={`http://${base_url}:${port}/images/products/${image}`}\r\n                            alt=\"\"\r\n                            style={{\r\n                              height: \"70px\",\r\n                              width: \"100%\",\r\n                              borderRadius: \"5%\",\r\n                              // objectFit: \"contain\",\r\n                            }}\r\n                          />\r\n                        </SwiperSlide>\r\n                      );\r\n                    })}\r\n                  </Swiper>\r\n                </>\r\n              );\r\n            }\r\n          })()}\r\n        </Grid>\r\n\r\n        <Grid item xs={12} sm={7} md={7} lg={7}>\r\n          <Card\r\n            sx={{\r\n              // height: \"100%\",\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              borderRadius: \"5%\",\r\n              backgroundColor: custom?.BgColor ? custom.BgColor : \"#22252a\",\r\n            }}\r\n          >\r\n            <div className=\"row mx-3 mt-3\">\r\n              <Grid container spacing={2}>\r\n                <Grid item xs={10}>\r\n                  <Typography\r\n                    variant=\"button\"\r\n                    style={{ textTransform: \"capitalize\" }}\r\n                    // className=\"font-weight-bold\"\r\n                  >\r\n                    {fetchData.ProductName}\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item xs={2}>\r\n                  <FavoriteIcon sx={{ color: \"#ff751d\" }} />\r\n                </Grid>\r\n              </Grid>\r\n\r\n              <Typography variant=\"subtitle1\" gutterBottom>\r\n                {fetchData?.Description}\r\n              </Typography>\r\n              <Typography variant=\"subtitle1\" gutterBottom>\r\n                {custom?.preparation_time == 0 ||\r\n                fetchData?.preparationTime == null ? (\r\n                  \"\"\r\n                ) : (\r\n                  <>\r\n                    {t(\"preparation_Time\")}: {fetchData?.preparationTime}{\" \"}\r\n                    Minutes\r\n                  </>\r\n                )}\r\n              </Typography>\r\n\r\n              <Typography\r\n                variant=\"body1\"\r\n                gutterBottom\r\n                className=\"font-weight-bold\"\r\n              >\r\n                {t(\"price\")} :{\" \"}\r\n                {productDetails.price === 0\r\n                  ? (fetchData?.price + sum).toFixed(2)\r\n                  : (parseInt(productDetails.price) + sum).toFixed(2)}\r\n                {\"  \" + getSymbolFromCurrency(fetchData.currency_code)}\r\n              </Typography>\r\n              <Typography\r\n                variant=\"body1\"\r\n                gutterBottom\r\n                className=\"font-weight-bold\"\r\n              >\r\n                {t(\"stock\")}:{\" \"}\r\n                {productDetails.stock === 0\r\n                  ? fetchData?.stock\r\n                  : productDetails.stock}\r\n              </Typography>\r\n            </div>\r\n            {custom?.show_ingredients == 0 ||\r\n            JSON.parse(fetchData.ingredients).length === 0 ? (\r\n              \"\"\r\n            ) : (\r\n              <>\r\n                <div className=\"row mx-3\">\r\n                  <Typography variant=\"h6\" gutterBottom>\r\n                    {t(\"ingredients\")}\r\n                  </Typography>\r\n                  <Typography variant=\"subtitle1\" gutterBottom>\r\n                    Please select the ingredients you want to remove.\r\n                  </Typography>\r\n                </div>\r\n                <div className=\"row mx-4\">\r\n                  {JSON.parse(fetchData.ingredients)?.map((item, i) => {\r\n                    return (\r\n                      <div\r\n                        key={i}\r\n                        className=\"col-md-auto col-sm-auto col-xl-auto col-lg-auto col-auto\"\r\n                        onClick={() => {\r\n                          changeIngredients(item.label);\r\n                        }}\r\n                        style={\r\n                          ingredients.includes(item.label)\r\n                            ? {\r\n                                cursor: \"pointer\",\r\n\r\n                                padding: \"3px\",\r\n                                margin: \"2px\",\r\n                                border: \"1px solid\",\r\n                                textAlign: \"center\",\r\n                                borderRadius: \"5px\",\r\n                                borderColor: custom?.menusAcriveColor\r\n                                  ? custom.menusAcriveColor\r\n                                  : \"#f27d1e\",\r\n                                textDecoration: \"line-through\",\r\n                                color: custom?.menusAcriveColor\r\n                                  ? custom.menusAcriveColor\r\n                                  : \"#f27d1e\",\r\n                                fontSize: custom?.pDiscriptionSize\r\n                                  ? custom.pDiscriptionSize + \"rem\"\r\n                                  : \"0.75rem\",\r\n                              }\r\n                            : {\r\n                                cursor: \"pointer\",\r\n                                padding: \"3px\",\r\n                                margin: \"2px\",\r\n                                border: \"1px solid\",\r\n                                textAlign: \"center\",\r\n                                borderRadius: \"5px\",\r\n                                borderColor: custom?.menusDeactiveColor\r\n                                  ? custom.menusDeactiveColor\r\n                                  : \"#fff\",\r\n                                color: custom?.menusDeactiveColor\r\n                                  ? custom.menusDeactiveColor\r\n                                  : \"#fff\",\r\n                                fontSize: custom?.pDiscriptionSize\r\n                                  ? custom.pDiscriptionSize + \"rem\"\r\n                                  : \"0.75rem\",\r\n                              }\r\n                        }\r\n                      >\r\n                        {item.label}\r\n                      </div>\r\n                    );\r\n                  })}\r\n                </div>\r\n              </>\r\n            )}\r\n            {custom?.show_extras == 0 ||\r\n            JSON.parse(fetchData.extras).length === 0 ? (\r\n              \"\"\r\n            ) : (\r\n              <div className=\"row mx-3\">\r\n                <Typography variant=\"h6\" gutterBottom>\r\n                  {t(\"extras\")}\r\n                </Typography>\r\n                <FormGroup>\r\n                  {JSON.parse(fetchData.extras)?.map((item, i) => {\r\n                    return (\r\n                      <FormControlLabel\r\n                        key={i}\r\n                        control={\r\n                          <Checkbox\r\n                            onChange={(e) => {\r\n                              extraHandlers(e, item.price);\r\n                            }}\r\n                            color=\"default\"\r\n                            sx={{\r\n                              color: custom?.menusAcriveColor\r\n                                ? custom.menusAcriveColor\r\n                                : \"#ff751d\",\r\n                            }}\r\n                            value={\r\n                              item.label + \" ( +\" + item.price + \".00\" + \" )\"\r\n                            }\r\n                          />\r\n                        }\r\n                        label={\r\n                          <Typography variant=\"subtitle1\" gutterBottom>\r\n                            {item.label + \" ( +\" + item.price + \".00\" + \" )\"}\r\n                          </Typography>\r\n                        }\r\n                      />\r\n                    );\r\n                  })}\r\n                </FormGroup>\r\n              </div>\r\n            )}\r\n            {custom?.show_variants == 0 ||\r\n            Object.keys(showVaralint).length === 0 ? (\r\n              \"\"\r\n            ) : (\r\n              <>\r\n                <div className=\"row mx-3\">\r\n                  <Typography variant=\"h6\" gutterBottom>\r\n                    {t(\"vatiants\")}\r\n                  </Typography>\r\n                </div>\r\n\r\n                <div className=\"row mx-4 \">\r\n                  {Object.keys(showVaralint).map((list, i) => {\r\n                    return (\r\n                      <div className=\"row m-1\" key={i}>\r\n                        {/* {list} */}\r\n                        <div\r\n                          className=\"row d-flex justify-content-around\"\r\n                          style={{\r\n                            backgroundColor: custom?.cardBgColor\r\n                              ? custom.cardBgColor\r\n                              : \"#2d3134\",\r\n                            borderRadius: \"50px\",\r\n                            padding: \"5px\",\r\n                          }}\r\n                        >\r\n                          {showVaralint[list].map((variant, z) => {\r\n                            return (\r\n                              <div className=\"col\" key={z}>\r\n                                <div\r\n                                  onClick={() => {\r\n                                    changePrice(list, variant);\r\n                                  }}\r\n                                  style={\r\n                                    skuarray[i] == variant\r\n                                      ? {\r\n                                          cursor: \"pointer\",\r\n                                          border: \"1px solid\",\r\n                                          textAlign: \"center\",\r\n                                          borderRadius: \"50px\",\r\n                                          borderColor: \"black\",\r\n                                          backgroundColor:\r\n                                            custom?.menusAcriveColor\r\n                                              ? custom.menusAcriveColor\r\n                                              : \"black\",\r\n                                          color: custom?.menusDeactiveColor\r\n                                            ? custom.menusDeactiveColor\r\n                                            : \"#fff\",\r\n                                        }\r\n                                      : {\r\n                                          cursor: \"pointer\",\r\n                                          border: \"1px solid\",\r\n                                          textAlign: \"center\",\r\n                                          borderRadius: \"50px\",\r\n                                          borderColor: \"#2d3134\",\r\n                                          backgroundColor: \"#2d3134\",\r\n                                          color: custom?.menusDeactiveColor\r\n                                            ? custom.menusDeactiveColor\r\n                                            : \"#fff\",\r\n                                        }\r\n                                  }\r\n                                >\r\n                                  {variant}\r\n                                </div>\r\n                              </div>\r\n                            );\r\n                          })}\r\n                        </div>\r\n                      </div>\r\n                    );\r\n                  })}\r\n                </div>\r\n              </>\r\n            )}\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <Container maxWidth=\"lg\" className=\"mb-2\">\r\n        <Header subcategories={0} cart={cart.length} />\r\n        {viewImages_HTMLTABLE}\r\n      </Container>\r\n      <Footer\r\n        title=\"Checkout\"\r\n        theme={custom}\r\n        stock={\r\n          productDetails.stock === 0 ? fetchData?.stock : productDetails.stock\r\n        }\r\n        cart={cart}\r\n        deliveryFees={deliveryFees}\r\n        url={{\r\n          pathname: `/dark-template/product/order-details/${btoa(id)}`,\r\n          state: {\r\n            productName: fetchData.ProductName,\r\n\r\n            picture: productDetails.image\r\n              ? Array.isArray(productDetails.image)\r\n                ? productDetails.image[0]\r\n                : productDetails?.image\r\n              : fetchData?.image,\r\n\r\n            stock: productDetails.stock,\r\n            price:\r\n              productDetails.price === 0\r\n                ? fetchData?.price + sum\r\n                : parseInt(productDetails.price) + sum,\r\n            countryCode: fetchData.currency_code,\r\n            extraValue: extraValue,\r\n            orignalPrice:\r\n              productDetails.price === 0\r\n                ? fetchData?.price\r\n                : productDetails.price,\r\n            ingredients: ingredients,\r\n            custom: custom,\r\n          },\r\n        }}\r\n      />\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default ProductDetails;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Default\\Main.js",["362"],"import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Link as RLink } from \"react-router-dom\";\r\nimport \"react-awesome-slider/dist/styles.css\";\r\nimport { Col } from \"react-bootstrap\";\r\nimport {\r\n  CContainer,\r\n  CNavbar,\r\n  CNavbarBrand,\r\n  CNavbarToggler,\r\n  CCollapse,\r\n  CNavbarNav,\r\n  CNavItem,\r\n  CNavLink,\r\n} from \"@coreui/react\";\r\n// Import css files\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport Link from \"@mui/material/Link\";\r\n\r\nimport { base_url, port } from \"../../../../../Consts\";\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\nimport getSymbolFromCurrency from \"currency-symbol-map\";\r\n\r\nvar hold = 1;\r\n\r\nconst DefaultMain = (props) => {\r\n  const { t } = useTranslation();\r\n  const branchId = atob(props.match.params.id);\r\n  const [loading, setLoading] = useState(true);\r\n  const [data, setData] = useState([]);\r\n  const [categories, setCategories] = useState([]);\r\n  const [subcategories, setSubCategories] = useState([]);\r\n  const [products, setProducts] = useState([]);\r\n  const [activeCategory, setActiveCategory] = useState(0);\r\n  const [activeSubCategory, setActiveSubCategory] = useState(0);\r\n  const [themes, setThemes] = useState([]);\r\n  useEffect(() => {\r\n    axios.get(`/api/GetTempBasedOnBranch/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setThemes(res.data.fetchData?.Customization);\r\n      }\r\n    });\r\n    axios.get(`/api/GetBranchForShow/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setData(res.data.data[0]);\r\n      }\r\n      setLoading(false);\r\n    });\r\n    axios.get(`/api/GetCategories/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setCategories(res.data.fetchData);\r\n        // setActiveCategory(res.data.fetchData[0].id);\r\n      }\r\n    });\r\n    axios.get(`/api/getSubCateBasedOnBranch/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        // console.log(res.data.fetchData);\r\n        axios\r\n          .get(\r\n            `/api/GetProductsBasedOnSubCategory/${res.data.fetchData[0]?.sub_id}`\r\n          )\r\n          .then((res) => {\r\n            if (res.data.status === 200) {\r\n              setProducts(res.data.data);\r\n              setActiveSubCategory(res.data.data[0]?.sub_category_id);\r\n            }\r\n          });\r\n        setSubCategories(res.data.fetchData);\r\n      }\r\n    });\r\n  }, []);\r\n  const [changeState, setChangeState] = useState(true);\r\n  const fetchMoreData = () => {\r\n    if (hold < subcategories.length) {\r\n      axios.get(`/api/getSubCateBasedOnBranch/${branchId}`).then((res) => {\r\n        if (res.data.status === 200) {\r\n          // console.log(res.data.fetchData);\r\n          setActiveSubCategory(res.data.fetchData[hold].sub_id);\r\n          axios\r\n            .get(\r\n              `/api/GetProductsBasedOnSubCategory/${res.data.fetchData[hold].sub_id}`\r\n            )\r\n            .then((res) => {\r\n              if (res.data.status === 200) {\r\n                if (res.data.data?.length === 0) {\r\n                  hold = hold + 1;\r\n                  // console.log(res.data.fetchData);\r\n                  fetchMoreData();\r\n                } else {\r\n                  hold = hold + 1;\r\n                  setProducts(products.concat(res.data.data));\r\n                }\r\n              }\r\n            });\r\n\r\n          setSubCategories(res.data.fetchData);\r\n        }\r\n      });\r\n    } else {\r\n      setChangeState(false);\r\n    }\r\n    // console.log(hold);\r\n  };\r\n  const filterCategory = (cateId) => {\r\n    axios.get(`/api/GetSubCategories/${cateId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        // console.log(res.data.fetchData);\r\n        setSubCategories(res.data.fetchData);\r\n        // console.log(subcategories.length);\r\n        // setProducts([]);\r\n        // setVariants([]);\r\n      }\r\n    });\r\n    setActiveCategory(cateId);\r\n  };\r\n  // this function called by child (counter)\r\n  const filterProducts = (subCateID) => {\r\n    axios.get(`/api/GetProductsBasedOnSubCategory/${subCateID}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        // console.log(res.data.data);\r\n        setProducts(res.data.data);\r\n      }\r\n    });\r\n    setActiveSubCategory(subCateID);\r\n  };\r\n\r\n  const [visible, setVisible] = useState(false);\r\n  var viewShow_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div\r\n        className=\"spinner-border text-primary \"\r\n        role=\"status\"\r\n        style={{ position: \"fixed\", top: \"50%\", left: \"50%\" }}\r\n      >\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewShow_HTMLTABLE = products.map((item, i) => {\r\n      return (\r\n        <div\r\n          className=\"col-xl-2 col-lg-2 col-md-2 col-sm-4 col-6\"\r\n          key={i}\r\n          id={item.SubCategoryName}\r\n        >\r\n          <div className=\"card\">\r\n            <div className=\"card-body\">\r\n              <div className=\"new-arrival-product\">\r\n                <div className=\"text-center bg-white\">\r\n                  <img\r\n                    className=\"img-fluid w-40 img-thumbnail\"\r\n                    style={{ height: \"100px\", objectFit: \"contain\" }}\r\n                    src={`http://${base_url}:${port}/images/products/${item.image}`}\r\n                    alt=\"\"\r\n                  />\r\n                </div>\r\n                <RLink\r\n                  to={{\r\n                    pathname: `/standard-template/product/${btoa(item.id)}`,\r\n                    state: { themes: themes },\r\n                  }}\r\n                  className=\"text-black\"\r\n                >\r\n                  <div className=\"new-arrival-content text-center mt-3\">\r\n                    <h4>\r\n                      {item.ProductName}\r\n                      <p className=\"text-success\" style={{ fontSize: 10 }}>\r\n                        {item.UnitName}\r\n                      </p>\r\n                    </h4>\r\n\r\n                    <span className=\"price\">\r\n                      {item.price +\r\n                        \" \" +\r\n                        getSymbolFromCurrency(item.currency_code)}\r\n                    </span>\r\n                  </div>\r\n                </RLink>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <CNavbar expand=\"lg\" colorScheme=\"light\" className=\"bg-light\">\r\n        <CContainer fluid>\r\n          <CNavbarBrand className=\"text-center text-uppercase text-primary\">\r\n            {data?.BrancheName}\r\n          </CNavbarBrand>\r\n          <CNavbarToggler\r\n            aria-label=\"Toggle navigation\"\r\n            aria-expanded={visible}\r\n            onClick={() => setVisible(!visible)}\r\n          />\r\n          <CCollapse className=\"navbar-collapse\" visible={visible}>\r\n            <CNavbarNav>\r\n              {categories.map((data, i) => (\r\n                <CNavItem as=\"li\" key={i}>\r\n                  <CNavLink\r\n                    href=\"#\"\r\n                    onClick={() => filterCategory(data.id)}\r\n                    className={`text-capitalize font-weight-bold ${\r\n                      activeCategory === data.id\r\n                        ? \"active bg-primary text-white\"\r\n                        : \" \"\r\n                    }`}\r\n                  >\r\n                    {data.CategoryName}\r\n                  </CNavLink>\r\n                </CNavItem>\r\n              ))}\r\n            </CNavbarNav>\r\n          </CCollapse>\r\n        </CContainer>\r\n      </CNavbar>\r\n      <CNavbar colorScheme=\"light\" className=\"bg-white\" placement=\"sticky-top\">\r\n        <Col lg={12}>\r\n          <Toolbar\r\n            component=\"nav\"\r\n            variant=\"dense\"\r\n            sx={{ justifyContent: \"space-between\", overflowX: \"auto\" }}\r\n          >\r\n            {subcategories.map((item, i) => (\r\n              <Link\r\n                onClick={() => filterProducts(item.sub_id)}\r\n                noWrap\r\n                key={i}\r\n                underline=\"hover\"\r\n                variant=\"body2\"\r\n                to={`${item.SubCategoryName}`}\r\n                className={`text-capitalize ${\r\n                  activeSubCategory === item.sub_id\r\n                    ? \"active border border-primary text-primary\"\r\n                    : \" \"\r\n                }`}\r\n                style={{ cursor: \"pointer\" }}\r\n                sx={{ p: 1, flexShrink: 0 }}\r\n              >\r\n                {item.SubCategoryName}\r\n              </Link>\r\n            ))}\r\n          </Toolbar>\r\n        </Col>\r\n      </CNavbar>\r\n      <div className=\"row mt-1 mx-1\">{viewShow_HTMLTABLE}</div>\r\n      <InfiniteScroll\r\n        dataLength={products.length} //This is important field to render the next data\r\n        next={fetchMoreData}\r\n        hasMore={changeState}\r\n        loader={\r\n          <p className=\"text-center pt-5\">\r\n            <b>{t(\"loading\")}</b>\r\n          </p>\r\n        }\r\n        endMessage={\r\n          <p style={{ textAlign: \"center \" }}>\r\n            <b>{t(\"yay_you_have_seen_it_all\")}</b>\r\n          </p>\r\n        }\r\n      ></InfiniteScroll>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DefaultMain;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\Main.js",["363","364","365","366","367","368","369","370","371","372","373","374","375","376","377","378","379","380","381","382","383"],"import React, { useState, useEffect } from \"react\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Container from \"@mui/material/Container\";\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport Header from \"./Header\";\r\nimport Footer from \"./Footer\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport axios from \"axios\";\r\nimport { base_url, port } from \"../../../../../Consts\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport { Link } from \"react-router-dom\";\r\nimport getSymbolFromCurrency from \"currency-symbol-map\";\r\nimport FavoriteBorderIcon from \"@mui/icons-material/FavoriteBorder\";\r\nimport FavoriteIcon from \"@mui/icons-material/Favorite\";\r\n\r\nimport Counter from \"./Counter\";\r\n\r\nvar hold = 1;\r\nexport default function Main(props) {\r\n  const [loading, setLoading] = useState(true);\r\n  const { t } = useTranslation();\r\n  const branchId = atob(props.match.params.id);\r\n  const deliveryFees = props.history.location.state.deliveryFees;\r\n\r\n  const [branch, setBranch] = useState([]);\r\n  const [menu, setMenu] = useState([]);\r\n  const [products, setProducts] = useState([]);\r\n  const [activeMenu, setActiveMenu] = useState(0);\r\n  const [custom, setCustom] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios.get(`/api/GetTempBasedOnBranch/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setCustom(res.data.fetchData[0]?.Customization);\r\n      }\r\n    });\r\n    axios.get(`/api/GetBranchForShow/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setBranch(res.data.data);\r\n      }\r\n    });\r\n    axios.get(`/api/getCategoriesBasedProducts/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setMenu(res.data.fetchData);\r\n        if (res.data.fetchData[0]?.sub_category_id === null) {\r\n          setActiveMenu(\r\n            res.data.fetchData[0]?.CategoryName +\r\n              res.data.fetchData[0]?.category_id\r\n          );\r\n          axios\r\n            .get(\r\n              `/api/GetProductsBasedCategory/${res.data.fetchData[0]?.category_id}`\r\n            )\r\n            .then((res) => {\r\n              if (res.data.status === 200) {\r\n                setProducts(res.data.data);\r\n              }\r\n            });\r\n        } else {\r\n          setActiveMenu(\r\n            res.data.fetchData[0]?.SubCategoryName +\r\n              res.data.fetchData[0]?.sub_category_id\r\n          );\r\n\r\n          axios\r\n            .get(\r\n              `/api/GetProductsBasedOnSubCategory/${res.data.fetchData[0]?.sub_category_id}`\r\n            )\r\n            .then((res) => {\r\n              if (res.data.status === 200) {\r\n                setProducts(res.data.data);\r\n              }\r\n            });\r\n        }\r\n        setLoading(false);\r\n      }\r\n    });\r\n  }, []);\r\n  const [changeState, setChangeState] = useState(true);\r\n  const fetchMoreData = () => {\r\n    if (hold < menu.length) {\r\n      axios.get(`/api/getCategoriesBasedProducts/${branchId}`).then((res) => {\r\n        if (res.data.status === 200) {\r\n          // setActiveMenu(res.data.fetchData[hold].sub_id);\r\n\r\n          if (res.data.fetchData[hold]?.sub_category_id === null) {\r\n            setActiveMenu(\r\n              res.data.fetchData[hold]?.CategoryName +\r\n                res.data.fetchData[hold]?.category_id\r\n            );\r\n            axios\r\n              .get(\r\n                `/api/GetProductsBasedCategory/${res.data.fetchData[hold]?.category_id}`\r\n              )\r\n              .then((res) => {\r\n                if (res.data.status === 200) {\r\n                  hold = hold + 1;\r\n\r\n                  setProducts(products.concat(res.data.data));\r\n                }\r\n              });\r\n          } else {\r\n            setActiveMenu(\r\n              res.data.fetchData[hold]?.SubCategoryName +\r\n                res.data.fetchData[hold]?.sub_category_id\r\n            );\r\n\r\n            axios\r\n              .get(\r\n                `/api/GetProductsBasedOnSubCategory/${res.data.fetchData[hold]?.sub_category_id}`\r\n              )\r\n              .then((res) => {\r\n                if (res.data.status === 200) {\r\n                  hold = hold + 1;\r\n\r\n                  setProducts(products.concat(res.data.data));\r\n                }\r\n              });\r\n          }\r\n        }\r\n      });\r\n    } else {\r\n      setChangeState(false);\r\n    }\r\n    // console.log(hold);\r\n  };\r\n\r\n  // theme start\r\n  const theme = createTheme({\r\n    palette: {\r\n      background: {\r\n        default: custom?.bgColor ? custom.bgColor : \"#22252a\",\r\n      },\r\n    },\r\n    typography: {\r\n      fontFamily: custom?.font ? custom.font : \"sans-serif\",\r\n      // discription\r\n      subtitle1: {\r\n        fontSize: custom?.pDiscriptionSize\r\n          ? custom.pDiscriptionSize + \"rem\"\r\n          : \"0.75rem\",\r\n\r\n        color: custom?.product_discription_color\r\n          ? custom.product_discription_color\r\n          : \"#fff\",\r\n      },\r\n      // price\r\n      body1: {\r\n        fontSize: custom?.priceSize ? custom.priceSize + \"rem\" : \"1.25rem\",\r\n        color: custom?.price_color ? custom.price_color : \"#fff\",\r\n      },\r\n      // product Names\r\n      button: {\r\n        fontSize: custom?.pNameSize ? custom.pNameSize + \"rem\" : \"1rem\",\r\n        color: custom?.product_name_color ? custom.product_name_color : \"#fff\",\r\n      },\r\n      // Menus\r\n      h6: {\r\n        fontSize: custom?.menusSize ? custom.menusSize + \"rem\" : \"1rem\",\r\n        color: custom?.menusAcriveColor ? custom.menusAcriveColor : \"#f27d1e\",\r\n      },\r\n    },\r\n  });\r\n  // theme end\r\n  const [cart, setCart] = useState(\r\n    JSON.parse(localStorage.getItem(\"cart\")) || []\r\n  );\r\n\r\n  var viewShow_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div\r\n        className=\"spinner-border text-primary \"\r\n        role=\"status\"\r\n        style={{ position: \"fixed\", top: \"50%\", left: \"50%\" }}\r\n      >\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewShow_HTMLTABLE = products?.map((item, i) => {\r\n      return (\r\n        <Grid\r\n          item\r\n          style={\r\n            item.stock == 0\r\n              ? {\r\n                  pointerEvents: \"none\",\r\n                  opacity: \"0.4\",\r\n                  WebkitFilter: \"grayscale(1)\",\r\n                }\r\n              : {}\r\n          }\r\n          xs={\r\n            custom?.numberProductInRowMobile\r\n              ? custom.numberProductInRowMobile == 1\r\n                ? 12\r\n                : custom.numberProductInRowMobile == 2\r\n                ? 6\r\n                : custom.numberProductInRowMobile == 3\r\n                ? 4\r\n                : custom.numberProductInRowMobile == 4 ||\r\n                  custom.numberProductInRowMobile == 5\r\n                ? 3\r\n                : custom.numberProductInRowMobile == 6\r\n                ? 2\r\n                : 6\r\n              : 6\r\n          }\r\n          sm={\r\n            custom?.numberProductInRowTablet\r\n              ? custom.numberProductInRowTablet == 1\r\n                ? 12\r\n                : custom.numberProductInRowTablet == 2\r\n                ? 6\r\n                : custom.numberProductInRowTablet == 3\r\n                ? 4\r\n                : custom.numberProductInRowTablet == 4 ||\r\n                  custom.numberProductInRowTablet == 5\r\n                ? 3\r\n                : custom.numberProductInRowTablet == 6\r\n                ? 2\r\n                : 4\r\n              : 4\r\n          }\r\n          md={\r\n            custom?.numberProductInRowComputer\r\n              ? custom.numberProductInRowComputer == 1\r\n                ? 12\r\n                : custom.numberProductInRowComputer == 2\r\n                ? 6\r\n                : custom.numberProductInRowComputer == 3\r\n                ? 4\r\n                : custom.numberProductInRowComputer == 4 ||\r\n                  custom.numberProductInRowComputer == 5\r\n                ? 3\r\n                : custom.numberProductInRowComputer == 6\r\n                ? 2\r\n                : 3\r\n              : 3\r\n          }\r\n          key={i}\r\n        >\r\n          <Card\r\n            sx={{\r\n              // height: \"100%\",\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              borderRadius: \"5%\",\r\n              backgroundColor: custom?.cardBgColor\r\n                ? custom.cardBgColor\r\n                : \"#2d3134\",\r\n            }}\r\n          >\r\n            <div className=\"px-2 pt-2\">\r\n              {cart.every((val) => {\r\n                return val.id !== item.id;\r\n              }) ? (\r\n                <FavoriteBorderIcon\r\n                  sx={{\r\n                    color: custom?.menusDeactiveColor\r\n                      ? custom.menusDeactiveColor\r\n                      : \"#fff\",\r\n                  }}\r\n                />\r\n              ) : (\r\n                <FavoriteIcon\r\n                  sx={{\r\n                    color: custom?.menusActiveColor\r\n                      ? custom.menusActiveColor\r\n                      : \"#ff751d\",\r\n                  }}\r\n                />\r\n              )}\r\n            </div>\r\n\r\n            <CardContent sx={{ flexGrow: 1 }}>\r\n              <Link\r\n                to={{\r\n                  pathname: `/dark-template/product/${btoa(item.id)}`,\r\n                  state: { custom: custom },\r\n                }}\r\n              >\r\n                <div className=\"text-center\">\r\n                  <img\r\n                    style={{\r\n                      height: \"150px\",\r\n                      width: \"100%\",\r\n                      borderRadius: \"15%\",\r\n                      objectFit: \"contain\",\r\n                    }}\r\n                    src={`http://${base_url}:${port}/images/products/${\r\n                      JSON.parse(item.image)[0]\r\n                    }`}\r\n                    alt=\"Image\"\r\n                    // className=\"h-100\"\r\n                  />\r\n                </div>\r\n              </Link>\r\n\r\n              <div className=\"mt-2\">\r\n                <Grid container>\r\n                  <Grid item xs={9}>\r\n                    <Link\r\n                      to={{\r\n                        pathname: `/dark-template/product/${btoa(item.id)}`,\r\n                        state: { custom: custom, deliveryFees: deliveryFees },\r\n                      }}\r\n                    >\r\n                      <Typography\r\n                        variant=\"button\"\r\n                        style={{ textTransform: \"capitalize\" }}\r\n                        // className=\"font-weight-bold\"\r\n                      >\r\n                        {item.ProductName}\r\n                      </Typography>\r\n                    </Link>\r\n                  </Grid>\r\n                  <Grid item xs={3}>\r\n                    <Counter\r\n                      custom={custom}\r\n                      item={item}\r\n                      cart={cart}\r\n                      setCart={setCart}\r\n                      products={products}\r\n                    />\r\n                    {/* <IconButton onClick={() => addItem(item.id)}>\r\n                      {cart.every((val) => {\r\n                        return val.id !== item.id;\r\n                      }) ? (\r\n                        <AddIcon\r\n                          sx={{\r\n                            color: custom?.menusDeactiveColor\r\n                              ? custom.menusDeactiveColor\r\n                              : \"#fff\",\r\n                          }}\r\n                        />\r\n                      ) : (\r\n                        <AddIcon\r\n                          sx={{\r\n                            color: custom?.menusActiveColor\r\n                              ? custom.menusActiveColor\r\n                              : \"#ff751d\",\r\n                          }}\r\n                        />\r\n                      )}\r\n                    </IconButton> */}\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                <Typography\r\n                  variant=\"body1\"\r\n                  gutterBottom\r\n                  className=\"font-weight-bold\"\r\n                >\r\n                  {getSymbolFromCurrency(item.currency_code) +\r\n                    \"  \" +\r\n                    item.price.toFixed(2)}\r\n                </Typography>\r\n                <Typography variant=\"subtitle1\" gutterBottom>\r\n                  {item.Description}\r\n                </Typography>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      );\r\n    });\r\n  }\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <Container maxWidth=\"lg\">\r\n        <Header\r\n          cart={cart.length}\r\n          title={branch[0]?.BrancheName}\r\n          menu={menu}\r\n          activeMenu={activeMenu}\r\n          setProducts={setProducts}\r\n          setActiveMenu={setActiveMenu}\r\n          custom={custom}\r\n        />\r\n\r\n        <Container className=\"mt-3 d-flex justify-content-center\">\r\n          <Grid container spacing={2} className=\"d-flex justify-content-center\">\r\n            {viewShow_HTMLTABLE}\r\n          </Grid>\r\n        </Container>\r\n        <InfiniteScroll\r\n          dataLength={products.length} //This is important field to render the next data\r\n          next={fetchMoreData}\r\n          hasMore={changeState}\r\n          loader={\r\n            <p className=\"text-center pt-5\">\r\n              <b>{t(\"loading\")}</b>\r\n            </p>\r\n          }\r\n          endMessage={\r\n            <p style={{ textAlign: \"center \" }}>\r\n              <b>{t(\"yay_you_have_seen_it_all\")}</b>\r\n            </p>\r\n          }\r\n        ></InfiniteScroll>\r\n      </Container>\r\n      <Footer\r\n        title=\"Checkout Order\"\r\n        theme={custom}\r\n        url={\"\"}\r\n        cart={cart}\r\n        deliveryFees={deliveryFees}\r\n      />\r\n    </ThemeProvider>\r\n  );\r\n}\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Thrid\\Main.js",["384","385","386","387","388","389","390","391","392","393"],"import React, { useState, useEffect } from \"react\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Container from \"@mui/material/Container\";\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardMedia from \"@mui/material/CardMedia\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport axios from \"axios\";\r\nimport { base_url, port } from \"../../../../../Consts\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport Box from \"@mui/material/Box\";\r\nimport Tabs, { tabsClasses } from \"@mui/material/Tabs\";\r\nimport Tab from \"@mui/material/Tab\";\r\nimport getSymbolFromCurrency from \"currency-symbol-map\";\r\n\r\nvar hold = 1;\r\nexport default function Main(props) {\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  const [loading, setLoading] = useState(true);\r\n  const { t } = useTranslation();\r\n  const branchId = atob(props.match.params.id);\r\n  const [subcategories, setSubCategories] = useState([]);\r\n  const [products, setProducts] = useState([]);\r\n  const [themeCustomization, setThemeCustomization] = useState([]);\r\n  const [categories, setCategories] = useState([]);\r\n  const [activeCategory, setActiveCategory] = useState(0);\r\n\r\n  useEffect(() => {\r\n    axios.get(`/api/GetCategories/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setCategories(res.data.fetchData);\r\n        setActiveCategory(res.data.fetchData[0].id);\r\n        // console.log(res.data.fetchData);\r\n      }\r\n    });\r\n    axios.get(`/api/GetTempBasedOnBranch/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setThemeCustomization(res.data.fetchData[0]?.Customization);\r\n        // console.log(res.data.fetchData[0].Customization);\r\n      }\r\n    });\r\n    axios.get(`/api/getSubCateBasedOnBranch/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setSubCategories(res.data.fetchData);\r\n        // console.log(res.data.fetchData);\r\n      }\r\n      setLoading(false);\r\n    });\r\n  }, []);\r\n\r\n  // design start\r\n  const theme = createTheme({\r\n    // overrides: {\r\n    //   MuiButton: {\r\n    //     root: {\r\n    //       backgroundr: \"#d6e0ec\",\r\n    //     },\r\n    //   },\r\n    // },\r\n    palette: {\r\n      warning: {\r\n        // button background\r\n        main: themeCustomization?.button_background_color\r\n          ? themeCustomization.button_background_color\r\n          : \"#ff751d\",\r\n      },\r\n    },\r\n    typography: {\r\n      fontFamily: themeCustomization?.font\r\n        ? themeCustomization.font\r\n        : \"sans-serif\",\r\n      subtitle1: {\r\n        fontSize: themeCustomization?.product_discription_font_size\r\n          ? themeCustomization.product_discription_font_size\r\n          : 10,\r\n        color: themeCustomization?.product_discription_color\r\n          ? themeCustomization.product_discription_color\r\n          : \"#777\",\r\n      },\r\n      // price\r\n      body1: {\r\n        fontSize: themeCustomization?.price_font_size\r\n          ? themeCustomization.price_font_size\r\n          : 12,\r\n        color: themeCustomization?.price_color\r\n          ? themeCustomization.price_color\r\n          : \"#f1fcfe\",\r\n      },\r\n      // product Names\r\n      button: {\r\n        fontSize: themeCustomization?.product_name_font_size\r\n          ? themeCustomization.product_name_font_size\r\n          : 12,\r\n        color: themeCustomization?.product_name_color\r\n          ? themeCustomization.product_name_color\r\n          : \"#1f1d1f\",\r\n      },\r\n      // categories and sub categories\r\n      overline: {\r\n        fontSize: themeCustomization?.categories_and_sub_categoies_font_size\r\n          ? themeCustomization.categories_and_sub_categoies_font_size\r\n          : 12,\r\n        color: themeCustomization?.categories_and_sub_categoies_color\r\n          ? themeCustomization.categories_and_sub_categoies_color\r\n          : \"#ff751d\",\r\n      },\r\n      // branch Name\r\n      h4: {\r\n        fontSize: themeCustomization?.branch_name_font_size\r\n          ? themeCustomization.branch_name_font_size\r\n          : 28,\r\n        color: themeCustomization?.branch_name_color\r\n          ? themeCustomization.branch_name_color\r\n          : \"#aa3f32\",\r\n      },\r\n      subtitle2: {\r\n        fontSize: themeCustomization?.branch_name_font_size\r\n          ? themeCustomization.branch_name_font_size\r\n          : 12,\r\n        color: themeCustomization?.branch_name_color\r\n          ? themeCustomization.branch_name_color\r\n          : \"#1f1d1f\",\r\n      },\r\n    },\r\n    components: {\r\n      MuiButton: {\r\n        variants: [\r\n          {\r\n            // button\r\n            props: { variant: \"contained\" },\r\n            style: {\r\n              fontSize: themeCustomization?.button_text_font_size\r\n                ? themeCustomization.button_text_font_size\r\n                : 12,\r\n              color: themeCustomization?.button_text_color\r\n                ? themeCustomization.button_text_color\r\n                : \"#f1fcfe\",\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n  });\r\n  // design end\r\n  const filterCategory = (cateId) => {\r\n    axios.get(`/api/GetSubCategories/${cateId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setSubCategories(res.data.fetchData);\r\n      }\r\n    });\r\n    setActiveCategory(cateId);\r\n  };\r\n  var viewShow_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div\r\n        className=\"spinner-border text-primary \"\r\n        role=\"status\"\r\n        style={{ position: \"fixed\", top: \"50%\", left: \"50%\" }}\r\n      >\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewShow_HTMLTABLE = subcategories?.map((item, i) => {\r\n      return (\r\n        <Grid item xs={4} sm={4} md={2} key={i}>\r\n          <Card\r\n            sx={{\r\n              // width: \"300px\",\r\n              background: \"#ffffff\",\r\n\r\n              border: \"1px solid\",\r\n              textAlign: \"center\",\r\n              borderRadius: \"30px\",\r\n              borderColor: \"#ffffff\",\r\n            }}\r\n          >\r\n            <Link\r\n              to={{\r\n                pathname: `/thrid-template/products-list/${btoa(item.sub_id)}`,\r\n                state: {\r\n                  themes: themeCustomization,\r\n                  SubCategoryName: item.SubCategoryName,\r\n                },\r\n              }}\r\n            >\r\n              <CardContent sx={{ flexGrow: 1 }} className=\"text-center\">\r\n                <img\r\n                  style={{\r\n                    height: \"80px\",\r\n                    width: \"100px\",\r\n                    textAlign: \"center\",\r\n                    borderRadius: \"10%\",\r\n                  }}\r\n                  className=\"mb-2\"\r\n                  src={`http://${base_url}:${port}/images/sub_catagories/${item.SubCategoryIcon}`}\r\n                />\r\n                <Typography\r\n                  variant=\"subtitle2\"\r\n                  style={{ textTransform: \"capitalize\" }}\r\n                  className=\"font-weight-bold\"\r\n                >\r\n                  {item.SubCategoryName}\r\n                </Typography>\r\n              </CardContent>\r\n            </Link>\r\n          </Card>\r\n        </Grid>\r\n      );\r\n    });\r\n  }\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <Container\r\n        maxWidth=\"lg\"\r\n        className=\"p-2\"\r\n        // style={{ backgroundColor: \"#d6e0ec\" }}\r\n      >\r\n        <Grid item className=\"text-center\">\r\n          <Typography\r\n            variant=\"button\"\r\n            gutterBottom\r\n            className=\"font-weight-bold m-1\"\r\n          >\r\n            {subcategories[0].BrancheName}\r\n          </Typography>\r\n        </Grid>\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={12}>\r\n            <Box\r\n              sx={{\r\n                flexGrow: 1,\r\n                bgcolor: \"background.paper\",\r\n                display: \"flex\",\r\n                width: \"100%\",\r\n                marginBottom: \"10px\",\r\n              }}\r\n            >\r\n              <Tabs\r\n                variant=\"scrollable\"\r\n                scrollButtons=\"auto\"\r\n                aria-label=\"scrollable auto tabs example\"\r\n                value={value}\r\n                onChange={handleChange}\r\n                // variant=\"scrollable\"\r\n                // scrollButtons\r\n                TabIndicatorProps={{\r\n                  style: {\r\n                    display: \"none\",\r\n                  },\r\n                }}\r\n                sx={{\r\n                  [`& .${tabsClasses.scrollButtons}`]: {\r\n                    \"&.Mui-disabled\": { opacity: 0.3 },\r\n                  },\r\n                }}\r\n              >\r\n                {categories?.map((section, i) => (\r\n                  <Tab\r\n                    onClick={() => filterCategory(section.id)}\r\n                    style={\r\n                      activeCategory == section.id\r\n                        ? {\r\n                            cursor: \"pointer\",\r\n                            background: \"#f6753b\",\r\n                            margin: \"2px\",\r\n                            padding: \"5px\",\r\n                            border: \"1px solid\",\r\n                            textAlign: \"center\",\r\n                            borderRadius: \"10px\",\r\n                            borderColor: \"#f6753b\",\r\n                          }\r\n                        : {\r\n                            cursor: \"pointer\",\r\n                            margin: \"2px\",\r\n                            padding: \"5px\",\r\n                            textAlign: \"center\",\r\n                            borderRadius: \"10px\",\r\n                          }\r\n                    }\r\n                    icon={\r\n                      <img\r\n                        style={{\r\n                          height: \"40px\",\r\n                          width: \"60px\",\r\n                          borderRadius: \"10%\",\r\n                        }}\r\n                        src={`http://${base_url}:${port}/images/catagories/${section.CategoryIcon}`}\r\n                      />\r\n                    }\r\n                    label={\r\n                      <Typography\r\n                        style={\r\n                          activeCategory == section.id\r\n                            ? {\r\n                                color: \"white\",\r\n                                textTransform: \"capitalize\",\r\n                              }\r\n                            : {\r\n                                color: \"black\",\r\n                                textTransform: \"capitalize\",\r\n                              }\r\n                        }\r\n                        className=\"font-weight-bold\"\r\n                      >\r\n                        {section.CategoryName}\r\n                      </Typography>\r\n                    }\r\n                  />\r\n                ))}\r\n              </Tabs>\r\n            </Box>\r\n          </Grid>\r\n          <Grid container spacing={2} style={{ marginLeft: \"1px\" }}>\r\n            {viewShow_HTMLTABLE}\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\OrderDetails.js",["394","395","396","397","398","399","400","401","402","403"],"import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport axios from \"axios\";\r\n\r\n// Import css files\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport Container from \"@mui/material/Container\";\r\n// import Slider from \"react-slick\";\r\nimport Header from \"./Header\";\r\nimport { base_url, port } from \"../../../../../Consts\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Card from \"@mui/material/Card\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport FavoriteIcon from \"@mui/icons-material/Favorite\";\r\nimport Box from \"@mui/material/Box\";\r\nimport getSymbolFromCurrency from \"currency-symbol-map\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport TextareaAutosize from \"@mui/base/TextareaAutosize\";\r\nimport ReactWhatsapp from \"react-whatsapp\";\r\nimport { Swiper, SwiperSlide } from \"swiper/react\";\r\n\r\nconst OrderDetails = (props) => {\r\n  const custom = props.history.location.state.custom;\r\n  // design start\r\n  const theme = createTheme({\r\n    palette: {\r\n      background: {\r\n        default: custom?.bgColor ? custom.bgColor : \"#22252a\",\r\n      },\r\n    },\r\n    typography: {\r\n      fontFamily: custom?.font ? custom.font : \"sans-serif\",\r\n      // discription\r\n      subtitle1: {\r\n        fontSize: custom?.pDiscriptionSize\r\n          ? custom.pDiscriptionSize + \"rem\"\r\n          : \"0.75rem\",\r\n\r\n        color: custom?.product_discription_color\r\n          ? custom.product_discription_color\r\n          : \"#fff\",\r\n      },\r\n      // price\r\n      body1: {\r\n        fontSize: custom?.priceSize ? custom.priceSize + \"rem\" : \"1.25rem\",\r\n        color: custom?.price_color ? custom.price_color : \"#fff\",\r\n      },\r\n      // product Names\r\n      button: {\r\n        fontSize: custom?.pNameSize ? custom.pNameSize + \"rem\" : \"1rem\",\r\n        color: custom?.product_name_color ? custom.product_name_color : \"#fff\",\r\n      },\r\n      // Menus\r\n      h6: {\r\n        fontSize: custom?.menusSize ? custom.menusSize + \"rem\" : \"1rem\",\r\n        color: custom?.menusAcriveColor ? custom.menusAcriveColor : \"#f27d1e\",\r\n      },\r\n    },\r\n  });\r\n  // design end\r\n  const { t } = useTranslation();\r\n\r\n  const productName = props.history.location.state.productName;\r\n  const picture = props.history.location.state.picture;\r\n  const stock = props.history.location.state.stock;\r\n  const price = props.history.location.state.price;\r\n  const orignalPrice = props.history.location.state.orignalPrice;\r\n  const countryCode = props.history.location.state.countryCode;\r\n  const extraValue = props.history.location.state.extraValue;\r\n  const ingredients = props.history.location.state.ingredients;\r\n\r\n  const id = atob(props.match.params.id);\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const getdata = async () => {\r\n      const product = await axios({\r\n        method: \"GET\",\r\n        url: `/api/GetProduct/${id}`,\r\n      });\r\n      const data = product.data.fetchData;\r\n      setFetchData(JSON.parse(data[0].recommendations));\r\n\r\n      setLoading(false);\r\n    };\r\n    getdata(); // axios\r\n  }, [id]);\r\n  let [sum, setSum] = useState(0);\r\n\r\n  const extraHandlers = (e, price, id, qty) => {\r\n    if (e.target.checked) {\r\n      // console.log((sum += parseInt(price)));\r\n      setSum((sum += parseInt(price)));\r\n      setFetchData((fetchData) =>\r\n        fetchData.map((item) =>\r\n          id == item.value ? { ...item, show: true } : item\r\n        )\r\n      );\r\n    } else {\r\n      setSum((sum -= parseInt(price) * qty));\r\n      setFetchData((fetchData) =>\r\n        fetchData.map((item) =>\r\n          id == item.value ? { ...item, qty: 1, show: false } : item\r\n        )\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleDecrement = (e, qty, id, price) => {\r\n    e.preventDefault();\r\n    if (qty > 1) {\r\n      setFetchData((fetchData) =>\r\n        fetchData.map((item) =>\r\n          id == item.value\r\n            ? { ...item, qty: item.qty - (item.qty > 0 ? 1 : 0) }\r\n            : item\r\n        )\r\n      );\r\n      setSum((sum -= parseInt(price)));\r\n    }\r\n  };\r\n  const handelIncrement = (e, qty, id, price) => {\r\n    e.preventDefault();\r\n    // console.log();\r\n    setFetchData((fetchData) =>\r\n      fetchData.map((item) =>\r\n        id == item.value ? { ...item, qty: item.qty + 1 } : item\r\n      )\r\n    );\r\n    setSum((sum += parseInt(price)));\r\n  };\r\n  const [cart, setCart] = useState(\r\n    JSON.parse(localStorage.getItem(\"cart\")) || []\r\n  );\r\n\r\n  var viewImages_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"container \">\r\n        <div\r\n          className=\"spinner-border text-primary \"\r\n          role=\"status\"\r\n          style={{ position: \"fixed\", top: \"50%\", left: \"50%\" }}\r\n        >\r\n          {/* <span className=\"sr-only\">{t(\"loading\")}</span> */}\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewImages_HTMLTABLE = fetchData?.map((item, i) => {\r\n      return (\r\n        <Grid container spacing={2} key={i}>\r\n          <Grid item xs={8} sm={8} md={8}>\r\n            {/* {console.log(item)} */}\r\n            <FormControlLabel\r\n              control={\r\n                <Checkbox\r\n                  color=\"default\"\r\n                  onChange={(e) => {\r\n                    extraHandlers(e, item.price, item.value, item.qty);\r\n                  }}\r\n                  sx={{\r\n                    color: custom?.menusAcriveColor\r\n                      ? custom.menusAcriveColor\r\n                      : \"#ff751d\",\r\n                  }}\r\n                />\r\n              }\r\n              label={\r\n                <Typography variant=\"subtitle1\" gutterBottom>\r\n                  {item.label +\r\n                    \" ( +\" +\r\n                    (item.price * item.qty).toFixed(2) +\r\n                    \" \" +\r\n                    getSymbolFromCurrency(countryCode) +\r\n                    \" )\"}\r\n                </Typography>\r\n              }\r\n            />\r\n          </Grid>\r\n          {item?.show ? (\r\n            <Grid item xs={4} sm={4} md={4}>\r\n              <div className=\"row mt-2\">\r\n                <div className={`row`}>\r\n                  <div className=\"col-4 \">\r\n                    <Typography\r\n                      onClick={(e) =>\r\n                        handleDecrement(e, item.qty, item.value, item.price)\r\n                      }\r\n                      style={{ cursor: \"pointer\" }}\r\n                      variant=\"h6\"\r\n                      gutterBottom\r\n                    >\r\n                      <svg\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                        width=\"16\"\r\n                        height=\"16\"\r\n                        fill=\"currentColor\"\r\n                        className=\"bi bi-dash-square-dotted  \"\r\n                        viewBox=\"0 0 16 16\"\r\n                      >\r\n                        <path d=\"M2.5 0c-.166 0-.33.016-.487.048l.194.98A1.51 1.51 0 0 1 2.5 1h.458V0H2.5zm2.292 0h-.917v1h.917V0zm1.833 0h-.917v1h.917V0zm1.833 0h-.916v1h.916V0zm1.834 0h-.917v1h.917V0zm1.833 0h-.917v1h.917V0zM13.5 0h-.458v1h.458c.1 0 .199.01.293.029l.194-.981A2.51 2.51 0 0 0 13.5 0zm2.079 1.11a2.511 2.511 0 0 0-.69-.689l-.556.831c.164.11.305.251.415.415l.83-.556zM1.11.421a2.511 2.511 0 0 0-.689.69l.831.556c.11-.164.251-.305.415-.415L1.11.422zM16 2.5c0-.166-.016-.33-.048-.487l-.98.194c.018.094.028.192.028.293v.458h1V2.5zM.048 2.013A2.51 2.51 0 0 0 0 2.5v.458h1V2.5c0-.1.01-.199.029-.293l-.981-.194zM0 3.875v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zM0 5.708v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zM0 7.542v.916h1v-.916H0zm15 .916h1v-.916h-1v.916zM0 9.375v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zm-16 .916v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zm-16 .917v.458c0 .166.016.33.048.487l.98-.194A1.51 1.51 0 0 1 1 13.5v-.458H0zm16 .458v-.458h-1v.458c0 .1-.01.199-.029.293l.981.194c.032-.158.048-.32.048-.487zM.421 14.89c.183.272.417.506.69.689l.556-.831a1.51 1.51 0 0 1-.415-.415l-.83.556zm14.469.689c.272-.183.506-.417.689-.69l-.831-.556c-.11.164-.251.305-.415.415l.556.83zm-12.877.373c.158.032.32.048.487.048h.458v-1H2.5c-.1 0-.199-.01-.293-.029l-.194.981zM13.5 16c.166 0 .33-.016.487-.048l-.194-.98A1.51 1.51 0 0 1 13.5 15h-.458v1h.458zm-9.625 0h.917v-1h-.917v1zm1.833 0h.917v-1h-.917v1zm1.834 0h.916v-1h-.916v1zm1.833 0h.917v-1h-.917v1zm1.833 0h.917v-1h-.917v1zM4.5 7.5a.5.5 0 0 0 0 1h7a.5.5 0 0 0 0-1h-7z\" />\r\n                      </svg>\r\n                    </Typography>\r\n                  </div>\r\n                  <div className=\"col-4\">\r\n                    <Typography\r\n                      variant=\"subtitle1\"\r\n                      gutterBottom\r\n                      className=\"mt-1\"\r\n                    >\r\n                      {item.qty}\r\n                    </Typography>\r\n                  </div>\r\n                  <div className=\"col-4\">\r\n                    <Typography\r\n                      onClick={(e) =>\r\n                        handelIncrement(e, item.qty, item.value, item.price)\r\n                      }\r\n                      style={{ cursor: \"pointer\" }}\r\n                      variant=\"h6\"\r\n                      gutterBottom\r\n                    >\r\n                      <svg\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                        width=\"16\"\r\n                        height=\"16\"\r\n                        fill=\"currentColor\"\r\n                        className=\"bi bi-plus-square-dotted\"\r\n                        viewBox=\"0 0 16 16\"\r\n                      >\r\n                        <path d=\"M2.5 0c-.166 0-.33.016-.487.048l.194.98A1.51 1.51 0 0 1 2.5 1h.458V0H2.5zm2.292 0h-.917v1h.917V0zm1.833 0h-.917v1h.917V0zm1.833 0h-.916v1h.916V0zm1.834 0h-.917v1h.917V0zm1.833 0h-.917v1h.917V0zM13.5 0h-.458v1h.458c.1 0 .199.01.293.029l.194-.981A2.51 2.51 0 0 0 13.5 0zm2.079 1.11a2.511 2.511 0 0 0-.69-.689l-.556.831c.164.11.305.251.415.415l.83-.556zM1.11.421a2.511 2.511 0 0 0-.689.69l.831.556c.11-.164.251-.305.415-.415L1.11.422zM16 2.5c0-.166-.016-.33-.048-.487l-.98.194c.018.094.028.192.028.293v.458h1V2.5zM.048 2.013A2.51 2.51 0 0 0 0 2.5v.458h1V2.5c0-.1.01-.199.029-.293l-.981-.194zM0 3.875v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zM0 5.708v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zM0 7.542v.916h1v-.916H0zm15 .916h1v-.916h-1v.916zM0 9.375v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zm-16 .916v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zm-16 .917v.458c0 .166.016.33.048.487l.98-.194A1.51 1.51 0 0 1 1 13.5v-.458H0zm16 .458v-.458h-1v.458c0 .1-.01.199-.029.293l.981.194c.032-.158.048-.32.048-.487zM.421 14.89c.183.272.417.506.69.689l.556-.831a1.51 1.51 0 0 1-.415-.415l-.83.556zm14.469.689c.272-.183.506-.417.689-.69l-.831-.556c-.11.164-.251.305-.415.415l.556.83zm-12.877.373c.158.032.32.048.487.048h.458v-1H2.5c-.1 0-.199-.01-.293-.029l-.194.981zM13.5 16c.166 0 .33-.016.487-.048l-.194-.98A1.51 1.51 0 0 1 13.5 15h-.458v1h.458zm-9.625 0h.917v-1h-.917v1zm1.833 0h.917v-1h-.917v1zm1.834-1v1h.916v-1h-.916zm1.833 1h.917v-1h-.917v1zm1.833 0h.917v-1h-.917v1zM8.5 4.5a.5.5 0 0 0-1 0v3h-3a.5.5 0 0 0 0 1h3v3a.5.5 0 0 0 1 0v-3h3a.5.5 0 0 0 0-1h-3v-3z\" />\r\n                      </svg>\r\n                    </Typography>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </Grid>\r\n          ) : (\r\n            \" \"\r\n          )}\r\n        </Grid>\r\n      );\r\n    });\r\n  }\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <Container maxWidth=\"lg \">\r\n        <Header subcategories={0} cart={cart.length} />\r\n\r\n        <Container className=\"mt-3 d-flex justify-content-center\">\r\n          <Grid container spacing={2} className=\"d-flex justify-content-center\">\r\n            <Grid item xs={12} sm={8} md={8}>\r\n              <Card\r\n                sx={{\r\n                  display: \"flex\",\r\n                  flexDirection: \"column\",\r\n                  borderRadius: \"5%\",\r\n                  backgroundColor: custom?.cardBgColor\r\n                    ? custom.cardBgColor\r\n                    : \"#2d3134\",\r\n                }}\r\n              >\r\n                {/* {console.log(picture)} */}\r\n                {JSON.parse(picture)?.map((image, i) => {\r\n                  return (\r\n                    <SwiperSlide key={i}>\r\n                      <img\r\n                        src={\r\n                          stock === \"No Stock\" || stock === 0\r\n                            ? `http://${base_url}:${port}/images/products/${image}`\r\n                            : `http://${base_url}:${port}/images/variants_pics/${image}`\r\n                        }\r\n                        alt=\"\"\r\n                        style={{\r\n                          height: \"250px\",\r\n                          width: \"100%\",\r\n                          objectFit: \"contain\",\r\n                        }}\r\n                      />\r\n                    </SwiperSlide>\r\n                  );\r\n                })}\r\n                {/* <img alt=\"Image\" className=\"m-1\" /> */}\r\n                <FavoriteIcon sx={{ color: \"#ff751d\" }} className=\"mx-4 my-2\" />\r\n\r\n                <div className=\"row mx-3\">\r\n                  <Typography\r\n                    variant=\"button\"\r\n                    style={{ textTransform: \"capitalize\" }}\r\n                  >\r\n                    {productName}{\" \"}\r\n                    {orignalPrice +\r\n                      \".00\" +\r\n                      \" \" +\r\n                      getSymbolFromCurrency(countryCode)}\r\n                  </Typography>\r\n                  <Typography variant=\"subtitle1\" gutterBottom>\r\n                    {ingredients?.map((item, i) => {\r\n                      if (ingredients.length == i + 1) {\r\n                        return item + \" - Not Included\";\r\n                      } else {\r\n                        return item + \" , \";\r\n                      }\r\n                    })}\r\n                  </Typography>\r\n                  <Typography variant=\"subtitle1\" gutterBottom>\r\n                    {extraValue?.map((item, i) => {\r\n                      if (extraValue.length == i + 1) {\r\n                        return item.value + \" - Included\";\r\n                      } else {\r\n                        return item.value + \" , \";\r\n                      }\r\n                    })}\r\n                  </Typography>\r\n                  {custom?.show_recommendation == 0 ||\r\n                  fetchData.length === 0 ? (\r\n                    \"\"\r\n                  ) : (\r\n                    <>\r\n                      <Typography variant=\"h6\" gutterBottom>\r\n                        {t(\"recommendation\")}\r\n                      </Typography>\r\n                      <FormGroup>{viewImages_HTMLTABLE}</FormGroup>\r\n                    </>\r\n                  )}\r\n                  <TextareaAutosize\r\n                    // aria-label=\"empty textarea\"\r\n                    className=\"my-3\"\r\n                    minRows={3}\r\n                    placeholder=\"Note\"\r\n                    style={{\r\n                      backgroundColor: custom?.cardBgColor\r\n                        ? custom.cardBgColor\r\n                        : \"#2d3134\",\r\n                      color: custom?.menusDeactiveColor\r\n                        ? custom.menusDeactiveColor\r\n                        : \"#fff\",\r\n                      fontSize: 12,\r\n                      borderColor: custom?.menusAcriveColor\r\n                        ? custom.menusAcriveColor\r\n                        : \"#ff751d\",\r\n                    }}\r\n                  />\r\n                </div>\r\n              </Card>\r\n            </Grid>\r\n          </Grid>\r\n        </Container>\r\n      </Container>\r\n      <Box\r\n        sx={{\r\n          borderRadius: \"5%\",\r\n          backgroundColor: \"light\",\r\n          position: \"sticky\",\r\n          bottom: \"0px\",\r\n        }}\r\n        className=\"bottom-0 text-center p-1\"\r\n      >\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={7}>\r\n            <Typography\r\n              variant=\"body1\"\r\n              gutterBottom\r\n              className=\"font-weight-bold text-center col-12 btn\"\r\n            >\r\n              {(parseInt(price) + sum).toFixed(2) +\r\n                \" \" +\r\n                getSymbolFromCurrency(countryCode)}\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={5}>\r\n            <Link\r\n              className=\"col-12 btn\"\r\n              style={{\r\n                textTransform: \"capitalize\",\r\n                backgroundColor: custom?.button_background_color\r\n                  ? custom.button_background_color\r\n                  : \"#ff751d\",\r\n                color: custom?.button_text_color\r\n                  ? custom.button_text_color\r\n                  : \"#f1fcfe\",\r\n                fontSize: custom?.bTextSize ? custom.bTextSize + \"rem\" : \"1rem\",\r\n              }}\r\n              to=\"\"\r\n            >\r\n              Add\r\n            </Link>\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default OrderDetails;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\First\\Main.js",["404","405","406","407","408","409","410","411","412"],"import React, { useState, useEffect } from \"react\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Container from \"@mui/material/Container\";\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport Header from \"./Header\";\r\nimport Footer from \"./Footer\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardMedia from \"@mui/material/CardMedia\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport axios from \"axios\";\r\nimport { base_url, port } from \"../../../../../Consts\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport { Link } from \"react-router-dom\";\r\nimport getSymbolFromCurrency from \"currency-symbol-map\";\r\n\r\nvar hold = 1;\r\nexport default function Main(props) {\r\n  const [loading, setLoading] = useState(true);\r\n  const { t } = useTranslation();\r\n  const branchId = atob(props.match.params.id);\r\n  const [branch, setBranch] = useState([]);\r\n  const [categories, setCategories] = useState([]);\r\n  const [subcategories, setSubCategories] = useState([]);\r\n  const [products, setProducts] = useState([]);\r\n  const [activeSubCategory, setActiveSubCategory] = useState(0);\r\n  const [themeCustomization, setThemeCustomization] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios.get(`/api/GetTempBasedOnBranch/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setThemeCustomization(res.data.fetchData?.Customization);\r\n\r\n        // console.log(res.data.fetchData[0].Customization);\r\n      }\r\n    });\r\n    axios.get(`/api/GetBranchForShow/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setBranch(res.data.data);\r\n      }\r\n    });\r\n    axios.get(`/api/GetCategories/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setCategories(res.data.fetchData);\r\n      }\r\n    });\r\n    axios.get(`/api/getSubCateBasedOnBranch/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setSubCategories(res.data.fetchData);\r\n        setActiveSubCategory(res.data.fetchData[0].sub_id);\r\n\r\n        axios\r\n          .get(\r\n            `/api/GetProductsBasedOnSubCategory/${res.data.fetchData[0]?.sub_id}`\r\n          )\r\n          .then((res) => {\r\n            if (res.data.status === 200) {\r\n              setProducts(res.data.data);\r\n            }\r\n          });\r\n        setLoading(false);\r\n      }\r\n    });\r\n  }, []);\r\n  const [changeState, setChangeState] = useState(true);\r\n  const fetchMoreData = () => {\r\n    if (hold < subcategories.length) {\r\n      axios.get(`/api/getSubCateBasedOnBranch/${branchId}`).then((res) => {\r\n        if (res.data.status === 200) {\r\n          setActiveSubCategory(res.data.fetchData[hold].sub_id);\r\n          // console.log(res.data.fetchData[hold].sub_id);\r\n\r\n          axios\r\n            .get(\r\n              `/api/GetProductsBasedOnSubCategory/${res.data.fetchData[hold].sub_id}`\r\n            )\r\n            .then((res) => {\r\n              if (res.data.status === 200) {\r\n                if (res.data.data.length === 0) {\r\n                  hold = hold + 1;\r\n                  // console.log(res.data.data);\r\n                  fetchMoreData();\r\n                } else {\r\n                  hold = hold + 1;\r\n                  setProducts(products.concat(res.data.data));\r\n                }\r\n              }\r\n            });\r\n\r\n          setSubCategories(res.data.fetchData);\r\n        }\r\n      });\r\n    } else {\r\n      setChangeState(false);\r\n    }\r\n    // console.log(hold);\r\n  };\r\n  // design start\r\n  const theme = createTheme({\r\n    palette: {\r\n      warning: {\r\n        // button background\r\n        main: themeCustomization?.button_background_color\r\n          ? themeCustomization.button_background_color\r\n          : \"#ff751d\",\r\n      },\r\n    },\r\n    typography: {\r\n      fontFamily: themeCustomization?.font\r\n        ? themeCustomization.font\r\n        : \"sans-serif\",\r\n      subtitle1: {\r\n        fontSize: themeCustomization?.product_discription_font_size\r\n          ? themeCustomization.product_discription_font_size\r\n          : 10,\r\n        color: themeCustomization?.product_discription_color\r\n          ? themeCustomization.product_discription_color\r\n          : \"#777\",\r\n      },\r\n      // price\r\n      body1: {\r\n        fontSize: themeCustomization?.price_font_size\r\n          ? themeCustomization.price_font_size\r\n          : 12,\r\n        color: themeCustomization?.price_color\r\n          ? themeCustomization.price_color\r\n          : \"#111\",\r\n      },\r\n      // product Names\r\n      button: {\r\n        fontSize: themeCustomization?.product_name_font_size\r\n          ? themeCustomization.product_name_font_size\r\n          : 12,\r\n        color: themeCustomization?.product_name_color\r\n          ? themeCustomization.product_name_color\r\n          : \"#111\",\r\n      },\r\n      // categories and sub categories\r\n      overline: {\r\n        fontSize: themeCustomization?.categories_and_sub_categoies_font_size\r\n          ? themeCustomization.categories_and_sub_categoies_font_size\r\n          : 12,\r\n        color: themeCustomization?.categories_and_sub_categoies_color\r\n          ? themeCustomization.categories_and_sub_categoies_color\r\n          : \"#ff751d\",\r\n      },\r\n      // branch Name\r\n      h6: {\r\n        fontSize: themeCustomization?.branch_name_font_size\r\n          ? themeCustomization.branch_name_font_size\r\n          : 14,\r\n        color: themeCustomization?.branch_name_color\r\n          ? themeCustomization.branch_name_color\r\n          : \"#ff751d\",\r\n      },\r\n    },\r\n    components: {\r\n      MuiButton: {\r\n        variants: [\r\n          {\r\n            // button\r\n            props: { variant: \"contained\" },\r\n            style: {\r\n              fontSize: themeCustomization?.button_text_font_size\r\n                ? themeCustomization.button_text_font_size\r\n                : 12,\r\n              color: themeCustomization?.button_text_color\r\n                ? themeCustomization.button_text_color\r\n                : \"#f1fcfe\",\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n  });\r\n  // design end\r\n\r\n  var viewShow_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div\r\n        className=\"spinner-border text-primary \"\r\n        role=\"status\"\r\n        style={{ position: \"fixed\", top: \"50%\", left: \"50%\" }}\r\n      >\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewShow_HTMLTABLE = products?.map((item, i) => {\r\n      return (\r\n        <Grid\r\n          item\r\n          xs={\r\n            themeCustomization?.number_of_products_in_each_row == 1\r\n              ? 12\r\n              : themeCustomization?.number_of_products_in_each_row == 2\r\n              ? 6\r\n              : themeCustomization?.number_of_products_in_each_row == 3\r\n              ? 4\r\n              : themeCustomization?.number_of_products_in_each_row == 4\r\n              ? 3\r\n              : themeCustomization?.number_of_products_in_each_row == 5\r\n              ? 3\r\n              : themeCustomization?.number_of_products_in_each_row == 6\r\n              ? 2\r\n              : 6\r\n          }\r\n          // sm={2} md={2}\r\n          key={i}\r\n        >\r\n          <Card\r\n            sx={{\r\n              // height: \"100%\",\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n            }}\r\n          >\r\n            <CardMedia\r\n              component=\"img\"\r\n              sx={{ height: \"100px\", objectFit: \"contain\" }}\r\n              image={`http://${base_url}:${port}/images/products/${item.image}`}\r\n              alt=\"Image\"\r\n            />\r\n            <Link\r\n              to={{\r\n                pathname: `/template-first/product/${btoa(item.id)}`,\r\n                state: { themes: themeCustomization },\r\n              }}\r\n            >\r\n              <CardContent sx={{ flexGrow: 1 }}>\r\n                <Typography variant=\"button\" display=\"block\" gutterBottom>\r\n                  {item.ProductName}\r\n                </Typography>\r\n                <Typography variant=\"subtitle1\" gutterBottom>\r\n                  {item.preparationTime}\r\n                  {\" Minutes\"}\r\n                </Typography>\r\n                <Typography variant=\"button\" gutterBottom>\r\n                  {item.price + \" \" + getSymbolFromCurrency(item.currency_code)}\r\n                </Typography>\r\n              </CardContent>\r\n            </Link>\r\n          </Card>\r\n        </Grid>\r\n      );\r\n    });\r\n  }\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <Container maxWidth=\"lg\">\r\n        <Header\r\n          title={branch[0]?.BrancheName}\r\n          subcategories={subcategories}\r\n          activeSubCategory={activeSubCategory}\r\n          setProducts={setProducts}\r\n          setActiveSubCategory={setActiveSubCategory}\r\n        />\r\n\r\n        <main>\r\n          <Grid container spacing={4} className=\"text-center\">\r\n            {viewShow_HTMLTABLE}\r\n          </Grid>\r\n        </main>\r\n        <InfiniteScroll\r\n          dataLength={products.length} //This is important field to render the next data\r\n          next={fetchMoreData}\r\n          hasMore={changeState}\r\n          loader={\r\n            <Typography\r\n              variant=\"subtitle1\"\r\n              gutterBottom\r\n              className=\"text-center pt-5\"\r\n            >\r\n              <b>{t(\"loading\")}</b>\r\n            </Typography>\r\n          }\r\n          endMessage={\r\n            <Typography\r\n              variant=\"subtitle1\"\r\n              gutterBottom\r\n              style={{ textAlign: \"center \" }}\r\n            >\r\n              <b>{t(\"yay_you_have_seen_it_all\")}</b>\r\n            </Typography>\r\n          }\r\n        ></InfiniteScroll>\r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Second\\Main.js",["413","414","415","416","417","418","419"],"import React, { useState, useEffect } from \"react\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Container from \"@mui/material/Container\";\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport Header from \"./Header\";\r\nimport Footer from \"./Footer\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardMedia from \"@mui/material/CardMedia\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport axios from \"axios\";\r\nimport { base_url, port } from \"../../../../../Consts\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport Box from \"@mui/material/Box\";\r\nimport Tabs, { tabsClasses } from \"@mui/material/Tabs\";\r\nimport Tab from \"@mui/material/Tab\";\r\nimport HorizontalScroller from \"react-horizontal-scroll-container\";\r\nimport getSymbolFromCurrency from \"currency-symbol-map\";\r\n\r\nvar hold = 1;\r\nexport default function Main(props) {\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  const [loading, setLoading] = useState(true);\r\n  const { t } = useTranslation();\r\n  const branchId = atob(props.match.params.id);\r\n  const [subcategories, setSubCategories] = useState([]);\r\n  const [products, setProducts] = useState([]);\r\n  const [activeSubCategory, setActiveSubCategory] = useState(0);\r\n  const [themeCustomization, setThemeCustomization] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios.get(`/api/GetTempBasedOnBranch/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setThemeCustomization(res.data.fetchData[0]?.Customization);\r\n        // console.log(res.data.fetchData[0].Customization);\r\n      }\r\n    });\r\n    axios.get(`/api/getSubCateBasedOnBranch/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setSubCategories(res.data.fetchData);\r\n        setActiveSubCategory(res.data.fetchData[0]?.sub_id);\r\n        setSubName(res.data.fetchData[0].SubCategoryName);\r\n\r\n        axios\r\n          .get(\r\n            `/api/GetProductsBasedOnSubCategory/${res.data.fetchData[0]?.sub_id}`\r\n          )\r\n          .then((res) => {\r\n            if (res.data.status === 200) {\r\n              setProducts(res.data.data);\r\n            }\r\n          });\r\n        setLoading(false);\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  // design start\r\n  const theme = createTheme({\r\n    palette: {\r\n      warning: {\r\n        // button background\r\n        main: themeCustomization?.button_background_color\r\n          ? themeCustomization.button_background_color\r\n          : \"#ff751d\",\r\n      },\r\n    },\r\n    typography: {\r\n      fontFamily: themeCustomization?.font\r\n        ? themeCustomization.font\r\n        : \"sans-serif\",\r\n      subtitle1: {\r\n        fontSize: themeCustomization?.product_discription_font_size\r\n          ? themeCustomization.product_discription_font_size\r\n          : 10,\r\n        color: themeCustomization?.product_discription_color\r\n          ? themeCustomization.product_discription_color\r\n          : \"#777\",\r\n      },\r\n      // price\r\n      body1: {\r\n        fontSize: themeCustomization?.price_font_size\r\n          ? themeCustomization.price_font_size\r\n          : 12,\r\n        color: themeCustomization?.price_color\r\n          ? themeCustomization.price_color\r\n          : \"#f1fcfe\",\r\n      },\r\n      // product Names\r\n      button: {\r\n        fontSize: themeCustomization?.product_name_font_size\r\n          ? themeCustomization.product_name_font_size\r\n          : 12,\r\n        color: themeCustomization?.product_name_color\r\n          ? themeCustomization.product_name_color\r\n          : \"#1f1d1f\",\r\n      },\r\n      // categories and sub categories\r\n      overline: {\r\n        fontSize: themeCustomization?.categories_and_sub_categoies_font_size\r\n          ? themeCustomization.categories_and_sub_categoies_font_size\r\n          : 12,\r\n        color: themeCustomization?.categories_and_sub_categoies_color\r\n          ? themeCustomization.categories_and_sub_categoies_color\r\n          : \"#ff751d\",\r\n      },\r\n      // branch Name\r\n      h4: {\r\n        fontSize: themeCustomization?.branch_name_font_size\r\n          ? themeCustomization.branch_name_font_size\r\n          : 28,\r\n        color: themeCustomization?.branch_name_color\r\n          ? themeCustomization.branch_name_color\r\n          : \"#aa3f32\",\r\n      },\r\n      h3: {\r\n        fontSize: themeCustomization?.branch_name_font_size\r\n          ? themeCustomization.branch_name_font_size\r\n          : 36,\r\n        color: themeCustomization?.branch_name_color\r\n          ? themeCustomization.branch_name_color\r\n          : \"#1f1d1f\",\r\n      },\r\n    },\r\n    components: {\r\n      MuiButton: {\r\n        variants: [\r\n          {\r\n            // button\r\n            props: { variant: \"contained\" },\r\n            style: {\r\n              fontSize: themeCustomization?.button_text_font_size\r\n                ? themeCustomization.button_text_font_size\r\n                : 12,\r\n              color: themeCustomization?.button_text_color\r\n                ? themeCustomization.button_text_color\r\n                : \"#f1fcfe\",\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n  });\r\n  // design end\r\n  let [subName, setSubName] = useState(\"\");\r\n  const filterProducts = (subCateID, name) => {\r\n    axios.get(`/api/GetProductsBasedOnSubCategory/${subCateID}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        // console.log(res.data.data);\r\n        setProducts(res.data.data);\r\n      }\r\n    });\r\n    setSubName(name);\r\n    setActiveSubCategory(subCateID);\r\n  };\r\n  var viewShow_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div\r\n        className=\"spinner-border text-primary \"\r\n        role=\"status\"\r\n        style={{ position: \"fixed\", top: \"50%\", left: \"50%\" }}\r\n      >\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewShow_HTMLTABLE = products?.map((item, i) => {\r\n      return (\r\n        <Grid\r\n          item\r\n          xs={12}\r\n          sm={12}\r\n          md={12}\r\n          key={i}\r\n          sx={{ height: \"500px\" }}\r\n          className=\"center\"\r\n        >\r\n          <Card\r\n            sx={{\r\n              width: \"300px\",\r\n              margin: \"30px\",\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n            }}\r\n          >\r\n            <CardMedia\r\n              component=\"img\"\r\n              sx={{ height: \"300px\", objectFit: \"contain\" }}\r\n              image={`http://${base_url}:${port}/images/products/${item.image}`}\r\n              alt=\"Image\"\r\n            />\r\n            <Link\r\n              to={{\r\n                pathname: `/second-template/product/${btoa(item.id)}`,\r\n                state: { themes: themeCustomization },\r\n              }}\r\n            >\r\n              <CardContent sx={{ flexGrow: 1 }} className=\"text-center\">\r\n                <Typography\r\n                  variant=\"button\"\r\n                  style={{ textTransform: \"capitalize\" }}\r\n                >\r\n                  {item.ProductName}\r\n                </Typography>\r\n                <Typography variant=\"subtitle1\" gutterBottom>\r\n                  {item.Description}\r\n                </Typography>\r\n                <Typography variant=\"h4\" gutterBottom>\r\n                  {item.price + \" \" + getSymbolFromCurrency(item.currency_code)}\r\n                </Typography>\r\n              </CardContent>\r\n            </Link>\r\n          </Card>\r\n        </Grid>\r\n      );\r\n    });\r\n  }\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <Container maxWidth=\"lg\">\r\n        <Typography\r\n          component=\"h2\"\r\n          variant=\"h3\"\r\n          align=\"left\"\r\n          style={{\r\n            marginLeft: 200,\r\n            paddingBottom: \"2px\",\r\n            marginBottom: \"10px\",\r\n            borderBottomStyle: \"solid\",\r\n            borderottomWidth: \"3.1px\",\r\n            width: \"fit-content\",\r\n            borderColor: \"#33cd6b\",\r\n          }}\r\n          noWrap\r\n          sx={{ flex: 1 }}\r\n        >\r\n          {subName}\r\n        </Typography>\r\n\r\n        <Card>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={2}>\r\n              <Box\r\n                sx={{\r\n                  flexGrow: 1,\r\n                  bgcolor: \"background.paper\",\r\n                  display: \"flex\",\r\n                  height: 500,\r\n                }}\r\n              >\r\n                <Tabs\r\n                  orientation=\"vertical\"\r\n                  value={value}\r\n                  onChange={handleChange}\r\n                  variant=\"scrollable\"\r\n                  scrollButtons\r\n                  aria-label=\"Vertical tabs example\"\r\n                  TabIndicatorProps={{\r\n                    style: {\r\n                      display: \"none\",\r\n                    },\r\n                  }}\r\n                  sx={{\r\n                    [`& .${tabsClasses.scrollButtons}`]: {\r\n                      \"&.Mui-disabled\": { opacity: 0.3 },\r\n                    },\r\n                  }}\r\n                >\r\n                  {subcategories?.map((section, i) => (\r\n                    <Tab\r\n                      className=\"mb-2\"\r\n                      onClick={() =>\r\n                        filterProducts(section.sub_id, section.SubCategoryName)\r\n                      }\r\n                      style={\r\n                        activeSubCategory == section.sub_id\r\n                          ? {\r\n                              cursor: \"pointer\",\r\n                              background: \"#33cd6b\",\r\n                              margin: \"2px\",\r\n                              padding: \"5px\",\r\n                              border: \"1px solid\",\r\n                              textAlign: \"center\",\r\n                              borderRadius: \"10px\",\r\n                              borderColor: \"#33cd6b\",\r\n                            }\r\n                          : {\r\n                              cursor: \"pointer\",\r\n                              margin: \"2px\",\r\n                              padding: \"5px\",\r\n                              textAlign: \"center\",\r\n                              borderRadius: \"10px\",\r\n                            }\r\n                      }\r\n                      icon={\r\n                        <img\r\n                          style={{\r\n                            height: \"50px\",\r\n                            width: \"50px\",\r\n                            objectFit: \"contain\",\r\n                          }}\r\n                          src={`http://${base_url}:${port}/images/sub_catagories/${section.SubCategoryIcon}`}\r\n                        />\r\n                      }\r\n                      label={\r\n                        <Typography\r\n                          style={\r\n                            activeSubCategory == section.sub_id\r\n                              ? {\r\n                                  color: \"white\",\r\n                                  textTransform: \"capitalize\",\r\n                                }\r\n                              : {\r\n                                  color: \"black\",\r\n                                  textTransform: \"capitalize\",\r\n                                }\r\n                          }\r\n                        >\r\n                          {section.SubCategoryName}\r\n                        </Typography>\r\n                      }\r\n                    />\r\n                  ))}\r\n                </Tabs>\r\n              </Box>\r\n            </Grid>\r\n            <Grid item xs={10}>\r\n              <HorizontalScroller>{viewShow_HTMLTABLE}</HorizontalScroller>\r\n            </Grid>\r\n          </Grid>\r\n        </Card>\r\n      </Container>\r\n      {/* <Footer /> */}\r\n    </ThemeProvider>\r\n  );\r\n}\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\index.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\Footer.js",["420","421","422","423","424"],"import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Container from \"@mui/material/Container\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport getSymbolFromCurrency from \"currency-symbol-map\";\r\n\r\nfunction Footer(props) {\r\n  const { title, url, theme, stock, cart, deliveryFees } = props;\r\n  let [sum, setSum] = useState(0);\r\n\r\n  useEffect(() => {\r\n    // setSum(0)\r\n    let count = 0;\r\n    cart.map((item) => {\r\n      count += item.price * item.qty;\r\n    });\r\n    setSum(count);\r\n  }, [cart]);\r\n  return (\r\n    <Box\r\n      component=\"footer\"\r\n      style={{ position: \"fixed\", width: \"100%\" }}\r\n      sx={{\r\n        bgcolor: theme?.cardBgColor ? theme.cardBgColor : \"#2d3134\",\r\n        position: \"sticky\",\r\n        bottom: \"0px\",\r\n      }}\r\n      className=\"bottom-0 py-1\"\r\n    >\r\n      <Grid container spacing={2} className=\"text-center\">\r\n        <Grid item xs={4}>\r\n          <Typography variant=\"subtitle1\">\r\n            Grand Total\r\n            <p>\r\n              {sum == 0\r\n                ? \"\"\r\n                : sum.toFixed(2) +\r\n                  \"  \" +\r\n                  getSymbolFromCurrency(cart[0]?.currency_code)}\r\n            </p>\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n          <Typography variant=\"subtitle1\">\r\n            Delivery Fee\r\n            <p>\r\n              {parseInt(deliveryFees).toFixed(2) +\r\n                \"  \" +\r\n                getSymbolFromCurrency(cart[0]?.currency_code)}\r\n            </p>\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item xs={5}>\r\n          {stock == \"No Stock\" || stock == 0 ? (\r\n            <Link\r\n              className=\"col-12 btn disabled \"\r\n              style={{\r\n                textTransform: \"capitalize\",\r\n                backgroundColor: theme?.button_background_color\r\n                  ? theme.button_background_color\r\n                  : \"#ff751d\",\r\n                color: theme?.button_text_color\r\n                  ? theme.button_text_color\r\n                  : \"#f1fcfe\",\r\n                fontSize: theme?.bTextSize ? theme.bTextSize + \"rem\" : \"1rem\",\r\n              }}\r\n              to={url}\r\n            >\r\n              {title}\r\n            </Link>\r\n          ) : (\r\n            <Link\r\n              className=\"col-12 btn \"\r\n              style={{\r\n                textTransform: \"capitalize\",\r\n                backgroundColor: theme?.button_background_color\r\n                  ? theme.button_background_color\r\n                  : \"#ff751d\",\r\n                color: theme?.button_text_color\r\n                  ? theme.button_text_color\r\n                  : \"#f1fcfe\",\r\n                fontSize: theme?.bTextSize ? theme.bTextSize + \"rem\" : \"1rem\",\r\n              }}\r\n              to={url}\r\n            >\r\n              {title}\r\n            </Link>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n}\r\n\r\nFooter.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Footer;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\Header.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Products\\Extra.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Products\\Ingredients.js",["425","426","427"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport CustomAlert from \"../CustomAlert\";\r\n\r\nconst Ingredients = (props) => {\r\n  // validation start\r\n\r\n  const validationSchema = () => {\r\n    return Yup.object().shape({\r\n      name: Yup.string().required(\"Name is required\"),\r\n    });\r\n  };\r\n  // validation end\r\n\r\n  // for localization\r\n  const { t } = useTranslation();\r\n  // insert start\r\n  const [modalCentered, setModalCentered] = useState(false);\r\n  const [alert, setAlert] = useState({\r\n    open: false,\r\n    severity: \"success\",\r\n    message: \"\",\r\n  });\r\n  const setAlerts = (open, severity, message) => {\r\n    setAlert({\r\n      open: open,\r\n      severity: severity,\r\n      message: message,\r\n    });\r\n  };\r\n  const save = (e) => {\r\n    e.preventDefault();\r\n    if (form.length != 0) {\r\n      if (prevIsValid()) {\r\n        const formData = new FormData();\r\n        formData.append(\"form\", JSON.stringify(form));\r\n        axios.post(\"/api/InsertIngredient\", formData).then((res) => {\r\n          if (res.data.status === 200) {\r\n            setCheck(!check);\r\n            setForm([\r\n              {\r\n                name: \"\",\r\n\r\n                errors: {\r\n                  name: null,\r\n                },\r\n              },\r\n            ]);\r\n            setModalCentered(false);\r\n            console.log(res.data.duplicate_array.length);\r\n            res.data.duplicate_array.length == 0\r\n              ? setAlerts(true, \"success\", res.data.message)\r\n              : setAlerts(\r\n                  true,\r\n                  \"warning\",\r\n                  \"Duplicate Entry:\" + res.data.duplicate_array\r\n                );\r\n          }\r\n        });\r\n      }\r\n    } else {\r\n      setAlerts(true, \"error\", \"Please add a name.\");\r\n    }\r\n  };\r\n  // insert end\r\n  // edit Attribute start\r\n  const [editmodalCentered, setEditModalCentered] = useState(false);\r\n  const [edit, setEdit] = useState([]);\r\n\r\n  // fetch\r\n  const fetch = (e, id) => {\r\n    e.preventDefault();\r\n    axios.get(`/api/EditIngredient/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setEdit(res.data.item);\r\n        setEditModalCentered(true);\r\n      } else if (res.data.status === 404) {\r\n        setAlerts(true, \"error\", res.data.message);\r\n      }\r\n    });\r\n  };\r\n  // update\r\n  const update = (data) => {\r\n    axios.post(\"/api/UpdateIngredient\", data).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setCheck(!check);\r\n        setEditModalCentered(false);\r\n        setAlerts(true, \"success\", res.data.message);\r\n      } else if (res.data.status === 404) {\r\n        setAlerts(true, \"error\", res.data.message);\r\n      }\r\n    });\r\n  };\r\n  // edit end\r\n\r\n  // delete Start\r\n  const deleteIngredient = (e, id) => {\r\n    e.preventDefault();\r\n    swal({\r\n      title: \"Are you sure?\",\r\n      text: \"Once deleted, you will not be able to recover this imaginary file!\",\r\n      icon: \"warning\",\r\n      buttons: [t(\"cancel\"), t(\"confirm\")],\r\n      dangerMode: true,\r\n    }).then((willDelete) => {\r\n      if (willDelete) {\r\n        axios.delete(`/api/DeleteIngredient/${id}`).then((res) => {\r\n          if (res.data.status === 200) {\r\n            setAlerts(true, \"success\", res.data.message);\r\n\r\n            setCheck(!check);\r\n          } else if (res.data.status === 404) {\r\n            setAlerts(true, \"error\", res.data.message);\r\n          }\r\n        });\r\n      } else {\r\n        setAlerts(true, \"info\", \"Your Data is safe now!\");\r\n      }\r\n    });\r\n  };\r\n  // delete End\r\n\r\n  //retriving data using laravel API for show\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [check, setCheck] = useState(true);\r\n  useEffect(() => {\r\n    axios.post(`/api/GetIngredient`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        // console.log(res.data.fetchData);\r\n        setFetchData(res.data.fetchData);\r\n      }\r\n      setLoading(false);\r\n    });\r\n  }, [check]);\r\n\r\n  const [form, setForm] = useState([\r\n    {\r\n      name: \"\",\r\n      errors: {\r\n        name: null,\r\n      },\r\n    },\r\n  ]);\r\n\r\n  const prevIsValid = () => {\r\n    if (form.length === 0) {\r\n      return true;\r\n    }\r\n\r\n    const someEmpty = form.some((item) => item.name === \"\");\r\n\r\n    if (someEmpty) {\r\n      form.map((item, index) => {\r\n        const allPrev = [...form];\r\n        // console.log();\r\n        if (form[index].name === \"\") {\r\n          allPrev[index].errors.name = \"Name for ingerdient is required\";\r\n        }\r\n        //  if (allPrev.some((val) => val.name == form[index].name)) {\r\n        //   allPrev[index].errors.name = \"Duplicate Entry\";\r\n        // }\r\n        setForm(allPrev);\r\n      });\r\n    }\r\n\r\n    return !someEmpty;\r\n  };\r\n\r\n  const handleAddLink = (e) => {\r\n    e.preventDefault();\r\n    const inputState = {\r\n      name: \"\",\r\n      errors: {\r\n        name: null,\r\n      },\r\n    };\r\n\r\n    if (prevIsValid()) {\r\n      setForm((prev) => [...prev, inputState]);\r\n    }\r\n  };\r\n\r\n  const onChange = (index, event) => {\r\n    event.preventDefault();\r\n    event.persist();\r\n\r\n    setForm((prev) => {\r\n      return prev.map((item, i) => {\r\n        if (i !== index) {\r\n          return item;\r\n        }\r\n\r\n        return {\r\n          ...item,\r\n          [event.target.name]: event.target.value,\r\n\r\n          errors: {\r\n            ...item.errors,\r\n            [event.target.name]:\r\n              event.target.value.length > 0\r\n                ? null\r\n                : [event.target.name] + \" Is required\",\r\n          },\r\n        };\r\n      });\r\n    });\r\n  };\r\n\r\n  const handleRemoveField = (e, index) => {\r\n    e.preventDefault();\r\n\r\n    setForm((prev) => prev.filter((item) => item !== prev[index]));\r\n  };\r\n\r\n  var viewProducts_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"spinner-border text-primary \" role=\"status\">\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewProducts_HTMLTABLE = fetchData.map((item, i) => {\r\n      return (\r\n        <tr key={item.id}>\r\n          <td>{i + 1}</td>\r\n\r\n          <td> {item.name}</td>\r\n          <td>\r\n            {/* <Link to={`add-option/${item.id}`} className=\"btn btn-outline-danger btn-sm\">{t('options')}</Link>&nbsp;&nbsp;&nbsp; */}\r\n            <button\r\n              type=\"button\"\r\n              onClick={(e) => fetch(e, item.id)}\r\n              className=\"btn btn-outline-danger btn-sm\"\r\n            >\r\n              {t(\"edit\")}\r\n            </button>\r\n            &nbsp;&nbsp;&nbsp;\r\n            <button\r\n              type=\"button\"\r\n              onClick={(e) => deleteIngredient(e, item.id)}\r\n              className=\"btn btn-outline-warning btn-sm\"\r\n            >\r\n              {t(\"delete\")}\r\n            </button>\r\n          </td>\r\n        </tr>\r\n      );\r\n    });\r\n  }\r\n  return (\r\n    <Fragment>\r\n      {alert.open ? (\r\n        <CustomAlert\r\n          open={alert.open}\r\n          severity={alert.severity}\r\n          message={alert.message}\r\n          setAlert={setAlert}\r\n        />\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      {/* insert */}\r\n      <Modal className=\"fade\" show={modalCentered}>\r\n        <Modal.Header>\r\n          <Modal.Title>{t(\"add_ingredient\")}</Modal.Title>\r\n          <Button\r\n            onClick={() => setModalCentered(false)}\r\n            variant=\"\"\r\n            className=\"close\"\r\n          >\r\n            <span>&times;</span>\r\n          </Button>\r\n        </Modal.Header>\r\n        <form onSubmit={(e) => save(e)}>\r\n          <Modal.Body>\r\n            {form.map((item, index) => (\r\n              <div className=\"row mt-3\" key={`item-${index}`}>\r\n                <div className=\"col-10\">\r\n                  <input\r\n                    type=\"text\"\r\n                    className={\r\n                      item.errors.name\r\n                        ? \"form-control  is-invalid\"\r\n                        : \"form-control\"\r\n                    }\r\n                    name=\"name\"\r\n                    placeholder=\"Ingredient Name...\"\r\n                    value={item.name}\r\n                    onChange={(e) => onChange(index, e)}\r\n                  />\r\n\r\n                  {item.errors.name && (\r\n                    <div className=\"invalid-feedback\">{item.errors.name}</div>\r\n                  )}\r\n                </div>\r\n\r\n                <div className=\"col-2\">\r\n                  <IconButton onClick={(e) => handleRemoveField(e, index)}>\r\n                    <DeleteIcon fontSize=\"small\" sx={{ color: \"red\" }} />\r\n                  </IconButton>\r\n                </div>\r\n              </div>\r\n            ))}\r\n\r\n            <button className=\"btn btn-primary mt-2\" onClick={handleAddLink}>\r\n              {t(\"add\")}\r\n            </button>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button\r\n              onClick={() => setModalCentered(false)}\r\n              variant=\"danger light\"\r\n            >\r\n              {t(\"close\")}\r\n            </Button>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              {t(\"save\")}{\" \"}\r\n            </Button>\r\n          </Modal.Footer>\r\n        </form>\r\n\r\n        {/* </Form>\r\n          )}\r\n        </Formik> */}\r\n      </Modal>\r\n      {/* Edit Modal */}\r\n      <Modal className=\"fade\" show={editmodalCentered}>\r\n        <Modal.Header>\r\n          <Modal.Title>{t(\"edit_ingredient\")} </Modal.Title>\r\n          <Button\r\n            onClick={() => setEditModalCentered(false)}\r\n            variant=\"\"\r\n            className=\"close\"\r\n          >\r\n            <span>&times;</span>\r\n          </Button>\r\n        </Modal.Header>\r\n        <Formik\r\n          initialValues={edit}\r\n          validationSchema={validationSchema}\r\n          onSubmit={update}\r\n        >\r\n          {({ errors, status, touched }) => (\r\n            <Form>\r\n              <Modal.Body>\r\n                <div className=\"form-group\">\r\n                  <label> {t(\"name\")}</label>\r\n                  <Field\r\n                    name=\"name\"\r\n                    type=\"text\"\r\n                    className={\r\n                      \"form-control\" +\r\n                      (errors.name && touched.name ? \" is-invalid\" : \"\")\r\n                    }\r\n                    placeholder=\"Name....\"\r\n                  />\r\n                  <ErrorMessage\r\n                    name=\"name\"\r\n                    component=\"div\"\r\n                    className=\"invalid-feedback\"\r\n                  />\r\n                </div>\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                <Button\r\n                  onClick={() => setEditModalCentered(false)}\r\n                  variant=\"danger light\"\r\n                >\r\n                  {t(\"close\")}\r\n                </Button>\r\n                <Button variant=\"primary\" type=\"submit\">\r\n                  {t(\"update\")}{\" \"}\r\n                </Button>\r\n              </Modal.Footer>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </Modal>\r\n      <div className=\"row\">\r\n        <div className=\"col-xl-12 col-xxl-12 col-lg-12 col-sm-12\">\r\n          <div className=\"card\">\r\n            <div className=\"card-header border-0\">\r\n              <div>\r\n                <h4 className=\"card-title mb-2\">{t(\"ingredients\")}</h4>\r\n              </div>\r\n              <div className=\"dropdown\">\r\n                <Button\r\n                  variant=\"primary\"\r\n                  type=\"button\"\r\n                  className=\"mb-2 mr-2\"\r\n                  onClick={() => setModalCentered(true)}\r\n                >\r\n                  {t(\"add_ingredient\")}\r\n                </Button>\r\n              </div>\r\n            </div>\r\n            <div className=\"card-body p-0\">\r\n              <div className=\"table-responsive \">\r\n                <table className=\"table text-center\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>{t(\"number\")}</th>\r\n                      <th>{t(\"name\")}</th>\r\n                      <th>{t(\"actions\")}</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>{viewProducts_HTMLTABLE}</tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\nexport default Ingredients;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\utils\\index.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\pages\\Error404.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Attributes\\Attributes.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Variants\\Gallary.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Orders\\Basket.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Orders\\Order.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Branches\\Show.js",["428","429","430","431"],"import React, { Fragment, useEffect, useState } from \"react\";\r\nimport { Tab, Nav } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\n\r\nimport {\r\n  Link,\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  useRouteMatch,\r\n} from \"react-router-dom\";\r\n\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport {\r\n  CCloseButton,\r\n  COffcanvas,\r\n  COffcanvasBody,\r\n  COffcanvasHeader,\r\n  COffcanvasTitle,\r\n} from \"@coreui/react\";\r\nimport Customization from \"../Design/Templates/Dark/Customization\";\r\nimport SubCategory from \"../Categories/SubCategory\";\r\nimport Category from \"../Categories/Category\";\r\nimport Inventory from \"../Inventories/Inventory\";\r\nimport PrivateRoute from \"../PrivateRoute\";\r\nimport ServiceArea from \"../Services/ServiceArea\";\r\nimport Tables from \"./Tables\";\r\nimport ProductShow from \"../Products/Show\";\r\nimport DesignShow from \"../Design/Show\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport RefreshIcon from \"@mui/icons-material/Refresh\";\r\nimport Shared from \"../Categories/Shared\";\r\nconst Show = (props) => {\r\n  const { t } = useTranslation();\r\n  const id = props.history.location.state.id;\r\n  const BrancheName = props.history.location.state.BrancheName;\r\n  const { path, url } = useRouteMatch();\r\n  const [template, setTemplate] = useState(\"\");\r\n  const [check, setCheck] = useState(true);\r\n\r\n  useEffect(() => {\r\n    axios.get(`/api/GetTempBasedOnBranch/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setTemplate(res.data.fetchData[0]);\r\n      }\r\n    });\r\n  }, [check]);\r\n  const tabData = [\r\n    {\r\n      name: t(\"categories\"),\r\n      url: {\r\n        pathname: `${url}`,\r\n        state: { id: id, BrancheName: BrancheName },\r\n      },\r\n    },\r\n    {\r\n      name: t(\"products\"),\r\n      url: {\r\n        pathname: `${url}/products`,\r\n        state: { id: id, BrancheName: BrancheName },\r\n      },\r\n    },\r\n    {\r\n      name: t(\"design\"),\r\n      url: {\r\n        pathname: `${url}/design`,\r\n        state: { id: id, BrancheName: BrancheName },\r\n      },\r\n    },\r\n    {\r\n      name: t(\"tables\"),\r\n      url: {\r\n        pathname: `${url}/tables`,\r\n        state: { id: id, BrancheName: BrancheName },\r\n      },\r\n    },\r\n    // {\r\n    //   name: t(\"inventory\"),\r\n    //   url: {\r\n    //     pathname: `${url}/inventory`,\r\n    //     state: { id: id, BrancheName: BrancheName },\r\n    //   },\r\n    // },\r\n    // {\r\n    //   name: t(\"units\"),\r\n    //   url: {\r\n    //     pathname: `${url}/unit`,\r\n    //     state: { id: id, BrancheName: BrancheName },\r\n    //   },\r\n    // },\r\n    {\r\n      name: t(\"services_areas\"),\r\n      url: {\r\n        pathname: `${url}/services-areas`,\r\n        state: { id: id, BrancheName: BrancheName },\r\n      },\r\n    },\r\n    {\r\n      name: t(\"preview\"),\r\n      url: {\r\n        pathname: ``,\r\n      },\r\n    },\r\n    // {\r\n    //   name: t(\"public_link\"),\r\n    //   url: {\r\n    //     pathname: `/${template.URL}/${btoa(id)}`,\r\n    //   },\r\n    // },\r\n  ];\r\n  // to display public link inside phone\r\n  const [visible, setVisible] = useState(false);\r\n\r\n  const phone = (e) => {\r\n    e.preventDefault();\r\n    setVisible(true);\r\n  };\r\n  const reload = (e) => {\r\n    e.preventDefault();\r\n    setCheck(!check);\r\n  };\r\n  const geturl = document.location.href.split(\"/\");\r\n  return (\r\n    <Fragment>\r\n      <Router>\r\n        <div className=\"row\">\r\n          <div className=\"col-xl-12 col-xxl-12\">\r\n            <div className=\"row\">\r\n              <div className=\"col-xl-12\">\r\n                <div className=\"card\">\r\n                  <div className=\"card-header border-0 pb-2 d-lg-flex d-block\">\r\n                    <div>\r\n                      <h4 className=\"card-title mb-2\">{BrancheName}</h4>\r\n                    </div>\r\n                    <div className=\"card-action card-tabs mt-3 mt-3 mt-lg-0\">\r\n                      <Tab.Container\r\n                        defaultActiveKey={\r\n                          geturl[5] != \"sub-category\" &&\r\n                          geturl[5] != \"cat-shared\"\r\n                            ? geturl[5]\r\n                              ? geturl[5]\r\n                              : tabData[0].name.toLowerCase()\r\n                            : tabData[0].name.toLowerCase()\r\n                        }\r\n                      >\r\n                        <Nav as=\"ul\" className=\"nav-tabs\">\r\n                          {tabData.map((data, i) =>\r\n                            data.name === t(\"preview\") ? (\r\n                              <Nav.Item as=\"li\" key={i}>\r\n                                <Link to={data.url} onClick={(e) => phone(e)}>\r\n                                  <Nav.Link eventKey={data.name.toLowerCase()}>\r\n                                    {data.name}\r\n                                  </Nav.Link>\r\n                                </Link>\r\n                              </Nav.Item>\r\n                            ) : (\r\n                              <Nav.Item as=\"li\" key={i}>\r\n                                <Link\r\n                                  to={data.url}\r\n                                  // target={\r\n                                  //   data.name === t(\"public_link\")\r\n                                  //     ? \"_blank\"\r\n                                  //     : \"\"\r\n                                  // }\r\n                                >\r\n                                  <Nav.Link eventKey={data.name.toLowerCase()}>\r\n                                    {data.name}\r\n                                  </Nav.Link>\r\n                                </Link>\r\n                              </Nav.Item>\r\n                            )\r\n                          )}\r\n                        </Nav>\r\n                      </Tab.Container>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <COffcanvas\r\n          placement=\"end\"\r\n          className=\"fade bd-example-modal-lg\"\r\n          scroll\r\n          visible={visible}\r\n          onHide={() => setVisible(false)}\r\n        >\r\n          <COffcanvasHeader>\r\n            <COffcanvasTitle>\r\n              {t(\"display_mobile\")}\r\n              <br></br>\r\n              <small>First, reload the settings to device.</small>\r\n            </COffcanvasTitle>\r\n            <CCloseButton\r\n              className=\"text-reset\"\r\n              onClick={() => setVisible(false)}\r\n            />\r\n          </COffcanvasHeader>\r\n          <COffcanvasBody>\r\n            <div className=\"d-flex justify-content-between\">\r\n              <IconButton onClick={(e) => reload(e)}>\r\n                <RefreshIcon />\r\n              </IconButton>\r\n              <Link\r\n                to={`/filterSelection`}\r\n                // to={`/${template.URL}/${btoa(id)}`}\r\n                target=\"_blank\"\r\n              >\r\n                {t(\"public_link\")}\r\n              </Link>\r\n            </div>\r\n\r\n            <div className=\"wrapper\">\r\n              <div className=\"iphone\">\r\n                <div className=\"power\"></div>\r\n                <div className=\"lock\"></div>\r\n                <div className=\"volume up\"></div>\r\n                <div className=\"volume down\"></div>\r\n                <div className=\"camera\"></div>\r\n                <div className=\"speaker\"></div>\r\n                <div className=\"screen\">\r\n                  <iframe\r\n                    src=\"/filterSelection\"\r\n                    // src={`/${template.URL}/${btoa(id)}`}\r\n                    key={check}\r\n                    height=\"100%\"\r\n                    width=\"100%\"\r\n                    title=\"Devices\"\r\n                  ></iframe>\r\n                </div>\r\n                <div className=\"button\">\r\n                  <div className=\"square\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </COffcanvasBody>\r\n        </COffcanvas>\r\n\r\n        <Switch>\r\n          <PrivateRoute exact path={`${path}`} component={Category} />\r\n          <PrivateRoute path={`${path}/sub-category`} component={SubCategory} />\r\n          <PrivateRoute path={`${path}/cat-shared`} component={Shared} />\r\n\r\n          {/* <PrivateRoute path={`${path}/category`} component={Category} /> */}\r\n          <PrivateRoute path={`${path}/design`} component={DesignShow} />\r\n          <PrivateRoute path={`${path}/products`} component={ProductShow} />\r\n\r\n          <PrivateRoute\r\n            path={`${path}/services-areas`}\r\n            component={ServiceArea}\r\n          />\r\n          <PrivateRoute path={`${path}/inventory`} component={Inventory} />\r\n          <PrivateRoute path={`${path}/tables`} component={Tables} />\r\n          <PrivateRoute\r\n            path={`/dark-template-customization`}\r\n            component={Customization}\r\n          />\r\n        </Switch>\r\n      </Router>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Show;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Branches\\Branches.js",["432"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport QRCode from \"qrcode.react\";\r\nimport { CBreadcrumb, CBreadcrumbItem } from \"@coreui/react\";\r\n// import ReactWhatsapp from 'react-whatsapp';\r\n// import FloatingWhatsApp from 'react-floating-whatsapp'\r\nimport ViewComfyIcon from \"@mui/icons-material/ViewComfy\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport TableRowsIcon from \"@mui/icons-material/TableRows\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport CustomAlert from \"../CustomAlert\";\r\n\r\nconst Branches = () => {\r\n  // localization\r\n\r\n  const { t } = useTranslation();\r\n  const initialValues = {\r\n    BrancheName: \"\",\r\n    currencyID: \"\",\r\n  };\r\n  const validationSchema = () => {\r\n    return Yup.object().shape({\r\n      BrancheName: Yup.string().required(\"Branch Name is required\"),\r\n      currencyID: Yup.string().required(\"Currency is required\"),\r\n    });\r\n  };\r\n  // insert start\r\n  const [modalCentered, setModalCentered] = useState(false);\r\n  const history = useHistory();\r\n  const [alert, setAlert] = useState({\r\n    open: false,\r\n    severity: \"success\",\r\n    message: \"\",\r\n  });\r\n  const setAlerts = (open, severity, message) => {\r\n    setAlert({\r\n      open: open,\r\n      severity: severity,\r\n      message: message,\r\n    });\r\n  };\r\n  const saveBranch = (data) => {\r\n    // console.log(JSON.stringify(data, null, 2));\r\n    if (atob(localStorage.getItem(\"auth_company_id\")) != \"null\") {\r\n      const checkBranch = branchdata.every((item) => {\r\n        return item.BrancheName !== data.BrancheName;\r\n      });\r\n      if (checkBranch) {\r\n        axios.post(\"/api/InsertBranches\", data).then((res) => {\r\n          if (res.data.status === 200) {\r\n            setModalCentered(false);\r\n            setCheck(!check);\r\n            setAlerts(true, \"success\", res.data.message);\r\n          }\r\n        });\r\n      } else {\r\n        setAlerts(\r\n          true,\r\n          \"warning\",\r\n          \"The name already exists, please try another name.\"\r\n        );\r\n      }\r\n    } else {\r\n      swal(\r\n        \"warning\",\r\n        \"Please add the company first, then the branches.\",\r\n        \"warning\"\r\n      ).then((value) => {\r\n        if (value) {\r\n          history.push(\"/companies\");\r\n        }\r\n      });\r\n    }\r\n  };\r\n  // insert end\r\n\r\n  // edit start\r\n  const [editmodalCentered, setEditModalCentered] = useState(false);\r\n\r\n  const [editBranchstate, setEditBranchstate] = useState([]);\r\n  const editBranch = (e, id) => {\r\n    e.preventDefault();\r\n    axios.get(`/api/EditBranches/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setEditBranchstate(res.data.branch);\r\n        setEditModalCentered(true);\r\n      } else if (res.data.status === 404) {\r\n        setAlerts(true, \"error\", res.data.message);\r\n      }\r\n    });\r\n  };\r\n  const updateBranch = (data) => {\r\n    // const checkBranch = branchdata.every((item) => {\r\n    //   return item.BrancheName !== data.BrancheName;\r\n    // });\r\n    // console.log(checkBranch);\r\n    // if (checkBranch) {\r\n    axios.post(\"/api/UpdateBranches\", data).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setEditModalCentered(false);\r\n        setAlerts(true, \"success\", res.data.message);\r\n        setEditBranchstate([]);\r\n        setCheck(!check);\r\n      }\r\n    });\r\n    // } else {\r\n    //   swal(\r\n    //     \"warning\",\r\n    //     \"The name already exists, please try another name.\",\r\n    //     \"warning\"\r\n    //   );\r\n    // }\r\n  };\r\n  // edit end\r\n\r\n  // delete start\r\n  const deleteBranch = (e, id) => {\r\n    e.preventDefault();\r\n    swal({\r\n      title: \"Are you sure?\",\r\n      text: \"Once deleted, you will not be able to recover this imaginary file!\",\r\n      icon: \"warning\",\r\n      buttons: [t(\"cancel\"), t(\"confirm\")],\r\n      dangerMode: true,\r\n    }).then((willDelete) => {\r\n      if (willDelete) {\r\n        axios.delete(`/api/DeleteBranches/${id}`).then((res) => {\r\n          if (res.data.status === 200) {\r\n            setAlerts(true, \"success\", res.data.message);\r\n          } else if (res.data.status === 404) {\r\n            setAlerts(true, \"error\", res.data.message);\r\n          }\r\n          setCheck(!check);\r\n        });\r\n      } else {\r\n        setAlerts(true, \"info\", \"Your Data is safe now!\");\r\n      }\r\n    });\r\n  };\r\n  // delete end\r\n  //for retriving data using laravel API\r\n  const [branchdata, setBranchdata] = useState([]);\r\n  const [currency, setCurrency] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [check, setCheck] = useState(true);\r\n\r\n  // for mobile\r\n  useEffect(() => {\r\n    axios.get(\"/api/GetBranches\").then((res) => {\r\n      if (res.data.status === 200) {\r\n        setBranchdata(res.data.branches);\r\n      }\r\n      setLoading(false);\r\n    });\r\n    axios.get(\"/api/GetCurrencies\").then((res) => {\r\n      if (res.data.status === 200) {\r\n        setCurrency(res.data.fetchData);\r\n      }\r\n    });\r\n  }, [check]);\r\n  // for download QRCode\r\n\r\n  const downloadQRCode = (e, id) => {\r\n    e.preventDefault();\r\n    // console.log(id)\r\n\r\n    const qrCodeURL = document\r\n      .getElementById(id)\r\n      .toDataURL(\"image/png\")\r\n      .replace(\"image/png\", \"image/octet-stream\");\r\n    let aEl = document.createElement(\"a\");\r\n    aEl.href = qrCodeURL;\r\n    aEl.download = \"Branch_QR_Code.png\";\r\n    document.body.appendChild(aEl);\r\n    aEl.click();\r\n    document.body.removeChild(aEl);\r\n  };\r\n  const [layout, setLayout] = useState(\r\n    JSON.parse(\r\n      localStorage.getItem(\"layoutBranch\")\r\n        ? localStorage.getItem(\"layoutBranch\")\r\n        : true\r\n    )\r\n  );\r\n  const changeLayout = () => {\r\n    setLayout(!layout);\r\n    localStorage.setItem(\"layoutBranch\", !layout);\r\n  };\r\n\r\n  var viewBranches_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"spinner-border text-primary \" role=\"status\">\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewBranches_HTMLTABLE = branchdata.map((item, i) => {\r\n      return (\r\n        <div className=\"col-xl-4 col-lg-6 col-sm-6\" key={item.id}>\r\n          <div className=\"card overflow-hidden\">\r\n            <div className=\"card-body\">\r\n              <div className=\"text-center\">\r\n                <Link\r\n                  to={{\r\n                    pathname: `/branches/show`,\r\n                    state: { id: item.id, BrancheName: item.BrancheName },\r\n                  }}\r\n                >\r\n                  <QRCode\r\n                    id={btoa(item.id)}\r\n                    level={\"H\"}\r\n                    size={180}\r\n                    fgColor=\"#f50b65\"\r\n                    value={`http://192.168.1.103:3000/show-branch-details/${btoa(\r\n                      item.id\r\n                    )}`}\r\n                    className=\"primary\"\r\n                  />\r\n                  <div\r\n                    style={{ cursor: \"pointer\" }}\r\n                    onClick={(e) => downloadQRCode(e, btoa(item.id))}\r\n                  >\r\n                    {\" \"}\r\n                    <p>{t(\"download_qr_code\")}</p>\r\n                  </div>\r\n                  <h4> {item.BrancheName}</h4>\r\n                </Link>\r\n              </div>\r\n            </div>\r\n            <div className=\"card-footer pt-0 pb-0 text-center\">\r\n              <div className=\"row\">\r\n                <div className=\"col-6 pt-3 pb-3 border-right\">\r\n                  <Link to=\"\" onClick={(e) => editBranch(e, item.id)}>\r\n                    <span>{t(\"edit\")}</span>\r\n                  </Link>\r\n                </div>\r\n                <div className=\"col-6 pt-3 pb-3\">\r\n                  <Link to=\"\" onClick={(e) => deleteBranch(e, item.id)}>\r\n                    <span>{t(\"delete\")}</span>\r\n                  </Link>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      {alert.open ? (\r\n        <CustomAlert\r\n          open={alert.open}\r\n          severity={alert.severity}\r\n          message={alert.message}\r\n          setAlert={setAlert}\r\n        />\r\n      ) : (\r\n        \"\"\r\n      )}\r\n\r\n      <CBreadcrumb style={{ \"--cui-breadcrumb-divider\": \"'>'\" }}>\r\n        <CBreadcrumbItem active>{t(\"Branches\")}</CBreadcrumbItem>\r\n      </CBreadcrumb>\r\n      {/* <PageTItle headingPara={t('Branches')} activeMenu={t('add_branch')} motherMenu={t('Branches')} /> */}\r\n      {/* <!-- Insert  Modal --> */}\r\n      <Modal className=\"fade\" show={modalCentered}>\r\n        <Modal.Header>\r\n          <Modal.Title>{t(\"add_branch\")}</Modal.Title>\r\n          <Button\r\n            onClick={() => setModalCentered(false)}\r\n            variant=\"\"\r\n            className=\"close\"\r\n          >\r\n            <span>&times;</span>\r\n          </Button>\r\n        </Modal.Header>\r\n        <Formik\r\n          initialValues={initialValues}\r\n          validationSchema={validationSchema}\r\n          onSubmit={saveBranch}\r\n        >\r\n          {({ errors, status, touched }) => (\r\n            <Form>\r\n              <Modal.Body>\r\n                <div className=\"form-group\">\r\n                  <label> {t(\"branch_name\")}</label>\r\n                  <Field\r\n                    name=\"BrancheName\"\r\n                    type=\"text\"\r\n                    className={\r\n                      \"form-control\" +\r\n                      (errors.BrancheName && touched.BrancheName\r\n                        ? \" is-invalid\"\r\n                        : \"\")\r\n                    }\r\n                    placeholder=\"A unique name...\"\r\n                  />\r\n                  <ErrorMessage\r\n                    name=\"BrancheName\"\r\n                    component=\"div\"\r\n                    className=\"invalid-feedback\"\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label> {t(\"currency\")}</label>\r\n                  <Field\r\n                    as=\"select\"\r\n                    name=\"currencyID\"\r\n                    className={\r\n                      \"form-control\" +\r\n                      (errors.currencyID && touched.currencyID\r\n                        ? \" is-invalid\"\r\n                        : \"\")\r\n                    }\r\n                  >\r\n                    <option value=\"\">{t(\"select_currency\")}</option> )\r\n                    {currency.map((item) => (\r\n                      <option value={item.id} key={item.id}>\r\n                        {item.currency_name + \" / \" + item.currency_code}\r\n                      </option>\r\n                    ))}\r\n                  </Field>\r\n                  <ErrorMessage\r\n                    name=\"currencyID\"\r\n                    component=\"div\"\r\n                    className=\"invalid-feedback\"\r\n                  />\r\n                </div>\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                <Button\r\n                  onClick={() => setModalCentered(false)}\r\n                  variant=\"danger light\"\r\n                >\r\n                  {t(\"close\")}\r\n                </Button>\r\n                <Button variant=\"primary\" type=\"submit\">\r\n                  {t(\"save\")}{\" \"}\r\n                </Button>\r\n              </Modal.Footer>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </Modal>\r\n      {/* Edit Modal */}\r\n      <Modal className=\"fade\" show={editmodalCentered}>\r\n        <Modal.Header>\r\n          <Modal.Title>{t(\"edit_branch\")}</Modal.Title>\r\n          <Button\r\n            onClick={() => setEditModalCentered(false)}\r\n            variant=\"\"\r\n            className=\"close\"\r\n          >\r\n            <span>&times;</span>\r\n          </Button>\r\n        </Modal.Header>\r\n        <Formik\r\n          initialValues={editBranchstate}\r\n          validationSchema={validationSchema}\r\n          onSubmit={updateBranch}\r\n        >\r\n          {({ errors, status, touched }) => (\r\n            <Form>\r\n              <Modal.Body>\r\n                <div className=\"form-group\">\r\n                  <label> {t(\"branch_name\")}</label>\r\n                  <Field\r\n                    name=\"BrancheName\"\r\n                    type=\"text\"\r\n                    className={\r\n                      \"form-control\" +\r\n                      (errors.BrancheName && touched.BrancheName\r\n                        ? \" is-invalid\"\r\n                        : \"\")\r\n                    }\r\n                    placeholder=\"A unique name...\"\r\n                  />\r\n                  <ErrorMessage\r\n                    name=\"BrancheName\"\r\n                    component=\"div\"\r\n                    className=\"invalid-feedback\"\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label> {t(\"currency\")}</label>\r\n                  <Field\r\n                    as=\"select\"\r\n                    name=\"currencyID\"\r\n                    className={\r\n                      \"form-control\" +\r\n                      (errors.currencyID && touched.currencyID\r\n                        ? \" is-invalid\"\r\n                        : \"\")\r\n                    }\r\n                  >\r\n                    <option value=\"\">{t(\"select_currency\")}</option> )\r\n                    {currency.map((item) => (\r\n                      <option value={item.id} key={item.id}>\r\n                        {item.currency_name + \" / \" + item.currency_code}\r\n                      </option>\r\n                    ))}\r\n                  </Field>\r\n                  <ErrorMessage\r\n                    name=\"currencyID\"\r\n                    component=\"div\"\r\n                    className=\"invalid-feedback\"\r\n                  />\r\n                </div>\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                <Button\r\n                  onClick={() => setEditModalCentered(false)}\r\n                  variant=\"danger light\"\r\n                >\r\n                  {t(\"close\")}\r\n                </Button>\r\n                <Button variant=\"primary\" type=\"submit\">\r\n                  {t(\"update\")}{\" \"}\r\n                </Button>\r\n              </Modal.Footer>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </Modal>\r\n      <div className=\"row justify-content-end\">\r\n        <div className=\"col-1\">\r\n          <IconButton aria-label=\"Example\" onClick={changeLayout}>\r\n            {layout ? <TableRowsIcon /> : <ViewComfyIcon />}\r\n          </IconButton>\r\n        </div>\r\n      </div>\r\n      {layout ? (\r\n        <div className=\"row\">\r\n          {viewBranches_HTMLTABLE}\r\n          <div className=\"col-xl-4 col-lg-6 col-sm-6 \">\r\n            <div className=\"card overflow-hidden \">\r\n              <div\r\n                className=\"card-body d-flex justify-content-center text-center\"\r\n                style={{ border: \"2px dashed #f50b65\" }}\r\n              >\r\n                <div className=\"align-self-center text-center\">\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-outline-primary\"\r\n                    onClick={() => setModalCentered(true)}\r\n                  >\r\n                    <AddIcon />\r\n                    {t(\"add_branch\")}\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div className=\"row\">\r\n          <div className=\"col-xl-12 col-xxl-12 col-lg-12 col-sm-12\">\r\n            <div className=\"card\">\r\n              <div className=\"card-header border-0\">\r\n                <div>\r\n                  <h4 className=\"card-title mb-2\">{t(\"branches\")}</h4>\r\n                </div>\r\n                <div className=\"dropdown\">\r\n                  <Button\r\n                    variant=\"primary\"\r\n                    type=\"button\"\r\n                    className=\"mb-2 mr-2\"\r\n                    onClick={() => setModalCentered(true)}\r\n                  >\r\n                    {t(\"add_branch\")}\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n              <div className=\"card-body p-0\">\r\n                <div className=\"table-responsive \">\r\n                  <table className=\"table text-center \">\r\n                    <thead>\r\n                      <tr className=\"card-title\">\r\n                        <th>{t(\"qr_code\")}</th>\r\n                        <th>{t(\"branch_name\")}</th>\r\n                        <th>{t(\"actions\")}</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      {branchdata.map((item, i) => {\r\n                        return (\r\n                          <tr key={item.id}>\r\n                            <td>\r\n                              <Link\r\n                                to={{\r\n                                  pathname: `/branches/show`,\r\n                                  state: {\r\n                                    id: item.id,\r\n                                    BrancheName: item.BrancheName,\r\n                                  },\r\n                                }}\r\n                              >\r\n                                <QRCode\r\n                                  id={btoa(item.id)}\r\n                                  level={\"H\"}\r\n                                  size={100}\r\n                                  height=\"100px\"\r\n                                  fgColor=\"#f50b65\"\r\n                                  value={`http://192.168.1.103:3000/show-branch-details/${btoa(\r\n                                    item.id\r\n                                  )}`}\r\n                                  className=\"primary\"\r\n                                />\r\n                                <div\r\n                                  style={{ cursor: \"pointer\" }}\r\n                                  onClick={(e) =>\r\n                                    downloadQRCode(e, btoa(item.id))\r\n                                  }\r\n                                >\r\n                                  <small>{t(\"download_qr_code\")}</small>\r\n                                </div>\r\n                              </Link>\r\n                            </td>\r\n                            <td>\r\n                              {\" \"}\r\n                              <Link\r\n                                to={{\r\n                                  pathname: `/branches/show`,\r\n                                  state: {\r\n                                    id: item.id,\r\n                                    BrancheName: item.BrancheName,\r\n                                  },\r\n                                }}\r\n                              >\r\n                                {\" \"}\r\n                                {item.BrancheName}\r\n                              </Link>\r\n                            </td>\r\n\r\n                            <td>\r\n                              <button\r\n                                type=\"button\"\r\n                                onClick={(e) => editBranch(e, item.id)}\r\n                                className=\"btn btn-outline-danger btn-sm\"\r\n                              >\r\n                                {t(\"edit\")}\r\n                              </button>\r\n                              &nbsp;&nbsp;&nbsp;\r\n                              <button\r\n                                type=\"button\"\r\n                                onClick={(e) => deleteBranch(e, item.id)}\r\n                                className=\"btn btn-outline-warning btn-sm\"\r\n                              >\r\n                                {t(\"delete\")}\r\n                              </button>\r\n                            </td>\r\n                          </tr>\r\n                        );\r\n                      })}\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Branches;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Branches\\Tables.js",["433"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Link } from \"react-router-dom\";\r\nimport QRCode from \"qrcode.react\";\r\nimport ViewComfyIcon from \"@mui/icons-material/ViewComfy\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport TableRowsIcon from \"@mui/icons-material/TableRows\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport CustomAlert from \"../CustomAlert\";\r\n\r\nconst Tables = (props) => {\r\n  const id = props.history.location.state.id;\r\n\r\n  // validation start\r\n  const initialValues = {\r\n    tableId: \"\",\r\n    tableName: \"\",\r\n    branchId: id,\r\n  };\r\n  const validationSchema = () => {\r\n    return Yup.object().shape({\r\n      tableId: Yup.string().required(\"Table ID is required\"),\r\n      tableName: Yup.string().required(\"Table Name is required\"),\r\n    });\r\n  };\r\n  // validation end\r\n\r\n  // for localization\r\n  const { t } = useTranslation();\r\n  // ID\r\n  const [check, setCheck] = useState(true);\r\n\r\n  // insert modal\r\n  const [modalCentered, setModalCentered] = useState(false);\r\n  const [alert, setAlert] = useState({\r\n    open: false,\r\n    severity: \"success\",\r\n    message: \"\",\r\n  });\r\n  const setAlerts = (open, severity, message) => {\r\n    setAlert({\r\n      open: open,\r\n      severity: severity,\r\n      message: message,\r\n    });\r\n  };\r\n  const saveTable = (data) => {\r\n    // e.preventDefault();\r\n    axios.post(\"/api/InsertTable\", data).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setCheck(!check);\r\n        setAlerts(true, \"success\", res.data.message);\r\n        setModalCentered(false);\r\n        //  this.props.history.push(\"/\")\r\n      }\r\n    });\r\n  };\r\n  // insert end\r\n\r\n  // edit modal\r\n  const [editmodalCentered, setEditModalCentered] = useState(false);\r\n  const [editTable, setEditTable] = useState({\r\n    tableId: \"\",\r\n    tableName: \"\",\r\n    branchId: id,\r\n  });\r\n\r\n  const fetchTable = (e, id) => {\r\n    e.preventDefault();\r\n    axios.get(`/api/EditTable/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setEditTable(res.data.Details);\r\n        setEditModalCentered(true);\r\n      } else if (res.data.status === 404) {\r\n        setAlerts(true, \"error\", res.data.message);\r\n      }\r\n    });\r\n  };\r\n  const updateTable = (data) => {\r\n    axios.post(\"/api/UpdateTable\", data).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setAlerts(true, \"success\", res.data.message);\r\n\r\n        setEditModalCentered(false);\r\n        setCheck(!check);\r\n\r\n        //  this.props.history.push(\"/\")\r\n      } else if (res.data.status === 404) {\r\n        setAlerts(true, \"error\", res.data.message);\r\n      }\r\n    });\r\n  };\r\n  // edit end\r\n  // delete section\r\n  const deleteTable = (e, id) => {\r\n    e.preventDefault();\r\n    swal({\r\n      title: \"Are you sure?\",\r\n      text: \"Once deleted, you will not be able to recover this imaginary file!\",\r\n      icon: \"warning\",\r\n      buttons: [t(\"cancel\"), t(\"confirm\")],\r\n      dangerMode: true,\r\n    }).then((willDelete) => {\r\n      if (willDelete) {\r\n        axios.delete(`/api/DeleteTable/${id}`).then((res) => {\r\n          if (res.data.status === 200) {\r\n            setAlerts(true, \"success\", res.data.message);\r\n\r\n            setCheck(!check);\r\n          } else if (res.data.status === 404) {\r\n            setAlerts(true, \"error\", res.data.message);\r\n          }\r\n        });\r\n      } else {\r\n        setAlerts(true, \"info\", \"Your Data is safe now!\");\r\n      }\r\n    });\r\n  };\r\n  // delete end\r\n  //for retriving data using laravel API\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  useEffect(() => {\r\n    axios.get(`/api/GetTables/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        // console.log(res.data.fetchData);\r\n        setFetchData(res.data.fetchData);\r\n      }\r\n      setLoading(false);\r\n    });\r\n  }, [check]);\r\n  // download QRcode\r\n  const downloadQRCode = (e, id) => {\r\n    e.preventDefault();\r\n    // console.log(id)\r\n\r\n    const qrCodeURL = document\r\n      .getElementById(id)\r\n      .toDataURL(\"image/png\")\r\n      .replace(\"image/png\", \"image/octet-stream\");\r\n    let aEl = document.createElement(\"a\");\r\n    aEl.href = qrCodeURL;\r\n    aEl.download = \"Table_QR_Code.png\";\r\n    document.body.appendChild(aEl);\r\n    aEl.click();\r\n    document.body.removeChild(aEl);\r\n  };\r\n  const [layout, setLayout] = useState(\r\n    JSON.parse(\r\n      localStorage.getItem(\"layoutTables\")\r\n        ? localStorage.getItem(\"layoutTables\")\r\n        : true\r\n    )\r\n  );\r\n  const changeLayout = () => {\r\n    setLayout(!layout);\r\n    localStorage.setItem(\"layoutTables\", !layout);\r\n  };\r\n  var viewProducts_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"spinner-border text-primary \" role=\"status\">\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewProducts_HTMLTABLE = fetchData.map((item, i) => {\r\n      return (\r\n        <tr key={item.id}>\r\n          <td> {item.tableId}</td>\r\n          <td> {item.tableName}</td>\r\n          <td>\r\n            <QRCode\r\n              id={btoa(item.id)}\r\n              level={\"H\"}\r\n              size={256}\r\n              fgColor=\"#f50b65\"\r\n              value={`http://192.168.1.103:3000/show-branch-details/${btoa(\r\n                item.id\r\n              )}`}\r\n              className=\"primary d-none\"\r\n            />\r\n            <div\r\n              style={{ cursor: \"pointer\" }}\r\n              onClick={(e) => downloadQRCode(e, btoa(item.id))}\r\n            >\r\n              {t(\"download_qr_code\")}\r\n            </div>\r\n          </td>\r\n          <td>\r\n            <button\r\n              type=\"button\"\r\n              onClick={(e) => fetchTable(e, item.id)}\r\n              className=\"btn btn-outline-danger btn-sm\"\r\n            >\r\n              {t(\"edit\")}\r\n            </button>\r\n            &nbsp;&nbsp;&nbsp;\r\n            <button\r\n              type=\"button\"\r\n              onClick={(e) => deleteTable(e, item.id)}\r\n              className=\"btn btn-outline-warning btn-sm\"\r\n            >\r\n              {t(\"delete\")}\r\n            </button>\r\n          </td>\r\n        </tr>\r\n      );\r\n    });\r\n  }\r\n  return (\r\n    <Fragment>\r\n      {alert.open ? (\r\n        <CustomAlert\r\n          open={alert.open}\r\n          severity={alert.severity}\r\n          message={alert.message}\r\n          setAlert={setAlert}\r\n        />\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <Modal className=\"fade\" show={modalCentered}>\r\n        <Modal.Header>\r\n          <Modal.Title>{t(\"add_table\")}</Modal.Title>\r\n          <Button\r\n            onClick={() => setModalCentered(false)}\r\n            variant=\"\"\r\n            className=\"close\"\r\n          >\r\n            <span>&times;</span>\r\n          </Button>\r\n        </Modal.Header>\r\n        <Formik\r\n          initialValues={initialValues}\r\n          validationSchema={validationSchema}\r\n          onSubmit={saveTable}\r\n        >\r\n          {({ errors, status, touched }) => (\r\n            <Form>\r\n              <Modal.Body>\r\n                <div className=\"form-group\">\r\n                  <label> {t(\"table_id\")}</label>\r\n                  <Field\r\n                    name=\"tableId\"\r\n                    type=\"text\"\r\n                    className={\r\n                      \"form-control\" +\r\n                      (errors.tableId && touched.tableId ? \" is-invalid\" : \"\")\r\n                    }\r\n                    placeholder=\"ID....\"\r\n                  />\r\n                  <ErrorMessage\r\n                    name=\"tableId\"\r\n                    component=\"div\"\r\n                    className=\"invalid-feedback\"\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label> {t(\"table_name\")}</label>\r\n                  <Field\r\n                    name=\"tableName\"\r\n                    type=\"text\"\r\n                    className={\r\n                      \"form-control\" +\r\n                      (errors.tableName && touched.tableName\r\n                        ? \" is-invalid\"\r\n                        : \"\")\r\n                    }\r\n                    placeholder=\"A name for table...\"\r\n                  />\r\n                  <ErrorMessage\r\n                    name=\"tableName\"\r\n                    component=\"div\"\r\n                    className=\"invalid-feedback\"\r\n                  />\r\n                </div>\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                <Button\r\n                  onClick={() => setModalCentered(false)}\r\n                  variant=\"danger light\"\r\n                >\r\n                  {t(\"close\")}\r\n                </Button>\r\n                <Button variant=\"primary\" type=\"submit\">\r\n                  {t(\"save\")}{\" \"}\r\n                </Button>\r\n              </Modal.Footer>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </Modal>\r\n      {/* Edit Modal */}\r\n      <Modal className=\"fade\" show={editmodalCentered}>\r\n        <Modal.Header>\r\n          <Modal.Title>{t(\"edit_table\")} </Modal.Title>\r\n          <Button\r\n            onClick={() => setEditModalCentered(false)}\r\n            variant=\"\"\r\n            className=\"close\"\r\n          >\r\n            <span>&times;</span>\r\n          </Button>\r\n        </Modal.Header>\r\n        <Formik\r\n          initialValues={editTable}\r\n          validationSchema={validationSchema}\r\n          onSubmit={updateTable}\r\n        >\r\n          {({ errors, status, touched }) => (\r\n            <Form>\r\n              <Modal.Body>\r\n                <div className=\"form-group text-center\">\r\n                  <QRCode\r\n                    level={\"H\"}\r\n                    size={128}\r\n                    fgColor=\"#f50b65\"\r\n                    value={`http://192.168.1.103:3000/show-branch-details/${btoa(\r\n                      editTable.tableId\r\n                    )}`}\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label> {t(\"table_id\")}</label>\r\n                  <Field\r\n                    name=\"tableId\"\r\n                    type=\"text\"\r\n                    className={\r\n                      \"form-control\" +\r\n                      (errors.tableId && touched.tableId ? \" is-invalid\" : \"\")\r\n                    }\r\n                    placeholder=\"ID....\"\r\n                  />\r\n                  <ErrorMessage\r\n                    name=\"tableId\"\r\n                    component=\"div\"\r\n                    className=\"invalid-feedback\"\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label> {t(\"table_name\")}</label>\r\n                  <Field\r\n                    name=\"tableName\"\r\n                    type=\"text\"\r\n                    className={\r\n                      \"form-control\" +\r\n                      (errors.tableName && touched.tableName\r\n                        ? \" is-invalid\"\r\n                        : \"\")\r\n                    }\r\n                    placeholder=\"A name for table...\"\r\n                  />\r\n                  <ErrorMessage\r\n                    name=\"tableName\"\r\n                    component=\"div\"\r\n                    className=\"invalid-feedback\"\r\n                  />\r\n                </div>\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                <Button\r\n                  onClick={() => setEditModalCentered(false)}\r\n                  variant=\"danger light\"\r\n                >\r\n                  {t(\"close\")}\r\n                </Button>\r\n                <Button variant=\"primary\" type=\"submit\">\r\n                  {t(\"save\")}{\" \"}\r\n                </Button>\r\n              </Modal.Footer>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </Modal>\r\n      <div className=\"row justify-content-end\">\r\n        <div className=\"col-1\">\r\n          <IconButton aria-label=\"Example\" onClick={changeLayout}>\r\n            {layout ? <TableRowsIcon /> : <ViewComfyIcon />}\r\n          </IconButton>\r\n        </div>\r\n      </div>\r\n      {layout ? (\r\n        <div className=\"row\">\r\n          <div className=\"col-xl-12 col-xxl-12 col-lg-12 col-sm-12\">\r\n            <div className=\"card\">\r\n              <div className=\"card-header border-0\">\r\n                <div>\r\n                  <h4 className=\"card-title mb-2\">{t(\"tables\")}</h4>\r\n                </div>\r\n                <div className=\"dropdown\">\r\n                  <Button\r\n                    variant=\"primary\"\r\n                    type=\"button\"\r\n                    className=\"mb-2 mr-2\"\r\n                    onClick={() => setModalCentered(true)}\r\n                  >\r\n                    {t(\"add_table\")}\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n              <div className=\"card-body p-0\">\r\n                <div className=\"table-responsive \">\r\n                  <table className=\"table text-center \">\r\n                    <thead>\r\n                      <tr className=\"card-title\">\r\n                        {/* <th>{t('number')}</th> */}\r\n                        <th>{t(\"table_id\")}</th>\r\n                        <th>{t(\"table_name\")}</th>\r\n                        <th>{t(\"download\")}</th>\r\n                        <th>{t(\"actions\")}</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>{viewProducts_HTMLTABLE}</tbody>\r\n                  </table>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div className=\"row\">\r\n          {fetchData.map((item, i) => {\r\n            return (\r\n              <div className=\"col-xl-3 col-lg-4 col-sm-6\" key={item.id}>\r\n                <div className=\"card overflow-hidden\">\r\n                  <div className=\"card-body\">\r\n                    <div className=\"text-center\">\r\n                      <Link\r\n                        to={{\r\n                          pathname: `/branches/show`,\r\n                          state: { id: item.id, BrancheName: item.BrancheName },\r\n                        }}\r\n                      >\r\n                        <QRCode\r\n                          id={btoa(item.id)}\r\n                          level={\"H\"}\r\n                          size={128}\r\n                          fgColor=\"#f50b65\"\r\n                          value={`http://192.168.1.103:3000/show-branch-details/${btoa(\r\n                            item.id\r\n                          )}`}\r\n                          className=\"primary \"\r\n                        />\r\n                        <div\r\n                          onClick={(e) => downloadQRCode(e, btoa(item.id))}\r\n                          style={{ cursor: \"pointer\" }}\r\n                        >\r\n                          {\" \"}\r\n                          {t(\"download_qr_code\")}\r\n                        </div>\r\n\r\n                        <h6> {item.tableId}</h6>\r\n                        <h4> {item.tableName}</h4>\r\n                      </Link>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"card-footer pt-0 pb-0 text-center\">\r\n                    <div className=\"row\">\r\n                      <div className=\"col-6 pt-3 pb-3 border-right\">\r\n                        <Link to=\"\" onClick={(e) => fetchTable(e, item.id)}>\r\n                          <span>{t(\"edit\")}</span>\r\n                        </Link>\r\n                      </div>\r\n                      <div className=\"col-6 pt-3 pb-3\">\r\n                        <Link to=\"\" onClick={(e) => deleteTable(e, item.id)}>\r\n                          <span>{t(\"delete\")}</span>\r\n                        </Link>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n          <div className=\"col-xl-3 col-lg-4 col-sm-6 \">\r\n            <div className=\"card overflow-hidden \">\r\n              <div\r\n                className=\"card-body d-flex justify-content-center text-center\"\r\n                style={{ border: \"2px dashed #f50b65\" }}\r\n              >\r\n                <div className=\"align-self-center text-center\">\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-outline-primary\"\r\n                    onClick={() => setModalCentered(true)}\r\n                  >\r\n                    <AddIcon />\r\n                    {t(\"add_table\")}\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Tables;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Inventories\\Inventory.js",["434","435"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { Button, Modal, Form } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { CBreadcrumb, CBreadcrumbItem } from \"@coreui/react\";\r\nimport { CSmartTable } from \"@coreui/react-pro\";\r\nconst Inventory = (props) => {\r\n  // for localization\r\n  const { t } = useTranslation();\r\n\r\n  const id = props.history.location.state.id;\r\n\r\n  // edit modal\r\n  const [editmodalCentered, setEditModalCentered] = useState(false);\r\n  const [editIventory, setEditInventory] = useState([]);\r\n  const editHandleInput = (e) => {\r\n    e.persist();\r\n    setEditInventory({ ...editIventory, [e.target.name]: e.target.value });\r\n  };\r\n  const fetchUnit = (e, id) => {\r\n    e.preventDefault();\r\n    axios.get(`/api/EditInventory/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setEditInventory(res.data.intenvtory);\r\n        setEditModalCentered(true);\r\n      } else if (res.data.status === 404) {\r\n        swal(\"Error\", res.data.message, \"error\");\r\n      }\r\n    });\r\n  };\r\n  const updateInventory = (e) => {\r\n    e.preventDefault();\r\n    axios.post(\"/api/UpdateInventory\", editIventory).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setEditInventory(\"\");\r\n        swal(\"Success\", res.data.message, \"success\");\r\n        setEditModalCentered(false);\r\n        //  this.props.history.push(\"/\")\r\n      } else if (res.data.status === 404) {\r\n        swal(\"Error\", res.data.message, \"error\");\r\n      }\r\n    });\r\n  };\r\n  // edit End\r\n  // delete start\r\n  const deleteInventory = (e, id) => {\r\n    e.preventDefault();\r\n    swal({\r\n      title: \"Are you sure?\",\r\n      text: \"Once deleted, you will not be able to recover this imaginary file!\",\r\n      icon: \"warning\",\r\n      buttons: [t(\"cancel\"), t(\"confirm\")],\r\n      dangerMode: true,\r\n    }).then((willDelete) => {\r\n      if (willDelete) {\r\n        axios.delete(`/api/DeleteInventory/${id}`).then((res) => {\r\n          if (res.data.status === 200) {\r\n            setEditInventory([]);\r\n            swal(\"Success\", res.data.message, \"success\");\r\n          } else if (res.data.status === 404) {\r\n            swal(\"Error\", res.data.message, \"error\");\r\n          }\r\n        });\r\n      } else {\r\n        swal(\"Your Data is safe now!\");\r\n      }\r\n    });\r\n  };\r\n  // delete end\r\n  //for retriving data using laravel API\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    axios.get(`/api/GetInventory/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setFetchData(res.data.fetchData);\r\n      }\r\n      setLoading(false);\r\n    });\r\n  }, [editIventory, id]);\r\n  const columns = [\r\n    {\r\n      key: \"variant_name\",\r\n    },\r\n    {\r\n      key: \"Buyingquantity\",\r\n    },\r\n    {\r\n      key: \"SellingQuantity\",\r\n    },\r\n    {\r\n      key: \"buyingPrice\",\r\n    },\r\n    {\r\n      key: \"sellingPrice\",\r\n    },\r\n    {\r\n      key: \"actions\",\r\n    },\r\n  ];\r\n\r\n  var viewInventory_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"spinner-border text-primary \" role=\"status\">\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewInventory_HTMLTABLE = (\r\n      // fetchData.map((item, i) => {\r\n      // return (\r\n      <CSmartTable\r\n        activePage={1}\r\n        cleaner\r\n        // clickableRows\r\n        columns={columns}\r\n        // columnFilter\r\n        columnSorter\r\n        // footer\r\n        items={fetchData}\r\n        itemsPerPageSelect\r\n        itemsPerPage={10}\r\n        pagination\r\n        scopedColumns={{\r\n          actions: (item) => {\r\n            return (\r\n              <td>\r\n                <Link to=\"\" onClick={(e) => fetchUnit(e, item.id)}>\r\n                  <svg\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    width=\"16\"\r\n                    height=\"16\"\r\n                    fill=\"currentColor\"\r\n                    className=\"bi bi-pencil-square\"\r\n                    viewBox=\"0 0 16 16\"\r\n                  >\r\n                    <path d=\"M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z\" />\r\n                    <path\r\n                      fill-rule=\"evenodd\"\r\n                      d=\"M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z\"\r\n                    />\r\n                  </svg>\r\n                </Link>\r\n                <span> | </span>\r\n                <Link to=\"\" onClick={(e) => deleteInventory(e, item.id)}>\r\n                  <svg\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    width=\"16\"\r\n                    height=\"16\"\r\n                    fill=\"currentColor\"\r\n                    className=\"bi bi-trash\"\r\n                    viewBox=\"0 0 16 16\"\r\n                  >\r\n                    <path d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z\" />\r\n                    <path\r\n                      fill-rule=\"evenodd\"\r\n                      d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\"\r\n                    />\r\n                  </svg>\r\n                </Link>\r\n              </td>\r\n            );\r\n          },\r\n        }}\r\n        // selectable\r\n        // sorterValue={{ column: 'name', state: 'asc' }}\r\n        tableFilter\r\n        // tableHeadProps={{\r\n        //   color: 'primary',\r\n        // }}\r\n        tableProps={{\r\n          striped: true,\r\n          hover: true,\r\n        }}\r\n      />\r\n    );\r\n    //     )\r\n    // })\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      {/* Edit Modal */}\r\n      <Modal\r\n        className=\"fade bd-example-modal-lg\"\r\n        show={editmodalCentered}\r\n        size=\"lg\"\r\n      >\r\n        <Form onSubmit={updateInventory} method=\"POST\">\r\n          <Modal.Header>\r\n            <Modal.Title> {t(\"edit_inventory\")} </Modal.Title>\r\n            <Button\r\n              onClick={() => setEditModalCentered(false)}\r\n              variant=\"\"\r\n              className=\"close\"\r\n            >\r\n              <span>&times;</span>\r\n            </Button>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <div className=\"row\">\r\n              <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    {\" \"}\r\n                    <strong>{t(\"variant_name\")}</strong>{\" \"}\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    placeholder={t(\"variant_name\")}\r\n                    name=\"variant_name\"\r\n                    required\r\n                    onChange={editHandleInput}\r\n                    value={editIventory.variant_name}\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    {\" \"}\r\n                    <strong>{t(\"buying_quantity\")}</strong>{\" \"}\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    placeholder={t(\"buying_quantity\")}\r\n                    name=\"Buyingquantity\"\r\n                    required\r\n                    onChange={editHandleInput}\r\n                    value={editIventory.Buyingquantity}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    {\" \"}\r\n                    <strong>{t(\"buying_price\")}</strong>{\" \"}\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    placeholder={t(\"buying_price\")}\r\n                    name=\"buyingPrice\"\r\n                    required\r\n                    onChange={editHandleInput}\r\n                    value={editIventory.buyingPrice}\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label className=\"mb-1 \">\r\n                    {\" \"}\r\n                    <strong>{t(\"selling_price\")}</strong>{\" \"}\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    placeholder={t(\"selling_price\")}\r\n                    name=\"sellingPrice\"\r\n                    required\r\n                    onChange={editHandleInput}\r\n                    value={editIventory.sellingPrice}\r\n                  />\r\n                </div>\r\n              </div>\r\n              {/* <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                                <div className=\"form-group\">\r\n                                    <label className=\"mb-1 \"> <strong>SellingQuantity</strong> </label>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        className=\"form-control\"\r\n                                        placeholder=\"SellingQuantity\"\r\n                                        name=\"SellingQuantity\"\r\n                                        required\r\n                                        onChange={editHandleInput}  \r\n                                        value={editIventory.SellingQuantity}\r\n                                    />\r\n                                </div>\r\n                            </div> */}\r\n            </div>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button\r\n              onClick={() => setEditModalCentered(false)}\r\n              variant=\"danger light\"\r\n            >\r\n              {t(\"close\")}\r\n            </Button>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              {\" \"}\r\n              {t(\"update\")}{\" \"}\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Form>\r\n      </Modal>\r\n\r\n      {viewInventory_HTMLTABLE}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Inventory;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Companies\\Company.js",["436"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { Button, Modal, Form } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as yup from \"yup\";\r\nimport { CBreadcrumb, CBreadcrumbItem } from \"@coreui/react\";\r\nimport CustomAlert from \"../CustomAlert\";\r\n\r\nconst Company = () => {\r\n  // validation start\r\n  const schema = yup\r\n    .object()\r\n    .shape({\r\n      company: yup.string().required(),\r\n    })\r\n    .required();\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors },\r\n  } = useForm({\r\n    resolver: yupResolver(schema),\r\n  });\r\n  // validation end\r\n\r\n  // for localization\r\n  const { t } = useTranslation();\r\n\r\n  // insert start\r\n  const [modalCentered, setModalCentered] = useState(false);\r\n  const [companyState, setCompanyState] = useState([]);\r\n  const handleInput = (e) => {\r\n    e.preventDefault();\r\n    setCompanyState({ ...companyState, [e.target.name]: e.target.value });\r\n  };\r\n  const [alert, setAlert] = useState({\r\n    open: false,\r\n    severity: \"success\",\r\n    message: \"\",\r\n  });\r\n  const setAlerts = (open, severity, message) => {\r\n    setAlert({\r\n      open: open,\r\n      severity: severity,\r\n      message: message,\r\n    });\r\n  };\r\n  const saveCompany = (e) => {\r\n    axios.post(\"/api/InsertCompanies\", companyState).then((res) => {\r\n      if (res.data.status === 200) {\r\n        localStorage.setItem(\"auth_company_id\", btoa(res.data.company_id));\r\n        setCompanyState([]);\r\n        setCheck(!check);\r\n\r\n        reset();\r\n        setAlerts(true, \"success\", res.data.message);\r\n\r\n        setModalCentered(false);\r\n        //  this.props.history.push(\"/\")\r\n      }\r\n    });\r\n  };\r\n  // insert end\r\n  // edit Start\r\n  const [editmodalCentered, setEditModalCentered] = useState(false);\r\n  const [editCompanystate, setEditCompanystate] = useState([]);\r\n  const editHandleInput = (e) => {\r\n    e.persist();\r\n    setEditCompanystate({\r\n      ...editCompanystate,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n  const editCompany = (e, id) => {\r\n    e.preventDefault();\r\n    axios.get(`/api/EditCompanies/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setEditCompanystate(res.data.company);\r\n        setEditModalCentered(true);\r\n      } else if (res.data.status === 404) {\r\n        setAlerts(true, \"error\", res.data.message);\r\n      }\r\n    });\r\n  };\r\n  const updateCompany = (e) => {\r\n    e.preventDefault();\r\n    axios.post(\"/api/UpdateCompanies\", editCompanystate).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setEditCompanystate([]);\r\n        setCheck(!check);\r\n        setAlerts(true, \"success\", res.data.message);\r\n\r\n        setEditModalCentered(false);\r\n        //  this.props.history.push(\"/\")\r\n      }\r\n    });\r\n  };\r\n  // edit End\r\n  // delete section\r\n  const deleteCompany = (e, id) => {\r\n    // e.preventDefault();\r\n    swal({\r\n      title: \"Are you sure?\",\r\n      text: \"Once deleted, you will not be able to recover this imaginary file!\",\r\n      icon: \"warning\",\r\n      buttons: [t(\"cancel\"), t(\"confirm\")],\r\n      dangerMode: true,\r\n    }).then((willDelete) => {\r\n      if (willDelete) {\r\n        axios.delete(`/api/DeleteCompanies/${id}`).then((res) => {\r\n          if (res.data.status === 200) {\r\n            setAlerts(true, \"success\", res.data.message);\r\n\r\n            setCheck(!check);\r\n          } else if (res.data.status === 404) {\r\n            setAlerts(true, \"error\", res.data.message);\r\n          }\r\n          setCompanyState([]);\r\n        });\r\n      } else {\r\n        setAlerts(true, \"info\", \"Your Data is safe now!\");\r\n      }\r\n    });\r\n  };\r\n  // delete end\r\n\r\n  //for retriving data using laravel API\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [check, setCheck] = useState(true);\r\n\r\n  useEffect(() => {\r\n    axios.get(\"/api/GetCompanies\").then((res) => {\r\n      if (res.data.status === 200) {\r\n        setFetchData(res.data.fetchData);\r\n      }\r\n      setLoading(false);\r\n    });\r\n  }, [check]);\r\n\r\n  var viewCompanies_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"spinner-border text-primary \" role=\"status\">\r\n        <span\r\n          className=\"sr-only\"\r\n          style={{ position: \"fixed\", top: \"50%\", left: \"50%\" }}\r\n        >\r\n          {t(\"loading\")}\r\n        </span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewCompanies_HTMLTABLE = fetchData.map((item, i) => {\r\n      return (\r\n        <tr key={item.id}>\r\n          <td>{i + 1}</td>\r\n          <td>{item.company}</td>\r\n          <td>\r\n            <button\r\n              type=\"button\"\r\n              onClick={(e) => editCompany(e, item.id)}\r\n              className=\"btn btn-outline-danger btn-sm\"\r\n            >\r\n              {t(\"edit\")}\r\n            </button>\r\n            &nbsp;&nbsp;&nbsp;\r\n            <button\r\n              type=\"button\"\r\n              onClick={(e) => deleteCompany(e, item.id)}\r\n              className=\"btn btn-outline-warning btn-sm d-none\"\r\n            >\r\n              {t(\"delete\")}\r\n            </button>\r\n          </td>\r\n        </tr>\r\n      );\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      {alert.open ? (\r\n        <CustomAlert\r\n          open={alert.open}\r\n          severity={alert.severity}\r\n          message={alert.message}\r\n          setAlert={setAlert}\r\n        />\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <CBreadcrumb style={{ \"--cui-breadcrumb-divider\": \"'>'\" }}>\r\n        <CBreadcrumbItem active>{t(\"companies\")}</CBreadcrumbItem>\r\n      </CBreadcrumb>\r\n      {/* <!-- Insert  Modal --> */}\r\n      <Modal className=\"fade\" show={modalCentered}>\r\n        <Form onSubmit={handleSubmit(saveCompany)} method=\"POST\">\r\n          <Modal.Header>\r\n            <Modal.Title>{t(\"add_company\")}</Modal.Title>\r\n            <Button\r\n              onClick={() => setModalCentered(false)}\r\n              variant=\"\"\r\n              className=\"close\"\r\n            >\r\n              <span>&times;</span>\r\n            </Button>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>{t(\"company_name\")}</strong>{\" \"}\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                {...register(\"company\")}\r\n                className=\"form-control\"\r\n                placeholder={t(\"company_name\")}\r\n                name=\"company\"\r\n                onChange={handleInput}\r\n                value={companyState.company}\r\n              />\r\n              <div className=\"text-danger\">{errors.company?.message}</div>\r\n            </div>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button\r\n              onClick={() => setModalCentered(false)}\r\n              variant=\"danger light\"\r\n            >\r\n              {t(\"close\")}\r\n            </Button>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              {t(\"save\")}{\" \"}\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Form>\r\n      </Modal>\r\n      {/* Edit Modal */}\r\n      <Modal className=\"fade\" show={editmodalCentered}>\r\n        <Form onSubmit={updateCompany} method=\"POST\">\r\n          <Modal.Header>\r\n            <Modal.Title>{t(\"edit_company\")}</Modal.Title>\r\n            <Button\r\n              onClick={() => setEditModalCentered(false)}\r\n              variant=\"\"\r\n              className=\"close\"\r\n            >\r\n              <span>&times;</span>\r\n            </Button>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <div className=\"form-group d-none\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>{t(\"id\")}</strong>{\" \"}\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                disabled=\"disabled\"\r\n                className=\"form-control\"\r\n                // placeholder=\"Company Name\"\r\n                name=\"id\"\r\n                required\r\n                onChange={editHandleInput}\r\n                value={editCompanystate.id}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>{t(\"company_name\")}</strong>{\" \"}\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                placeholder={t(\"company_name\")}\r\n                name=\"company\"\r\n                required\r\n                onChange={editHandleInput}\r\n                value={editCompanystate.company}\r\n              />\r\n            </div>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button\r\n              onClick={() => setEditModalCentered(false)}\r\n              variant=\"danger light\"\r\n            >\r\n              {t(\"close\")}\r\n            </Button>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              {t(\"update\")}{\" \"}\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Form>\r\n      </Modal>\r\n      <div className=\"row\">\r\n        <div className=\"col-xl-12 col-xxl-12 col-lg-12 col-sm-12\">\r\n          <div className=\"card\">\r\n            <div className=\"card-header border-0\">\r\n              <div>\r\n                <h4 className=\"card-title mb-2\">{t(\"companies\")} </h4>\r\n              </div>\r\n              <div\r\n                className={`dropdown ${fetchData.length == 1 ? \"d-none\" : \"\"}`}\r\n              >\r\n                <Button\r\n                  variant=\"primary\"\r\n                  type=\"button\"\r\n                  className=\"mb-2 mr-2\"\r\n                  onClick={() => setModalCentered(true)}\r\n                >\r\n                  {t(\"add_company\")}\r\n                </Button>\r\n              </div>\r\n            </div>\r\n            <div className=\"card-body p-0\">\r\n              <div className=\"table-responsive \">\r\n                <table className=\"table \">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>{t(\"number\")} </th>\r\n                      <th>{t(\"company_name\")} </th>\r\n                      <th>{t(\"actions\")} </th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>{viewCompanies_HTMLTABLE}</tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Company;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Services\\ServiceArea.js",["437","438","439","440","441","442","443"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport Select from \"react-select\";\r\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport AsyncSelect from \"react-select/async\";\r\nimport CustomAlert from \"../CustomAlert\";\r\n\r\nconst ServiceArea = (props) => {\r\n  // for localization\r\n  const { t } = useTranslation();\r\n  //ID\r\n  const id = props.history.location.state.id;\r\n\r\n  // insert Start\r\n  const [modalCentered, setModalCentered] = useState(false);\r\n  const [areaModal, setAreaModal] = useState(false);\r\n  const [alert, setAlert] = useState({\r\n    open: false,\r\n    severity: \"success\",\r\n    message: \"\",\r\n  });\r\n  const setAlerts = (open, severity, message) => {\r\n    setAlert({\r\n      open: open,\r\n      severity: severity,\r\n      message: message,\r\n    });\r\n  };\r\n  const saveServiceAreas = (e) => {\r\n    e.preventDefault();\r\n    if (servicesAreas.length != 0) {\r\n      const formData = new FormData();\r\n      formData.append(\"BranchID\", id);\r\n      formData.append(\"AreaName\", JSON.stringify(servicesAreas));\r\n      axios.post(\"/api/InsertServicAreas\", formData).then((res) => {\r\n        if (res.data.status === 200) {\r\n          setServicesAreas([]);\r\n          setCheck(!check);\r\n          setAlerts(true, \"success\", res.data.message);\r\n\r\n          setModalCentered(false);\r\n          //  this.props.history.push(\"/\")\r\n        }\r\n      });\r\n    } else {\r\n      setAlerts(true, \"warning\", \"Please select a location\");\r\n    }\r\n  };\r\n  // insert End\r\n  // edit Start\r\n  const [editmodalCentered, setEditModalCentered] = useState(false);\r\n  const [editServiceAreas, setEditServiceAreas] = useState([]);\r\n  const editHandleInput = (e) => {\r\n    e.persist();\r\n    setEditServiceAreas({\r\n      ...editServiceAreas,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n  const fetchServiceArea = (e, id) => {\r\n    e.preventDefault();\r\n    axios.get(`/api/EditServiceAreas/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setEditServiceAreas(res.data.menu);\r\n        setEditModalCentered(true);\r\n      } else if (res.data.status === 404) {\r\n        setAlerts(true, \"error\", res.data.message);\r\n      }\r\n    });\r\n  };\r\n  const updateServiceArea = (e) => {\r\n    e.preventDefault();\r\n    const formData = new FormData();\r\n    formData.append(\"id\", editServiceAreas.id);\r\n    formData.append(\"deliveryFees\", editServiceAreas.deliveryFees);\r\n    formData.append(\r\n      \"areaLocationId\",\r\n      servicesAreaEdit.value\r\n        ? servicesAreaEdit.value\r\n        : editServiceAreas.areaLocationId\r\n    );\r\n\r\n    axios.post(\"/api/UpdateServiceAreas\", formData).then((res) => {\r\n      if (res.data.status === 200) {\r\n        // setEditServiceAreas([]);\r\n        setCheck(!check);\r\n        setAlerts(true, \"success\", res.data.message);\r\n\r\n        setEditModalCentered(false);\r\n        //  this.props.history.push(\"/\")\r\n      } else if (res.data.status === 404) {\r\n        setAlerts(true, \"error\", res.data.message);\r\n      }\r\n    });\r\n  };\r\n  // Edit End\r\n\r\n  // delete Start\r\n  const deleteServiceArea = (e, id) => {\r\n    swal({\r\n      title: \"Are you sure?\",\r\n      text: \"Once deleted, you will not be able to recover this imaginary file!\",\r\n      icon: \"warning\",\r\n      buttons: [t(\"cancel\"), t(\"confirm\")],\r\n      dangerMode: true,\r\n    }).then((willDelete) => {\r\n      if (willDelete) {\r\n        axios.delete(`/api/DeleteServiceAreas/${id}`).then((res) => {\r\n          if (res.data.status === 200) {\r\n            setAlerts(true, \"success\", res.data.message);\r\n\r\n            setCheck(!check);\r\n          } else if (res.data.status === 404) {\r\n            setAlerts(true, \"error\", res.data.message);\r\n          }\r\n        });\r\n      } else {\r\n        setAlerts(true, \"info\", \"Your Data is safe now!\");\r\n      }\r\n    });\r\n  };\r\n  // delete End\r\n\r\n  //for retriving data using laravel API\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [areaLocation, setAreaLocation] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [check, setCheck] = useState(true);\r\n\r\n  useEffect(() => {\r\n    let locations = [];\r\n    axios.get(`/api/getAreasBranch/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        console.log(res.data.fetchData);\r\n        setAreaLocation(res.data.fetchData);\r\n      }\r\n    });\r\n    axios.get(`/api/GetServiceAreas/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setFetchData(res.data.fetchData);\r\n        // console.log(res.data.fetchData);\r\n        // console.log();\r\n        let arrayData = [];\r\n        res.data.fetchData?.map((val) => {\r\n          return arrayData.push(val.areaName);\r\n        });\r\n        // console.log(arrayData);\r\n        // setAreaLocation(\r\n        //   areaLocation.filter((areaName) => !arrayData.includes(areaName))\r\n        // );\r\n      }\r\n      setLoading(false);\r\n    });\r\n  }, [check]);\r\n  const [servicesAreas, setServicesAreas] = useState([]);\r\n  const handleSelectEvent = (e) => {\r\n    setServicesAreas(e);\r\n  };\r\n  const [servicesAreaEdit, setServicesAreaEdit] = useState([]);\r\n\r\n  const handleSelectEventEdit = (e) => {\r\n    setServicesAreaEdit(e);\r\n  };\r\n  const serviceAreaHandle = (e, id) => {\r\n    let updatedList = servicesAreas.map((item) => {\r\n      if (item.value == id) {\r\n        return { ...item, deliveryFees: e.target.value }; //gets everything that was already in item, and updates \"done\"\r\n      }\r\n      return item; // else return unmodified item\r\n    });\r\n    setServicesAreas(updatedList);\r\n  };\r\n  const initialValues = {\r\n    areaName: \"\",\r\n    city: \"\",\r\n  };\r\n  const validationSchema = () => {\r\n    return Yup.object().shape({\r\n      areaName: Yup.string().required(\"Area Name is required\"),\r\n      city: Yup.string().required(\"Please select a Category\"),\r\n    });\r\n  };\r\n  const save = (data) => {\r\n    // console.log(JSON.stringify(data, null, 2));\r\n    const formData = new FormData();\r\n    formData.append(\"city_id\", data.city);\r\n    formData.append(\"areaName\", data.areaName);\r\n    axios.post(\"/api/InsertAreas\", formData).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setCheck(!check);\r\n        setAreaModal(false);\r\n        setAlerts(true, \"success\", res.data.message);\r\n      }\r\n    });\r\n  };\r\n\r\n  const [inputValue, setValue] = useState(\"\");\r\n  const [selectedValue, setSelectedValue] = useState(null);\r\n\r\n  // handle input change event\r\n  const handleInputChange = (value) => {\r\n    setValue(\"\");\r\n    setValue(value);\r\n  };\r\n\r\n  // handle selection\r\n  const handleChange = (value) => {\r\n    setSelectedValue(value);\r\n  };\r\n  const loadOptions = (inputValue) => {\r\n    return axios\r\n      .get(`/api/GetCities`, {\r\n        header: {\r\n          \"Content-Type\": \"application/json\",\r\n          Accept: \"application/json\",\r\n          Authorization: \"Bearer \" + localStorage.getItem(\"token\"),\r\n        },\r\n        params: {\r\n          id: inputValue,\r\n        },\r\n      })\r\n      .then((res) => res.data)\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n  var viewProducts_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"spinner-border text-primary \" role=\"status\">\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewProducts_HTMLTABLE = fetchData.map((item, i) => {\r\n      return (\r\n        <tr key={item.id}>\r\n          <td>{i + 1}</td>\r\n\r\n          <td> {item.areaName}</td>\r\n          <td> {item.deliveryFees}</td>\r\n          <td>\r\n            <button\r\n              type=\"button\"\r\n              onClick={(e) => fetchServiceArea(e, item.id)}\r\n              className=\"btn btn-outline-danger btn-sm\"\r\n            >\r\n              {t(\"edit\")}\r\n            </button>\r\n            &nbsp;&nbsp;&nbsp;\r\n            <button\r\n              type=\"button\"\r\n              onClick={(e) => deleteServiceArea(e, item.id)}\r\n              className=\"btn btn-outline-warning btn-sm\"\r\n            >\r\n              {t(\"delete\")}\r\n            </button>\r\n          </td>\r\n        </tr>\r\n      );\r\n    });\r\n  }\r\n  return (\r\n    <Fragment>\r\n      {alert.open ? (\r\n        <CustomAlert\r\n          open={alert.open}\r\n          severity={alert.severity}\r\n          message={alert.message}\r\n          setAlert={setAlert}\r\n        />\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      {/* <!-- Insert  Modal --> */}\r\n      <Modal className=\"fade\" size=\"lg\" show={modalCentered}>\r\n        <form onSubmit={saveServiceAreas}>\r\n          <Modal.Header>\r\n            <Modal.Title>{t(\"add_service_area\")}</Modal.Title>\r\n            <Button\r\n              onClick={() => [setModalCentered(false), setServicesAreas([])]}\r\n              variant=\"\"\r\n              className=\"close\"\r\n            >\r\n              <span>&times;</span>\r\n            </Button>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <div className=\"row \">\r\n              <div className=\"col-xl-12 col-xxl-12 col-lg-12 col-sm-12\">\r\n                <div className=\"form-group\">\r\n                  <div className=\"d-flex justify-content-between\">\r\n                    <label className=\"mb-1 \">\r\n                      {\" \"}\r\n                      <strong>{t(\"areas\")}</strong>{\" \"}\r\n                      <small>\r\n                        (Please first choose the fields and then set the input\r\n                        values.)\r\n                      </small>\r\n                    </label>\r\n                    <small\r\n                      onClick={() => setAreaModal(true)}\r\n                      style={{ cursor: \"pointer\" }}\r\n                    >\r\n                      {t(\"add_area\")}\r\n                    </small>\r\n                  </div>\r\n                  <Select\r\n                    isMulti\r\n                    options={areaLocation.map((o, i) => {\r\n                      return { value: o.id, label: o.areaName };\r\n                    })}\r\n                    onChange={handleSelectEvent}\r\n                    className=\"basic-multi-select\"\r\n                    classNamePrefix=\"select\"\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {servicesAreas?.map((item, i) => {\r\n              return (\r\n                <div className=\"row m-1\" key={i}>\r\n                  <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-6\">\r\n                    <label className=\"mb-1 \">\r\n                      <strong>{item.label}</strong>\r\n                    </label>\r\n                  </div>\r\n                  <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-6\">\r\n                    <input\r\n                      type=\"number\"\r\n                      min=\"0\"\r\n                      required\r\n                      className=\"form-control\"\r\n                      placeholder=\"Delivery charges for this Area\"\r\n                      onChange={(e) => serviceAreaHandle(e, item.value)}\r\n                      value={servicesAreas[i].areaName}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button\r\n              onClick={() => [setModalCentered(false), setServicesAreas([])]}\r\n              variant=\"danger light\"\r\n            >\r\n              {t(\"close\")}\r\n            </Button>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              {t(\"save\")}\r\n            </Button>\r\n          </Modal.Footer>\r\n        </form>\r\n      </Modal>\r\n      <Modal className=\"fade\" show={areaModal}>\r\n        <Formik\r\n          initialValues={initialValues}\r\n          validationSchema={validationSchema}\r\n          onSubmit={save}\r\n        >\r\n          {({ errors, status, setFieldValue, setFieldTouched, touched }) => (\r\n            <Form>\r\n              <Modal.Header>\r\n                <Modal.Title>{t(\"add_area\")}</Modal.Title>\r\n                <Button\r\n                  onClick={() => setAreaModal(false)}\r\n                  variant=\"\"\r\n                  className=\"close\"\r\n                >\r\n                  <span>&times;</span>\r\n                </Button>\r\n              </Modal.Header>\r\n              <Modal.Body>\r\n                <div className=\"form-group\">\r\n                  <label>\r\n                    <strong>{t(\"city\")}</strong>\r\n                  </label>\r\n\r\n                  <AsyncSelect\r\n                    cacheOptions\r\n                    defaultOptions\r\n                    // value={selectedValue}\r\n                    getOptionLabel={(e) => e.cityName}\r\n                    getOptionValue={(e) => e.id}\r\n                    loadOptions={loadOptions}\r\n                    onInputChange={handleInputChange}\r\n                    onChange={(getOptionValue) => {\r\n                      setFieldValue(\"city\", getOptionValue.id);\r\n                    }}\r\n                  />\r\n                  {errors.city ? (\r\n                    <small\r\n                      className=\"invalid\"\r\n                      style={{ color: \"red\", marginTop: \".5rem\" }}\r\n                    >\r\n                      {errors.city}\r\n                    </small>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label>\r\n                    <strong>{t(\"name\")}</strong>\r\n                  </label>\r\n                  <Field\r\n                    name=\"areaName\"\r\n                    type=\"text\"\r\n                    className=\"form-control \"\r\n                    placeholder=\"Area Name...\"\r\n                  />\r\n\r\n                  <ErrorMessage\r\n                    name=\"areaName\"\r\n                    component=\"div\"\r\n                    className=\"text-danger\"\r\n                  />\r\n                </div>\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                <Button\r\n                  onClick={() => setAreaModal(false)}\r\n                  variant=\"danger light\"\r\n                >\r\n                  {t(\"close\")}\r\n                </Button>\r\n                <Button variant=\"primary\" type=\"submit\">\r\n                  {t(\"save\")}\r\n                </Button>\r\n              </Modal.Footer>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </Modal>\r\n      {/* Edit Modal */}\r\n      <Modal className=\"fade\" show={editmodalCentered}>\r\n        <form onSubmit={updateServiceArea} method=\"POST\">\r\n          <Modal.Header>\r\n            <Modal.Title>{t(\"edit_service_area\")}</Modal.Title>\r\n            <Button\r\n              onClick={() => setEditModalCentered(false)}\r\n              variant=\"\"\r\n              className=\"close\"\r\n            >\r\n              <span>&times;</span>\r\n            </Button>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>{t(\"service_area\")}</strong>{\" \"}\r\n              </label>\r\n              <Select\r\n                defaultValue={{\r\n                  value: editServiceAreas.areaLocationId,\r\n                  label: editServiceAreas.areaName,\r\n                }}\r\n                options={areaLocation.map((o, i) => {\r\n                  return { value: o.id, label: o.areaName };\r\n                })}\r\n                onChange={handleSelectEventEdit}\r\n                className=\"basic-multi-select\"\r\n                classNamePrefix=\"select\"\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label className=\"mb-1 \">\r\n                {\" \"}\r\n                <strong>{t(\"delivery_fees\")}</strong>{\" \"}\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                // min=\"0\"\r\n                onChange={editHandleInput}\r\n                name=\"deliveryFees\"\r\n                required\r\n                className=\"form-control\"\r\n                placeholder=\"Delivery charges for this Area\"\r\n                value={editServiceAreas.deliveryFees}\r\n              />\r\n            </div>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button\r\n              onClick={() => setEditModalCentered(false)}\r\n              variant=\"danger light\"\r\n            >\r\n              {t(\"close\")}\r\n            </Button>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              {t(\"update\")}{\" \"}\r\n            </Button>\r\n          </Modal.Footer>\r\n        </form>\r\n      </Modal>\r\n      <div className=\"row\">\r\n        <div className=\"col-xl-12 col-xxl-12 col-lg-12 col-sm-12\">\r\n          <div className=\"card\">\r\n            <div className=\"card-header border-0\">\r\n              <div>\r\n                <h4 className=\"card-title mb-2\">{t(\"service_area\")}</h4>\r\n              </div>\r\n              <div className=\"dropdown\">\r\n                <Button\r\n                  variant=\"primary\"\r\n                  type=\"button\"\r\n                  className=\"mb-2 mr-2\"\r\n                  onClick={() => setModalCentered(true)}\r\n                >\r\n                  {t(\"add_service_area\")}\r\n                </Button>\r\n              </div>\r\n            </div>\r\n            <div className=\"card-body p-0\">\r\n              <div className=\"table-responsive \">\r\n                <table className=\"table \">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>{t(\"number\")}</th>\r\n                      <th>{t(\"service_area\")}</th>\r\n                      <th>{t(\"delivery_fees\")}</th>\r\n                      <th>{t(\"actions\")}</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>{viewProducts_HTMLTABLE}</tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default ServiceArea;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\layouts\\Footer.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Dashboard\\Home\\Home.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Dashboard\\Profile\\Profile.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\PrivateRoute.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Second\\Header.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Second\\Footer.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\Customization.js",["444"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CRow,\r\n  CFormLabel,\r\n  CCol,\r\n} from \"@coreui/react\";\r\nimport { Form } from \"react-bootstrap\";\r\n\r\nimport { useTranslation } from \"react-i18next\";\r\n// import Switch from \"react-switch\";\r\n\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport { FormControlLabel, RadioGroup, Radio } from \"@mui/material\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport Select from \"@mui/material/Select\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardMedia from \"@mui/material/CardMedia\";\r\nimport { CardActionArea } from \"@mui/material\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Grid from \"@mui/material/Grid\";\r\n// import Switch from \"@mui/material/Switch\";\r\nconst Customization = (props) => {\r\n  const { t } = useTranslation();\r\n  // const templateId = atob(props.match.params.id);\r\n  const templateId = props.history.location.state.id;\r\n  const branchId = props.history.location.state.branchId;\r\n\r\n  const history = useHistory();\r\n\r\n  const [settings, setSettings] = useState([]);\r\n  const handleInput = (e) => {\r\n    setSettings({ ...settings, [e.target.name]: e.target.value });\r\n    // const formData = new FormData();\r\n    // formData.append(\r\n    //   \"settings\",\r\n    //   JSON.stringify({ ...settings, [e.target.name]: e.target.value })\r\n    // );\r\n    // axios\r\n    //   .post(`/api/InsertCustomization/${templateId}`, formData)\r\n    //   .then((res) => {\r\n    //     if (res.data.status === 200) {\r\n    //       setLoading(true);\r\n    //     }\r\n    //   });\r\n  };\r\n  const save = (e) => {\r\n    e.preventDefault();\r\n\r\n    const formData = new FormData();\r\n    formData.append(\"settings\", JSON.stringify(settings));\r\n    axios\r\n      .post(`/api/InsertCustomization/${templateId}`, formData)\r\n      .then((res) => {\r\n        if (res.data.status === 200) {\r\n          swal(\"Success\", res.data.message, \"success\");\r\n          setLoading(true);\r\n        }\r\n      });\r\n  };\r\n  const reset = (e) => {\r\n    e.preventDefault();\r\n    axios.get(`/api/ResetCustomization/${templateId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setSettings([]);\r\n        setLoading(true);\r\n        swal(\"Success\", res.data.message, \"success\");\r\n      }\r\n    });\r\n  };\r\n  const [template, setTemplate] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    axios.get(`/api/GetTemplate/${templateId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setSettings(res.data.fetchData.Customization);\r\n        setTemplate(res.data.fetchData);\r\n      }\r\n      setLoading(false);\r\n    });\r\n  }, [loading]);\r\n\r\n  var viewPreview_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    viewPreview_HTMLTABLE = (\r\n      <CCard>\r\n        <CCardHeader component=\"h5\">{t(\"preview\")}</CCardHeader>\r\n        <CCardBody>\r\n          <div\r\n            className=\"spinner-border text-primary\"\r\n            role=\"status\"\r\n            style={{ position: \"fixed\", top: \"0%\", left: \"50%\" }}\r\n          >\r\n            <span className=\"sr-only\">{t(\"loading\")}</span>\r\n          </div>\r\n        </CCardBody>\r\n      </CCard>\r\n    );\r\n  } else {\r\n    viewPreview_HTMLTABLE = (\r\n      <CCard>\r\n        <CCardHeader component=\"h5\">{t(\"preview\")}</CCardHeader>\r\n        <CCardBody>\r\n          <Card>\r\n            <CardActionArea>\r\n              <CardMedia\r\n                component=\"iframe\"\r\n                height=\"700px\"\r\n                image={`/${template?.URL}/${btoa(branchId)}`}\r\n                alt=\"template\"\r\n              />\r\n            </CardActionArea>\r\n          </Card>\r\n        </CCardBody>\r\n      </CCard>\r\n    );\r\n  }\r\n  return (\r\n    <>\r\n      <Form onSubmit={save} method=\"POST\" encType=\"multipart/form-data\">\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={12} className=\"text-right\">\r\n            <button className=\"btn btn-success m-1\" type=\"submit\">\r\n              {t(\"save_and_preview\")}\r\n            </button>\r\n            <button\r\n              className=\"btn btn-info m-1\"\r\n              type=\"button\"\r\n              onClick={(e) => reset(e)}\r\n            >\r\n              {t(\"reset_to_default\")}\r\n            </button>\r\n            <div className=\"btn btn-light m-1\" onClick={() => history.goBack()}>\r\n              {t(\"back\")}\r\n            </div>\r\n          </Grid>\r\n          <Grid item xs={7}>\r\n            <CCard>\r\n              <CCardHeader component=\"h5\">{t(\"customization\")}</CCardHeader>\r\n              <CCardBody>\r\n                <CRow>\r\n                  <CCol sm={12} className=\"m-1 font-weight-bold text-primary\">\r\n                    BACKGROUND COLORS\r\n                  </CCol>\r\n                </CRow>\r\n                <section style={{ padding: 10, border: \"1px dashed grey\" }}>\r\n                  <CRow>\r\n                    <CCol sm={8}>\r\n                      <CFormLabel className=\"col-form-label font-weight-bold\">\r\n                        {t(\"Name\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                    <CCol sm={2}>\r\n                      <CFormLabel className=\"col-form-label font-weight-bold\">\r\n                        {t(\"value\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                    <CCol sm={2}>\r\n                      <CFormLabel className=\"col-form-label font-weight-bold\">\r\n                        {t(\"default\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                  </CRow>\r\n                  <CRow>\r\n                    <CCol sm={8}>\r\n                      <CFormLabel className=\"col-form-label\">\r\n                        {t(\"bgColor\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                    <CCol sm={2}>\r\n                      <input\r\n                        type=\"color\"\r\n                        onChange={handleInput}\r\n                        value={settings?.bgColor}\r\n                        name=\"bgColor\"\r\n                      />\r\n                    </CCol>\r\n                    <CCol sm={2}>\r\n                      <input type=\"color\" disabled value=\"#22252a\" />\r\n                    </CCol>\r\n                  </CRow>\r\n                  <CRow>\r\n                    <CCol sm={8}>\r\n                      <CFormLabel className=\"col-form-label\">\r\n                        {t(\"cardBgColor\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                    <CCol sm={2}>\r\n                      <input\r\n                        type=\"color\"\r\n                        onChange={handleInput}\r\n                        value={settings?.cardBgColor}\r\n                        name=\"cardBgColor\"\r\n                      />\r\n                    </CCol>\r\n                    <CCol sm={2}>\r\n                      <input type=\"color\" disabled value=\"#2d3134\" />\r\n                    </CCol>\r\n                  </CRow>\r\n                  <CRow>\r\n                    <CCol sm={8}>\r\n                      <CFormLabel className=\"col-form-label\">\r\n                        {t(\"button_background_color\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                    <CCol sm={2}>\r\n                      <input\r\n                        type=\"color\"\r\n                        onChange={handleInput}\r\n                        value={settings?.button_background_color}\r\n                        //   value={themes.TextColor}\r\n                        name=\"button_background_color\"\r\n                      />\r\n                    </CCol>\r\n                    <CCol sm={2}>\r\n                      <input\r\n                        type=\"color\"\r\n                        disabled\r\n                        // onChange={handleInput}\r\n                        value=\"#ff751d\"\r\n                      />\r\n                    </CCol>\r\n                  </CRow>\r\n                </section>\r\n                <CRow>\r\n                  <CCol sm={12} className=\"m-1 font-weight-bold text-primary\">\r\n                    COLORS\r\n                  </CCol>\r\n                </CRow>\r\n\r\n                <section style={{ padding: 10, border: \"1px dashed grey\" }}>\r\n                  <CRow>\r\n                    <CCol sm={8}>\r\n                      <CFormLabel className=\"col-form-label font-weight-bold\">\r\n                        {t(\"Name\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                    <CCol sm={2}>\r\n                      <CFormLabel className=\"col-form-label font-weight-bold\">\r\n                        {t(\"value\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                    <CCol sm={2}>\r\n                      <CFormLabel className=\"col-form-label font-weight-bold\">\r\n                        {t(\"default\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                  </CRow>\r\n\r\n                  <CRow>\r\n                    <CCol sm={8}>\r\n                      <CFormLabel className=\"col-form-label\">\r\n                        {t(\"menusAcriveColor\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                    <CCol sm={2}>\r\n                      <input\r\n                        type=\"color\"\r\n                        onChange={handleInput}\r\n                        value={settings?.menusAcriveColor}\r\n                        name=\"menusAcriveColor\"\r\n                      />\r\n                    </CCol>\r\n                    <CCol sm={2}>\r\n                      <input type=\"color\" disabled value=\"#ff751d\" />\r\n                    </CCol>\r\n                  </CRow>\r\n                  <CRow>\r\n                    <CCol sm={8}>\r\n                      <CFormLabel className=\"col-form-label\">\r\n                        {t(\"menusDeactiveColor\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                    <CCol sm={2}>\r\n                      <input\r\n                        type=\"color\"\r\n                        onChange={handleInput}\r\n                        value={settings?.menusDeactiveColor}\r\n                        name=\"menusDeactiveColor\"\r\n                      />\r\n                    </CCol>\r\n                    <CCol sm={2}>\r\n                      <input type=\"color\" disabled value=\"#ffffff\" />\r\n                    </CCol>\r\n                  </CRow>\r\n                  <CRow>\r\n                    <CCol sm={8}>\r\n                      <CFormLabel className=\"col-form-label\">\r\n                        {t(\"product_name_color\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                    <CCol sm={2}>\r\n                      <input\r\n                        type=\"color\"\r\n                        onChange={handleInput}\r\n                        value={settings?.product_name_color}\r\n                        name=\"product_name_color\"\r\n                      />\r\n                    </CCol>\r\n                    <CCol sm={2}>\r\n                      <input type=\"color\" disabled value=\"#ff751d\" />\r\n                    </CCol>\r\n                  </CRow>\r\n                  <CRow>\r\n                    <CCol sm={8}>\r\n                      <CFormLabel className=\"col-form-label\">\r\n                        {t(\"product_discription_color\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                    <CCol sm={2}>\r\n                      <input\r\n                        type=\"color\"\r\n                        onChange={handleInput}\r\n                        value={settings?.product_discription_color}\r\n                        name=\"product_discription_color\"\r\n                      />\r\n                    </CCol>\r\n                    <CCol sm={2}>\r\n                      <input type=\"color\" disabled value=\"#777\" />\r\n                    </CCol>\r\n                  </CRow>\r\n\r\n                  <CRow>\r\n                    <CCol sm={8}>\r\n                      <CFormLabel className=\"col-form-label\">\r\n                        {t(\"price_color\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                    <CCol sm={2}>\r\n                      <input\r\n                        type=\"color\"\r\n                        onChange={handleInput}\r\n                        value={settings?.price_color}\r\n                        name=\"price_color\"\r\n                      />\r\n                    </CCol>\r\n                    <CCol sm={2}>\r\n                      <input type=\"color\" disabled value=\"#ff751d\" />\r\n                    </CCol>\r\n                  </CRow>\r\n                  <CRow>\r\n                    <CCol sm={8}>\r\n                      <CFormLabel className=\"col-form-label\">\r\n                        {t(\"button_text_color\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                    <CCol sm={2}>\r\n                      <input\r\n                        type=\"color\"\r\n                        onChange={handleInput}\r\n                        value={settings?.button_text_color}\r\n                        // value={themes.TextColor}\r\n                        name=\"button_text_color\"\r\n                      />\r\n                    </CCol>\r\n                    <CCol sm={2}>\r\n                      <input\r\n                        type=\"color\"\r\n                        disabled\r\n                        // onChange={handleInput}\r\n                        value=\"#f1fcfe\"\r\n                      />\r\n                    </CCol>\r\n                  </CRow>\r\n                </section>\r\n                <CRow>\r\n                  <CCol sm={12} className=\"m-1 font-weight-bold text-primary\">\r\n                    FONT SIZE\r\n                  </CCol>\r\n                </CRow>\r\n                <section style={{ padding: 10, border: \"1px dashed grey\" }}>\r\n                  <CRow>\r\n                    <CCol sm={8}>\r\n                      <CFormLabel className=\"col-form-label font-weight-bold\">\r\n                        {t(\"Name\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                    <CCol sm={2}>\r\n                      <CFormLabel className=\"col-form-label font-weight-bold\">\r\n                        {t(\"value\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                    <CCol sm={2} className=\"text-center\">\r\n                      <CFormLabel className=\"col-form-label font-weight-bold\">\r\n                        {t(\"default\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                  </CRow>\r\n\r\n                  <CRow>\r\n                    <CCol sm={7} className=\"mt-2\">\r\n                      <CFormLabel className=\"col-form-label\">\r\n                        {t(\"menusSize\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                    <CCol sm={3}>\r\n                      <input\r\n                        type=\"number\"\r\n                        className=\"form-control m-1\"\r\n                        onChange={handleInput}\r\n                        value={settings?.menusSize}\r\n                        name=\"menusSize\"\r\n                        min=\"1\"\r\n                        max=\"5\"\r\n                        step=\"0.25\"\r\n                      />\r\n                    </CCol>\r\n                    <CCol sm={2} className=\"text-center mt-2\">\r\n                      1\r\n                    </CCol>\r\n                  </CRow>\r\n\r\n                  <CRow>\r\n                    <CCol sm={7} className=\"mt-2\">\r\n                      <CFormLabel className=\"col-form-label\">\r\n                        {t(\"pNameSize\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                    <CCol sm={3}>\r\n                      <input\r\n                        type=\"number\"\r\n                        className=\"form-control m-1\"\r\n                        onChange={handleInput}\r\n                        value={settings?.pNameSize}\r\n                        name=\"pNameSize\"\r\n                        min=\"1\"\r\n                        max=\"5\"\r\n                        step=\"0.25\"\r\n                      />\r\n                    </CCol>\r\n                    <CCol sm={2} className=\"text-center mt-2\">\r\n                      1\r\n                    </CCol>\r\n                  </CRow>\r\n                  <CRow>\r\n                    <CCol sm={7} className=\"mt-2\">\r\n                      <CFormLabel className=\"col-form-label\">\r\n                        {t(\"pDiscriptionSize\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                    <CCol sm={3}>\r\n                      <input\r\n                        type=\"number\"\r\n                        className=\"form-control m-1\"\r\n                        onChange={handleInput}\r\n                        value={settings?.pDiscriptionSize}\r\n                        name=\"pDiscriptionSize\"\r\n                        min=\"1\"\r\n                        max=\"5\"\r\n                        step=\"0.25\"\r\n                      />\r\n                    </CCol>\r\n                    <CCol sm={2} className=\"text-center mt-2\">\r\n                      0.75\r\n                    </CCol>\r\n                  </CRow>\r\n\r\n                  <CRow>\r\n                    <CCol sm={7} className=\"mt-2\">\r\n                      <CFormLabel className=\"col-form-label\">\r\n                        {t(\"priceSize\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                    <CCol sm={3}>\r\n                      <input\r\n                        type=\"number\"\r\n                        className=\"form-control m-1\"\r\n                        onChange={handleInput}\r\n                        value={settings?.priceSize}\r\n                        name=\"priceSize\"\r\n                        min=\"1\"\r\n                        max=\"5\"\r\n                        step=\"0.25\"\r\n                      />\r\n                    </CCol>\r\n                    <CCol sm={2} className=\"text-center mt-2\">\r\n                      1.25\r\n                    </CCol>\r\n                  </CRow>\r\n                  <CRow>\r\n                    <CCol sm={7} className=\"mt-2\">\r\n                      <CFormLabel className=\"col-form-label\">\r\n                        {t(\"bTextSize\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                    <CCol sm={3}>\r\n                      <input\r\n                        type=\"number\"\r\n                        className=\"form-control m-1\"\r\n                        onChange={handleInput}\r\n                        value={settings?.bTextSize}\r\n                        name=\"bTextSize\"\r\n                        min=\"1\"\r\n                        max=\"5\"\r\n                        step=\"0.25\"\r\n                      />\r\n                    </CCol>\r\n                    <CCol sm={2} className=\"text-center mt-2\">\r\n                      1\r\n                    </CCol>\r\n                  </CRow>\r\n                </section>\r\n\r\n                <CRow>\r\n                  <CCol sm={12} className=\"m-1 font-weight-bold text-primary\">\r\n                    FONTS\r\n                  </CCol>\r\n                </CRow>\r\n                <section style={{ padding: 10, border: \"1px dashed grey\" }}>\r\n                  <CRow>\r\n                    <CCol sm={4}>\r\n                      <CFormLabel className=\"col-form-label font-weight-bold\">\r\n                        {t(\"Name\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                    <CCol sm={4}>\r\n                      <CFormLabel className=\"col-form-label font-weight-bold\">\r\n                        {t(\"value\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                    <CCol sm={4}>\r\n                      <CFormLabel className=\"col-form-label font-weight-bold\">\r\n                        {t(\"default\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                  </CRow>\r\n                  <CRow>\r\n                    <CCol sm={4}>\r\n                      <CFormLabel className=\"col-form-label\">\r\n                        {t(\"font\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                    <CCol sm={4}>\r\n                      <FormControl fullWidth>\r\n                        <InputLabel id=\"demo-simple-select-label\">\r\n                          {t(\"fonts\")}\r\n                        </InputLabel>\r\n                        <Select\r\n                          labelId=\"demo-simple-select-label\"\r\n                          id=\"demo-simple-select\"\r\n                          //   value={age}\r\n                          label=\"fonts\"\r\n                          onChange={handleInput}\r\n                          name=\"font\"\r\n                          defaultValue={\r\n                            settings?.font ? settings.font : \"sans-serif\"\r\n                          }\r\n                        >\r\n                          <MenuItem value=\"-apple-system\">\r\n                            -apple-system\r\n                          </MenuItem>\r\n                          <MenuItem value=\"BlinkMacSystemFont\">\r\n                            BlinkMacSystemFont\r\n                          </MenuItem>\r\n                          <MenuItem value=\"Segoe UI\">Segoe UI</MenuItem>\r\n                          <MenuItem value=\"Roboto\">Roboto</MenuItem>\r\n                          <MenuItem value=\"Helvetica Neue\">\r\n                            Helvetica Neue\r\n                          </MenuItem>\r\n                          <MenuItem value=\"Arial\">Arial</MenuItem>\r\n                          <MenuItem value=\"sans-serif\">sans-serif</MenuItem>\r\n                          <MenuItem value=\"Apple Color Emoji\">\r\n                            Apple Color Emoji\r\n                          </MenuItem>\r\n                          <MenuItem value=\"Segoe UI Emoji\">\r\n                            Segoe UI Emoji\r\n                          </MenuItem>\r\n                          <MenuItem value=\"Segoe UI Symbol\">\r\n                            Segoe UI Symbol\r\n                          </MenuItem>\r\n                        </Select>\r\n                      </FormControl>\r\n                    </CCol>\r\n                    <CCol sm={4}>\r\n                      <CFormLabel className=\"col-form-label \">\r\n                        sans-serif\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                  </CRow>\r\n                </section>\r\n                <CRow>\r\n                  <CCol sm={12} className=\"m-1 font-weight-bold text-primary\">\r\n                    OTHERS\r\n                  </CCol>\r\n                </CRow>\r\n                <section style={{ padding: 10, border: \"1px dashed grey\" }}>\r\n                  <CRow>\r\n                    <CCol sm={6}>\r\n                      <CFormLabel className=\"col-form-label font-weight-bold\">\r\n                        {t(\"Name\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                    <CCol sm={3}>\r\n                      <CFormLabel className=\"col-form-label font-weight-bold\">\r\n                        {t(\"value\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                    <CCol sm={3}>\r\n                      <CFormLabel className=\"col-form-label font-weight-bold\">\r\n                        {t(\"default\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                  </CRow>\r\n                  <CRow>\r\n                    <CCol sm={6}>\r\n                      <CFormLabel className=\"col-form-label\">\r\n                        {t(\"number_of_products_in_each_row\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                    <CCol sm={3}>\r\n                      <input\r\n                        className=\"form-control m-1\"\r\n                        onChange={handleInput}\r\n                        type=\"number\"\r\n                        value={settings?.numberProductInRowMobile}\r\n                        name=\"numberProductInRowMobile\"\r\n                        min=\"1\"\r\n                        max=\"6\"\r\n                        step=\"1\"\r\n                      />\r\n                      <input\r\n                        className=\"form-control m-1\"\r\n                        onChange={handleInput}\r\n                        type=\"number\"\r\n                        value={settings?.numberProductInRowTablet}\r\n                        name=\"numberProductInRowTablet\"\r\n                        min=\"1\"\r\n                        max=\"6\"\r\n                        step=\"1\"\r\n                      />\r\n                      <input\r\n                        className=\"form-control m-1\"\r\n                        onChange={handleInput}\r\n                        type=\"number\"\r\n                        value={settings?.numberProductInRowComputer}\r\n                        name=\"numberProductInRowComputer\"\r\n                        min=\"1\"\r\n                        max=\"6\"\r\n                        step=\"1\"\r\n                      />\r\n                    </CCol>\r\n                    <CCol sm={3}>\r\n                      <CFormLabel\r\n                        htmlFor=\"inputPassword\"\r\n                        className=\"col-form-label\"\r\n                      >\r\n                        2 For Mobile <br></br>3 For tablet<br></br>4 For\r\n                        computer\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                  </CRow>\r\n                  <CRow>\r\n                    <CCol sm={5}>\r\n                      <CFormLabel className=\"col-form-label\">\r\n                        {t(\"show_preparation_time\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n\r\n                    <CCol sm={5}>\r\n                      <RadioGroup\r\n                        row\r\n                        value={\r\n                          settings?.preparation_time\r\n                            ? settings.preparation_time\r\n                            : \"1\"\r\n                        }\r\n                        name=\"preparation_time\"\r\n                        onChange={handleInput}\r\n                      >\r\n                        <FormControlLabel\r\n                          value=\"1\"\r\n                          control={<Radio />}\r\n                          label=\"Yes\"\r\n                        />\r\n                        <FormControlLabel\r\n                          value=\"0\"\r\n                          control={<Radio />}\r\n                          label=\"No\"\r\n                        />\r\n                      </RadioGroup>\r\n                    </CCol>\r\n                    <CCol sm={2}>\r\n                      <CFormLabel className=\" col-form-label \">Yes</CFormLabel>\r\n                    </CCol>\r\n                  </CRow>\r\n                  <CRow>\r\n                    <CCol sm={5}>\r\n                      <CFormLabel className=\"col-form-label\">\r\n                        {t(\"show_extras\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n\r\n                    <CCol sm={5}>\r\n                      <RadioGroup\r\n                        row\r\n                        value={\r\n                          settings?.show_extras ? settings.show_extras : \"1\"\r\n                        }\r\n                        name=\"show_extras\"\r\n                        onChange={handleInput}\r\n                      >\r\n                        <FormControlLabel\r\n                          value=\"1\"\r\n                          control={<Radio />}\r\n                          label=\"Yes\"\r\n                        />\r\n                        <FormControlLabel\r\n                          value=\"0\"\r\n                          control={<Radio />}\r\n                          label=\"No\"\r\n                        />\r\n                      </RadioGroup>\r\n                    </CCol>\r\n                    <CCol sm={2}>\r\n                      <CFormLabel className=\" col-form-label \">Yes</CFormLabel>\r\n                    </CCol>\r\n                  </CRow>\r\n                  <CRow>\r\n                    <CCol sm={5}>\r\n                      <CFormLabel className=\"col-form-label\">\r\n                        {t(\"show_ingredients\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n\r\n                    <CCol sm={5}>\r\n                      <RadioGroup\r\n                        row\r\n                        value={\r\n                          settings?.show_ingredients\r\n                            ? settings.show_ingredients\r\n                            : \"1\"\r\n                        }\r\n                        name=\"show_ingredients\"\r\n                        onChange={handleInput}\r\n                      >\r\n                        <FormControlLabel\r\n                          value=\"1\"\r\n                          control={<Radio />}\r\n                          label=\"Yes\"\r\n                        />\r\n                        <FormControlLabel\r\n                          value=\"0\"\r\n                          control={<Radio />}\r\n                          label=\"No\"\r\n                        />\r\n                      </RadioGroup>\r\n                    </CCol>\r\n                    <CCol sm={2}>\r\n                      <CFormLabel className=\" col-form-label \">Yes</CFormLabel>\r\n                    </CCol>\r\n                  </CRow>\r\n                  <CRow>\r\n                    <CCol sm={5}>\r\n                      <CFormLabel className=\"col-form-label\">\r\n                        {t(\"show_recommendation\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n\r\n                    <CCol sm={5}>\r\n                      <RadioGroup\r\n                        row\r\n                        value={\r\n                          settings?.show_recommendation\r\n                            ? settings.show_recommendation\r\n                            : \"1\"\r\n                        }\r\n                        name=\"show_recommendation\"\r\n                        onChange={handleInput}\r\n                      >\r\n                        <FormControlLabel\r\n                          value=\"1\"\r\n                          control={<Radio />}\r\n                          label=\"Yes\"\r\n                        />\r\n                        <FormControlLabel\r\n                          value=\"0\"\r\n                          control={<Radio />}\r\n                          label=\"No\"\r\n                        />\r\n                      </RadioGroup>\r\n                    </CCol>\r\n                    <CCol sm={2}>\r\n                      <CFormLabel className=\" col-form-label \">Yes</CFormLabel>\r\n                    </CCol>\r\n                  </CRow>\r\n                  <CRow>\r\n                    <CCol sm={5}>\r\n                      <CFormLabel className=\"col-form-label\">\r\n                        {t(\"show_variants\")}\r\n                      </CFormLabel>\r\n                    </CCol>\r\n                    {}\r\n                    <CCol sm={5}>\r\n                      <RadioGroup\r\n                        row\r\n                        value={\r\n                          settings?.show_variants ? settings.show_variants : \"1\"\r\n                        }\r\n                        name=\"show_variants\"\r\n                        onChange={handleInput}\r\n                      >\r\n                        <FormControlLabel\r\n                          value=\"1\"\r\n                          control={<Radio />}\r\n                          label=\"Yes\"\r\n                        />\r\n                        <FormControlLabel\r\n                          value=\"0\"\r\n                          control={<Radio />}\r\n                          label=\"No\"\r\n                        />\r\n                      </RadioGroup>\r\n                    </CCol>\r\n                    <CCol sm={2}>\r\n                      <CFormLabel className=\" col-form-label \">Yes</CFormLabel>\r\n                    </CCol>\r\n                  </CRow>\r\n                </section>\r\n              </CCardBody>\r\n            </CCard>\r\n          </Grid>\r\n          <Grid item xs={5}>\r\n            {viewPreview_HTMLTABLE}\r\n          </Grid>\r\n        </Grid>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Customization;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Products\\Show.js",["445"],"import React, { Fragment } from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  useRouteMatch,\r\n} from \"react-router-dom\";\r\n\r\nimport Product from \"../Products/Product\";\r\nimport PrivateRoute from \"../PrivateRoute\";\r\nimport Variants from \"../Variants/Variants\";\r\n// import { useTranslation } from \"react-i18next\";\r\nimport AddProduct from \"./AddProduct\";\r\nimport EditProduct from \"./EditProduct\";\r\n\r\nconst ProductShow = (props) => {\r\n  const { path, url } = useRouteMatch();\r\n  // const { t } = useTranslation();\r\n  // const id = props.history.location.state.id;\r\n\r\n  return (\r\n    <Fragment>\r\n      <Router>\r\n        <Switch>\r\n          <PrivateRoute exact path={`${path}`} component={Product} />\r\n          <PrivateRoute path={`${path}/variants`} component={Variants} />\r\n          <PrivateRoute path={`${path}/add-product`} component={AddProduct} />\r\n          <PrivateRoute path={`${path}/edit-product`} component={EditProduct} />\r\n        </Switch>\r\n      </Router>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default ProductShow;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\layouts\\PageTitle.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Show.js",["446"],"import React, { Fragment } from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  useRouteMatch,\r\n} from \"react-router-dom\";\r\n\r\nimport Design from \"./Design\";\r\nimport PrivateRoute from \"../PrivateRoute\";\r\n// import { useTranslation } from \"react-i18next\";\r\nimport Customization from \"./Templates/Dark/Customization\";\r\nimport Theme from \"./Theme\";\r\nimport EditTheme from \"./EditTheme\";\r\nimport DefaultCustomization from \"./Templates/Default/Customization\";\r\n\r\nconst DesignShow = (props) => {\r\n  const { path, url } = useRouteMatch();\r\n  // const { t } = useTranslation();\r\n  // const id = props.history.location.state.id;\r\n\r\n  return (\r\n    <Fragment>\r\n      <Router>\r\n        <Switch>\r\n          <PrivateRoute exact path={`${path}`} component={Design} />\r\n          <PrivateRoute\r\n            path={`${path}/dark-template-customization`}\r\n            component={Customization}\r\n          />\r\n          <PrivateRoute\r\n            path={`${path}/defualt-template-customization`}\r\n            component={DefaultCustomization}\r\n          />\r\n          <PrivateRoute path={`${path}/add-theme`} component={Theme} />\r\n          <PrivateRoute path={`${path}/edit-theme`} component={EditTheme} />\r\n          {/* <PrivateRoute path={`${path}/edit-product`} component={EditProduct} /> */}\r\n        </Switch>\r\n      </Router>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default DesignShow;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Categories\\SubCategory.js",["447","448","449","450","451","452","453"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Link, useHistory, useRouteMatch } from \"react-router-dom\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as yup from \"yup\";\r\nimport { CBreadcrumb, CBreadcrumbItem } from \"@coreui/react\";\r\nimport { base_url, port } from \"../../../Consts\";\r\nimport DefaultPic from \"../../../images/hellomenu/sub_category.svg\";\r\nimport ViewComfyIcon from \"@mui/icons-material/ViewComfy\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport TableRowsIcon from \"@mui/icons-material/TableRows\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport CustomAlert from \"../CustomAlert\";\r\n\r\nconst SubCategory = (props) => {\r\n  const initialValues = {\r\n    SubCategoryName: \"\",\r\n  };\r\n  const validationSchema = () => {\r\n    return Yup.object().shape({\r\n      SubCategoryName: Yup.string().required(\"Sub Category Name is required\"),\r\n    });\r\n  };\r\n  // for localization\r\n  const { t } = useTranslation();\r\n  const id = props.history.location.state.sub_id;\r\n  const [check, setCheck] = useState(true);\r\n\r\n  // insert start\r\n  const [modalCentered, setModalCentered] = useState(false);\r\n  const [subCategoryInsert, setSubCategoryInsert] = useState({\r\n    SubCategoryName: \"\",\r\n    CategoryID: id,\r\n  });\r\n  const handleInput = (e) => {\r\n    e.persist();\r\n    setSubCategoryInsert({\r\n      ...subCategoryInsert,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n  const [imageState, setImageState] = useState([]);\r\n\r\n  const handleImage = (e) => {\r\n    setImageState({ ...imageState, SubCategoryIcon: e.target.files[0] });\r\n  };\r\n  const [alert, setAlert] = useState({\r\n    open: false,\r\n    severity: \"success\",\r\n    message: \"\",\r\n  });\r\n  const setAlerts = (open, severity, message) => {\r\n    setAlert({\r\n      open: open,\r\n      severity: severity,\r\n      message: message,\r\n    });\r\n  };\r\n  const saveSubMenu = (data) => {\r\n    // e.preventDefault();\r\n    const checkCate = fetchData.every((item) => {\r\n      return item.SubCategoryName !== data.SubCategoryName;\r\n    });\r\n    if (checkCate) {\r\n      const formData = new FormData();\r\n      formData.append(\"SubCategoryName\", data.SubCategoryName);\r\n      formData.append(\"CategoryID\", id);\r\n      formData.append(\"SubCategoryIcon\", imageState.SubCategoryIcon);\r\n      axios.post(\"/api/InsertSubCategories\", formData).then((res) => {\r\n        if (res.data.status === 200) {\r\n          // console.log(res.data.status);\r\n\r\n          setImageState([]);\r\n          setCheck(!check);\r\n\r\n          setAlerts(true, \"success\", res.data.message);\r\n\r\n          setModalCentered(false);\r\n          //  this.props.history.push(\"/\")\r\n        }\r\n      });\r\n    } else {\r\n      setAlerts(\r\n        true,\r\n        \"warning\",\r\n        \"The name already exists, please try another name.\"\r\n      );\r\n    }\r\n  };\r\n  // insert End\r\n\r\n  // edit start\r\n  const [editmodalCentered, setEditModalCentered] = useState(false);\r\n  const [editSubMenu, setEditSubMenu] = useState([]);\r\n\r\n  const fetchSubMenus = (e, id) => {\r\n    e.preventDefault();\r\n\r\n    axios.get(`/api/EditSubCategories/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setEditSubMenu(res.data.menu);\r\n        setEditModalCentered(true);\r\n      } else if (res.data.status === 404) {\r\n        setAlerts(true, \"error\", res.data.message);\r\n      }\r\n    });\r\n  };\r\n  const updateSubMenu = (data) => {\r\n    const formData = new FormData();\r\n    formData.append(\"SubCategoryIcon\", imageState.SubCategoryIcon);\r\n    formData.append(\"SubCategoryName\", data.SubCategoryName);\r\n    formData.append(\"CategoryID\", id);\r\n    formData.append(\"id\", editSubMenu.id);\r\n    axios.post(\"/api/UpdateSubCategory\", formData).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setAlerts(true, \"success\", res.data.message);\r\n\r\n        setEditModalCentered(false);\r\n        setCheck(!check);\r\n\r\n        //  this.props.history.push(\"/\")\r\n      } else if (res.data.status === 404) {\r\n        setAlerts(true, \"error\", res.data.message);\r\n      }\r\n    });\r\n  };\r\n  // edit end\r\n  // delete start\r\n  const deleteSubMenu = (e, id) => {\r\n    e.preventDefault();\r\n    swal({\r\n      title: \"Are you sure?\",\r\n      text: \"Once deleted, you will not be able to recover this imaginary file!\",\r\n      icon: \"warning\",\r\n      buttons: [t(\"cancel\"), t(\"confirm\")],\r\n      dangerMode: true,\r\n    }).then((willDelete) => {\r\n      if (willDelete) {\r\n        axios.delete(`/api/DeleteSubCategories/${id}`).then((res) => {\r\n          if (res.data.status === 200) {\r\n            setAlerts(true, \"success\", res.data.message);\r\n\r\n            setCheck(!check);\r\n\r\n            // thisClicked.closest(\"tr\").remove();\r\n          } else if (res.data.status === 404) {\r\n            setAlerts(true, \"error\", res.data.message);\r\n          }\r\n        });\r\n      } else {\r\n        setAlerts(true, \"info\", \"Your Data is safe now!\");\r\n      }\r\n    });\r\n  };\r\n  // delete end\r\n\r\n  //for retriving data using laravel API\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  useEffect(() => {\r\n    axios.get(`/api/GetSubCategories/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setFetchData(res.data.fetchData);\r\n      }\r\n      setLoading(false);\r\n    });\r\n  }, [check]);\r\n  const [layout, setLayout] = useState(\r\n    JSON.parse(\r\n      localStorage.getItem(\"layoutSubCategory\")\r\n        ? localStorage.getItem(\"layoutSubCategory\")\r\n        : true\r\n    )\r\n  );\r\n  const changeLayout = () => {\r\n    setLayout(!layout);\r\n    localStorage.setItem(\"layoutSubCategory\", !layout);\r\n  };\r\n  var viewProducts_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"spinner-border text-primary \" role=\"status\">\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewProducts_HTMLTABLE = fetchData.map((item, i) => {\r\n      return (\r\n        <div className=\"col-xl-3 col-lg-3 col-sm-6 col-md-3\" key={i}>\r\n          <div className=\"card overflow-hidden\">\r\n            <div className=\"card-body\">\r\n              <div className=\"text-center\">\r\n                <img\r\n                  style={{\r\n                    height: \"100px\",\r\n                    width: \"100%\",\r\n                    borderRadius: \"10%\",\r\n                    objectFit: \"contain\",\r\n                  }}\r\n                  src={\r\n                    item.SubCategoryIcon\r\n                      ? `http://${base_url}:${port}/images/sub_catagories/${item.SubCategoryIcon}`\r\n                      : DefaultPic\r\n                  }\r\n                  alt=\"sub category\"\r\n                />\r\n\r\n                <h4 className=\"mt-2\">{item.SubCategoryName}</h4>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"card-footer pt-0 pb-0 text-center\">\r\n              <div className=\"row\">\r\n                <div className=\"col-6 pt-3 pb-3 border-right\">\r\n                  <Link to=\"\" onClick={(e) => fetchSubMenus(e, item.sub_id)}>\r\n                    <span>{t(\"edit\")}</span>\r\n                  </Link>\r\n                </div>\r\n                <div className=\"col-6 pt-3 pb-3\">\r\n                  <Link to=\"\" onClick={(e) => deleteSubMenu(e, item.sub_id)}>\r\n                    <span>{t(\"delete\")}</span>\r\n                  </Link>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      {alert.open ? (\r\n        <CustomAlert\r\n          open={alert.open}\r\n          severity={alert.severity}\r\n          message={alert.message}\r\n          setAlert={setAlert}\r\n        />\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <CBreadcrumb style={{ \"--cui-breadcrumb-divider\": \"'>'\" }}>\r\n        <CBreadcrumbItem\r\n          className=\"font-weight-bold\"\r\n          // onClick={() => history.goBack()}\r\n        >\r\n          {t(\"categories\")}\r\n        </CBreadcrumbItem>\r\n        <CBreadcrumbItem active>{t(\"sub_category\")}</CBreadcrumbItem>\r\n      </CBreadcrumb>\r\n      {/* <!-- Insert  Modal --> */}\r\n      <Modal className=\"fade\" show={modalCentered}>\r\n        <Modal.Header>\r\n          <Modal.Title>{t(\"add_sub_Category\")}</Modal.Title>\r\n          <Button\r\n            onClick={() => setModalCentered(false)}\r\n            variant=\"\"\r\n            className=\"close\"\r\n          >\r\n            <span>&times;</span>\r\n          </Button>\r\n        </Modal.Header>\r\n        <Formik\r\n          initialValues={initialValues}\r\n          validationSchema={validationSchema}\r\n          onSubmit={saveSubMenu}\r\n        >\r\n          {({ errors, status, touched }) => (\r\n            <Form>\r\n              <Modal.Body>\r\n                <div className=\"form-group\">\r\n                  <label> {t(\"sub_category_icon\")}</label>\r\n                  <Field\r\n                    name=\"SubCategoryName\"\r\n                    type=\"text\"\r\n                    className={\r\n                      \"form-control\" +\r\n                      (errors.SubCategoryName && touched.SubCategoryName\r\n                        ? \" is-invalid\"\r\n                        : \"\")\r\n                    }\r\n                    placeholder={t(\"category_name\")}\r\n                  />\r\n                  <ErrorMessage\r\n                    name=\"SubCategoryName\"\r\n                    component=\"div\"\r\n                    className=\"invalid-feedback\"\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label> {t(\"image\")}</label>\r\n                  <input\r\n                    type=\"file\"\r\n                    className=\"form-control\"\r\n                    placeholder={t(\"sub_category_icon\")}\r\n                    name=\"SubCategoryIcon\"\r\n                    onChange={handleImage}\r\n                  />\r\n                </div>\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                <Button\r\n                  onClick={() => setModalCentered(false)}\r\n                  variant=\"danger light\"\r\n                >\r\n                  {t(\"close\")}\r\n                </Button>\r\n                <Button variant=\"primary\" type=\"submit\">\r\n                  {t(\"save\")}{\" \"}\r\n                </Button>\r\n              </Modal.Footer>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </Modal>\r\n      {/* Edit Modal */}\r\n      <Modal className=\"fade\" show={editmodalCentered}>\r\n        <Modal.Header>\r\n          <Modal.Title>{t(\"edit_sub_category\")}</Modal.Title>\r\n          <Button\r\n            onClick={() => setEditModalCentered(false)}\r\n            variant=\"\"\r\n            className=\"close\"\r\n          >\r\n            <span>&times;</span>\r\n          </Button>\r\n        </Modal.Header>\r\n        <Formik\r\n          initialValues={editSubMenu}\r\n          validationSchema={validationSchema}\r\n          onSubmit={updateSubMenu}\r\n        >\r\n          {({ errors, status, touched }) => (\r\n            <Form>\r\n              <Modal.Body>\r\n                <div className=\"form-group\">\r\n                  <label> {t(\"sub_category_icon\")}</label>\r\n                  <Field\r\n                    name=\"SubCategoryName\"\r\n                    type=\"text\"\r\n                    className={\r\n                      \"form-control\" +\r\n                      (errors.SubCategoryName && touched.SubCategoryName\r\n                        ? \" is-invalid\"\r\n                        : \"\")\r\n                    }\r\n                    placeholder={t(\"category_name\")}\r\n                  />\r\n                  <ErrorMessage\r\n                    name=\"SubCategoryName\"\r\n                    component=\"div\"\r\n                    className=\"invalid-feedback\"\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label> {t(\"image\")}</label>\r\n                  <input\r\n                    type=\"file\"\r\n                    className=\"form-control\"\r\n                    placeholder={t(\"sub_category_icon\")}\r\n                    name=\"SubCategoryIcon\"\r\n                    onChange={handleImage}\r\n                  />\r\n                </div>\r\n                <img\r\n                  src={\r\n                    editSubMenu.SubCategoryIcon\r\n                      ? `http://${base_url}:${port}/images/sub_catagories/${editSubMenu.SubCategoryIcon}`\r\n                      : DefaultPic\r\n                  }\r\n                  width=\"70\"\r\n                  alt=\" \"\r\n                />\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                <Button\r\n                  onClick={() => setEditModalCentered(false)}\r\n                  variant=\"danger light\"\r\n                >\r\n                  {t(\"close\")}\r\n                </Button>\r\n                <Button variant=\"primary\" type=\"submit\">\r\n                  {t(\"save\")}{\" \"}\r\n                </Button>\r\n              </Modal.Footer>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </Modal>\r\n      <div className=\"row justify-content-end\">\r\n        <div className=\"col-1\">\r\n          <IconButton aria-label=\"Example\" onClick={changeLayout}>\r\n            {layout ? <TableRowsIcon /> : <ViewComfyIcon />}\r\n          </IconButton>\r\n        </div>\r\n      </div>\r\n      {layout ? (\r\n        <div className=\"row\">\r\n          {viewProducts_HTMLTABLE}\r\n          <div className=\"col-xl-3 col-lg-3 col-sm-6 col-md-3\">\r\n            <div className=\"card overflow-hidden \">\r\n              <div\r\n                className=\"card-body d-flex justify-content-center text-center\"\r\n                style={{ border: \"2px dashed #f50b65\" }}\r\n              >\r\n                <div className=\"align-self-center text-center\">\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-outline-primary\"\r\n                    onClick={() => setModalCentered(true)}\r\n                  >\r\n                    <AddIcon />\r\n\r\n                    {t(\"add_sub_Category\")}\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div className=\"row\">\r\n          <div className=\"col-xl-12 col-xxl-12 col-lg-12 col-sm-12\">\r\n            <div className=\"card\">\r\n              <div className=\"card-header border-0\">\r\n                <div>\r\n                  <h4 className=\"card-title mb-2\">{t(\"categories\")}</h4>\r\n                </div>\r\n                <div className=\"dropdown\">\r\n                  <Button\r\n                    variant=\"primary\"\r\n                    type=\"button\"\r\n                    className=\"mb-2 mr-2\"\r\n                    onClick={() => setModalCentered(true)}\r\n                  >\r\n                    {t(\"add_category\")}\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n              <div className=\"card-body p-0\">\r\n                <div className=\"table-responsive \">\r\n                  <table className=\"table text-center \">\r\n                    <thead>\r\n                      <tr className=\"card-title\">\r\n                        <th>{t(\"image\")}</th>\r\n                        <th>{t(\"sub_category_name\")}</th>\r\n                        <th>{t(\"actions\")}</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      {fetchData.map((item, i) => {\r\n                        return (\r\n                          <tr key={item.id}>\r\n                            <td>\r\n                              <div>\r\n                                <img\r\n                                  style={{\r\n                                    height: \"50px\",\r\n                                    width: \"100%\",\r\n                                    borderRadius: \"10%\",\r\n                                    objectFit: \"contain\",\r\n                                  }}\r\n                                  src={\r\n                                    item.SubCategoryIcon\r\n                                      ? `http://${base_url}:${port}/images/sub_catagories/${item.SubCategoryIcon}`\r\n                                      : DefaultPic\r\n                                  }\r\n                                  alt=\"category\"\r\n                                />\r\n                              </div>\r\n                            </td>\r\n                            <td>{item.SubCategoryName}</td>\r\n\r\n                            <td>\r\n                              <button\r\n                                type=\"button\"\r\n                                onClick={(e) => fetchSubMenus(e, item.sub_id)}\r\n                                className=\"btn btn-outline-danger btn-sm\"\r\n                              >\r\n                                {t(\"edit\")}\r\n                              </button>\r\n                              &nbsp;&nbsp;&nbsp;\r\n                              <button\r\n                                type=\"button\"\r\n                                onClick={(e) => deleteSubMenu(e, item.sub_id)}\r\n                                className=\"btn btn-outline-warning btn-sm\"\r\n                              >\r\n                                {t(\"delete\")}\r\n                              </button>\r\n                            </td>\r\n                          </tr>\r\n                        );\r\n                      })}\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default SubCategory;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Categories\\Category.js",["454","455","456","457"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\nimport { base_url, port } from \"../../../Consts\";\r\n/// Bootstrap\r\nimport { Row } from \"react-bootstrap\";\r\nimport { Link, useRouteMatch } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport DefaultPic from \"../../../images/hellomenu/category.svg\";\r\nimport ViewComfyIcon from \"@mui/icons-material/ViewComfy\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport TableRowsIcon from \"@mui/icons-material/TableRows\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport Switch from \"@mui/material/Switch\";\r\nimport Select from \"react-select\";\r\nimport Chip from \"@mui/material/Chip\";\r\nimport Backdrop from \"@mui/material/Backdrop\";\r\nimport ButtonGroup from \"@mui/material/ButtonGroup\";\r\nimport CustomAlert from \"../CustomAlert\";\r\n\r\nconst Category = (props) => {\r\n  const { path, url } = useRouteMatch();\r\n  // for localization\r\n  const { t } = useTranslation();\r\n  // ID\r\n  const id = props.history.location.state.id;\r\n  const [check, setCheck] = useState(true);\r\n  const [share, setShare] = useState(false);\r\n\r\n  // insert Start\r\n  const [modal, setModal] = useState(false);\r\n  const [modalCentered, setModalCentered] = useState(false);\r\n  const [imageState, setImageState] = useState([]);\r\n  const handleImage = (e) => {\r\n    setImageState({ ...imageState, CategoryIcon: e.target.files[0] });\r\n  };\r\n  const initialValues = {\r\n    CategoryName: \"\",\r\n  };\r\n  const validationSchema = () => {\r\n    return Yup.object().shape({\r\n      CategoryName: Yup.string().required(\"Category Name is required\"),\r\n    });\r\n  };\r\n  const [productbranches, setProductBranches] = useState([]);\r\n  const handleSelectBranches = (e) => {\r\n    setProductBranches(e);\r\n  };\r\n  const [alert, setAlert] = useState({\r\n    open: false,\r\n    severity: \"success\",\r\n    message: \"\",\r\n  });\r\n  const setAlerts = (open, severity, message) => {\r\n    setAlert({\r\n      open: open,\r\n      severity: severity,\r\n      message: message,\r\n    });\r\n  };\r\n  const saveMenu = (data) => {\r\n    // e.preventDefault();\r\n    const checkCate = fetchData.every((item) => {\r\n      return item.CategoryName !== data.CategoryName;\r\n    });\r\n    if (checkCate) {\r\n      const formData = new FormData();\r\n      productbranches.map((item) => {\r\n        formData.append(\"branches[]\", item.value);\r\n      });\r\n      formData.append(\"CategoryIcon\", imageState.CategoryIcon);\r\n      formData.append(\"CategoryName\", data.CategoryName);\r\n      formData.append(\"branchID\", id);\r\n      axios.post(\"/api/InsertCategories\", formData).then((res) => {\r\n        if (res.data.status === 200) {\r\n          setImageState([]);\r\n          setCheck(!check);\r\n          setShare(false);\r\n          setProductBranches([]);\r\n          setAlerts(true, \"success\", res.data.message);\r\n\r\n          setModalCentered(false);\r\n          //  this.props.history.push(\"/\")\r\n        }\r\n      });\r\n    } else {\r\n      setAlerts(\r\n        true,\r\n        \"warning\",\r\n        \"The name already exists, please try another name.\"\r\n      );\r\n    }\r\n  };\r\n  const initialValuesCate = {\r\n    categories: \"\",\r\n  };\r\n  const validationSchemaCate = () => {\r\n    return Yup.object().shape({\r\n      categories: Yup.string().required(\"Please select a Category\"),\r\n    });\r\n  };\r\n  const saveCate = (data) => {\r\n    const formData = new FormData();\r\n    formData.append(\"CategoryName\", data.categories);\r\n    formData.append(\"branchID\", id);\r\n    axios.post(\"/api/InsertSharedCate\", formData).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setCheck(!check);\r\n        setAlerts(true, \"success\", res.data.message);\r\n\r\n        setModal(false);\r\n        //  this.props.history.push(\"/\")\r\n      }\r\n    });\r\n  };\r\n  // insert End\r\n  // edit start\r\n  const [editmodalCentered, setEditModalCentered] = useState(false);\r\n  const [editMenu, setEditMenu] = useState({\r\n    CategoryName: \"\",\r\n    CategoryIcon: \"\",\r\n    branchID: id,\r\n  });\r\n  const fetchMenus = (e, id) => {\r\n    e.preventDefault();\r\n    axios.get(`/api/EditCategories/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setEditMenu(res.data.menu);\r\n        setEditModalCentered(true);\r\n      } else if (res.data.status === 404) {\r\n        setAlerts(true, \"error\", res.data.message);\r\n      }\r\n    });\r\n  };\r\n  const updateMenu = (data) => {\r\n    const formData = new FormData();\r\n    formData.append(\"CategoryIcon\", imageState.CategoryIcon);\r\n    formData.append(\"CategoryName\", data.CategoryName);\r\n    formData.append(\"branchID\", id);\r\n    formData.append(\"id\", editMenu.id);\r\n    axios.post(\"/api/UpdateCategories\", formData).then((res) => {\r\n      if (res.data.status === 200) {\r\n        // console.log(res.data.status);\r\n        setEditMenu({\r\n          id: \"\",\r\n          CategoryName: \"\",\r\n          CategoryIcon: \"\",\r\n          branchID: id,\r\n        });\r\n        setCheck(!check);\r\n        setAlerts(true, \"success\", res.data.message);\r\n\r\n        setEditModalCentered(false);\r\n      } else if (res.data.status === 404) {\r\n        setAlerts(true, \"error\", res.data.message);\r\n      }\r\n    });\r\n  };\r\n  // edit end\r\n  // delete start\r\n  const deleteMenu = (e, id) => {\r\n    e.preventDefault();\r\n    swal({\r\n      title: \"Are you sure?\",\r\n      text: \"Once deleted, you will not be able to recover this imaginary file!\",\r\n      icon: \"warning\",\r\n      buttons: [t(\"cancel\"), t(\"confirm\")],\r\n      dangerMode: true,\r\n    }).then((willDelete) => {\r\n      if (willDelete) {\r\n        axios.delete(`/api/DeleteCategories/${id}`).then((res) => {\r\n          if (res.data.status === 200) {\r\n            setAlerts(true, \"success\", res.data.message);\r\n            setCheck(!check);\r\n          } else if (res.data.status === 404) {\r\n            setAlerts(true, \"error\", res.data.message);\r\n          }\r\n        });\r\n      } else {\r\n        setAlerts(true, \"info\", \"Your Data is safe now!\");\r\n      }\r\n    });\r\n  };\r\n  // delete end\r\n  //for retriving data using laravel API\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [branches, setBranches] = useState([]);\r\n  const [cats, setCates] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios.get(`/api/GetBranches`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setBranches(\r\n          res.data.branches.filter((item) => {\r\n            return item.id != id;\r\n          })\r\n        );\r\n      }\r\n    });\r\n    axios.get(`/api/sharedCates/${id}`).then((res) => {\r\n      if (res.status === 200) {\r\n        setCates(res.data);\r\n      }\r\n    });\r\n    axios.get(`/api/GetCategories/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setFetchData(res.data.fetchData);\r\n      }\r\n      setLoading(false);\r\n    });\r\n  }, [check]);\r\n\r\n  const [layout, setLayout] = useState(\r\n    JSON.parse(\r\n      localStorage.getItem(\"layoutCategory\")\r\n        ? localStorage.getItem(\"layoutCategory\")\r\n        : true\r\n    )\r\n  );\r\n  const changeLayout = () => {\r\n    setLayout(!layout);\r\n    localStorage.setItem(\"layoutCategory\", !layout);\r\n  };\r\n  const [open, setOpen] = useState(false);\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n  const handleToggle = () => {\r\n    setOpen(!open);\r\n  };\r\n\r\n  var viewProducts_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"spinner-border text-primary \" role=\"status\">\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewProducts_HTMLTABLE = fetchData.map((item, i) => {\r\n      return (\r\n        <div className=\"col-xl-3 col-lg-3 col-sm-6 col-md-3\" key={i}>\r\n          <div className=\"card overflow-hidden\">\r\n            <div className=\"card-body\">\r\n              <div className=\"text-center\">\r\n                <Link\r\n                  to={{\r\n                    pathname: `${url}/sub-category`,\r\n                    state: {\r\n                      id: id,\r\n                      sub_id: item.id,\r\n                    },\r\n                  }}\r\n                >\r\n                  <span>\r\n                    <img\r\n                      style={{\r\n                        height: \"150px\",\r\n                        width: \"100%\",\r\n                        borderRadius: \"10%\",\r\n                        objectFit: \"contain\",\r\n                      }}\r\n                      src={\r\n                        item.CategoryIcon\r\n                          ? `http://${base_url}:${port}/images/catagories/${item.CategoryIcon}`\r\n                          : DefaultPic\r\n                      }\r\n                      alt=\"category\"\r\n                    />\r\n                  </span>\r\n                  <h4 className=\"mt-2\">{item.CategoryName}</h4>\r\n                </Link>\r\n                {item.isShared ? (\r\n                  <Link\r\n                    to={{\r\n                      pathname: `${url}/cat-shared`,\r\n                      state: {\r\n                        id: id,\r\n                        sub_id: item.id,\r\n                      },\r\n                    }}\r\n                  >\r\n                    Shared\r\n                  </Link>\r\n                ) : (\r\n                  // <Chip\r\n                  //   label=\"Shared\"\r\n                  //   size=\"small\"\r\n                  //   // href=\"/basic-chip\"\r\n                  //   component=\"\"\r\n                  //   clickable\r\n                  // />\r\n                  \"\"\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"card-footer pt-0 pb-0 text-center\">\r\n              <div className=\"row\">\r\n                <div className=\"col-6 pt-3 pb-3 border-right\">\r\n                  <div\r\n                    style={{ cursor: \"pointer\" }}\r\n                    onClick={(e) => fetchMenus(e, item.id)}\r\n                  >\r\n                    <span>{t(\"edit\")}</span>\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-6 pt-3 pb-3\">\r\n                  <div\r\n                    style={{ cursor: \"pointer\" }}\r\n                    onClick={(e) => deleteMenu(e, item.id)}\r\n                  >\r\n                    <span>{t(\"delete\")}</span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    });\r\n  }\r\n  return (\r\n    <Fragment>\r\n      {alert.open ? (\r\n        <CustomAlert\r\n          open={alert.open}\r\n          severity={alert.severity}\r\n          message={alert.message}\r\n          setAlert={setAlert}\r\n        />\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <Modal className=\"fade\" show={modal}>\r\n        <Modal.Header>\r\n          <Modal.Title>{t(\"add_category\")} </Modal.Title>\r\n          <Button onClick={() => setModal(false)} variant=\"\" className=\"close\">\r\n            <span>&times;</span>\r\n          </Button>\r\n        </Modal.Header>\r\n        <Formik\r\n          initialValues={initialValuesCate}\r\n          validationSchema={validationSchemaCate}\r\n          onSubmit={saveCate}\r\n        >\r\n          {({ errors, status, setFieldValue, setFieldTouched, touched }) => (\r\n            <Form>\r\n              <Modal.Body>\r\n                <div className=\"form-group\">\r\n                  <label> {t(\"categories\")}</label>\r\n                  <Select\r\n                    // isMulti\r\n                    options={cats?.map((o, i) => {\r\n                      return {\r\n                        value: o.id,\r\n                        label: o.CategoryName,\r\n                      };\r\n                    })}\r\n                    onChange={(option) => {\r\n                      setFieldValue(\"categories\", option.label);\r\n                    }}\r\n                    // onChange={handleSelectCates}\r\n                    className=\"basic-multi-select\"\r\n                    classNamePrefix=\"select\"\r\n                  />\r\n                  {errors.categories ? (\r\n                    <small\r\n                      className=\"invalid\"\r\n                      style={{ color: \"red\", marginTop: \".5rem\" }}\r\n                    >\r\n                      {errors.categories}\r\n                    </small>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </div>\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                <Button onClick={() => setModal(false)} variant=\"danger light\">\r\n                  {t(\"close\")}\r\n                </Button>\r\n                <Button variant=\"primary\" type=\"submit\">\r\n                  {t(\"save\")}{\" \"}\r\n                </Button>\r\n              </Modal.Footer>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </Modal>\r\n      <Modal className=\"fade\" show={modalCentered}>\r\n        <Modal.Header>\r\n          <Modal.Title>{t(\"add_category\")} </Modal.Title>\r\n          <Button\r\n            onClick={() => setModalCentered(false)}\r\n            variant=\"\"\r\n            className=\"close\"\r\n          >\r\n            <span>&times;</span>\r\n          </Button>\r\n        </Modal.Header>\r\n        <Formik\r\n          initialValues={initialValues}\r\n          validationSchema={validationSchema}\r\n          onSubmit={saveMenu}\r\n        >\r\n          {({ errors, status, touched }) => (\r\n            <Form>\r\n              <Modal.Body>\r\n                <div className=\"form-group\">\r\n                  <label> {t(\"share_category_with_other_branches\")}</label>\r\n                  <Switch\r\n                    checked={share}\r\n                    color=\"secondary\"\r\n                    onChange={(e) => setShare(!share)}\r\n                  />\r\n                </div>\r\n                {share ? (\r\n                  <>\r\n                    <div className=\"form-group\">\r\n                      <label> {t(\"branches\")}</label>\r\n                      <Select\r\n                        isMulti\r\n                        options={branches?.map((o, i) => {\r\n                          return {\r\n                            value: o.id,\r\n                            label: o.BrancheName,\r\n                          };\r\n                        })}\r\n                        name=\"branches\"\r\n                        onChange={handleSelectBranches}\r\n                        className=\"basic-multi-select\"\r\n                        classNamePrefix=\"select\"\r\n                      />\r\n                    </div>\r\n                  </>\r\n                ) : (\r\n                  \" \"\r\n                )}\r\n                <div className=\"form-group\">\r\n                  <label> {t(\"category_name\")}</label>\r\n                  <Field\r\n                    name=\"CategoryName\"\r\n                    type=\"text\"\r\n                    className={\r\n                      \"form-control\" +\r\n                      (errors.CategoryName && touched.CategoryName\r\n                        ? \" is-invalid\"\r\n                        : \"\")\r\n                    }\r\n                    placeholder={t(\"category_name\")}\r\n                  />\r\n                  <ErrorMessage\r\n                    name=\"CategoryName\"\r\n                    component=\"div\"\r\n                    className=\"invalid-feedback\"\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label> {t(\"image\")}</label>\r\n                  <input\r\n                    type=\"file\"\r\n                    className=\"form-control\"\r\n                    placeholder={t(\"category_icon\")}\r\n                    name=\"CategoryIcon\"\r\n                    onChange={handleImage}\r\n                  />\r\n                </div>\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                <Button\r\n                  onClick={() => setModalCentered(false)}\r\n                  variant=\"danger light\"\r\n                >\r\n                  {t(\"close\")}\r\n                </Button>\r\n                <Button variant=\"primary\" type=\"submit\">\r\n                  {t(\"save\")}{\" \"}\r\n                </Button>\r\n              </Modal.Footer>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </Modal>\r\n      {/* Edit Modal */}\r\n      <Modal className=\"fade\" show={editmodalCentered}>\r\n        <Modal.Header>\r\n          <Modal.Title>{t(\"edit_category\")}</Modal.Title>\r\n          <Button\r\n            onClick={() => setEditModalCentered(false)}\r\n            variant=\"\"\r\n            className=\"close\"\r\n          >\r\n            <span>&times;</span>\r\n          </Button>\r\n        </Modal.Header>\r\n        <Formik\r\n          initialValues={editMenu}\r\n          validationSchema={validationSchema}\r\n          onSubmit={updateMenu}\r\n        >\r\n          {({ errors, status, touched }) => (\r\n            <Form>\r\n              <Modal.Body>\r\n                <div className=\"form-group\">\r\n                  <label> {t(\"category_name\")}</label>\r\n                  <Field\r\n                    name=\"CategoryName\"\r\n                    type=\"text\"\r\n                    className={\r\n                      \"form-control\" +\r\n                      (errors.CategoryName && touched.CategoryName\r\n                        ? \" is-invalid\"\r\n                        : \"\")\r\n                    }\r\n                    placeholder={t(\"category_name\")}\r\n                  />\r\n                  <ErrorMessage\r\n                    name=\"CategoryName\"\r\n                    component=\"div\"\r\n                    className=\"invalid-feedback\"\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label> {t(\"image\")}</label>\r\n                  <input\r\n                    type=\"file\"\r\n                    className=\"form-control\"\r\n                    placeholder={t(\"category_icon\")}\r\n                    name=\"CategoryIcon\"\r\n                    onChange={handleImage}\r\n                  />\r\n                  <img\r\n                    src={\r\n                      editMenu.CategoryIcon\r\n                        ? `http://${base_url}:${port}/images/catagories/${editMenu.CategoryIcon}`\r\n                        : DefaultPic\r\n                    }\r\n                    width=\"70\"\r\n                    alt=\" \"\r\n                  />\r\n                </div>\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                <Button\r\n                  onClick={() => setEditModalCentered(false)}\r\n                  variant=\"danger light\"\r\n                >\r\n                  {t(\"close\")}\r\n                </Button>\r\n                <Button variant=\"primary\" type=\"submit\">\r\n                  {t(\"update\")}{\" \"}\r\n                </Button>\r\n              </Modal.Footer>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </Modal>\r\n\r\n      <div className=\"row justify-content-end\">\r\n        <div className=\"col-1\">\r\n          <IconButton aria-label=\"Example\" onClick={changeLayout}>\r\n            {layout ? <TableRowsIcon /> : <ViewComfyIcon />}\r\n          </IconButton>\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <Backdrop\r\n          sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }}\r\n          open={open}\r\n          onClick={handleClose}\r\n        >\r\n          <ButtonGroup\r\n            variant=\"contained\"\r\n            aria-label=\"outlined primary button group\"\r\n          >\r\n            <Button onClick={() => setModalCentered(true)} className=\"m-2\">\r\n              {\" \"}\r\n              {t(\"add_new_category\")}\r\n            </Button>\r\n            <Button className=\"m-2\" onClick={() => setModal(true)}>\r\n              {\" \"}\r\n              {t(\"add_share_category\")}\r\n            </Button>\r\n          </ButtonGroup>\r\n        </Backdrop>\r\n      </div>\r\n      {layout ? (\r\n        <Row>\r\n          {viewProducts_HTMLTABLE}\r\n          <div className=\"col-xl-3 col-lg-3 col-sm-6 col-md-3\">\r\n            <div className=\"card overflow-hidden \">\r\n              <div\r\n                className=\"card-body d-flex justify-content-center text-center\"\r\n                style={{ border: \"2px dashed #f50b65\" }}\r\n              >\r\n                <div className=\"align-self-center text-center\">\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-outline-primary\"\r\n                    onClick={handleToggle}\r\n                  >\r\n                    <AddIcon />\r\n                    {t(\"add_category\")}\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Row>\r\n      ) : (\r\n        <div className=\"row\">\r\n          <div className=\"col-xl-12 col-xxl-12 col-lg-12 col-sm-12\">\r\n            <div className=\"card\">\r\n              <div className=\"card-header border-0\">\r\n                <div>\r\n                  <h4 className=\"card-title mb-2\">{t(\"categories\")}</h4>\r\n                </div>\r\n                <div className=\"dropdown\">\r\n                  <Button\r\n                    variant=\"primary\"\r\n                    type=\"button\"\r\n                    className=\"mb-2 mr-2\"\r\n                    onClick={handleToggle}\r\n                  >\r\n                    {t(\"add_category\")}\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n              <div className=\"card-body p-0\">\r\n                <div className=\"table-responsive \">\r\n                  <table className=\"table text-center \">\r\n                    <thead>\r\n                      <tr className=\"card-title\">\r\n                        <th>{t(\"image\")}</th>\r\n                        <th>{t(\"category_name\")}</th>\r\n                        <th>{t(\"actions\")}</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      {fetchData.map((item, i) => {\r\n                        return (\r\n                          <tr key={item.id}>\r\n                            <td>\r\n                              <Link\r\n                                to={{\r\n                                  pathname: `${url}/sub-category`,\r\n                                  state: {\r\n                                    id: id,\r\n                                    sub_id: item.id,\r\n                                  },\r\n                                }}\r\n                              >\r\n                                <div>\r\n                                  <img\r\n                                    style={{\r\n                                      height: \"50px\",\r\n                                      width: \"100%\",\r\n                                      borderRadius: \"10%\",\r\n                                      objectFit: \"contain\",\r\n                                    }}\r\n                                    src={\r\n                                      item.CategoryIcon\r\n                                        ? `http://${base_url}:${port}/images/catagories/${item.CategoryIcon}`\r\n                                        : DefaultPic\r\n                                    }\r\n                                    alt=\"category\"\r\n                                  />\r\n                                </div>\r\n                              </Link>\r\n                            </td>\r\n                            <td>\r\n                              <Link\r\n                                to={{\r\n                                  pathname: `${url}/sub-category`,\r\n                                  state: {\r\n                                    id: id,\r\n                                    sub_id: item.id,\r\n                                  },\r\n                                }}\r\n                              >\r\n                                {item.CategoryName}\r\n                              </Link>\r\n                              {item.isShared ? (\r\n                                <Chip label=\"Shared\" size=\"small\" />\r\n                              ) : (\r\n                                \"\"\r\n                              )}\r\n                            </td>\r\n\r\n                            <td>\r\n                              <button\r\n                                type=\"button\"\r\n                                onClick={(e) => fetchMenus(e, item.id)}\r\n                                className=\"btn btn-outline-danger btn-sm\"\r\n                              >\r\n                                {t(\"edit\")}\r\n                              </button>\r\n                              &nbsp;&nbsp;&nbsp;\r\n                              <button\r\n                                type=\"button\"\r\n                                onClick={(e) => deleteMenu(e, item.id)}\r\n                                className=\"btn btn-outline-warning btn-sm\"\r\n                              >\r\n                                {t(\"delete\")}\r\n                              </button>\r\n                            </td>\r\n                          </tr>\r\n                        );\r\n                      })}\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Category;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\layouts\\nav\\index.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Default\\Customization.js",["458"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CRow,\r\n  CFormLabel,\r\n  CCol,\r\n} from \"@coreui/react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// import Switch from \"react-switch\";\r\n\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport { FormControlLabel, RadioGroup, Radio } from \"@mui/material\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport Select from \"@mui/material/Select\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardMedia from \"@mui/material/CardMedia\";\r\nimport { CardActionArea } from \"@mui/material\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst DefaultCustomization = (props) => {\r\n  const { t } = useTranslation();\r\n  // const templateId = atob(props.match.params.id);\r\n  const templateId = props.history.location.state.id;\r\n\r\n  const history = useHistory();\r\n\r\n  const [settings, setSettings] = useState([]);\r\n  const handleInput = (e) => {\r\n    setSettings({ ...settings, [e.target.name]: e.target.value });\r\n    const formData = new FormData();\r\n    formData.append(\r\n      \"settings\",\r\n      JSON.stringify({ ...settings, [e.target.name]: e.target.value })\r\n    );\r\n    axios\r\n      .post(`/api/InsertCustomization/${templateId}`, formData)\r\n      .then((res) => {\r\n        if (res.data.status === 200) {\r\n          setLoading(true);\r\n        }\r\n      });\r\n  };\r\n  const reset = (e) => {\r\n    e.preventDefault();\r\n    axios.get(`/api/ResetCustomization/${templateId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setSettings([]);\r\n        setLoading(true);\r\n        swal(\"Success\", res.data.message, \"success\");\r\n      }\r\n    });\r\n  };\r\n  const [template, setTemplate] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    axios.get(`/api/GetTemplate/${templateId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setSettings(res.data.fetchData.Customization);\r\n        setTemplate(res.data.fetchData);\r\n      }\r\n      setLoading(false);\r\n    });\r\n    // const interval = setInterval(() => {\r\n    //   save();\r\n    // }, 15000);\r\n    // return () => clearInterval(interval);\r\n  }, [loading]);\r\n\r\n  var viewPreview_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    viewPreview_HTMLTABLE = (\r\n      <CCard>\r\n        <CCardHeader component=\"h5\">{t(\"preview\")}</CCardHeader>\r\n        <CCardBody>\r\n          <div\r\n            className=\"spinner-border text-primary\"\r\n            role=\"status\"\r\n            style={{ position: \"fixed\", top: \"0%\", left: \"50%\" }}\r\n          >\r\n            <span className=\"sr-only\">{t(\"loading\")}</span>\r\n          </div>\r\n        </CCardBody>\r\n      </CCard>\r\n    );\r\n  } else {\r\n    viewPreview_HTMLTABLE = (\r\n      <CCard>\r\n        <CCardHeader component=\"h5\">{t(\"preview\")}</CCardHeader>\r\n        <CCardBody>\r\n          <Card>\r\n            <CardActionArea>\r\n              <CardMedia\r\n                component=\"iframe\"\r\n                height=\"600\"\r\n                image={`/${template?.URL}/${btoa(1)}`}\r\n                alt=\"template\"\r\n              />\r\n            </CardActionArea>\r\n          </Card>\r\n        </CCardBody>\r\n      </CCard>\r\n    );\r\n  }\r\n  return (\r\n    <>\r\n      <div className=\"row\">\r\n        <div className=\"col-7\">\r\n          <CCard>\r\n            <CCardHeader component=\"h5\">{t(\"customization\")}</CCardHeader>\r\n            <CCardBody>\r\n              <CRow className=\"mb-2\">\r\n                <CFormLabel className=\"col-sm-6 col-form-label font-weight-bold\">\r\n                  {t(\"Name\")}\r\n                </CFormLabel>\r\n                <CFormLabel className=\"col-sm-3 col-form-label font-weight-bold\">\r\n                  {t(\"value\")}\r\n                </CFormLabel>\r\n                <CFormLabel className=\"col-sm-3 col-form-label text-center font-weight-bold\">\r\n                  {t(\"default\")}\r\n                </CFormLabel>\r\n              </CRow>\r\n              <CRow className=\"mb-2\">\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"branch_name_color\")}\r\n                </CFormLabel>\r\n                <CCol sm={2} className=\"text-left\">\r\n                  <input\r\n                    type=\"color\"\r\n                    onChange={handleInput}\r\n                    value={settings?.branch_name_color}\r\n                    name=\"branch_name_color\"\r\n                  />\r\n                </CCol>\r\n                <CCol sm={4} className=\"text-center\">\r\n                  <input type=\"color\" disabled value=\"#ff751d\" />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"branch_name_font_size\")}\r\n                </CFormLabel>\r\n                <CCol sm={2}>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    onChange={handleInput}\r\n                    value={settings?.branch_name_font_size}\r\n                    type=\"number\"\r\n                    name=\"branch_name_font_size\"\r\n                  />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-4 col-form-label text-center\"\r\n                >\r\n                  {t(\"14\")}\r\n                </CFormLabel>\r\n              </CRow>\r\n\r\n              <CRow className=\"mb-2\">\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"categories_and_sub_categoies_color\")}\r\n                </CFormLabel>\r\n                <CCol sm={3} className=\"text-left\">\r\n                  <input\r\n                    type=\"color\"\r\n                    onChange={handleInput}\r\n                    value={settings?.categories_and_sub_categoies_color}\r\n                    name=\"categories_and_sub_categoies_color\"\r\n                  />\r\n                </CCol>\r\n                <CCol sm={2} className=\"text-center\">\r\n                  <input type=\"color\" disabled value=\"#f1fcfe\" />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"categories_and_sub_categoies_font_size\")}\r\n                </CFormLabel>\r\n                <CCol sm={2}>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    onChange={handleInput}\r\n                    value={settings?.categories_and_sub_categoies_font_size}\r\n                    type=\"number\"\r\n                    name=\"categories_and_sub_categoies_font_size\"\r\n                  />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-4 col-form-label text-center\"\r\n                >\r\n                  {t(\"12\")}\r\n                </CFormLabel>\r\n              </CRow>\r\n\r\n              <CRow className=\"mb-2\">\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"product_name_color\")}\r\n                </CFormLabel>\r\n                <CCol sm={3} className=\"text-left\">\r\n                  <input\r\n                    type=\"color\"\r\n                    onChange={handleInput}\r\n                    value={settings?.product_name_color}\r\n                    name=\"product_name_color\"\r\n                  />\r\n                </CCol>\r\n                <CCol sm={2} className=\"text-center\">\r\n                  <input type=\"color\" disabled value=\"#ff751d\" />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"product_name_font_size\")}\r\n                </CFormLabel>\r\n                <CCol sm={2}>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    onChange={handleInput}\r\n                    value={settings?.product_name_font_size}\r\n                    type=\"number\"\r\n                    name=\"product_name_font_size\"\r\n                  />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-4 col-form-label text-center\"\r\n                >\r\n                  {t(\"12\")}\r\n                </CFormLabel>\r\n              </CRow>\r\n              <CRow className=\"mb-2\">\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"product_discription_color\")}\r\n                </CFormLabel>\r\n                <CCol sm={3} className=\"text-left\">\r\n                  <input\r\n                    type=\"color\"\r\n                    onChange={handleInput}\r\n                    value={settings?.product_discription_color}\r\n                    name=\"product_discription_color\"\r\n                  />\r\n                </CCol>\r\n                <CCol sm={2} className=\"text-center\">\r\n                  <input type=\"color\" disabled value=\"#777\" />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"product_discription_font_size\")}\r\n                </CFormLabel>\r\n                <CCol sm={2}>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    onChange={handleInput}\r\n                    value={settings?.product_discription_font_size}\r\n                    type=\"number\"\r\n                    name=\"product_discription_font_size\"\r\n                  />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-4 col-form-label text-center\"\r\n                >\r\n                  {t(\"10\")}\r\n                </CFormLabel>\r\n              </CRow>\r\n              <CRow className=\"mb-2\">\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"price_color\")}\r\n                </CFormLabel>\r\n                <CCol sm={3} className=\"text-left\">\r\n                  <input\r\n                    type=\"color\"\r\n                    onChange={handleInput}\r\n                    value={settings?.price_color}\r\n                    name=\"price_color\"\r\n                  />\r\n                </CCol>\r\n                <CCol sm={2} className=\"text-center\">\r\n                  <input type=\"color\" disabled value=\"#ff751d\" />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"price_font_size\")}\r\n                </CFormLabel>\r\n                <CCol sm={2}>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    onChange={handleInput}\r\n                    value={settings?.price_font_size}\r\n                    type=\"number\"\r\n                    name=\"price_font_size\"\r\n                  />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-4 col-form-label text-center\"\r\n                >\r\n                  {t(\"12\")}\r\n                </CFormLabel>\r\n              </CRow>\r\n              <CRow className=\"mb-2\">\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"button_text_color\")}\r\n                </CFormLabel>\r\n                <CCol sm={2} className=\"text-left\">\r\n                  <input\r\n                    type=\"color\"\r\n                    onChange={handleInput}\r\n                    value={settings?.button_text_color}\r\n                    // value={themes.TextColor}\r\n                    name=\"button_text_color\"\r\n                  />\r\n                </CCol>\r\n                <CCol sm={4} className=\"text-center\">\r\n                  <input\r\n                    type=\"color\"\r\n                    disabled\r\n                    // onChange={handleInput}\r\n                    value=\"#f1fcfe\"\r\n                  />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"button_background_color\")}\r\n                </CFormLabel>\r\n                <CCol sm={2} className=\"text-left\">\r\n                  <input\r\n                    type=\"color\"\r\n                    onChange={handleInput}\r\n                    value={settings?.button_background_color}\r\n                    //   value={themes.TextColor}\r\n                    name=\"button_background_color\"\r\n                  />\r\n                </CCol>\r\n                <CCol sm={4} className=\"text-center\">\r\n                  <input\r\n                    type=\"color\"\r\n                    disabled\r\n                    // onChange={handleInput}\r\n                    value=\"#ff751d\"\r\n                  />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"button_text_font_size\")}\r\n                </CFormLabel>\r\n                <CCol sm={2}>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    onChange={handleInput}\r\n                    value={settings?.button_text_font_size}\r\n                    type=\"number\"\r\n                    name=\"button_text_font_size\"\r\n                  />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-4 col-form-label text-center\"\r\n                >\r\n                  {t(\"12\")}\r\n                </CFormLabel>\r\n              </CRow>\r\n              <CRow className=\"mb-2\">\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"number_of_products_in_each_row\")}\r\n                </CFormLabel>\r\n                <CCol sm={2}>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    onChange={handleInput}\r\n                    type=\"number\"\r\n                    value={settings?.number_of_products_in_each_row}\r\n                    name=\"number_of_products_in_each_row\"\r\n                  />\r\n                </CCol>\r\n                <CFormLabel\r\n                  htmlFor=\"inputPassword\"\r\n                  className=\"col-sm-4 col-form-label text-center\"\r\n                >\r\n                  {t(\"2\")}\r\n                </CFormLabel>\r\n              </CRow>\r\n              <CRow>\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"mode\")}\r\n                </CFormLabel>\r\n\r\n                <CCol sm={2} className=\"text-left\">\r\n                  <RadioGroup\r\n                    row\r\n                    aria-label=\"dark\"\r\n                    defaultValue={settings?.mode ? settings.mode : \"dark\"}\r\n                    name=\"mode\"\r\n                    onChange={handleInput}\r\n                  >\r\n                    <FormControlLabel\r\n                      value=\"light\"\r\n                      control={<Radio />}\r\n                      label=\"Light\"\r\n                    />\r\n                    <FormControlLabel\r\n                      value=\"dark\"\r\n                      control={<Radio />}\r\n                      label=\"Dark\"\r\n                    />\r\n                  </RadioGroup>\r\n                </CCol>\r\n                <CCol sm={4} className=\"text-center\">\r\n                  <CFormLabel\r\n                    htmlFor=\"staticEmail\"\r\n                    className=\"col-sm-6 col-form-label \"\r\n                  >\r\n                    Dark\r\n                  </CFormLabel>\r\n                </CCol>\r\n              </CRow>\r\n              <CRow>\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"font\")}\r\n                </CFormLabel>\r\n\r\n                <CCol sm={2} className=\"text-left\">\r\n                  <FormControl fullWidth>\r\n                    <InputLabel id=\"demo-simple-select-label\">\r\n                      {t(\"fonts\")}\r\n                    </InputLabel>\r\n                    <Select\r\n                      labelId=\"demo-simple-select-label\"\r\n                      id=\"demo-simple-select\"\r\n                      //   value={age}\r\n                      label=\"fonts\"\r\n                      onChange={handleInput}\r\n                      name=\"font\"\r\n                      defaultValue={\r\n                        settings?.font ? settings.font : \"sans-serif\"\r\n                      }\r\n                    >\r\n                      <MenuItem value=\"-apple-system\">-apple-system</MenuItem>\r\n                      <MenuItem value=\"BlinkMacSystemFont\">\r\n                        BlinkMacSystemFont\r\n                      </MenuItem>\r\n                      <MenuItem value=\"Segoe UI\">Segoe UI</MenuItem>\r\n                      <MenuItem value=\"Roboto\">Roboto</MenuItem>\r\n                      <MenuItem value=\"Helvetica Neue\">Helvetica Neue</MenuItem>\r\n                      <MenuItem value=\"Arial\">Arial</MenuItem>\r\n                      <MenuItem value=\"sans-serif\">sans-serif</MenuItem>\r\n                      <MenuItem value=\"Apple Color Emoji\">\r\n                        Apple Color Emoji\r\n                      </MenuItem>\r\n                      <MenuItem value=\"Segoe UI Emoji\">Segoe UI Emoji</MenuItem>\r\n                      <MenuItem value=\"Segoe UI Symbol\">\r\n                        Segoe UI Symbol\r\n                      </MenuItem>\r\n                    </Select>\r\n                  </FormControl>\r\n                </CCol>\r\n                <CCol sm={4} className=\"text-center\">\r\n                  <CFormLabel\r\n                    htmlFor=\"staticEmail\"\r\n                    className=\"col-sm-6 col-form-label \"\r\n                  >\r\n                    sans-serif\r\n                  </CFormLabel>\r\n                </CCol>\r\n              </CRow>\r\n              <CRow>\r\n                <CFormLabel\r\n                  htmlFor=\"staticEmail\"\r\n                  className=\"col-sm-6 col-form-label\"\r\n                >\r\n                  {t(\"show_preparation_time\")}\r\n                </CFormLabel>\r\n\r\n                <CCol sm={2} className=\"text-left\">\r\n                  <RadioGroup\r\n                    row\r\n                    aria-label=\"dark\"\r\n                    defaultValue={\r\n                      settings?.preparation_time\r\n                        ? settings.preparation_time\r\n                        : \"1\"\r\n                    }\r\n                    name=\"preparation_time\"\r\n                    onChange={handleInput}\r\n                  >\r\n                    <FormControlLabel\r\n                      value=\"1\"\r\n                      control={<Radio />}\r\n                      label=\"Yes\"\r\n                    />\r\n                    <FormControlLabel\r\n                      value=\"0\"\r\n                      control={<Radio />}\r\n                      label=\"No\"\r\n                    />\r\n                  </RadioGroup>\r\n                </CCol>\r\n                <CCol sm={4} className=\"text-center\">\r\n                  <CFormLabel\r\n                    htmlFor=\"staticEmail\"\r\n                    className=\"col-sm-6 col-form-label \"\r\n                  >\r\n                    Yes\r\n                  </CFormLabel>\r\n                </CCol>\r\n              </CRow>\r\n            </CCardBody>\r\n          </CCard>\r\n        </div>\r\n        <div className=\"col-5\">{viewPreview_HTMLTABLE}</div>\r\n      </div>\r\n      <div className=\"text-center mx-4 mb-4\">\r\n        <button className=\"btn btn-info m-1\" onClick={(e) => reset(e)}>\r\n          {t(\"reset_to_default\")}\r\n        </button>\r\n        <button className=\"btn btn-light m-1\" onClick={() => history.goBack()}>\r\n          {t(\"back\")}\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DefaultCustomization;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Products\\AddProduct.js",["459","460","461","462","463","464"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport Select from \"react-select\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport Switch from \"@mui/material/Switch\";\r\nimport CustomAlert from \"../CustomAlert\";\r\n\r\nconst AddProduct = (props) => {\r\n  const history = useHistory();\r\n  // for localization\r\n  const { t } = useTranslation();\r\n  const branchId = props.history.location.state.id;\r\n  // validation start\r\n  const initialValues = {\r\n    ProductName: \"\",\r\n    category: \"\",\r\n    sub_category: \"\",\r\n    price: \"\",\r\n    stock: \"\",\r\n    preparationTime: \"\",\r\n    UnitName: \"\",\r\n    Description: \"\",\r\n  };\r\n\r\n  const validationSchema = () => {\r\n    return Yup.object().shape({\r\n      ProductName: Yup.string().required(\"Product Name is required\"),\r\n      category: Yup.string().required(\"Category is required\"),\r\n      price: Yup.number()\r\n        .typeError(\"Amount must be a number\")\r\n        .required(\"Please provide plan cost.\")\r\n        .min(1, \"Too little\"),\r\n      stock: Yup.number()\r\n        .typeError(\"Amount must be a number\")\r\n        .required(\"Please provide plan cost.\")\r\n        .min(1, \"Too little\"),\r\n    });\r\n  };\r\n  const initialValuesIngredient = {\r\n    name: \"\",\r\n  };\r\n  const validationSchemaIngredient = () => {\r\n    return Yup.object().shape({\r\n      name: Yup.string().required(\"Ingredient Name is required\"),\r\n    });\r\n  };\r\n  // validation End\r\n  const [modalCentered, setModalCentered] = useState(false);\r\n\r\n  const [imageState, setImageState] = useState([]);\r\n  const handleImage = (e) => {\r\n    const imagesArray = [];\r\n    for (let i = 0; i < e.target.files.length; i++) {\r\n      imagesArray.push(e.target.files[i]);\r\n    }\r\n    setImageState({ ...imageState, image: imagesArray });\r\n  };\r\n  const [alert, setAlert] = useState({\r\n    open: false,\r\n    severity: \"success\",\r\n    message: \"\",\r\n  });\r\n  const setAlerts = (open, severity, message) => {\r\n    setAlert({\r\n      open: open,\r\n      severity: severity,\r\n      message: message,\r\n    });\r\n  };\r\n  const saveProduct = (data) => {\r\n    // console.log(JSON.stringify(data, null, 2));\r\n\r\n    const formData = new FormData();\r\n    for (let i = 0; i < imageState.image.length; i++) {\r\n      formData.append(\"image[]\", imageState.image[i]);\r\n    }\r\n    productbranches.map((item) => {\r\n      formData.append(\"branches[]\", item.value);\r\n    });\r\n    // formData.append(\"image\", imageState.photo);\r\n    formData.append(\"Description\", data.Description);\r\n    formData.append(\"ProductName\", data.ProductName);\r\n    formData.append(\"sub_category\", data.sub_category);\r\n    formData.append(\"category\", data.category);\r\n    formData.append(\"price\", data.price);\r\n    formData.append(\"stock\", data.stock);\r\n    formData.append(\"preparationTime\", data.preparationTime);\r\n    formData.append(\"ingredients\", JSON.stringify(productIngredient));\r\n    formData.append(\"extras\", JSON.stringify(productExtra));\r\n    formData.append(\"recommendations\", JSON.stringify(productRecom));\r\n    formData.append(\"UnitName\", data.UnitName);\r\n    formData.append(\"branchId\", branchId);\r\n    axios.post(`/api/InsertProducts`, formData).then((res) => {\r\n      if (res.data.status === 200) {\r\n        swal(\"Success\", res.data.message, \"success\").then((check) => {\r\n          if (check) {\r\n            history.push({\r\n              pathname: `/branches/show/products`,\r\n              state: { id: branchId },\r\n            });\r\n          }\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  const save = (data) => {\r\n    axios.post(\"/api/InsertSingleIngredient\", data).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setCheck(!check);\r\n        setModalCentered(false);\r\n        setAlerts(true, \"success\", res.data.message);\r\n      }\r\n    });\r\n  };\r\n  //for retriving data using laravel API\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [subCategories, setSubCategories] = useState([]);\r\n  const [categories, setCategories] = useState([]);\r\n  const [intgredients, setIntgredients] = useState([]);\r\n  const [branches, setBranches] = useState([]);\r\n  const [check, setCheck] = useState(true);\r\n  const [share, setShare] = useState(false);\r\n\r\n  useEffect(() => {\r\n    axios.post(`/api/GetIngredient`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setIntgredients(res.data.fetchData);\r\n      }\r\n    });\r\n    axios.get(`/api/GetCategories/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setCategories(res.data.fetchData);\r\n      }\r\n    });\r\n\r\n    axios.get(`/api/GetProducts/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setFetchData(res.data.fetchData);\r\n      }\r\n      setLoading(false);\r\n    });\r\n    axios.get(`/api/GetBranches`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setBranches(\r\n          res.data.branches.filter((item) => {\r\n            return item.id != branchId;\r\n          })\r\n        );\r\n      }\r\n    });\r\n  }, [check]);\r\n  const [productIngredient, setProductIngredient] = useState([]);\r\n  const handleSelectEvent = (e) => {\r\n    setProductIngredient(e);\r\n  };\r\n  const [productExtra, setProductExtra] = useState([]);\r\n  const handleSelectEventExtra = (e) => {\r\n    setProductExtra(e);\r\n  };\r\n  // const [extraPrices, setextraPrices] = useState({});\r\n\r\n  const extraHandle = (e, id) => {\r\n    let updatedList = productExtra.map((item) => {\r\n      if (item.id == id) {\r\n        return { ...item, price: e.target.value }; //gets everything that was already in item, and updates \"done\"\r\n      }\r\n      return item; // else return unmodified item\r\n    });\r\n    setProductExtra(updatedList);\r\n  };\r\n  const [productRecom, setProductRecom] = useState([]);\r\n  const handleSelectEventRecom = (e) => {\r\n    setProductRecom(e);\r\n  };\r\n  const [productbranches, setProductBranches] = useState([]);\r\n  const handleSelectBranches = (e) => {\r\n    setProductBranches(e);\r\n    // console.log(e);\r\n    let arrayID = [];\r\n    e?.map((item) => {\r\n      arrayID.push(item.value);\r\n    });\r\n    axios\r\n      .get(`/api/getSharedCategories`, {\r\n        params: {\r\n          id: arrayID,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        // console.log(res);\r\n        if (res.status === 200) {\r\n          setCategories(res.data);\r\n        }\r\n      });\r\n  };\r\n  const getSubCategories = (e) => {\r\n    e.preventDefault();\r\n\r\n    axios\r\n      .get(\r\n        `/api/GetSubCategories/${e.target.value == \"\" ? null : e.target.value}`\r\n      )\r\n      .then((res) => {\r\n        if (res.data.status === 200) {\r\n          setSubCategories(res.data.fetchData);\r\n        }\r\n      });\r\n  };\r\n  const filterCategories = (e) => {\r\n    e.preventDefault();\r\n    if (!e.target.checked) {\r\n      setProductBranches([]);\r\n      axios.get(`/api/GetCategories/${branchId}`).then((res) => {\r\n        if (res.data.status === 200) {\r\n          setCategories(res.data.fetchData);\r\n        }\r\n      });\r\n    }\r\n  };\r\n  var viewProducts_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"spinner-border text-primary \" role=\"status\">\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewProducts_HTMLTABLE = (\r\n      <div className=\"card\">\r\n        <div className=\"card-header\">\r\n          <div>\r\n            <h4 className=\"card-title\">{t(\"add_product\")}</h4>\r\n          </div>\r\n        </div>\r\n        <div className=\"card-body\">\r\n          <Formik\r\n            initialValues={initialValues}\r\n            validationSchema={validationSchema}\r\n            onSubmit={saveProduct}\r\n          >\r\n            {({ errors, status, touched }) => (\r\n              <Form>\r\n                <div className=\"row\">\r\n                  <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                    <div className=\"form-group\">\r\n                      <label> {t(\"share_product_with_other_branches\")}</label>\r\n                      <Switch\r\n                        checked={share}\r\n                        color=\"secondary\"\r\n                        onChange={(e) => [\r\n                          setShare(!share),\r\n                          filterCategories(e),\r\n                        ]}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  {share ? (\r\n                    <>\r\n                      <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                        <div className=\"form-group\">\r\n                          <label> {t(\"branches\")}</label>\r\n                          <Select\r\n                            isMulti\r\n                            options={branches?.map((o, i) => {\r\n                              return {\r\n                                value: o.id,\r\n                                label: o.BrancheName,\r\n                              };\r\n                            })}\r\n                            onChange={handleSelectBranches}\r\n                            className=\"basic-multi-select\"\r\n                            classNamePrefix=\"select\"\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </>\r\n                  ) : (\r\n                    \" \"\r\n                  )}\r\n\r\n                  <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                    <div className=\"form-group\">\r\n                      <label> {t(\"categories\")}</label>\r\n                      <Field\r\n                        as=\"select\"\r\n                        name=\"category\"\r\n                        className={\r\n                          \"form-control\" +\r\n                          (errors.category && touched.category\r\n                            ? \" is-invalid\"\r\n                            : \"\")\r\n                        }\r\n                        onClick={(e) => getSubCategories(e)}\r\n                      >\r\n                        <option key=\"empty\" value=\"\">\r\n                          {t(\"select_a_option\")}\r\n                        </option>\r\n                        {categories.map((item) => (\r\n                          <option value={item.id} key={item.id}>\r\n                            {item.CategoryName}\r\n                          </option>\r\n                        ))}\r\n                      </Field>\r\n                      <ErrorMessage\r\n                        name=\"category\"\r\n                        component=\"div\"\r\n                        className=\"invalid-feedback\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div\r\n                    className={`col-xl-6 col-xxl-6 col-lg-6 col-sm-12 ${\r\n                      subCategories.length === 0 ? \"d-none\" : \"\"\r\n                    }`}\r\n                  >\r\n                    <div className=\"form-group\">\r\n                      <label> {t(\"sub_categories\")}</label>\r\n                      <Field\r\n                        as=\"select\"\r\n                        name=\"sub_category\"\r\n                        className={\"form-control\"}\r\n                      >\r\n                        <option value=\"\">{t(\"select_a_option\")}</option>\r\n                        {subCategories.map((item) => (\r\n                          <option value={item.sub_id} key={item.sub_id}>\r\n                            {item.SubCategoryName}\r\n                          </option>\r\n                        ))}\r\n                      </Field>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                    <div className=\"form-group\">\r\n                      <label> {t(\"unit\")}</label>\r\n                      <Field\r\n                        name=\"UnitName\"\r\n                        type=\"text\"\r\n                        className={\"form-control\"}\r\n                        placeholder=\"KGR, Cm, Number...\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                    <div className=\"form-group\">\r\n                      <label> {t(\"product_name\")}</label>\r\n                      <Field\r\n                        name=\"ProductName\"\r\n                        type=\"text\"\r\n                        className={\r\n                          \"form-control\" +\r\n                          (errors.ProductName && touched.ProductName\r\n                            ? \" is-invalid\"\r\n                            : \"\")\r\n                        }\r\n                        placeholder=\"Name...\"\r\n                      />\r\n                      <ErrorMessage\r\n                        name=\"ProductName\"\r\n                        component=\"div\"\r\n                        className=\"invalid-feedback\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                    <div className=\"form-group\">\r\n                      <label> {t(\"description\")}</label>\r\n                      <Field\r\n                        as=\"textarea\"\r\n                        name=\"Description\"\r\n                        className={\r\n                          \"form-control\" +\r\n                          (errors.Description && touched.Description\r\n                            ? \" is-invalid\"\r\n                            : \"\")\r\n                        }\r\n                        placeholder=\"Description...\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                    <div className=\"form-group\">\r\n                      <label> {t(\"price\")}</label>\r\n                      <Field\r\n                        name=\"price\"\r\n                        type=\"number\"\r\n                        className={\r\n                          \"form-control\" +\r\n                          (errors.price && touched.price ? \" is-invalid\" : \"\")\r\n                        }\r\n                        placeholder=\"price...\"\r\n                      />\r\n                      <ErrorMessage\r\n                        name=\"price\"\r\n                        component=\"div\"\r\n                        className=\"invalid-feedback\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                    <div className=\"form-group\">\r\n                      <label> {t(\"stock\")}</label>\r\n                      <Field\r\n                        name=\"stock\"\r\n                        type=\"number\"\r\n                        className={\r\n                          \"form-control\" +\r\n                          (errors.stock && touched.stock ? \" is-invalid\" : \"\")\r\n                        }\r\n                        placeholder=\"stock...\"\r\n                      />\r\n                      <ErrorMessage\r\n                        name=\"stock\"\r\n                        component=\"div\"\r\n                        className=\"invalid-feedback\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                    <div className=\"form-group\">\r\n                      <label>{t(\"preparation_Time\")}(Minutes)</label>\r\n                      <Field\r\n                        name=\"preparationTime\"\r\n                        type=\"number\"\r\n                        className={\"form-control\"}\r\n                        placeholder=\"preparation Time...\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                    <div className=\"form-group\">\r\n                      <label>{t(\"image\")}</label>\r\n                      <input\r\n                        type=\"file\"\r\n                        className=\"form-control\"\r\n                        placeholder={t(\"image\")}\r\n                        name=\"photo\"\r\n                        required\r\n                        onChange={handleImage}\r\n                        multiple\r\n                        data-overwrite-initial=\"false\"\r\n                        data-min-file-count=\"1\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"col-xl-12 col-xxl-12 col-lg-12 col-sm-12\">\r\n                    <div className=\"form-group\">\r\n                      <div className=\"d-flex justify-content-between\">\r\n                        <label className=\"mb-1 \">\r\n                          <strong>{t(\"ingredients\")}</strong>\r\n                        </label>\r\n                        <small\r\n                          onClick={() => setModalCentered(true)}\r\n                          style={{ cursor: \"pointer\" }}\r\n                        >\r\n                          {t(\"add_ingredient\")}\r\n                        </small>\r\n                      </div>\r\n                      <Select\r\n                        isMulti\r\n                        options={intgredients?.map((o, i) => {\r\n                          return { id: i, value: o.id, label: o.name };\r\n                        })}\r\n                        onChange={handleSelectEvent}\r\n                        className=\"basic-multi-select\"\r\n                        classNamePrefix=\"select\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"col-xl-12 col-xxl-12 col-lg-12 col-sm-12\">\r\n                    <div className=\"form-group\">\r\n                      <label className=\"mb-1 \">\r\n                        <strong>{t(\"extras\")}</strong>\r\n                        <small>\r\n                          (Please first choose the fields and then set the input\r\n                          values.)\r\n                        </small>\r\n                      </label>\r\n\r\n                      <Select\r\n                        isMulti\r\n                        options={intgredients?.map((o, i) => {\r\n                          return {\r\n                            id: i,\r\n                            value: o.id,\r\n                            label: o.name,\r\n                            price: 0,\r\n                          };\r\n                        })}\r\n                        onChange={handleSelectEventExtra}\r\n                        className=\"basic-multi-select\"\r\n                        classNamePrefix=\"select\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  {productExtra?.map((item, i) => {\r\n                    return (\r\n                      <div\r\n                        className=\"col-xl-3 col-xxl-3 col-lg-3 col-sm-3\"\r\n                        key={i}\r\n                      >\r\n                        <div className=\"form-group\">\r\n                          <label className=\"mb-1 \">\r\n                            <strong>{item.label}</strong>\r\n                            <small>(Charge)</small>\r\n                          </label>\r\n                          <input\r\n                            type=\"number\"\r\n                            min=\"0\"\r\n                            className=\"form-control\"\r\n                            onChange={(e) => extraHandle(e, item.id)}\r\n                            value={productExtra[i].price}\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    );\r\n                  })}\r\n\r\n                  <div className=\"col-xl-12 col-xxl-12 col-lg-12 col-sm-12\">\r\n                    <div className=\"form-group\">\r\n                      <label className=\"mb-1 \">\r\n                        <strong>{t(\"recommendation_products\")}</strong>\r\n                      </label>\r\n                      <Select\r\n                        isMulti\r\n                        options={fetchData?.map((o, i) => {\r\n                          return {\r\n                            price: o.price,\r\n                            value: o.id,\r\n                            label: o.ProductName,\r\n                            qty: 1,\r\n                          };\r\n                        })}\r\n                        onChange={handleSelectEventRecom}\r\n                        className=\"basic-multi-select\"\r\n                        classNamePrefix=\"select\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"card-footer\">\r\n                  <Button\r\n                    variant=\"danger light\"\r\n                    className=\"m-1\"\r\n                    onClick={() => history.goBack()}\r\n                  >\r\n                    {t(\"back\")}\r\n                  </Button>\r\n                  <Button variant=\"primary\" type=\"submit\">\r\n                    {t(\"save\")}{\" \"}\r\n                  </Button>\r\n                </div>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Fragment>\r\n        {alert.open ? (\r\n          <CustomAlert\r\n            open={alert.open}\r\n            severity={alert.severity}\r\n            message={alert.message}\r\n            setAlert={setAlert}\r\n          />\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        <div className=\"m-1\">\r\n          <Button\r\n            variant=\"danger light\"\r\n            className=\"m-1\"\r\n            onClick={() => history.goBack()}\r\n          >\r\n            List of Products\r\n          </Button>\r\n        </div>\r\n        {viewProducts_HTMLTABLE}\r\n\r\n        <Modal className=\"fade\" show={modalCentered}>\r\n          <Modal.Header>\r\n            <Modal.Title>{t(\"add_ingredient\")}</Modal.Title>\r\n            <Button\r\n              onClick={() => setModalCentered(false)}\r\n              variant=\"\"\r\n              className=\"close\"\r\n            >\r\n              <span>&times;</span>\r\n            </Button>\r\n          </Modal.Header>\r\n          <Formik\r\n            initialValues={initialValuesIngredient}\r\n            validationSchema={validationSchemaIngredient}\r\n            onSubmit={save}\r\n          >\r\n            {({ errors, status, touched }) => (\r\n              <Form>\r\n                <Modal.Body>\r\n                  <div className=\"form-group\">\r\n                    <label> {t(\"name\")}</label>\r\n                    <Field\r\n                      name=\"name\"\r\n                      type=\"text\"\r\n                      className={\r\n                        \"form-control\" +\r\n                        (errors.name && touched.name ? \" is-invalid\" : \"\")\r\n                      }\r\n                      placeholder=\"Name....\"\r\n                    />\r\n                    <ErrorMessage\r\n                      name=\"name\"\r\n                      component=\"div\"\r\n                      className=\"invalid-feedback\"\r\n                    />\r\n                  </div>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                  <Button\r\n                    onClick={() => setModalCentered(false)}\r\n                    variant=\"danger light\"\r\n                  >\r\n                    {t(\"close\")}\r\n                  </Button>\r\n                  <Button variant=\"primary\" type=\"submit\">\r\n                    {t(\"save\")}{\" \"}\r\n                  </Button>\r\n                </Modal.Footer>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n        </Modal>\r\n      </Fragment>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddProduct;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Products\\EditProduct.js",["465","466","467","468","469","470","471"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { base_url, port } from \"../../../Consts\";\r\nimport { useRouteMatch } from \"react-router-dom\";\r\nimport Select from \"react-select\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Tooltip from \"@mui/material/Tooltip\";\r\nimport CustomAlert from \"../CustomAlert\";\r\n\r\nconst EditProduct = (props) => {\r\n  const history = useHistory();\r\n\r\n  const { path, url } = useRouteMatch();\r\n  // validation start\r\n\r\n  const validationSchema = () => {\r\n    return Yup.object().shape({\r\n      ProductName: Yup.string().required(\"Product Name is required\"),\r\n      category_id: Yup.string().required(\"Category is required\"),\r\n      price: Yup.number()\r\n        .typeError(\"Amount must be a number\")\r\n        .required(\"Please provide plan cost.\")\r\n        .min(1, \"Too little\"),\r\n      stock: Yup.number()\r\n        .typeError(\"Amount must be a number\")\r\n        .required(\"Please provide plan cost.\")\r\n        .min(1, \"Too little\"),\r\n    });\r\n  };\r\n  const initialValuesIngredient = {\r\n    name: \"\",\r\n  };\r\n  const validationSchemaIngredient = () => {\r\n    return Yup.object().shape({\r\n      name: Yup.string().required(\"Ingredient Name is required\"),\r\n    });\r\n  };\r\n  // validation End\r\n  // for localization\r\n  const { t } = useTranslation();\r\n  const branchId = props.history.location.state.id;\r\n  const productId = props.history.location.state.productId;\r\n\r\n  const [modalCentered, setModalCentered] = useState(false);\r\n  const [alert, setAlert] = useState({\r\n    open: false,\r\n    severity: \"success\",\r\n    message: \"\",\r\n  });\r\n  const setAlerts = (open, severity, message) => {\r\n    setAlert({\r\n      open: open,\r\n      severity: severity,\r\n      message: message,\r\n    });\r\n  };\r\n  const save = (data) => {\r\n    axios.post(\"/api/InsertSingleIngredient\", data).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setCheck(!check);\r\n        setModalCentered(false);\r\n        setAlerts(true, \"success\", res.data.message);\r\n      }\r\n    });\r\n  };\r\n  // insert modal\r\n\r\n  // edit Start\r\n  const [editProduct, setEditProduct] = useState([]);\r\n\r\n  const updateProduct = (data) => {\r\n    // console.log(JSON.stringify(data, null, 2));\r\n\r\n    const formData = new FormData();\r\n    formData.append(\"image\", editProduct.image);\r\n    formData.append(\"Description\", data.Description);\r\n    formData.append(\"ProductName\", data.ProductName);\r\n    formData.append(\"UnitName\", data.UnitName);\r\n    formData.append(\"price\", data.price);\r\n    formData.append(\"stock\", data.stock);\r\n    formData.append(\"preparationTime\", data.preparationTime);\r\n    formData.append(\"ingredients\", JSON.stringify(productIngredient));\r\n    formData.append(\"extras\", JSON.stringify(productExtra));\r\n    formData.append(\"recommendations\", JSON.stringify(productRecom));\r\n    formData.append(\"sub_category\", data.sub_category_id);\r\n    formData.append(\"category\", data.category_id);\r\n    formData.append(\"id\", productId);\r\n    axios.post(\"/api/UpdateProduct\", formData).then((res) => {\r\n      if (res.data.status === 200) {\r\n        swal(\"Success\", res.data.message, \"success\").then((check) => {\r\n          if (check) {\r\n            history.push({\r\n              pathname: `/branches/show/products`,\r\n              state: { id: branchId },\r\n            });\r\n          }\r\n        });\r\n        setCheck(!check);\r\n      }\r\n    });\r\n  };\r\n  // edit ENd\r\n  //for retriving data using laravel API\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [subCategories, setSubCategories] = useState([]);\r\n  const [categories, setCategories] = useState([]);\r\n  const [intgredients, setIntgredients] = useState([]);\r\n  const [productIngredient, setProductIngredient] = useState([]);\r\n  const [check, setCheck] = useState(true);\r\n\r\n  const handleSelectEvent = (e) => {\r\n    setProductIngredient(e);\r\n  };\r\n  const [productExtra, setProductExtra] = useState([]);\r\n  const handleSelectEventExtra = (e) => {\r\n    setProductExtra(e);\r\n  };\r\n  const extraHandle = (e, id) => {\r\n    let updatedList = productExtra.map((item) => {\r\n      if (item.id == id) {\r\n        return { ...item, price: e.target.value }; //gets everything that was already in item, and updates \"done\"\r\n      }\r\n      return item; // else return unmodified item\r\n    });\r\n    setProductExtra(updatedList);\r\n  };\r\n  const [productRecom, setProductRecom] = useState([]);\r\n  const handleSelectEventRecom = (e) => {\r\n    setProductRecom(e);\r\n  };\r\n  useEffect(() => {\r\n    axios.post(`/api/GetIngredient`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setIntgredients(res.data.fetchData);\r\n      }\r\n    });\r\n    axios.get(`/api/GetCategories/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setCategories(res.data.fetchData);\r\n      }\r\n    });\r\n\r\n    axios.get(`/api/GetProducts/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setFetchData(res.data.fetchData);\r\n      }\r\n    });\r\n    axios.get(`/api/EditProducts/${productId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setEditProduct(res.data.product);\r\n        setProductIngredient(JSON.parse(res.data.product.ingredients));\r\n        setProductExtra(JSON.parse(res.data.product.extras));\r\n        setProductRecom(JSON.parse(res.data.product.recommendations));\r\n        axios\r\n          .get(`/api/GetSubCategories/${res.data.product.category_id}`)\r\n          .then((res) => {\r\n            if (res.data.status === 200) {\r\n              setSubCategories(res.data.fetchData);\r\n            }\r\n          });\r\n        setLoading(false);\r\n      } else if (res.data.status === 404) {\r\n        swal(\"Error\", res.data.message, \"error\");\r\n      }\r\n    });\r\n  }, [check]);\r\n  const getSubCategories = (e) => {\r\n    e.preventDefault();\r\n    axios\r\n      .get(\r\n        `/api/GetSubCategories/${e.target.value == \"\" ? null : e.target.value}`\r\n      )\r\n      .then((res) => {\r\n        if (res.data.status === 200) {\r\n          setSubCategories(res.data.fetchData);\r\n        }\r\n      });\r\n    setEditProduct({ ...editProduct, [e.target.name]: e.target.value });\r\n  };\r\n  const handleImage = (e) => {\r\n    const formData = new FormData();\r\n    for (let i = 0; i < e.target.files.length; i++) {\r\n      formData.append(\"file[]\", e.target.files[i]);\r\n    }\r\n    const images = [];\r\n\r\n    axios.post(\"/api/uploadProductImage\", formData).then((res) => {\r\n      if (res.data.status === 200) {\r\n        JSON.parse(editProduct.image).map((item) => {\r\n          images.push(item);\r\n        });\r\n        res.data.filenames.map((item) => {\r\n          images.push(item);\r\n        });\r\n\r\n        setEditProduct({\r\n          ...editProduct,\r\n          image: JSON.stringify(images),\r\n        });\r\n      }\r\n    });\r\n  };\r\n  const removeImage = (e, image) => {\r\n    e.preventDefault();\r\n    axios.post(`/api/removeProductImage/${image}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setEditProduct({\r\n          ...editProduct,\r\n          image: JSON.stringify(\r\n            JSON.parse(editProduct.image).filter((item) => item !== image)\r\n          ),\r\n        });\r\n      }\r\n    });\r\n  };\r\n  var viewProducts_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"spinner-border text-primary \" role=\"status\">\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewProducts_HTMLTABLE = (\r\n      <div className=\"card\">\r\n        <div className=\"card-header\">\r\n          <div>\r\n            <h4 className=\"card-title\">{t(\"edit_product\")}</h4>\r\n          </div>\r\n        </div>\r\n        <div className=\"card-body\">\r\n          <Formik\r\n            initialValues={editProduct}\r\n            validationSchema={validationSchema}\r\n            onSubmit={updateProduct}\r\n          >\r\n            {({ errors, status, touched }) => (\r\n              <Form>\r\n                <div className=\"row\">\r\n                  <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                    <div className=\"form-group\">\r\n                      <label> {t(\"categories\")}</label>\r\n                      <Field\r\n                        as=\"select\"\r\n                        name=\"category_id\"\r\n                        className={\r\n                          \"form-control\" +\r\n                          (errors.category_id && touched.category_id\r\n                            ? \" is-invalid\"\r\n                            : \"\")\r\n                        }\r\n                        onClick={(e) => getSubCategories(e)}\r\n                      >\r\n                        <option key=\"empty\" value=\"\">\r\n                          {t(\"select_a_option\")}\r\n                        </option>\r\n                        {categories.map((item) => (\r\n                          <option value={item.id} key={item.id}>\r\n                            {item.CategoryName}\r\n                          </option>\r\n                        ))}\r\n                      </Field>\r\n                      <ErrorMessage\r\n                        name=\"category_id\"\r\n                        component=\"div\"\r\n                        className=\"invalid-feedback\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div\r\n                    className={`col-xl-6 col-xxl-6 col-lg-6 col-sm-12 ${\r\n                      subCategories.length === 0 ? \"d-none\" : \"\"\r\n                    }`}\r\n                  >\r\n                    <div className=\"form-group\">\r\n                      <label className=\"mb-1 \">\r\n                        {\" \"}\r\n                        <strong>{t(\"sub_categories\")}</strong>{\" \"}\r\n                      </label>\r\n                      <Field\r\n                        as=\"select\"\r\n                        name=\"sub_category_id\"\r\n                        className={\"form-control\"}\r\n                      >\r\n                        <option value=\"\">{t(\"select_a_option\")}</option>\r\n                        {subCategories.map((item) => (\r\n                          <option value={item.sub_id} key={item.sub_id}>\r\n                            {item.SubCategoryName}\r\n                          </option>\r\n                        ))}\r\n                      </Field>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                    <div className=\"form-group\">\r\n                      <label className=\"mb-1 \">\r\n                        {\" \"}\r\n                        <strong>{t(\"unit\")}</strong>{\" \"}\r\n                      </label>\r\n                      <Field\r\n                        name=\"UnitName\"\r\n                        type=\"text\"\r\n                        className={\"form-control\"}\r\n                        placeholder=\"KGR, Cm, Number...\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                    <div className=\"form-group\">\r\n                      <label className=\"mb-1 \">\r\n                        {\" \"}\r\n                        <strong>{t(\"product_name\")}</strong>{\" \"}\r\n                      </label>\r\n                      <Field\r\n                        name=\"ProductName\"\r\n                        type=\"text\"\r\n                        className={\r\n                          \"form-control\" +\r\n                          (errors.ProductName && touched.ProductName\r\n                            ? \" is-invalid\"\r\n                            : \"\")\r\n                        }\r\n                        placeholder=\"Name...\"\r\n                      />\r\n                      <ErrorMessage\r\n                        name=\"ProductName\"\r\n                        component=\"div\"\r\n                        className=\"invalid-feedback\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                    <div className=\"form-group\">\r\n                      <label className=\"mb-1 \">\r\n                        {\" \"}\r\n                        <strong>{t(\"description\")}</strong>{\" \"}\r\n                      </label>\r\n                      <Field\r\n                        as=\"textarea\"\r\n                        name=\"Description\"\r\n                        className={\r\n                          \"form-control\" +\r\n                          (errors.Description && touched.Description\r\n                            ? \" is-invalid\"\r\n                            : \"\")\r\n                        }\r\n                        placeholder=\"Description...\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                    <div className=\"form-group\">\r\n                      <label className=\"mb-1 \">\r\n                        {\" \"}\r\n                        <strong>{t(\"price\")}</strong>{\" \"}\r\n                      </label>\r\n                      <Field\r\n                        name=\"price\"\r\n                        type=\"number\"\r\n                        className={\r\n                          \"form-control\" +\r\n                          (errors.price && touched.price ? \" is-invalid\" : \"\")\r\n                        }\r\n                        placeholder=\"price...\"\r\n                      />\r\n                      <ErrorMessage\r\n                        name=\"price\"\r\n                        component=\"div\"\r\n                        className=\"invalid-feedback\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                    <div className=\"form-group\">\r\n                      <label className=\"mb-1 \">\r\n                        {\" \"}\r\n                        <strong>{t(\"stock\")}</strong>{\" \"}\r\n                      </label>\r\n                      <Field\r\n                        name=\"stock\"\r\n                        type=\"number\"\r\n                        className={\r\n                          \"form-control\" +\r\n                          (errors.stock && touched.stock ? \" is-invalid\" : \"\")\r\n                        }\r\n                        placeholder=\"stock...\"\r\n                      />\r\n                      <ErrorMessage\r\n                        name=\"stock\"\r\n                        component=\"div\"\r\n                        className=\"invalid-feedback\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                    <div className=\"form-group\">\r\n                      <label className=\"mb-1 \">\r\n                        <strong>{t(\"preparation_Time\")}(Minutes)</strong>\r\n                      </label>\r\n                      <Field\r\n                        name=\"preparationTime\"\r\n                        type=\"number\"\r\n                        className={\"form-control\"}\r\n                        placeholder=\"preparation Time...\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                    <div className=\"form-group\">\r\n                      <label className=\"mb-1 \">\r\n                        {\" \"}\r\n                        <strong>{t(\"image\")}</strong>{\" \"}\r\n                      </label>\r\n\r\n                      <div className=\"input-group\">\r\n                        <div className=\"custom-file\">\r\n                          <input\r\n                            type=\"file\"\r\n                            className=\"form-control\"\r\n                            placeholder={t(\"image\")}\r\n                            name=\"photo\"\r\n                            onChange={handleImage}\r\n                            multiple\r\n                            data-overwrite-initial=\"false\"\r\n                            data-min-file-count=\"1\"\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  {JSON.parse(editProduct.image)?.map((photo) => {\r\n                    return (\r\n                      <div className=\"col-xl-2 col-lg-2 col-sm-2\" key={photo}>\r\n                        <div className=\"card \">\r\n                          <div className=\"text-center\">\r\n                            <img\r\n                              className=\"w-100\"\r\n                              src={`http://${base_url}:${port}/images/products/${photo}`}\r\n                              alt=\"\"\r\n                              key={photo}\r\n                              style={{\r\n                                // width: \"100px\",\r\n                                height: \"100px\",\r\n                                objectFit: \"contain\",\r\n                              }}\r\n                            />\r\n                          </div>\r\n\r\n                          <div className=\"card-footer pt-0 pb-0 text-center\">\r\n                            <div className=\"row\">\r\n                              <Tooltip title=\"Delete\">\r\n                                <IconButton\r\n                                  onClick={(e) => removeImage(e, photo)}\r\n                                >\r\n                                  <DeleteIcon fontSize=\"small\" />\r\n                                </IconButton>\r\n                              </Tooltip>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    );\r\n                  })}\r\n                  <div className=\"col-xl-12 col-xxl-12 col-lg-12 col-sm-12\">\r\n                    <div className=\"form-group\">\r\n                      <div className=\"d-flex justify-content-between\">\r\n                        <label className=\"mb-1 \">\r\n                          <strong>{t(\"ingredients\")}</strong>\r\n                        </label>\r\n                        <small\r\n                          onClick={() => setModalCentered(true)}\r\n                          style={{ cursor: \"pointer\" }}\r\n                        >\r\n                          {t(\"add_ingredient\")}\r\n                        </small>\r\n                      </div>\r\n                      <Select\r\n                        defaultValue={productIngredient}\r\n                        isMulti\r\n                        options={intgredients?.map((o, i) => {\r\n                          return { id: i, value: o.id, label: o.name };\r\n                        })}\r\n                        onChange={handleSelectEvent}\r\n                        className=\"basic-multi-select\"\r\n                        classNamePrefix=\"select\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"col-xl-12 col-xxl-12 col-lg-12 col-sm-12\">\r\n                    <div className=\"form-group\">\r\n                      <label className=\"mb-1 \">\r\n                        <strong>{t(\"extras\")}</strong>\r\n                        <small>\r\n                          (Please first choose the fields and then set the input\r\n                          values.)\r\n                        </small>\r\n                      </label>\r\n                      <Select\r\n                        defaultValue={productExtra}\r\n                        isMulti\r\n                        options={intgredients?.map((o, i) => {\r\n                          return {\r\n                            id: i,\r\n                            value: o.id,\r\n                            label: o.name,\r\n                            price: 0,\r\n                          };\r\n                        })}\r\n                        onChange={handleSelectEventExtra}\r\n                        className=\"basic-multi-select\"\r\n                        classNamePrefix=\"select\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  {productExtra?.map((item, i) => {\r\n                    return (\r\n                      <div\r\n                        className=\"col-xl-3 col-xxl-3 col-lg-3 col-sm-3\"\r\n                        key={i}\r\n                      >\r\n                        <div className=\"form-group\">\r\n                          <label className=\"mb-1 \">\r\n                            <strong>{item.label}</strong>\r\n                            <small>(Charge)</small>\r\n                          </label>\r\n                          <input\r\n                            type=\"number\"\r\n                            className=\"form-control\"\r\n                            onChange={(e) => extraHandle(e, item.id)}\r\n                            value={productExtra[i].price}\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    );\r\n                  })}\r\n\r\n                  <div className=\"col-xl-12 col-xxl-12 col-lg-12 col-sm-12\">\r\n                    <div className=\"form-group\">\r\n                      <label className=\"mb-1 \">\r\n                        <strong>{t(\"recommendation_roducts\")}</strong>\r\n                      </label>\r\n                      <Select\r\n                        defaultValue={productRecom}\r\n                        isMulti\r\n                        options={fetchData?.map((o, i) => {\r\n                          return {\r\n                            price: o.price,\r\n                            value: o.id,\r\n                            label: o.ProductName,\r\n                            qty: 1,\r\n                          };\r\n                        })}\r\n                        onChange={handleSelectEventRecom}\r\n                        className=\"basic-multi-select\"\r\n                        classNamePrefix=\"select\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"card-footer\">\r\n                  <Button\r\n                    variant=\"danger light\"\r\n                    className=\"m-1\"\r\n                    onClick={() => history.goBack()}\r\n                  >\r\n                    {t(\"back\")}\r\n                  </Button>\r\n                  <Button variant=\"primary\" type=\"submit\">\r\n                    {t(\"update\")}{\" \"}\r\n                  </Button>\r\n                </div>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Fragment>\r\n        {alert.open ? (\r\n          <CustomAlert\r\n            open={alert.open}\r\n            severity={alert.severity}\r\n            message={alert.message}\r\n            setAlert={setAlert}\r\n          />\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        <div className=\"m-1\">\r\n          <Button\r\n            variant=\"danger light\"\r\n            className=\"m-1\"\r\n            onClick={() => history.goBack()}\r\n          >\r\n            List of Products\r\n          </Button>\r\n        </div>\r\n        {viewProducts_HTMLTABLE}\r\n        <Modal className=\"fade\" show={modalCentered}>\r\n          <Modal.Header>\r\n            <Modal.Title>{t(\"add_ingredient\")}</Modal.Title>\r\n            <Button\r\n              onClick={() => setModalCentered(false)}\r\n              variant=\"\"\r\n              className=\"close\"\r\n            >\r\n              <span>&times;</span>\r\n            </Button>\r\n          </Modal.Header>\r\n          <Formik\r\n            initialValues={initialValuesIngredient}\r\n            validationSchema={validationSchemaIngredient}\r\n            onSubmit={save}\r\n          >\r\n            {({ errors, status, touched }) => (\r\n              <Form>\r\n                <Modal.Body>\r\n                  <div className=\"form-group\">\r\n                    <label> {t(\"name\")}</label>\r\n                    <Field\r\n                      name=\"name\"\r\n                      type=\"text\"\r\n                      className={\r\n                        \"form-control\" +\r\n                        (errors.name && touched.name ? \" is-invalid\" : \"\")\r\n                      }\r\n                      placeholder=\"Name....\"\r\n                    />\r\n                    <ErrorMessage\r\n                      name=\"name\"\r\n                      component=\"div\"\r\n                      className=\"invalid-feedback\"\r\n                    />\r\n                  </div>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                  <Button\r\n                    onClick={() => setModalCentered(false)}\r\n                    variant=\"danger light\"\r\n                  >\r\n                    {t(\"close\")}\r\n                  </Button>\r\n                  <Button variant=\"primary\" type=\"submit\">\r\n                    {t(\"save\")}{\" \"}\r\n                  </Button>\r\n                </Modal.Footer>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n        </Modal>\r\n      </Fragment>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EditProduct;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\layouts\\nav\\NavHader.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\layouts\\nav\\Header.js",["472"],"import React, { useRef, useState } from \"react\";\r\n// import {\r\n//   Link,\r\n//   // , useHistory\r\n// } from \"react-router-dom\";\r\n/// Image\r\nimport i18next from \"i18next\";\r\nimport profile from \"../../../images/hellomenu/logo.svg\";\r\nimport axios from \"axios\";\r\nimport \"flag-icon-css/css/flag-icons.min.css\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport IdleTimer from \"react-idle-timer\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Menu from \"@mui/material/Menu\";\r\nimport MoreVertIcon from \"@mui/icons-material/MoreVert\";\r\nconst Header = ({ toggle, onProfile, onNotification }) => {\r\n  const idleTimerRef = useRef(null);\r\n  const { t } = useTranslation();\r\n\r\n  // const history = useHistory();\r\n  const logoutUser = (e) => {\r\n    // e.preventDefault();\r\n    axios.post(\"/api/logout\").then((res) => {\r\n      if (res.data.status === 200) {\r\n        localStorage.removeItem(\"auth_token\");\r\n        localStorage.removeItem(\"auth_name\");\r\n        localStorage.removeItem(\"auth_company_id\");\r\n        localStorage.removeItem(\"auth_id\");\r\n        window.location = \"/page-login\";\r\n      }\r\n    });\r\n  };\r\n  const languages = [\r\n    {\r\n      code: \"en\",\r\n      name: \"English\",\r\n      country_code: \"gb\",\r\n    },\r\n    {\r\n      code: \"tr\",\r\n      name: \"Turkish\",\r\n      country_code: \"tr\",\r\n    },\r\n  ];\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const open = Boolean(anchorEl);\r\n  const handleClick = (event: MouseEvent<HTMLButtonElement>) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n  return (\r\n    <div className=\"header\">\r\n      <IdleTimer\r\n        ref={idleTimerRef}\r\n        timeout={1000 * 60 * 15}\r\n        onIdle={logoutUser}\r\n      />\r\n      <div className=\"header-content\">\r\n        <nav className=\"navbar navbar-expand\">\r\n          <div className=\"collapse navbar-collapse justify-content-between\">\r\n            <div className=\"header-left\"></div>\r\n\r\n            <ul className=\"navbar-nav header-right\">\r\n              <li className=\"nav-item dropdown notification_dropdown\">\r\n                <div>\r\n                  <Button\r\n                    id=\"basic-button\"\r\n                    aria-controls=\"basic-menu\"\r\n                    aria-haspopup=\"true\"\r\n                    aria-expanded={open ? \"true\" : undefined}\r\n                    onClick={handleClick}\r\n                  >\r\n                    <svg\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      fill=\"currentColor\"\r\n                      className=\"bi bi-globe\"\r\n                      width=\"32\"\r\n                      height=\"32\"\r\n                      viewBox=\"0 0 16 16\"\r\n                    >\r\n                      <path d=\"M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8zm7.5-6.923c-.67.204-1.335.82-1.887 1.855A7.97 7.97 0 0 0 5.145 4H7.5V1.077zM4.09 4a9.267 9.267 0 0 1 .64-1.539 6.7 6.7 0 0 1 .597-.933A7.025 7.025 0 0 0 2.255 4H4.09zm-.582 3.5c.03-.877.138-1.718.312-2.5H1.674a6.958 6.958 0 0 0-.656 2.5h2.49zM4.847 5a12.5 12.5 0 0 0-.338 2.5H7.5V5H4.847zM8.5 5v2.5h2.99a12.495 12.495 0 0 0-.337-2.5H8.5zM4.51 8.5a12.5 12.5 0 0 0 .337 2.5H7.5V8.5H4.51zm3.99 0V11h2.653c.187-.765.306-1.608.338-2.5H8.5zM5.145 12c.138.386.295.744.468 1.068.552 1.035 1.218 1.65 1.887 1.855V12H5.145zm.182 2.472a6.696 6.696 0 0 1-.597-.933A9.268 9.268 0 0 1 4.09 12H2.255a7.024 7.024 0 0 0 3.072 2.472zM3.82 11a13.652 13.652 0 0 1-.312-2.5h-2.49c.062.89.291 1.733.656 2.5H3.82zm6.853 3.472A7.024 7.024 0 0 0 13.745 12H11.91a9.27 9.27 0 0 1-.64 1.539 6.688 6.688 0 0 1-.597.933zM8.5 12v2.923c.67-.204 1.335-.82 1.887-1.855.173-.324.33-.682.468-1.068H8.5zm3.68-1h2.146c.365-.767.594-1.61.656-2.5h-2.49a13.65 13.65 0 0 1-.312 2.5zm2.802-3.5a6.959 6.959 0 0 0-.656-2.5H12.18c.174.782.282 1.623.312 2.5h2.49zM11.27 2.461c.247.464.462.98.64 1.539h1.835a7.024 7.024 0 0 0-3.072-2.472c.218.284.418.598.597.933zM10.855 4a7.966 7.966 0 0 0-.468-1.068C9.835 1.897 9.17 1.282 8.5 1.077V4h2.355z\" />\r\n                    </svg>\r\n                  </Button>\r\n                  <Menu\r\n                    id=\"basic-menu\"\r\n                    anchorEl={anchorEl}\r\n                    open={open}\r\n                    onClose={handleClose}\r\n                    MenuListProps={{\r\n                      \"aria-labelledby\": \"basic-button\",\r\n                    }}\r\n                  >\r\n                    <ul className=\"\">\r\n                      {languages.map(({ name, code, country_code }) => (\r\n                        <li key={country_code}>\r\n                          <div className=\"success\"></div>\r\n                          <button\r\n                            className=\"dropdown-item\"\r\n                            onClick={() => i18next.changeLanguage(code)}\r\n                          >\r\n                            <span\r\n                              className={`flag-icon flag-icon-${country_code} mx-2`}\r\n                            ></span>\r\n                            {name}\r\n                          </button>\r\n                        </li>\r\n                      ))}\r\n                    </ul>\r\n                  </Menu>\r\n                </div>\r\n              </li>\r\n              <li\r\n                className={`nav-item dropdown header-profile ${\r\n                  toggle === \"profile\" ? \"show\" : \"\"\r\n                }`}\r\n                onClick={() => onProfile()}\r\n              >\r\n                <a\r\n                  // to={\"#\"}\r\n                  className=\"nav-link\"\r\n                  role=\"button\"\r\n                  data-toggle=\"dropdown\"\r\n                >\r\n                  <div className=\"header-info\">\r\n                    <small>{t(\"hello_menu\")}</small>\r\n                    <span>\r\n                      {\" \"}\r\n                      {atob(localStorage.getItem(\"auth_name\"))}{\" \"}\r\n                      <MoreVertIcon sx={{ color: \"#f50b65\" }} />\r\n                    </span>\r\n                  </div>\r\n                  <img src={profile} width=\"10\" alt=\"\" />\r\n                </a>\r\n                <div\r\n                  className={`dropdown-menu dropdown-menu-right ${\r\n                    toggle === \"profile\" ? \"show\" : \"\"\r\n                  }`}\r\n                >\r\n                  {/* <Link to=\"/profile\" className=\"dropdown-item ai-icon\">\r\n                    <svg\r\n                      id=\"icon-user1\"\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      className=\"text-success\"\r\n                      width=\"18\"\r\n                      height=\"18\"\r\n                      viewBox=\"0 0 24 24\"\r\n                      fill=\"none\"\r\n                      stroke=\"currentColor\"\r\n                      strokeWidth=\"2\"\r\n                      strokeLinecap=\"round\"\r\n                      strokeLinejoin=\"round\"\r\n                    >\r\n                      <path d=\"M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2\"></path>\r\n                      <circle cx=\"12\" cy=\"7\" r=\"4\"></circle>\r\n                    </svg>\r\n                    <span className=\"ml-2\">{t(\"profile\")} </span>\r\n                  </Link> */}\r\n\r\n                  <button\r\n                    className=\"dropdown-item ai-icon\"\r\n                    onClick={logoutUser}\r\n                  >\r\n                    <svg\r\n                      id=\"icon-logout\"\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      className=\"text-danger\"\r\n                      width=\"18\"\r\n                      height=\"18\"\r\n                      viewBox=\"0 0 24 24\"\r\n                      fill=\"none\"\r\n                      stroke=\"currentColor\"\r\n                      strokeWidth=\"2\"\r\n                      strokeLinecap=\"round\"\r\n                      strokeLinejoin=\"round\"\r\n                    >\r\n                      <path d=\"M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4\"></path>\r\n                      <polyline points=\"16 17 21 12 16 7\"></polyline>\r\n                      <line x1=\"21\" y1=\"12\" x2=\"9\" y2=\"12\"></line>\r\n                    </svg>\r\n                    <span className=\"ml-2\">{t(\"logout\")} </span>\r\n                  </button>\r\n                </div>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </nav>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\layouts\\nav\\SideBar.js",["473"],"import React, { Component } from \"react\";\r\n\r\n/// Link\r\nimport { Link } from \"react-router-dom\";\r\n\r\n/// Scroll\r\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\r\n\r\n/// Menu\r\nimport MetisMenu from \"metismenujs\";\r\nimport { withTranslation } from \"react-i18next\";\r\n// const { t } = useTranslation();\r\n\r\nclass MM extends Component {\r\n  componentDidMount() {\r\n    this.$el = this.el;\r\n    this.mm = new MetisMenu(this.$el);\r\n  }\r\n  componentWillUnmount() {\r\n    this.mm(\"dispose\");\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"mm-wrapper\">\r\n        <ul className=\"metismenu\" ref={(el) => (this.el = el)}>\r\n          {this.props.children}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass SideBar extends Component {\r\n  /// Open menu\r\n  componentDidMount() {\r\n    // sidebar open/close\r\n    var btn = document.querySelector(\".nav-control\");\r\n    var aaa = document.querySelector(\"#main-wrapper\");\r\n\r\n    function toggleFunc() {\r\n      return aaa.classList.toggle(\"menu-toggle\");\r\n    }\r\n\r\n    btn.addEventListener(\"click\", toggleFunc);\r\n  }\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      path: window.location.pathname.replace(/^\\/([^\\/]*).*$/, \"$1\"),\r\n    };\r\n  }\r\n  render() {\r\n    const { t } = this.props;\r\n    return (\r\n      <div className=\"deznav\">\r\n        <PerfectScrollbar className=\"deznav-scroll\">\r\n          <MM className=\"metismenu\" id=\"menu\">\r\n            <li\r\n              className={`${\r\n                this.state.path === \"dashboard\" ? \"mm-active\" : \"\"\r\n              }`}\r\n            >\r\n              <Link\r\n                className=\"ai-icon\"\r\n                to=\"/dashboard\"\r\n                onClick={() => this.setState({ path: \"dashboard\" })}\r\n              >\r\n                <i className=\"flaticon-381-networking\"></i>\r\n                <span className=\"nav-text\">{t(\"dashboard\")}</span>\r\n              </Link>\r\n            </li>\r\n            <li\r\n              className={`${this.state.path === \"branches\" ? \"mm-active\" : \"\"}`}\r\n            >\r\n              <Link\r\n                className=\"ai-icon\"\r\n                to=\"/branches\"\r\n                onClick={() => this.setState({ path: \"branches\" })}\r\n              >\r\n                <i className=\"flaticon-381-television\"></i>\r\n                <span className=\"nav-text\">{t(\"branches\")}</span>\r\n              </Link>\r\n            </li>\r\n            <li\r\n              className={`${\r\n                this.state.path === \"attributes\" ? \"mm-active\" : \"\"\r\n              }`}\r\n            >\r\n              <Link\r\n                className=\"ai-icon\"\r\n                to=\"/attributes\"\r\n                onClick={() => this.setState({ path: \"attributes\" })}\r\n              >\r\n                <i className=\"flaticon-381-list\"></i>\r\n                <span className=\"nav-text\">{t(\"attributes\")}</span>\r\n              </Link>\r\n            </li>\r\n            <li\r\n              className={`${\r\n                this.state.path === \"ingredients\" ? \"mm-active\" : \"\"\r\n              }`}\r\n            >\r\n              <Link\r\n                className=\"ai-icon\"\r\n                to=\"/ingredients\"\r\n                onClick={() => this.setState({ path: \"ingredients\" })}\r\n              >\r\n                <i className=\"flaticon-381-pad\"></i>\r\n                <span className=\"nav-text\">{t(\"ingredients\")}</span>\r\n              </Link>\r\n            </li>\r\n            <li className={`${this.state.path === \"areas\" ? \"mm-active\" : \"\"}`}>\r\n              <Link\r\n                className=\"ai-icon\"\r\n                to=\"/areas\"\r\n                onClick={() => this.setState({ path: \"areas\" })}\r\n              >\r\n                <i className=\"flaticon-381-location\"></i>\r\n                <span className=\"nav-text\">{t(\"areas\")}</span>\r\n              </Link>\r\n            </li>\r\n            {/* <li\r\n              className={`${this.state.path === \"extras\" ? \"mm-active\" : \"\"}`}\r\n            >\r\n              <Link\r\n                className=\"ai-icon\"\r\n                to=\"/extras\"\r\n                onClick={() => this.setState({ path: \"extras\" })}\r\n              >\r\n                <i className=\"flaticon-381-add-3\"></i>\r\n                <span className=\"nav-text\">{t(\"extras\")}</span>\r\n              </Link>\r\n            </li> */}\r\n            <li\r\n              className={`${this.state.path === \"orders\" ? \"mm-active\" : \"\"}`}\r\n            >\r\n              <Link\r\n                className=\"ai-icon\"\r\n                to=\"/orders\"\r\n                onClick={() => this.setState({ path: \"orders\" })}\r\n              >\r\n                <i className=\"flaticon-381-plus\"></i>\r\n                <span className=\"nav-text\">{t(\"orders\")}</span>\r\n              </Link>\r\n            </li>\r\n            <li\r\n              className={`${this.state.path === \"baskets\" ? \"mm-active\" : \"\"}`}\r\n            >\r\n              <Link\r\n                className=\"ai-icon\"\r\n                to=\"/baskets\"\r\n                onClick={() => this.setState({ path: \"baskets\" })}\r\n              >\r\n                <i className=\"flaticon-381-controls-3\"></i>\r\n                <span className=\"nav-text\">{t(\"baskets\")}</span>\r\n              </Link>\r\n            </li>\r\n            <li\r\n              className={`${\r\n                this.state.path === \"companies\" ? \"mm-active\" : \"\"\r\n              }`}\r\n            >\r\n              <Link\r\n                className=\"ai-icon\"\r\n                to=\"/companies\"\r\n                onClick={() => this.setState({ path: \"companies\" })}\r\n              >\r\n                <i className=\"flaticon-381-internet\"></i>\r\n                <span className=\"nav-text\">{t(\"companies\")}</span>\r\n              </Link>\r\n            </li>\r\n          </MM>\r\n        </PerfectScrollbar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withTranslation()(SideBar);\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\EditTheme.js",["474","475"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CRow,\r\n  CFormLabel,\r\n  CCol,\r\n} from \"@coreui/react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport circle_menu_button from \"../../../images/hellomenu/circle_menu_button.png\";\r\nimport pill_menu_button from \"../../../images/hellomenu/pill_menu_button.png\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport Switch from \"@mui/material/Switch\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { FormControlLabel, RadioGroup, Radio } from \"@mui/material\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst EditTheme = (props) => {\r\n  const { t } = useTranslation();\r\n  const history = useHistory();\r\n  const id = props.history.location.state.id;\r\n\r\n  const [homeScreen, setHomeScreen] = useState(false);\r\n  const [menuScreen, setMenuScreen] = useState(false);\r\n  const [buttonShow, setButtonShow] = useState(1);\r\n  const [imageState, setImageState] = useState([]);\r\n  const handleImage = (e) => {\r\n    setImageState({ ...imageState, HomeScreenBackground: e.target.files[0] });\r\n  };\r\n  const [imageStateMenu, setImageStateMenu] = useState([]);\r\n  const handleImageMenu = (e) => {\r\n    setImageStateMenu({\r\n      ...imageStateMenu,\r\n      MenuScreenBackground: e.target.files[0],\r\n    });\r\n  };\r\n  // update Start\r\n  const [themes, setThemes] = useState([]);\r\n  const handleInput = (e) => {\r\n    e.persist();\r\n    setThemes({ ...themes, [e.target.name]: e.target.value });\r\n  };\r\n  const update = (e) => {\r\n    e.preventDefault();\r\n    // console.log(themes);\r\n    const formData = new FormData();\r\n    formData.append(\"HomeScreenBackground\", imageState.HomeScreenBackground);\r\n    formData.append(\r\n      \"MenuScreenBackground\",\r\n      imageStateMenu.MenuScreenBackground\r\n    );\r\n    formData.append(\"ThemeName\", themes.ThemeName);\r\n    // formData.append(\"Orientation\", themes.Orientation);\r\n    // formData.append(\"MenuStructure\", themes.MenuStructure);\r\n    formData.append(\"TextColor\", themes.TextColor);\r\n    formData.append(\"BackgroundColor\", themes.BackgroundColor);\r\n    formData.append(\"HighlightColor\", themes.HighlightColor);\r\n    // formData.append(\"QRCodeColor\", themes.QRCodeColor);\r\n    // formData.append(\"QRCodeBackgroundColor\", themes.QRCodeBackgroundColor);\r\n    formData.append(\"HomeScreenBackground\", themes.HomeScreenBackground);\r\n    formData.append(\"MenuScreenBackground\", themes.MenuScreenBackground);\r\n    formData.append(\"ShowButton\", themes.ShowButton);\r\n    formData.append(\"ButtonShape\", themes.ButtonShape);\r\n    axios.post(`/api/UpdateTheme/${id}`, formData).then((res) => {\r\n      if (res.data.status === 200) {\r\n        swal(\"Success\", res.data.message, \"success\").then((check) => {\r\n          if (check) {\r\n            history.goBack();\r\n          }\r\n        });\r\n\r\n        // setThemes([]);\r\n        // setImageStateMenu([]);\r\n        // setImageState([]);\r\n      }\r\n    });\r\n  };\r\n  // update End\r\n\r\n  useEffect(() => {\r\n    axios.get(`/api/EditTheme/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setThemes(res.data.data);\r\n      }\r\n    });\r\n  }, []);\r\n  return (\r\n    <>\r\n      <div className=\"\">\r\n        <Form onSubmit={update} method=\"POST\" encType=\"multipart/form-data\">\r\n          <div className=\"row\">\r\n            <div className=\"col-12 mb-2\">\r\n              <input\r\n                type=\"text\"\r\n                style={{ border: \"none\" }}\r\n                value={themes.ThemeName}\r\n                className=\"form-control\"\r\n                placeholder={t(\"theme_name\")}\r\n                onChange={handleInput}\r\n                value={themes.ThemeName}\r\n                name=\"ThemeName\"\r\n              />\r\n            </div>\r\n            <div className=\"col-6\">\r\n              <CCard>\r\n                <CCardHeader component=\"h5\">{t(\"theme_colors\")}</CCardHeader>\r\n                <CCardBody>\r\n                  <CRow className=\"mb-3\">\r\n                    <CFormLabel\r\n                      htmlFor=\"staticEmail\"\r\n                      className=\"col-sm-6 col-form-label\"\r\n                    >\r\n                      {t(\"text_color\")}\r\n                    </CFormLabel>\r\n                    <CCol sm={6} className=\"text-center\">\r\n                      <input\r\n                        type=\"color\"\r\n                        onChange={handleInput}\r\n                        value={themes.TextColor}\r\n                        id=\"favcolor\"\r\n                        name=\"TextColor\"\r\n                      />\r\n                    </CCol>\r\n                  </CRow>\r\n                  <CRow className=\"mb-3\">\r\n                    <CFormLabel\r\n                      htmlFor=\"inputPassword\"\r\n                      className=\"col-sm-6 col-form-label\"\r\n                    >\r\n                      {t(\"background_color\")}\r\n                    </CFormLabel>\r\n                    <CCol sm={6} className=\"text-center\">\r\n                      <input\r\n                        type=\"color\"\r\n                        id=\"favcolor\"\r\n                        onChange={handleInput}\r\n                        value={themes.BackgroundColor}\r\n                        name=\"BackgroundColor\"\r\n                      />\r\n                    </CCol>\r\n                  </CRow>\r\n                  <CRow className=\"mb-3\">\r\n                    <CFormLabel\r\n                      htmlFor=\"inputPassword\"\r\n                      className=\"col-sm-6 col-form-label\"\r\n                    >\r\n                      {t(\"highlight_color\")}\r\n                    </CFormLabel>\r\n                    <CCol sm={6} className=\"text-center\">\r\n                      <input\r\n                        type=\"color\"\r\n                        id=\"favcolor\"\r\n                        onChange={handleInput}\r\n                        value={themes.HighlightColor}\r\n                        name=\"HighlightColor\"\r\n                      />\r\n                    </CCol>\r\n                  </CRow>\r\n                  <CRow className=\"mb-3\">\r\n                    <button className=\"btn btn-light m-1\" type=\"button\">\r\n                      {t(\"advanced_customization\")}\r\n                    </button>\r\n                  </CRow>\r\n                </CCardBody>\r\n              </CCard>\r\n            </div>\r\n            <div className=\"col-6\">\r\n              <div className=\"row\">\r\n                <div className=\"col-12\">\r\n                  <CCard>\r\n                    <CCardHeader component=\"h5\">\r\n                      {t(\"home_screen_background\")}\r\n                    </CCardHeader>\r\n                    <CCardBody>\r\n                      <RadioGroup\r\n                        aria-label=\"HomeScreen\"\r\n                        defaultValue=\"1\"\r\n                        name=\"radio-buttons-group\"\r\n                      >\r\n                        <FormControlLabel\r\n                          value=\"1\"\r\n                          control={\r\n                            <Radio\r\n                              onClick={() => setHomeScreen(false)}\r\n                              color=\"secondary\"\r\n                            />\r\n                          }\r\n                          label={t(\"solid_color\")}\r\n                        />\r\n                        <FormControlLabel\r\n                          value=\"0\"\r\n                          control={\r\n                            <Radio\r\n                              onClick={() => setHomeScreen(true)}\r\n                              color=\"secondary\"\r\n                            />\r\n                          }\r\n                          label={t(\"image_or_video\")}\r\n                        />\r\n                      </RadioGroup>\r\n                      <CRow className=\"mb-3\">\r\n                        <CCol sm={12} className=\"text-right\">\r\n                          {homeScreen ? (\r\n                            \" \"\r\n                          ) : (\r\n                            <input\r\n                              type=\"color\"\r\n                              id=\"favcolor\"\r\n                              onChange={handleInput}\r\n                              value={themes.HomeScreenBackground}\r\n                              name=\"HomeScreenBackground\"\r\n                            />\r\n                          )}\r\n                        </CCol>\r\n                      </CRow>\r\n                      {homeScreen ? (\r\n                        <div className=\"form-group\">\r\n                          <div className=\"input-group\">\r\n                            <div className=\"custom-file\">\r\n                              <input\r\n                                type=\"file\"\r\n                                className=\"form-control\"\r\n                                name=\"HomeScreenBackground\"\r\n                                required\r\n                                onChange={handleImage}\r\n                              />\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      ) : (\r\n                        \" \"\r\n                      )}\r\n                    </CCardBody>\r\n                  </CCard>\r\n                </div>\r\n                <div className=\"col-12\">\r\n                  <CCard>\r\n                    <CCardHeader component=\"h5\">\r\n                      {t(\"menu_screen_background\")}\r\n                    </CCardHeader>\r\n                    <CCardBody>\r\n                      <RadioGroup\r\n                        aria-label=\"MenuScreen\"\r\n                        defaultValue=\"1\"\r\n                        name=\"radio-buttons-group\"\r\n                      >\r\n                        <FormControlLabel\r\n                          value=\"1\"\r\n                          control={\r\n                            <Radio\r\n                              onClick={() => setMenuScreen(false)}\r\n                              color=\"secondary\"\r\n                            />\r\n                          }\r\n                          label={t(\"solid_color\")}\r\n                        />\r\n                        <FormControlLabel\r\n                          value=\"0\"\r\n                          control={\r\n                            <Radio\r\n                              onClick={() => setMenuScreen(true)}\r\n                              color=\"secondary\"\r\n                            />\r\n                          }\r\n                          label={t(\"image\")}\r\n                        />\r\n                      </RadioGroup>\r\n                      <CRow className=\"mb-3\">\r\n                        <CCol sm={12} className=\"text-right\">\r\n                          {menuScreen ? (\r\n                            \" \"\r\n                          ) : (\r\n                            <input\r\n                              type=\"color\"\r\n                              onChange={handleInput}\r\n                              value={themes.MenuScreenBackground}\r\n                              name=\"MenuScreenBackground\"\r\n                            />\r\n                          )}\r\n                        </CCol>\r\n                      </CRow>\r\n                      {menuScreen ? (\r\n                        <div className=\"form-group\">\r\n                          <div className=\"input-group\">\r\n                            <div className=\"custom-file\">\r\n                              <input\r\n                                type=\"file\"\r\n                                className=\"form-control\"\r\n                                name=\"MenuScreenBackground\"\r\n                                required\r\n                                onChange={handleImageMenu}\r\n                              />\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      ) : (\r\n                        \" \"\r\n                      )}\r\n                    </CCardBody>\r\n                  </CCard>\r\n                </div>\r\n                <div className=\"col-12\">\r\n                  <CCard>\r\n                    <CCardHeader component=\"h5\">{t(\"menu_button\")}</CCardHeader>\r\n                    <CCardBody>\r\n                      <CRow className=\"mb-3\">\r\n                        <CFormLabel\r\n                          htmlFor=\"staticEmail\"\r\n                          className=\"col-sm-6 col-form-label\"\r\n                        >\r\n                          {t(\"show_button\")}\r\n                        </CFormLabel>\r\n                        <CCol sm={6} className=\"text-center\">\r\n                          <Switch\r\n                            defaultChecked\r\n                            onChange={() => setButtonShow(!buttonShow)}\r\n                            value={buttonShow}\r\n                            name=\"ShowButton\"\r\n                            color=\"secondary\"\r\n                          />\r\n                        </CCol>\r\n                      </CRow>\r\n                      {buttonShow ? (\r\n                        <CRow className=\"mb-3\">\r\n                          <CFormLabel\r\n                            htmlFor=\"inputPassword\"\r\n                            className=\"col-sm-12 col-form-label\"\r\n                          >\r\n                            {t(\"button_shape\")}\r\n                          </CFormLabel>\r\n                          <CCol sm={12} className=\"text-center\">\r\n                            <RadioGroup\r\n                              aria-label=\"menu_button\"\r\n                              defaultValue=\"P\"\r\n                              name=\"ButtonShape\"\r\n                              onChange={handleInput}\r\n                              value={themes.ButtonShape}\r\n                            >\r\n                              <FormControlLabel\r\n                                value=\"R\"\r\n                                control={\r\n                                  <div>\r\n                                    <Radio value=\"R\" color=\"secondary\" />{\" \"}\r\n                                    <img\r\n                                      src={circle_menu_button}\r\n                                      alt=\"\"\r\n                                      width=\"80\"\r\n                                    />\r\n                                  </div>\r\n                                }\r\n                                label={t(\"round\")}\r\n                              />\r\n                              <FormControlLabel\r\n                                value=\"P\"\r\n                                control={\r\n                                  <div>\r\n                                    <Radio value=\"P\" color=\"secondary\" />{\" \"}\r\n                                    <img\r\n                                      src={pill_menu_button}\r\n                                      alt=\"\"\r\n                                      width=\"80\"\r\n                                    />\r\n                                  </div>\r\n                                }\r\n                                label={t(\"pill\")}\r\n                              />\r\n                            </RadioGroup>\r\n                          </CCol>\r\n                        </CRow>\r\n                      ) : null}\r\n                    </CCardBody>\r\n                  </CCard>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"text-center mx-4 mb-4\">\r\n            <button className=\"btn btn-primary\" type=\"submit\">\r\n              {t(\"update\")}\r\n            </button>\r\n            <Link\r\n              className=\"btn btn-light m-1\"\r\n              to=\"\"\r\n              onClick={() => history.goBack()}\r\n            >\r\n              {t(\"back\")}\r\n            </Link>\r\n          </div>\r\n        </Form>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EditTheme;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Theme.js",["476","477","478"],"import React, { useState } from \"react\";\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CRow,\r\n  CFormLabel,\r\n  CCol,\r\n} from \"@coreui/react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// import Switch from \"react-switch\";\r\nimport circle_menu_button from \"../../../images/hellomenu/circle_menu_button.png\";\r\nimport pill_menu_button from \"../../../images/hellomenu/pill_menu_button.png\";\r\nimport Avatar from \"@mui/material/Avatar\";\r\nimport {\r\n  AvatarGroup,\r\n  Grid,\r\n  List,\r\n  ListItem,\r\n  ListItemButton,\r\n  ListItemText,\r\n} from \"@mui/material\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport Switch from \"@mui/material/Switch\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { FormControlLabel, RadioGroup, Radio } from \"@mui/material\";\r\nimport Accordion from \"@mui/material/Accordion\";\r\nimport AccordionDetails from \"@mui/material/AccordionDetails\";\r\nimport AccordionSummary from \"@mui/material/AccordionSummary\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Theme = (props) => {\r\n  const history = useHistory();\r\n\r\n  const { t } = useTranslation();\r\n  const branchId = props.history.location.state.id;\r\n\r\n  const [state, setState] = useState({ checked: false });\r\n  const [homeScreen, setHomeScreen] = useState(false);\r\n  const [menuScreen, setMenuScreen] = useState(false);\r\n  const [buttonShow, setButtonShow] = useState(1);\r\n  const handleChange = (checked) => {\r\n    setState({ checked });\r\n  };\r\n  const [imageState, setImageState] = useState([]);\r\n  const handleImage = (e) => {\r\n    setImageState({ ...imageState, HomeScreenBackground: e.target.files[0] });\r\n  };\r\n  const [imageStateMenu, setImageStateMenu] = useState([]);\r\n  const handleImageMenu = (e) => {\r\n    setImageStateMenu({\r\n      ...imageStateMenu,\r\n      MenuScreenBackground: e.target.files[0],\r\n    });\r\n  };\r\n  // Insert Start\r\n  const [themes, setThemes] = useState([]);\r\n  const handleInput = (e) => {\r\n    e.persist();\r\n    setThemes({ ...themes, [e.target.name]: e.target.value });\r\n  };\r\n  const changeColor = (first, second, thrid) => {\r\n    setThemes({\r\n      ...themes,\r\n      TextColor: first,\r\n      BackgroundColor: second,\r\n      HighlightColor: thrid,\r\n    });\r\n  };\r\n  const save = (e) => {\r\n    e.preventDefault();\r\n    // console.log(themes);\r\n    const formData = new FormData();\r\n    formData.append(\"HomeScreenBackground\", imageState.HomeScreenBackground);\r\n    formData.append(\r\n      \"MenuScreenBackground\",\r\n      imageStateMenu.MenuScreenBackground\r\n    );\r\n    formData.append(\"ThemeName\", themes.ThemeName);\r\n    // formData.append(\"Orientation\", themes.Orientation);\r\n    // formData.append(\"MenuStructure\", themes.MenuStructure);\r\n    formData.append(\"TextColor\", themes.TextColor);\r\n    formData.append(\"BackgroundColor\", themes.BackgroundColor);\r\n    formData.append(\"HighlightColor\", themes.HighlightColor);\r\n    // formData.append(\"QRCodeColor\", themes.QRCodeColor);\r\n    // formData.append(\"QRCodeBackgroundColor\", themes.QRCodeBackgroundColor);\r\n    formData.append(\"HomeScreenBackground\", themes.HomeScreenBackground);\r\n    formData.append(\"MenuScreenBackground\", themes.MenuScreenBackground);\r\n    formData.append(\"ShowButton\", themes.ShowButton);\r\n    formData.append(\"ButtonShape\", themes.ButtonShape);\r\n    axios.post(`/api/InsertTheme/${branchId}`, formData).then((res) => {\r\n      if (res.data.status === 200) {\r\n        swal(\"Success\", res.data.message, \"success\").then((check) => {\r\n          if (check) {\r\n            history.goBack();\r\n          }\r\n        });\r\n        // setThemes([]);\r\n        // setImageStateMenu([]);\r\n        // setImageState([]);\r\n      }\r\n    });\r\n  };\r\n  // insert End\r\n  const [expanded, setExpanded] = React.useState(false);\r\n\r\n  const handleChangePanel = (panel) => (event, isExpanded) => {\r\n    setExpanded(isExpanded ? panel : false);\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\" overflow-hidden border\">\r\n        <Form onSubmit={save} method=\"POST\" encType=\"multipart/form-data\">\r\n          <div className=\"row\">\r\n            <div className=\"col-12 mb-2\">\r\n              <div\r\n                className=\"col-6 mb-2\"\r\n                style={{ borderBottom: \"2px solid black\" }}\r\n              >\r\n                <input\r\n                  type=\"text\"\r\n                  style={{ border: \"none\" }}\r\n                  className=\"form-control\"\r\n                  placeholder={t(\"theme_name\")}\r\n                  onChange={handleInput}\r\n                  name=\"ThemeName\"\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"col-6\">\r\n              <CCard>\r\n                <CCardHeader component=\"h5\">{t(\"theme_colors\")}</CCardHeader>\r\n                <CCardBody>\r\n                  <div>\r\n                    <Accordion\r\n                      expanded={expanded === \"panel1\"}\r\n                      onChange={handleChangePanel(\"panel1\")}\r\n                      className=\"my-3\"\r\n                    >\r\n                      <AccordionSummary\r\n                        aria-controls=\"panel1bh-content\"\r\n                        id=\"panel1bh-header\"\r\n                      >\r\n                        <Grid container spacing={2}>\r\n                          <Grid item xs={6} md={8}>\r\n                            <Typography sx={{ width: \"33%\", flexShrink: 0 }}>\r\n                              {t(\"selected\")}\r\n                            </Typography>\r\n                          </Grid>\r\n                          <Grid item xs={6} md={4}>\r\n                            <Typography sx={{ color: \"text.secondary\" }}>\r\n                              <AvatarGroup max={4}>\r\n                                <Avatar\r\n                                  sx={{\r\n                                    bgcolor: themes.TextColor,\r\n                                    width: 20,\r\n                                    height: 20,\r\n                                  }}\r\n                                >\r\n                                  {\" \"}\r\n                                </Avatar>\r\n                                <Avatar\r\n                                  sx={{\r\n                                    bgcolor: themes.BackgroundColor,\r\n                                    width: 20,\r\n                                    height: 20,\r\n                                  }}\r\n                                >\r\n                                  {\" \"}\r\n                                </Avatar>\r\n                                <Avatar\r\n                                  sx={{\r\n                                    bgcolor: themes.HighlightColor,\r\n                                    width: 20,\r\n                                    height: 20,\r\n                                  }}\r\n                                >\r\n                                  {\" \"}\r\n                                </Avatar>\r\n                              </AvatarGroup>\r\n                            </Typography>\r\n                          </Grid>\r\n                        </Grid>\r\n                      </AccordionSummary>\r\n                      <AccordionDetails>\r\n                        <Typography>\r\n                          <List>\r\n                            <ListItem disablePadding>\r\n                              <ListItemButton\r\n                                onClick={() =>\r\n                                  changeColor(\"red\", \"green\", \"black\")\r\n                                }\r\n                              >\r\n                                <Grid container spacing={2}>\r\n                                  <Grid item xs={6} md={8}>\r\n                                    <ListItemText primary=\"First Color Theme\" />\r\n                                  </Grid>\r\n                                  <Grid item xs={6} md={4}>\r\n                                    <Typography\r\n                                      sx={{ color: \"text.secondary\" }}\r\n                                    >\r\n                                      <AvatarGroup max={4}>\r\n                                        <Avatar\r\n                                          sx={{\r\n                                            bgcolor: \"red\",\r\n                                            width: 20,\r\n                                            height: 20,\r\n                                          }}\r\n                                        >\r\n                                          {\" \"}\r\n                                        </Avatar>\r\n                                        <Avatar\r\n                                          sx={{\r\n                                            bgcolor: \"green\",\r\n                                            width: 20,\r\n                                            height: 20,\r\n                                          }}\r\n                                        >\r\n                                          {\" \"}\r\n                                        </Avatar>\r\n                                        <Avatar\r\n                                          sx={{\r\n                                            bgcolor: \"black\",\r\n                                            width: 20,\r\n                                            height: 20,\r\n                                          }}\r\n                                        >\r\n                                          {\" \"}\r\n                                        </Avatar>\r\n                                      </AvatarGroup>\r\n                                    </Typography>\r\n                                  </Grid>\r\n                                </Grid>\r\n                              </ListItemButton>\r\n                            </ListItem>\r\n                          </List>\r\n                        </Typography>\r\n                      </AccordionDetails>\r\n                    </Accordion>\r\n                  </div>\r\n                  <CRow className=\"mb-3\">\r\n                    <CFormLabel\r\n                      htmlFor=\"staticEmail\"\r\n                      className=\"col-sm-6 col-form-label\"\r\n                    >\r\n                      {t(\"text_color\")}\r\n                    </CFormLabel>\r\n                    <CCol sm={6} className=\"text-center\">\r\n                      <input\r\n                        type=\"color\"\r\n                        onChange={handleInput}\r\n                        value={themes.TextColor}\r\n                        name=\"TextColor\"\r\n                      />\r\n                    </CCol>\r\n                  </CRow>\r\n                  <CRow className=\"mb-3\">\r\n                    <CFormLabel\r\n                      htmlFor=\"inputPassword\"\r\n                      className=\"col-sm-6 col-form-label\"\r\n                    >\r\n                      {t(\"background_color\")}\r\n                    </CFormLabel>\r\n                    <CCol sm={6} className=\"text-center\">\r\n                      <input\r\n                        type=\"color\"\r\n                        onChange={handleInput}\r\n                        value={themes.BackgroundColor}\r\n                        name=\"BackgroundColor\"\r\n                      />\r\n                    </CCol>\r\n                  </CRow>\r\n                  <CRow className=\"mb-3\">\r\n                    <CFormLabel\r\n                      htmlFor=\"inputPassword\"\r\n                      className=\"col-sm-6 col-form-label\"\r\n                    >\r\n                      {t(\"highlight_color\")}\r\n                    </CFormLabel>\r\n                    <CCol sm={6} className=\"text-center\">\r\n                      <input\r\n                        type=\"color\"\r\n                        onChange={handleInput}\r\n                        value={themes.HighlightColor}\r\n                        name=\"HighlightColor\"\r\n                      />\r\n                    </CCol>\r\n                  </CRow>\r\n                  <CRow className=\"mb-3\">\r\n                    <button className=\"btn btn-light m-1\" type=\"button\">\r\n                      {t(\"advanced_customization\")}\r\n                    </button>\r\n                  </CRow>\r\n                </CCardBody>\r\n              </CCard>\r\n            </div>\r\n            <div className=\"col-6\">\r\n              <div className=\"row\">\r\n                <div className=\"col-12\">\r\n                  <CCard>\r\n                    <CCardHeader component=\"h5\">\r\n                      {t(\"home_screen_background\")}\r\n                    </CCardHeader>\r\n                    <CCardBody>\r\n                      <RadioGroup\r\n                        aria-label=\"HomeScreen\"\r\n                        defaultValue=\"1\"\r\n                        name=\"radio-buttons-group\"\r\n                      >\r\n                        <FormControlLabel\r\n                          value=\"1\"\r\n                          control={\r\n                            <Radio\r\n                              onClick={() => setHomeScreen(false)}\r\n                              color=\"secondary\"\r\n                            />\r\n                          }\r\n                          label={t(\"solid_color\")}\r\n                        />\r\n                        <FormControlLabel\r\n                          value=\"0\"\r\n                          control={\r\n                            <Radio\r\n                              onClick={() => setHomeScreen(true)}\r\n                              color=\"secondary\"\r\n                            />\r\n                          }\r\n                          label={t(\"image_or_video\")}\r\n                        />\r\n                      </RadioGroup>\r\n                      <CRow className=\"mb-3\">\r\n                        <CCol sm={12} className=\"text-right\">\r\n                          {homeScreen ? (\r\n                            \" \"\r\n                          ) : (\r\n                            <input\r\n                              type=\"color\"\r\n                              id=\"favcolor\"\r\n                              onChange={handleInput}\r\n                              value={themes.HomeScreenBackground}\r\n                              name=\"HomeScreenBackground\"\r\n                            />\r\n                          )}\r\n                        </CCol>\r\n                      </CRow>\r\n                      {homeScreen ? (\r\n                        <div className=\"form-group\">\r\n                          <div className=\"input-group\">\r\n                            <div className=\"custom-file\">\r\n                              <input\r\n                                type=\"file\"\r\n                                className=\"form-control\"\r\n                                name=\"HomeScreenBackground\"\r\n                                required\r\n                                onChange={handleImage}\r\n                              />\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      ) : (\r\n                        \" \"\r\n                      )}\r\n                    </CCardBody>\r\n                  </CCard>\r\n                </div>\r\n                <div className=\"col-12\">\r\n                  <CCard>\r\n                    <CCardHeader component=\"h5\">\r\n                      {t(\"menu_screen_background\")}\r\n                    </CCardHeader>\r\n                    <CCardBody>\r\n                      <RadioGroup\r\n                        aria-label=\"MenuScreen\"\r\n                        defaultValue=\"1\"\r\n                        name=\"radio-buttons-group\"\r\n                      >\r\n                        <FormControlLabel\r\n                          value=\"1\"\r\n                          control={\r\n                            <Radio\r\n                              onClick={() => setMenuScreen(false)}\r\n                              color=\"secondary\"\r\n                            />\r\n                          }\r\n                          label={t(\"solid_color\")}\r\n                        />\r\n                        <FormControlLabel\r\n                          value=\"0\"\r\n                          control={\r\n                            <Radio\r\n                              onClick={() => setMenuScreen(true)}\r\n                              color=\"secondary\"\r\n                            />\r\n                          }\r\n                          label={t(\"image\")}\r\n                        />\r\n                      </RadioGroup>\r\n                      <CRow className=\"mb-3\">\r\n                        <CCol sm={12} className=\"text-right\">\r\n                          {menuScreen ? (\r\n                            \" \"\r\n                          ) : (\r\n                            <input\r\n                              type=\"color\"\r\n                              onChange={handleInput}\r\n                              value={themes.MenuScreenBackground}\r\n                              name=\"MenuScreenBackground\"\r\n                            />\r\n                          )}\r\n                        </CCol>\r\n                      </CRow>\r\n                      {menuScreen ? (\r\n                        <div className=\"form-group\">\r\n                          <div className=\"input-group\">\r\n                            <div className=\"custom-file\">\r\n                              <input\r\n                                type=\"file\"\r\n                                className=\"form-control\"\r\n                                name=\"MenuScreenBackground\"\r\n                                required\r\n                                onChange={handleImageMenu}\r\n                              />\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      ) : (\r\n                        \" \"\r\n                      )}\r\n                    </CCardBody>\r\n                  </CCard>\r\n                </div>\r\n                <div className=\"col-12\">\r\n                  <CCard>\r\n                    <CCardHeader component=\"h5\">{t(\"menu_button\")}</CCardHeader>\r\n                    <CCardBody>\r\n                      <CRow className=\"mb-3\">\r\n                        <CFormLabel\r\n                          htmlFor=\"staticEmail\"\r\n                          className=\"col-sm-6 col-form-label\"\r\n                        >\r\n                          {t(\"show_button\")}\r\n                        </CFormLabel>\r\n                        <CCol sm={6} className=\"text-center\">\r\n                          <Switch\r\n                            defaultChecked\r\n                            onChange={() => setButtonShow(!buttonShow)}\r\n                            value={buttonShow}\r\n                            onChange={handleInput}\r\n                            name=\"ShowButton\"\r\n                            color=\"secondary\"\r\n                          />\r\n                        </CCol>\r\n                      </CRow>\r\n                      {buttonShow ? (\r\n                        <CRow className=\"mb-3\">\r\n                          <CFormLabel\r\n                            htmlFor=\"inputPassword\"\r\n                            className=\"col-sm-12 col-form-label\"\r\n                          >\r\n                            {t(\"button_shape\")}\r\n                          </CFormLabel>\r\n                          <CCol sm={12} className=\"text-center\">\r\n                            <RadioGroup\r\n                              aria-label=\"menu_button\"\r\n                              defaultValue=\"P\"\r\n                              name=\"radio-buttons-group\"\r\n                            >\r\n                              <FormControlLabel\r\n                                value=\"R\"\r\n                                control={\r\n                                  <div>\r\n                                    <Radio\r\n                                      onChange={handleInput}\r\n                                      name=\"ButtonShape\"\r\n                                      value=\"R\"\r\n                                      color=\"secondary\"\r\n                                    />{\" \"}\r\n                                    <img\r\n                                      src={circle_menu_button}\r\n                                      alt=\"\"\r\n                                      width=\"80\"\r\n                                    />\r\n                                  </div>\r\n                                }\r\n                                label={t(\"round\")}\r\n                              />\r\n                              <FormControlLabel\r\n                                value=\"P\"\r\n                                control={\r\n                                  <div>\r\n                                    <Radio\r\n                                      onChange={handleInput}\r\n                                      name=\"ButtonShape\"\r\n                                      value=\"P\"\r\n                                      color=\"secondary\"\r\n                                    />{\" \"}\r\n                                    <img\r\n                                      src={pill_menu_button}\r\n                                      alt=\"\"\r\n                                      width=\"80\"\r\n                                    />\r\n                                  </div>\r\n                                }\r\n                                label={t(\"pill\")}\r\n                              />\r\n                            </RadioGroup>\r\n                          </CCol>\r\n                        </CRow>\r\n                      ) : null}\r\n                    </CCardBody>\r\n                  </CCard>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"text-center mx-4 mb-4\">\r\n            <button className=\"btn btn-primary\" type=\"submit\">\r\n              {t(\"save\")}\r\n            </button>\r\n            <Link\r\n              className=\"btn btn-light m-1\"\r\n              to=\"\"\r\n              onClick={() => history.goBack()}\r\n            >\r\n              {t(\"back\")}\r\n            </Link>\r\n          </div>\r\n        </Form>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Theme;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Design.js",["479","480","481","482","483","484","485","486","487","488"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  CNav,\r\n  CNavItem,\r\n  CNavLink,\r\n  CTabContent,\r\n  CTabPane,\r\n  CCard,\r\n  CCardText,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCardImage,\r\n  CRow,\r\n  CFormLabel,\r\n  CCol,\r\n} from \"@coreui/react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport palette from \"../../../images/hellomenu/palette.svg\";\r\nimport { Link, useRouteMatch } from \"react-router-dom\";\r\nimport QRCode from \"qrcode.react\";\r\nimport axios from \"axios\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport swal from \"sweetalert\";\r\nimport Switch from \"@mui/material/Switch\";\r\nimport { FormControlLabel, RadioGroup, Radio } from \"@mui/material\";\r\nimport { base_url, port } from \"../../../Consts\";\r\nimport logo from \"../../../images/hellomenu/logo.svg\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardMedia from \"@mui/material/CardMedia\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { CardActionArea } from \"@mui/material\";\r\nimport CardActions from \"@mui/material/CardActions\";\r\nimport Grid from \"@mui/material/Grid\";\r\n// import profile from \"\";\r\nimport CustomAlert from \"../CustomAlert\";\r\n\r\nconst Design = (props) => {\r\n  const { path, url } = useRouteMatch();\r\n\r\n  const { t } = useTranslation();\r\n  // const branchId = atob(props.match.params.id);\r\n  const branchId = props.history.location.state.id;\r\n\r\n  const [activeKey, setActiveKey] = useState(1);\r\n  // Insert Start\r\n  const [themes, setThemes] = useState([]);\r\n  const [activeThemeId, setActiveThemeId] = useState([]);\r\n  const [check, setCheck] = useState(true);\r\n\r\n  const handleInput = (e) => {\r\n    e.persist();\r\n    setThemes({ ...themes, [e.target.name]: e.target.value });\r\n  };\r\n  const [imageState, setImageState] = useState([]);\r\n  const handleImage = (e) => {\r\n    setImageState({ ...imageState, Logo: e.target.files[0] });\r\n  };\r\n  const [alert, setAlert] = useState({\r\n    open: false,\r\n    severity: \"success\",\r\n    message: \"\",\r\n  });\r\n  const setAlerts = (open, severity, message) => {\r\n    setAlert({\r\n      open: open,\r\n      severity: severity,\r\n      message: message,\r\n    });\r\n  };\r\n  const save = (e) => {\r\n    e.preventDefault();\r\n    // console.log(themes);\r\n    const formData = new FormData();\r\n    formData.append(\"Logo\", imageState.Logo);\r\n    formData.append(\"Orientation\", themes.Orientation);\r\n    formData.append(\"MenuStructure\", themes.MenuStructure);\r\n    formData.append(\"TextColor\", themes.TextColor);\r\n    formData.append(\"BackgroundColor\", themes.BackgroundColor);\r\n    formData.append(\"HighlightColor\", themes.HighlightColor);\r\n    formData.append(\"QRCodeColor\", themes.QRCodeColor);\r\n    formData.append(\"QRCodeBackgroundColor\", themes.QRCodeBackgroundColor);\r\n    // console.log(activeThemeId);\r\n    axios.post(`/api/UpdateTheme/${activeThemeId}`, formData).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setCheck(!check);\r\n        setAlerts(true, \"success\", res.data.message);\r\n      }\r\n    });\r\n  };\r\n\r\n  // insert End\r\n  // change the active theme\r\n  const changeTheActiveTheme = (e, id) => {\r\n    axios.post(`/api/ThemeStatus/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setCheck(!check);\r\n        setAlerts(true, \"info\", res.data.message);\r\n      }\r\n    });\r\n  };\r\n  // change the active template\r\n  const changeTheActiveTemplate = (e, id) => {\r\n    axios.post(`/api/TemplateStatus/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setCheck(!check);\r\n        setAlerts(true, \"info\", res.data.message);\r\n      }\r\n    });\r\n  };\r\n  //for retriving data using laravel API\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [templates, setTemplates] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios.get(`/api/GetThemes/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setFetchData(res.data.fetchData);\r\n        res.data.fetchData.map((item, i) => {\r\n          if (item.Status == 1) {\r\n            setActiveThemeId(item.id);\r\n            setThemes(item);\r\n          }\r\n        });\r\n      }\r\n      setLoading(false);\r\n    });\r\n    axios.get(`/api/GetTemplates/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setTemplates(res.data.data);\r\n      }\r\n    });\r\n  }, [check]);\r\n  // delete start\r\n  const deleteTheme = (e, id) => {\r\n    e.preventDefault();\r\n    swal({\r\n      title: \"Are you sure?\",\r\n      text: \"Once deleted, you will not be able to recover this imaginary file!\",\r\n      icon: \"warning\",\r\n      buttons: [t(\"cancel\"), t(\"confirm\")],\r\n      dangerMode: true,\r\n    }).then((willDelete) => {\r\n      if (willDelete) {\r\n        axios.delete(`/api/DeleteTheme/${id}`).then((res) => {\r\n          if (res.data.status === 200) {\r\n            setCheck(!check);\r\n            setAlerts(true, \"success\", res.data.message);\r\n\r\n            // thisClicked.closest(\"tr\").remove();\r\n          } else if (res.data.status === 404) {\r\n            setAlerts(true, \"error\", res.data.message);\r\n          }\r\n        });\r\n      } else {\r\n        setAlerts(true, \"info\", \"Your Data is safe now!\");\r\n      }\r\n    });\r\n  };\r\n  // delete end\r\n  //   duplicate Theme\r\n  const duplicateTheme = (e, id) => {\r\n    e.preventDefault();\r\n    axios.get(`/api/duplicateTheme/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setCheck(!check);\r\n        setAlerts(true, \"success\", res.data.message);\r\n      }\r\n    });\r\n  };\r\n  var viewThemes_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"spinner-border text-primary \" role=\"status\">\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewThemes_HTMLTABLE = fetchData.map((item, i) => {\r\n      return (\r\n        <div className=\"col-xl-4 col-lg-4 col-sm-6\" key={i}>\r\n          <CCard>\r\n            <CCardImage\r\n              orientation=\"top\"\r\n              src={\r\n                item.Logo\r\n                  ? `http://${base_url}:${port}/images/Themes/${item.Logo}`\r\n                  : palette\r\n              }\r\n              style={{ height: \"250px\", objectFit: \"contain\" }}\r\n            />\r\n            <CCardBody>\r\n              <CCardText>\r\n                {/* <div className=\"row\"> */}\r\n                <Link\r\n                  to={{\r\n                    pathname: `${url}/edit-theme`,\r\n                    state: { id: branchId },\r\n                  }}\r\n                >\r\n                  <svg\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    width=\"16\"\r\n                    height=\"16\"\r\n                    fill=\"currentColor\"\r\n                    className=\"bi bi-pencil-square mx-2\"\r\n                    viewBox=\"0 0 16 16\"\r\n                  >\r\n                    <path d=\"M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z\" />\r\n                    <path\r\n                      fillRule=\"evenodd\"\r\n                      d=\"M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z\"\r\n                    />\r\n                  </svg>\r\n                  {t(\"edit\")}\r\n                </Link>\r\n                {item.Status == 1 ? (\r\n                  \" \"\r\n                ) : (\r\n                  <Link to=\"\" onClick={(e) => deleteTheme(e, item.id)}>\r\n                    <svg\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      width=\"16\"\r\n                      height=\"16\"\r\n                      fill=\"currentColor\"\r\n                      className=\"bi bi-trash mx-2\"\r\n                      viewBox=\"0 0 16 16\"\r\n                    >\r\n                      <path d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z\" />\r\n                      <path\r\n                        fillRule=\"evenodd\"\r\n                        d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\"\r\n                      />\r\n                    </svg>\r\n                    <span> {t(\"delete\")}</span>\r\n                  </Link>\r\n                )}\r\n                <Link to=\"\" onClick={(e) => duplicateTheme(e, item.id)}>\r\n                  <svg\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    width=\"16\"\r\n                    height=\"16\"\r\n                    fill=\"currentColor\"\r\n                    className=\"bi bi-front mx-2\"\r\n                    viewBox=\"0 0 16 16\"\r\n                  >\r\n                    <path d=\"M0 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v2h2a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2v-2H2a2 2 0 0 1-2-2V2zm5 10v2a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1h-2v5a2 2 0 0 1-2 2H5z\" />\r\n                  </svg>\r\n                  <span> {t(\"duplicate\")}</span>\r\n                </Link>\r\n                {/* </div> */}\r\n                <div className=\"row \">\r\n                  <div className=\"col-8 mt-2 text-primary font-weight-bold\">\r\n                    {item.ThemeName}\r\n                  </div>\r\n                  <div className=\"col-4 text-right\">\r\n                    <Switch\r\n                      disabled={item.Status == 1 ? true : false}\r\n                      checked={item.Status == 1 ? true : false}\r\n                      color=\"secondary\"\r\n                      onChange={(e) => changeTheActiveTheme(e, item.id)}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </CCardText>\r\n            </CCardBody>\r\n          </CCard>\r\n        </div>\r\n      );\r\n    });\r\n  }\r\n  return (\r\n    <>\r\n      {alert.open ? (\r\n        <CustomAlert\r\n          open={alert.open}\r\n          severity={alert.severity}\r\n          message={alert.message}\r\n          setAlert={setAlert}\r\n        />\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <CNav variant=\"pills\" role=\"tablist\">\r\n        <CNavItem>\r\n          <CNavLink\r\n            style={{ cursor: \"pointer\" }}\r\n            active={activeKey === 1}\r\n            onClick={() => setActiveKey(1)}\r\n          >\r\n            {t(\"default_templates\")}\r\n          </CNavLink>\r\n        </CNavItem>\r\n        <CNavItem>\r\n          <CNavLink\r\n            // href=\"#\"\r\n            style={{ cursor: \"pointer\" }}\r\n            active={activeKey === 2}\r\n            onClick={() => setActiveKey(2)}\r\n          >\r\n            {t(\"custom_design\")}\r\n          </CNavLink>\r\n        </CNavItem>\r\n      </CNav>\r\n      <CTabContent>\r\n        <CTabPane\r\n          role=\"tabpanel\"\r\n          aria-labelledby=\"profile-tab\"\r\n          visible={activeKey === 1}\r\n        >\r\n          <div className=\" overflow-hidden border mt-2\">\r\n            <Grid container spacing={2}>\r\n              {templates.map((item) => {\r\n                return (\r\n                  <Grid item xs={4} sm={3} md={3} key={item.id}>\r\n                    <Card>\r\n                      <CardActionArea>\r\n                        <CardMedia\r\n                          component=\"img\"\r\n                          height=\"200\"\r\n                          image={`http://${base_url}:${port}/images/Templates/${item.ImageURL}`}\r\n                          alt=\"template\"\r\n                        />\r\n\r\n                        <CardContent>\r\n                          <Typography gutterBottom variant=\"h6\" component=\"div\">\r\n                            {item.TemplateName}\r\n                          </Typography>\r\n                        </CardContent>\r\n                        <CardActions>\r\n                          <Grid container spacing={2}>\r\n                            <Grid item xs={12}>\r\n                              <Link\r\n                                to={{\r\n                                  pathname: `/${item.URL}/${btoa(branchId)}`,\r\n                                  state: { id: item.id },\r\n                                }}\r\n                                target=\"_blank\"\r\n                              >\r\n                                Preview\r\n                              </Link>\r\n                            </Grid>\r\n                            <Grid item xs={8}>\r\n                              {item.Status == 1 ? (\r\n                                <Link\r\n                                  to={{\r\n                                    pathname: `${url}/${item.CustomizationURL}`,\r\n                                    state: { id: item.id, branchId: branchId },\r\n                                  }}\r\n                                >\r\n                                  Customization\r\n                                </Link>\r\n                              ) : (\r\n                                \"You must first activate the template before customization.\"\r\n                              )}\r\n                            </Grid>\r\n                            <Grid item xs={4}>\r\n                              <Switch\r\n                                disabled={item.Status == 1 ? true : false}\r\n                                checked={item.Status == 1 ? true : false}\r\n                                color=\"secondary\"\r\n                                onChange={(e) =>\r\n                                  changeTheActiveTemplate(e, item.id)\r\n                                }\r\n                              />\r\n                              {/* {item.Status == 1 ? (\r\n                                <Switch checked disabled color=\"secondary\" />\r\n                              ) : (\r\n                                <Switch\r\n                                  onChange={(e) =>\r\n                                    changeTheActiveTemplate(e, item.id)\r\n                                  }\r\n                                  color=\"secondary\"\r\n                                />\r\n                              )} */}\r\n                            </Grid>\r\n                          </Grid>\r\n                        </CardActions>\r\n                      </CardActionArea>\r\n                    </Card>\r\n                  </Grid>\r\n                );\r\n              })}\r\n            </Grid>\r\n          </div>\r\n        </CTabPane>\r\n        <CTabPane\r\n          role=\"tabpanel\"\r\n          aria-labelledby=\"home-tab\"\r\n          visible={activeKey === 2}\r\n        >\r\n          <div className=\" overflow-hidden border\">\r\n            <Form onSubmit={save} method=\"POST\" encType=\"multipart/form-data\">\r\n              <div className=\"row\">\r\n                <div className=\"col-6\">\r\n                  <CCard>\r\n                    <CCardHeader component=\"h5\">{t(\"logo\")}</CCardHeader>\r\n                    <CCardBody>\r\n                      <div className=\"mb-3\">{t(\"note_for_logo\")}</div>\r\n                      <div className=\"p-2\">\r\n                        <input\r\n                          type=\"file\"\r\n                          className=\"form-control\"\r\n                          name=\"Logo\"\r\n                          onChange={handleImage}\r\n                        />\r\n                        <img\r\n                          style={{ height: \"50px\", objectFit: \"contain\" }}\r\n                          src={\r\n                            themes.Logo\r\n                              ? `http://${base_url}:${port}/images/Themes/${themes.Logo}`\r\n                              : logo\r\n                          }\r\n                          // src={`http://${base_url}:${port}/images/Themes/${theme[0].Logo}`}\r\n                          className=\"w-40 mr-2\"\r\n                          alt=\"Menu\"\r\n                        />\r\n                      </div>\r\n                    </CCardBody>\r\n                  </CCard>\r\n                </div>\r\n                <div className=\"col-6\">\r\n                  <div className=\"row\">\r\n                    <div className=\"col-12\">\r\n                      <CCard>\r\n                        <CCardHeader component=\"h5\">\r\n                          {t(\"screen_orientation\")}\r\n                        </CCardHeader>\r\n                        <CCardBody>\r\n                          <RadioGroup\r\n                            row\r\n                            aria-label=\"Orientation\"\r\n                            defaultValue={themes.Orientation}\r\n                            name=\"Orientation\"\r\n                            onChange={handleInput}\r\n                          >\r\n                            <FormControlLabel\r\n                              value=\"P\"\r\n                              control={\r\n                                <div>\r\n                                  <Radio\r\n                                    value=\"P\"\r\n                                    name=\"Orientation\"\r\n                                    color=\"secondary\"\r\n                                  />\r\n                                  <svg\r\n                                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                                    width=\"64\"\r\n                                    height=\"64\"\r\n                                    fill=\"currentColor\"\r\n                                    className=\"bi bi-phone\"\r\n                                    viewBox=\"0 0 16 16\"\r\n                                  >\r\n                                    <path d=\"M11 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h6zM5 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H5z\" />\r\n                                    <path d=\"M8 14a1 1 0 1 0 0-2 1 1 0 0 0 0 2z\" />\r\n                                  </svg>\r\n                                </div>\r\n                              }\r\n                              label={t(\"portrait\")}\r\n                            />\r\n                            <FormControlLabel\r\n                              value=\"L\"\r\n                              control={\r\n                                <div>\r\n                                  <Radio\r\n                                    value=\"L\"\r\n                                    name=\"Orientation\"\r\n                                    color=\"secondary\"\r\n                                  />{\" \"}\r\n                                  <svg\r\n                                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                                    width=\"64\"\r\n                                    height=\"64\"\r\n                                    fill=\"currentColor\"\r\n                                    className=\"bi bi-phone-landscape mr-2\"\r\n                                    viewBox=\"0 0 16 16\"\r\n                                  >\r\n                                    <path d=\"M1 4.5a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1v6a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1v-6zm-1 6a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-6a2 2 0 0 0-2-2H2a2 2 0 0 0-2 2v6z\" />\r\n                                    <path d=\"M14 7.5a1 1 0 1 0-2 0 1 1 0 0 0 2 0z\" />\r\n                                  </svg>\r\n                                </div>\r\n                              }\r\n                              label={t(\"landscape\")}\r\n                            />\r\n                          </RadioGroup>\r\n                        </CCardBody>\r\n                      </CCard>\r\n                    </div>\r\n\r\n                    <div className=\"col-12\">\r\n                      <CCard>\r\n                        <CCardHeader component=\"h5\">\r\n                          {t(\"menu_structure\")}\r\n                        </CCardHeader>\r\n                        <CCardBody>\r\n                          <RadioGroup\r\n                            row\r\n                            aria-label=\"MenuStructure\"\r\n                            defaultValue={themes.MenuStructure}\r\n                            name=\"MenuStructure\"\r\n                            onChange={handleInput}\r\n                          >\r\n                            <FormControlLabel\r\n                              value=\"I\"\r\n                              control={\r\n                                <div>\r\n                                  <Radio\r\n                                    value=\"I\"\r\n                                    name=\"MenuStructure\"\r\n                                    color=\"secondary\"\r\n                                  />{\" \"}\r\n                                  <svg\r\n                                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                                    width=\"64\"\r\n                                    height=\"64\"\r\n                                    fill=\"currentColor\"\r\n                                    className=\"bi bi-file-post\"\r\n                                    viewBox=\"0 0 16 16\"\r\n                                  >\r\n                                    <path d=\"M4 3.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5zm0 2a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 .5.5v8a.5.5 0 0 1-.5.5h-7a.5.5 0 0 1-.5-.5v-8z\" />\r\n                                    <path d=\"M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2zm10-1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1z\" />\r\n                                  </svg>\r\n                                </div>\r\n                              }\r\n                              label={t(\"infinite_scroll\")}\r\n                            />\r\n                            <FormControlLabel\r\n                              value=\"C\"\r\n                              control={\r\n                                <div>\r\n                                  <Radio\r\n                                    value=\"C\"\r\n                                    name=\"MenuStructure\"\r\n                                    color=\"secondary\"\r\n                                  />{\" \"}\r\n                                  <svg\r\n                                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                                    width=\"64\"\r\n                                    height=\"64\"\r\n                                    fill=\"currentColor\"\r\n                                    className=\"bi bi-file-spreadsheet\"\r\n                                    viewBox=\"0 0 16 16\"\r\n                                  >\r\n                                    <path d=\"M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2zm2-1a1 1 0 0 0-1 1v4h10V2a1 1 0 0 0-1-1H4zm9 6h-3v2h3V7zm0 3h-3v2h3v-2zm0 3h-3v2h2a1 1 0 0 0 1-1v-1zm-4 2v-2H6v2h3zm-4 0v-2H3v1a1 1 0 0 0 1 1h1zm-2-3h2v-2H3v2zm0-3h2V7H3v2zm3-2v2h3V7H6zm3 3H6v2h3v-2z\" />\r\n                                  </svg>\r\n                                </div>\r\n                              }\r\n                              label={t(\"classic_layout\")}\r\n                            />\r\n                          </RadioGroup>\r\n                        </CCardBody>\r\n                      </CCard>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-6\">\r\n                  <CCard>\r\n                    <CCardHeader component=\"h5\">\r\n                      {t(\"theme_colors\")}\r\n                    </CCardHeader>\r\n                    <CCardBody>\r\n                      {/* <SketchPicker /> */}\r\n                      <CRow className=\"mb-3\">\r\n                        <CFormLabel\r\n                          htmlFor=\"staticEmail\"\r\n                          className=\"col-sm-6 col-form-label\"\r\n                        >\r\n                          {t(\"text_color\")}\r\n                        </CFormLabel>\r\n                        <CCol sm={6} className=\"text-center\">\r\n                          <input\r\n                            type=\"color\"\r\n                            onChange={handleInput}\r\n                            value={themes.TextColor}\r\n                            id=\"favcolor\"\r\n                            name=\"TextColor\"\r\n                          />\r\n                        </CCol>\r\n                      </CRow>\r\n                      <CRow className=\"mb-3\">\r\n                        <CFormLabel\r\n                          htmlFor=\"inputPassword\"\r\n                          className=\"col-sm-6 col-form-label\"\r\n                        >\r\n                          {t(\"bgColor\")}\r\n                        </CFormLabel>\r\n                        <CCol sm={6} className=\"text-center\">\r\n                          <input\r\n                            type=\"color\"\r\n                            onChange={handleInput}\r\n                            value={themes.BackgroundColor}\r\n                            id=\"favcolor\"\r\n                            name=\"BackgroundColor\"\r\n                          />\r\n                        </CCol>\r\n                      </CRow>\r\n                      <CRow className=\"mb-3\">\r\n                        <CFormLabel\r\n                          htmlFor=\"inputPassword\"\r\n                          className=\"col-sm-6 col-form-label\"\r\n                        >\r\n                          {t(\"highlight_color\")}\r\n                        </CFormLabel>\r\n                        <CCol sm={6} className=\"text-center\">\r\n                          <input\r\n                            type=\"color\"\r\n                            onChange={handleInput}\r\n                            value={themes.HighlightColor}\r\n                            id=\"favcolor\"\r\n                            name=\"HighlightColor\"\r\n                          />\r\n                        </CCol>\r\n                      </CRow>\r\n                    </CCardBody>\r\n                  </CCard>\r\n                </div>\r\n                <div className=\"col-6\">\r\n                  <CCard>\r\n                    <CCardHeader component=\"h5\">\r\n                      {t(\"your_helloMenu_QR\")}\r\n                    </CCardHeader>\r\n                    <CCardBody>\r\n                      <div className=\"text-center mb-3\">\r\n                        <QRCode\r\n                          level={\"H\"}\r\n                          size={256}\r\n                          bgColor={themes.QRCodeBackgroundColor}\r\n                          fgColor={themes.QRCodeColor}\r\n                          value={`http://192.168.1.103:3000/show-branch-details`}\r\n                          className=\"primary\"\r\n                        />\r\n                      </div>\r\n                      <CRow className=\"mb-3\">\r\n                        <CFormLabel\r\n                          htmlFor=\"staticEmail\"\r\n                          className=\"col-sm-6 col-form-label\"\r\n                        >\r\n                          {t(\"QR_code_color\")}\r\n                        </CFormLabel>\r\n                        <CCol sm={6} className=\"text-center\">\r\n                          <input\r\n                            type=\"color\"\r\n                            onChange={handleInput}\r\n                            value={themes.QRCodeColor}\r\n                            id=\"favcolor\"\r\n                            name=\"QRCodeColor\"\r\n                          />\r\n                        </CCol>\r\n                      </CRow>\r\n                      <CRow className=\"mb-3\">\r\n                        <CFormLabel\r\n                          htmlFor=\"inputPassword\"\r\n                          className=\"col-sm-6 col-form-label\"\r\n                        >\r\n                          {t(\"QR_code_background_color\")}\r\n                        </CFormLabel>\r\n                        <CCol sm={6} className=\"text-center\">\r\n                          <input\r\n                            type=\"color\"\r\n                            onChange={handleInput}\r\n                            value={themes.QRCodeBackgroundColor}\r\n                            id=\"favcolor\"\r\n                            name=\"QRCodeBackgroundColor\"\r\n                          />\r\n                        </CCol>\r\n                      </CRow>\r\n                    </CCardBody>\r\n                  </CCard>\r\n                </div>\r\n              </div>\r\n              <div className=\"text-right mx-4 mb-4\">\r\n                <button className=\"btn btn-primary\" type=\"submit\">\r\n                  {t(\"save\")}\r\n                </button>\r\n              </div>\r\n            </Form>\r\n          </div>\r\n          <div className=\"row mt-2\">\r\n            {viewThemes_HTMLTABLE}\r\n\r\n            <div className=\"col-xl-4 col-lg-4 col-sm-6\">\r\n              <div className=\"card overflow-hidden \">\r\n                <div\r\n                  className=\"card-body d-flex justify-content-center text-center\"\r\n                  style={{ border: \"2px dashed pink\" }}\r\n                >\r\n                  <div className=\"align-self-center text-center\">\r\n                    <div>\r\n                      <img src={palette} alt=\"\" />\r\n                    </div>\r\n                    <div className=\"pt-3\">\r\n                      <Link\r\n                        className=\"btn btn-outline-primary\"\r\n                        to={{\r\n                          pathname: `${url}/add-theme`,\r\n                          state: { id: branchId },\r\n                        }}\r\n                      >\r\n                        {t(\"new_theme\")}\r\n                      </Link>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </CTabPane>\r\n      </CTabContent>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Design;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Variants\\Variants.js",["489","490","491","492","493","494","495","496","497","498","499","500","501","502","503","504","505","506","507","508","509","510","511","512","513","514","515","516"],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Products\\Product.js",["517","518","519","520"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { base_url, port } from \"../../../Consts\";\r\nimport { CSmartTable } from \"@coreui/react-pro\";\r\nimport { useRouteMatch } from \"react-router-dom\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Tooltip from \"@mui/material/Tooltip\";\r\nimport AutoAwesomeMotionIcon from \"@mui/icons-material/AutoAwesomeMotion\";\r\nimport EditIcon from \"@mui/icons-material/Edit\";\r\nimport Chip from \"@mui/material/Chip\";\r\nimport Stack from \"@mui/material/Stack\";\r\nimport ViewComfyIcon from \"@mui/icons-material/ViewComfy\";\r\nimport TableRowsIcon from \"@mui/icons-material/TableRows\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nconst Product = (props) => {\r\n  const { path, url } = useRouteMatch();\r\n\r\n  // for localization\r\n  const { t } = useTranslation();\r\n  // const subMenuId = atob(props.match.params.id)\r\n  const branchId = props.history.location.state.id;\r\n\r\n  // delete section\r\n  const deleteProduct = (e, id) => {\r\n    e.preventDefault();\r\n    swal({\r\n      title: \"Are you sure?\",\r\n      text: \"Once deleted, you will not be able to recover this imaginary file!\",\r\n      icon: \"warning\",\r\n      buttons: [t(\"cancel\"), t(\"confirm\")],\r\n      dangerMode: true,\r\n    }).then((willDelete) => {\r\n      if (willDelete) {\r\n        axios.delete(`/api/DeleteProducts/${id}`).then((res) => {\r\n          if (res.data.status === 200) {\r\n            setCheck(!check);\r\n            swal(\"Success\", res.data.message, \"success\");\r\n          } else if (res.data.status === 404) {\r\n            swal(\"Error\", res.data.message, \"error\");\r\n          }\r\n        });\r\n      } else {\r\n        swal(\"Your Data is safe now!\");\r\n      }\r\n    });\r\n  };\r\n  // delete End\r\n  //for retriving data using laravel API\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [check, setCheck] = useState(true);\r\n  useEffect(() => {\r\n    axios.get(`/api/GetProducts/${branchId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setFetchData(res.data.fetchData);\r\n      }\r\n      setLoading(false);\r\n    });\r\n  }, [check]);\r\n\r\n  const columns = [\r\n    {\r\n      key: \"image\",\r\n    },\r\n    {\r\n      key: \"ProductName\",\r\n    },\r\n    {\r\n      key: \"Description\",\r\n    },\r\n    {\r\n      key: \"price\",\r\n    },\r\n    {\r\n      key: \"stock\",\r\n    },\r\n    {\r\n      key: \"ingredients\",\r\n    },\r\n    {\r\n      key: \"extras\",\r\n    },\r\n    {\r\n      key: \"recommendations\",\r\n    },\r\n    {\r\n      key: \"CategoryName\",\r\n    },\r\n    {\r\n      key: \"SubCategoryName\",\r\n    },\r\n    {\r\n      key: \"actions\",\r\n    },\r\n  ];\r\n  const [layout, setLayout] = useState(\r\n    JSON.parse(\r\n      localStorage.getItem(\"layoutProducts\")\r\n        ? localStorage.getItem(\"layoutProducts\")\r\n        : true\r\n    )\r\n  );\r\n  const changeLayout = () => {\r\n    setLayout(!layout);\r\n    localStorage.setItem(\"layoutProducts\", !layout);\r\n  };\r\n  var viewProducts_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"spinner-border text-primary \" role=\"status\">\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewProducts_HTMLTABLE = (\r\n      <CSmartTable\r\n        activePage={1}\r\n        cleaner\r\n        // clickableRows\r\n        columns={columns}\r\n        // columnFilter\r\n        columnSorter\r\n        footer\r\n        items={fetchData}\r\n        itemsPerPageSelect\r\n        itemsPerPage={5}\r\n        pagination\r\n        scopedColumns={{\r\n          ingredients: (item) => {\r\n            return (\r\n              <td>\r\n                <div className=\"row m-3\">\r\n                  {JSON.parse(item.ingredients)?.map((item, i) => {\r\n                    return (\r\n                      <Stack\r\n                        direction=\"row\"\r\n                        className=\"m-1\"\r\n                        spacing={1}\r\n                        key={i}\r\n                      >\r\n                        <Chip\r\n                          label={item.label}\r\n                          // color=\"primary\"\r\n                          variant=\"outlined\"\r\n                        />\r\n                      </Stack>\r\n                    );\r\n                  })}\r\n                </div>\r\n              </td>\r\n            );\r\n          },\r\n          extras: (item) => {\r\n            return (\r\n              <td>\r\n                <div className=\"row m-3\">\r\n                  {JSON.parse(item.extras)?.map((item, i) => {\r\n                    return (\r\n                      <Stack\r\n                        direction=\"row\"\r\n                        className=\"m-1\"\r\n                        spacing={1}\r\n                        key={i}\r\n                      >\r\n                        <Chip\r\n                          label={item.label + \"( +\" + item.price + \".00\" + \" )\"}\r\n                          // color=\"primary\"\r\n                          variant=\"outlined\"\r\n                        />\r\n                      </Stack>\r\n                    );\r\n                  })}\r\n                </div>\r\n              </td>\r\n            );\r\n          },\r\n          recommendations: (item) => {\r\n            return (\r\n              <td>\r\n                <div className=\"row m-3\">\r\n                  {JSON.parse(item.recommendations)?.map((item, i) => {\r\n                    return (\r\n                      <Stack\r\n                        direction=\"row\"\r\n                        className=\"m-1\"\r\n                        spacing={1}\r\n                        key={i}\r\n                      >\r\n                        <Chip\r\n                          label={item.label}\r\n                          // color=\"primary\"\r\n                          variant=\"outlined\"\r\n                        />\r\n                      </Stack>\r\n                    );\r\n                  })}\r\n                </div>\r\n              </td>\r\n            );\r\n          },\r\n          image: (item) => {\r\n            return (\r\n              <td>\r\n                <img\r\n                  src={`http://${base_url}:${port}/images/products/${\r\n                    JSON.parse(item.image)[0]\r\n                  }`}\r\n                  className=\"img-thumbnail\"\r\n                  alt=\"\"\r\n                  style={{\r\n                    width: \"100px\",\r\n                    height: \"100px\",\r\n                    objectFit: \"contain\",\r\n                  }}\r\n                />\r\n              </td>\r\n            );\r\n          },\r\n          actions: (item) => {\r\n            return (\r\n              <td style={{ width: \"20%\" }}>\r\n                <Link\r\n                  to={{\r\n                    pathname: `${url}/variants`,\r\n                    id: item.id,\r\n                    ProductName: item.ProductName,\r\n                    state: { p_id: item.id, id: branchId },\r\n                  }}\r\n                >\r\n                  <Tooltip title=\"Variants\">\r\n                    <IconButton>\r\n                      <AutoAwesomeMotionIcon fontSize=\"small\" />\r\n                    </IconButton>\r\n                  </Tooltip>\r\n                </Link>\r\n                <Link\r\n                  to={{\r\n                    pathname: `${url}/edit-product`,\r\n                    state: { id: branchId, productId: item.id },\r\n                  }}\r\n                  // onClick={(e) => fetchProduct(e, item.id)}\r\n                >\r\n                  <Tooltip title=\"Edit\">\r\n                    <IconButton>\r\n                      <EditIcon fontSize=\"small\" />\r\n                    </IconButton>\r\n                  </Tooltip>\r\n                </Link>\r\n                <div\r\n                  style={{ cursor: \"pointer\" }}\r\n                  onClick={(e) => deleteProduct(e, item.id)}\r\n                >\r\n                  <Tooltip title=\"Delete\">\r\n                    <IconButton>\r\n                      <DeleteIcon fontSize=\"small\" />\r\n                    </IconButton>\r\n                  </Tooltip>\r\n                </div>\r\n              </td>\r\n            );\r\n          },\r\n        }}\r\n        // selectable\r\n        // sorterValue={{ column: 'name', state: 'asc' }}\r\n        tableFilter\r\n        // tableHeadProps={{\r\n        //   color: \"primary\",\r\n        // }}\r\n        tableProps={{\r\n          striped: true,\r\n          hover: true,\r\n        }}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Fragment>\r\n        <div className=\"row justify-content-end\">\r\n          <div className=\"col-3 text-right\">\r\n            <Link\r\n              className=\"btn btn-primary mb-2 mr-2\"\r\n              to={{\r\n                pathname: `${url}/add-product`,\r\n                state: { id: branchId },\r\n              }}\r\n            >\r\n              {t(\"add_product\")}\r\n            </Link>\r\n            <IconButton aria-label=\"Example\" onClick={changeLayout}>\r\n              {layout ? <TableRowsIcon /> : <ViewComfyIcon />}\r\n            </IconButton>\r\n          </div>\r\n        </div>\r\n        {layout ? (\r\n          <div style={{ overflow: \"scroll\" }}>{viewProducts_HTMLTABLE}</div>\r\n        ) : (\r\n          <div className=\"row\">\r\n            {fetchData.map((item, i) => {\r\n              return (\r\n                <div className=\"col-xl-3 col-lg- col-sm-6\" key={item.id}>\r\n                  <div className=\"card overflow-hidden\">\r\n                    <div className=\"card-body\">\r\n                      <div className=\"text-center\">\r\n                        <img\r\n                          src={`http://${base_url}:${port}/images/products/${\r\n                            JSON.parse(item.image)[0]\r\n                          }`}\r\n                          alt=\"\"\r\n                          style={{\r\n                            width: \"120px\",\r\n                            height: \"100px\",\r\n                            objectFit: \"contain\",\r\n                          }}\r\n                        />\r\n                        <h4 className=\"mt-2\"> {item.ProductName}</h4>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"card-footer pt-0 pb-0 text-center\">\r\n                      <div className=\"row\">\r\n                        <div className=\"col-4 pt-3 pb-3 border-right\">\r\n                          <Link\r\n                            to={{\r\n                              pathname: `${url}/variants`,\r\n                              id: item.id,\r\n                              ProductName: item.ProductName,\r\n                              state: { p_id: item.id, id: branchId },\r\n                            }}\r\n                          >\r\n                            <Tooltip title=\"Variants\">\r\n                              <IconButton>\r\n                                <AutoAwesomeMotionIcon fontSize=\"small\" />\r\n                              </IconButton>\r\n                            </Tooltip>\r\n                          </Link>\r\n                        </div>\r\n                        <div className=\"col-4 pt-3 pb-3 border-right\">\r\n                          <Link\r\n                            to={{\r\n                              pathname: `${url}/edit-product`,\r\n                              state: { id: branchId, productId: item.id },\r\n                            }}\r\n                          >\r\n                            <Tooltip title=\"Edit\">\r\n                              <IconButton>\r\n                                <EditIcon fontSize=\"small\" />\r\n                              </IconButton>\r\n                            </Tooltip>\r\n                          </Link>\r\n                        </div>\r\n                        <div className=\"col-4 pt-3 pb-3\">\r\n                          <Link\r\n                            to=\"\"\r\n                            onClick={(e) => deleteProduct(e, item.id)}\r\n                          >\r\n                            <Tooltip title=\"Delete\">\r\n                              <IconButton>\r\n                                <DeleteIcon fontSize=\"small\" />\r\n                              </IconButton>\r\n                            </Tooltip>\r\n                          </Link>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        )}\r\n      </Fragment>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Product;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Variants\\Grid.js",["521","522","523","524","525","526","527","528","529","530","531","532"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport axios from \"axios\";\r\nimport { base_url, port } from \"../../../Consts\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Tooltip from \"@mui/material/Tooltip\";\r\n\r\nconst VariantsLine = (props) => {\r\n  const { items, setVarantGrid } = props;\r\n  const [values, setValues] = useState(items);\r\n  if (Object.keys(items).length !== Object.keys(values).length) {\r\n    setValues(items);\r\n  }\r\n\r\n  useEffect(() => {\r\n    setVarantGrid({\r\n      ...values,\r\n    });\r\n  }, [values]);\r\n\r\n  let [errors, setErrors] = useState({});\r\n  const Change = (event) => {\r\n    const name = event.target.name;\r\n    if (event.target.name == \"image\") {\r\n      uploadImage(event);\r\n    } else {\r\n      const error = {};\r\n      if (isNaN(event.target.value)) {\r\n        error[name] = true;\r\n        error[name + \"message\"] = \"Please Enter A Real Number\";\r\n        setErrors({ ...errors, ...error });\r\n      } else {\r\n        error[name] = false;\r\n        error[name + \"message\"] = \"\";\r\n        setErrors({ ...errors, ...error });\r\n      }\r\n      setValues({\r\n        ...values,\r\n        [event.target.name]: event.target.value,\r\n      });\r\n    }\r\n    // console.log(values);\r\n  };\r\n  const uploadImage = (event) => {\r\n    const formData = new FormData();\r\n    for (let i = 0; i < event.target.files.length; i++) {\r\n      formData.append(\"file[]\", event.target.files[i]);\r\n    }\r\n    const images = [];\r\n\r\n    axios.post(\"/api/uploadImage\", formData).then((res) => {\r\n      if (res.data.status === 200) {\r\n        values.image.map((item) => {\r\n          images.push(item);\r\n        });\r\n        res.data.filenames.map((item) => {\r\n          images.push(item);\r\n        });\r\n        setValues({\r\n          ...values,\r\n          image: images,\r\n        });\r\n      }\r\n    });\r\n  };\r\n  const removeImage = (e, image) => {\r\n    e.preventDefault();\r\n    axios.post(`/api/removeImage/${image}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setValues({\r\n          ...values,\r\n          image: values.image.filter((item) => item !== image),\r\n        });\r\n        // setImagesName(imagesName.filter((item) => item !== image));\r\n      }\r\n    });\r\n  };\r\n\r\n  const outputs = [];\r\n\r\n  let i = 0;\r\n  for (const [key, value] of Object.entries(values)) {\r\n    i++;\r\n    if (key == \"sku\" || key == \"price\" || key == \"stock\" || key == \"image\") {\r\n      outputs.push(\r\n        <div className={`col-xl-2 col-lg-2 col-sm-2 m-2 `} key={i}>\r\n          <input\r\n            className={\r\n              errors[key] ? \" form-control is-invalid\" : \"form-control\"\r\n            }\r\n            disabled={key == \"sku\"}\r\n            value={key == \"image\" ? \"\" : value}\r\n            // onBlur={(event) => {\r\n            //   changeSku(event);\r\n            // }}\r\n            onChange={(event) => Change(event)}\r\n            name={key}\r\n            type={key == \"image\" ? \"file\" : \"\"}\r\n            multiple\r\n          ></input>\r\n          {errors[key] ? (\r\n            <div className=\"invalid-feedback\">{errors[key + \"message\"]}</div>\r\n          ) : null}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      <div className=\"row\">\r\n        <div className=\"col-xl-12 col-lg-12 col-sm-12 \">\r\n          <div className=\"row\">{outputs}</div>\r\n        </div>\r\n        <div className=\"col-xl-12 col-lg-12 col-sm-12 \">\r\n          <div className=\"row\">\r\n            {values.image?.map((photo, i) => {\r\n              return (\r\n                <div className=\"col-xl-2 col-lg-2 col-sm-2\" key={i}>\r\n                  <div className=\"card \">\r\n                    <div className=\"text-center\">\r\n                      <img\r\n                        className=\"w-100\"\r\n                        src={`http://${base_url}:${port}/images/variants_pics/${photo}`}\r\n                        alt=\"\"\r\n                        style={{\r\n                          // width: \"100px\",\r\n                          height: \"100px\",\r\n                          objectFit: \"contain\",\r\n                        }}\r\n                      />\r\n                    </div>\r\n\r\n                    <div className=\"card-footer pt-0 pb-0 text-center\">\r\n                      <div className=\"row\">\r\n                        <Tooltip title=\"Delete\">\r\n                          <IconButton onClick={(e) => removeImage(e, photo)}>\r\n                            <DeleteIcon fontSize=\"small\" />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst VariantsGrid = (props) => {\r\n  const { t } = useTranslation();\r\n\r\n  const { numberOfVar, productid, getJSONVaraints, recheck, setNumberOfVar } =\r\n    props;\r\n  const [varintGrid, setVariantGrid] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (numberOfVar.length !== 0) {\r\n      setVariantGrid(numberOfVar);\r\n    }\r\n    // setNumberOfVar(numberOfVar);\r\n  }, [numberOfVar]);\r\n\r\n  const vars = numberOfVar.map((item, i) => (\r\n    <div className=\"row\" key={i}>\r\n      <div className={`col-xl-10 col-lg-10 col-sm-10`}>\r\n        <VariantsLine\r\n          recheck={recheck}\r\n          setVarantGrid={(item) => setVarantGrid(item)}\r\n          items={item}\r\n          productid={productid}\r\n        ></VariantsLine>\r\n      </div>\r\n\r\n      <div className={`col-xl-2 col-lg-2 col-sm-2 `}>\r\n        <Tooltip title=\"Delete\">\r\n          <IconButton onClick={(e) => removeVar(e, item.postion)}>\r\n            {item.postion}\r\n            <DeleteIcon fontSize=\"small\" sx={{ color: \"red\" }} />\r\n          </IconButton>\r\n        </Tooltip>\r\n      </div>\r\n    </div>\r\n  ));\r\n\r\n  const setVarantGrid = (item) => {\r\n    if (item.sku !== \"\") {\r\n      let modifyVariant = varintGrid;\r\n      modifyVariant[item.postion] = item;\r\n      setVariantGrid(modifyVariant);\r\n      getJSONVaraints(JSON.stringify(varintGrid));\r\n    } else {\r\n      console.log(\"fssds\");\r\n    }\r\n  };\r\n\r\n  const removeVar = (e, val) => {\r\n    e.preventDefault();\r\n    setNumberOfVar((prevState) =>\r\n      prevState\r\n        .filter((item) => {\r\n          return item.postion != val;\r\n        })\r\n        .map((item) => {\r\n          return {\r\n            ...item,\r\n            postion: item.postion > val ? item.postion - 1 : item.postion,\r\n          };\r\n        })\r\n    );\r\n  };\r\n  return (\r\n    <Fragment>\r\n      <div className=\"col-xl-12 col-lg-12 col-sm-12 \">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-3  p-4 text-center \">{t(\"sku\")}</div>\r\n          <div className=\"col-md-2  p-4 text-center\">{t(\"price\")}</div>\r\n          <div className=\"col-md-2  p-4 text-center\">{t(\"stock\")}</div>\r\n          <div className=\"col-md-3  p-4 text-center\">{t(\"image\")}</div>\r\n          <div className=\"col-md-2  p-4 text-center\">{t(\"actions\")}</div>\r\n        </div>\r\n        {vars}\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\nexport default VariantsGrid;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Second\\ProductDetails.js",["533","534","535","536","537","538","539","540","541","542","543","544","545","546","547","548","549","550","551","552","553","554"],"import React, { Fragment, useState, useEffect, SyntheticEvent } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// Import css files\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport Footer from \"./Footer\";\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport Container from \"@mui/material/Container\";\r\n// import Slider from \"react-slick\";\r\nimport Header from \"./Header\";\r\nimport { base_url, port } from \"../../../../../Consts\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardMedia from \"@mui/material/CardMedia\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Tabs from \"@mui/material/Tabs\";\r\nimport Tab from \"@mui/material/Tab\";\r\nimport Box from \"@mui/material/Box\";\r\n\r\nimport { Zoom } from \"react-slideshow-image\";\r\nimport \"react-slideshow-image/dist/styles.css\";\r\nimport Accordion from \"@mui/material/Accordion\";\r\nimport AccordionSummary from \"@mui/material/AccordionSummary\";\r\nimport AccordionDetails from \"@mui/material/AccordionDetails\";\r\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport \"../style.css\";\r\nconst ProductDetails = (props) => {\r\n  const [themeCustomization, setThemeCustomization] = useState([]);\r\n\r\n  const theme = createTheme({\r\n    palette: {\r\n      warning: {\r\n        // button background\r\n        main: themeCustomization?.button_background_color\r\n          ? themeCustomization.button_background_color\r\n          : \"#ff751d\",\r\n      },\r\n    },\r\n    typography: {\r\n      fontFamily: themeCustomization?.font\r\n        ? themeCustomization.font\r\n        : \"sans-serif\",\r\n      subtitle1: {\r\n        fontSize: themeCustomization?.product_discription_font_size\r\n          ? themeCustomization.product_discription_font_size\r\n          : 10,\r\n        color: themeCustomization?.product_discription_color\r\n          ? themeCustomization.product_discription_color\r\n          : \"#777\",\r\n      },\r\n      // price\r\n      body1: {\r\n        fontSize: themeCustomization?.price_font_size\r\n          ? themeCustomization.price_font_size\r\n          : 12,\r\n        color: themeCustomization?.price_color\r\n          ? themeCustomization.price_color\r\n          : \"#f1fcfe\",\r\n      },\r\n      // product Names\r\n      button: {\r\n        fontSize: themeCustomization?.product_name_font_size\r\n          ? themeCustomization.product_name_font_size\r\n          : 12,\r\n        color: themeCustomization?.product_name_color\r\n          ? themeCustomization.product_name_color\r\n          : \"#ff751d\",\r\n      },\r\n      // categories and sub categories\r\n      overline: {\r\n        fontSize: themeCustomization?.categories_and_sub_categoies_font_size\r\n          ? themeCustomization.categories_and_sub_categoies_font_size\r\n          : 12,\r\n        color: themeCustomization?.categories_and_sub_categoies_color\r\n          ? themeCustomization.categories_and_sub_categoies_color\r\n          : \"#ff751d\",\r\n      },\r\n      // branch Name\r\n      h6: {\r\n        fontSize: themeCustomization?.branch_name_font_size\r\n          ? themeCustomization.branch_name_font_size\r\n          : 14,\r\n        color: themeCustomization?.branch_name_color\r\n          ? themeCustomization.branch_name_color\r\n          : \"#ff751d\",\r\n      },\r\n    },\r\n    components: {\r\n      MuiButton: {\r\n        variants: [\r\n          {\r\n            // button\r\n            props: { variant: \"contained\" },\r\n            style: {\r\n              fontSize: themeCustomization?.button_text_font_size\r\n                ? themeCustomization.button_text_font_size\r\n                : 12,\r\n              color: themeCustomization?.button_text_color\r\n                ? themeCustomization.button_text_color\r\n                : \"#f1fcfe\",\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n  });\r\n  // for localization\r\n  const { t } = useTranslation();\r\n  const id = atob(props.match.params.id);\r\n  //for retriving data using laravel API\r\n  const themes = props.history.location.state.themes;\r\n  let varData = [];\r\n  //for retriving data using laravel API\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [variantData, setVariantData] = useState([]);\r\n  const [showVaralint, setShowVarlist] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [skuarray, setSkuArray] = useState([]);\r\n  const [productDetails, setProductDetails] = useState({\r\n    price: 0,\r\n    stock: 0,\r\n    image: fetchData?.image,\r\n  });\r\n  useEffect(() => {\r\n    const getdata = async () => {\r\n      const product = await axios({\r\n        method: \"GET\",\r\n        url: `/api/GetProduct/${id}`,\r\n      });\r\n      const data = product.data.fetchData;\r\n\r\n      const res = await axios({\r\n        method: \"GET\",\r\n        url: `/api/Getvariations/${id}`,\r\n      });\r\n      setFetchData(data[0]);\r\n      if (res.data.fetchData !== \"\") {\r\n        varData = JSON.parse(res.data.fetchData);\r\n        parseVariants(varData);\r\n      }\r\n\r\n      setLoading(false);\r\n    };\r\n    getdata(); // axios\r\n  }, [id]);\r\n  const changePrice = (varName, variant) => {\r\n    const keys = Object.keys(showVaralint);\r\n    const varlineindex = keys.indexOf(varName);\r\n    const newSkuArray = skuarray;\r\n    newSkuArray[varlineindex] = variant;\r\n    setSkuArray(newSkuArray);\r\n    if (keys.length == newSkuArray.length) {\r\n      caluclatePrice(newSkuArray, variantData);\r\n    }\r\n  };\r\n  const caluclatePrice = (newSkuArray, variantData) => {\r\n    let sku = id + \"-\";\r\n    for (let i = 0; i < newSkuArray.length; i++) {\r\n      if (i == newSkuArray.length - 1) {\r\n        sku += newSkuArray[i];\r\n      } else {\r\n        sku += newSkuArray[i] + \"-\";\r\n      }\r\n    }\r\n\r\n    const priceList = variantData.filter((item) => {\r\n      return item.sku.replace(/\\s+/g, \"\") == sku.replace(/\\s+/g, \"\");\r\n    });\r\n    console.log(newSkuArray);\r\n    let productdetails = { price: 0, stock: 0 };\r\n    if (priceList.length !== 0) {\r\n      const line = priceList.pop();\r\n      const newProductDetails = {\r\n        price: line.price,\r\n        stock: line.stock,\r\n        image: line.image,\r\n      };\r\n      productdetails = newProductDetails;\r\n    } else {\r\n      const newProductDetails = {\r\n        price: 0,\r\n        stock: \"No Stock\",\r\n        image: fetchData.image,\r\n      };\r\n      productdetails = newProductDetails;\r\n    }\r\n    setProductDetails({ ...productdetails });\r\n  };\r\n  const parseVariants = (variantData) => {\r\n    const variants = [];\r\n    const savePostion = [\"postion\", \"sku\", \"price\", \"stock\", \"image\"];\r\n    const varLine = variantData[0];\r\n    const varlinekey = Object.keys(varLine);\r\n    for (let i = 0; i < varlinekey.length; i++) {\r\n      if (savePostion.indexOf(varlinekey[i]) == -1) {\r\n        let listvar = variantData.map((item) => {\r\n          return item[varlinekey[i]];\r\n        });\r\n        // get unique variants\r\n        listvar = listvar.filter(\r\n          (thing, index, self) =>\r\n            index ===\r\n            self.findIndex((t) => t.place === listvar.place && t === thing)\r\n        );\r\n        if (listvar[0] != 0) variants[varlinekey[i]] = listvar;\r\n      }\r\n    }\r\n    let def = [];\r\n    Object.keys(variants).map((item) => {\r\n      def.push(variants[item][0]);\r\n    });\r\n    setSkuArray(def);\r\n    caluclatePrice(def, variantData);\r\n    setShowVarlist(variants);\r\n    setVariantData(variantData);\r\n  };\r\n  const [ingredients, setIntgredients] = useState([]);\r\n  const changeIngredients = (label) => {\r\n    if (!ingredients.includes(label) === false) {\r\n      setIntgredients(ingredients.filter((item) => item !== label));\r\n    } else {\r\n      setIntgredients([...ingredients, label]);\r\n    }\r\n  };\r\n  let [sum, setSum] = useState(0);\r\n\r\n  const extraHandlers = (e, price) => {\r\n    if (e.target.checked) {\r\n      // console.log((sum += parseInt(price)));\r\n      setSum((sum += parseInt(price)));\r\n    } else {\r\n      setSum((sum -= parseInt(price)));\r\n    }\r\n  };\r\n\r\n  const zoomOutProperties = {\r\n    duration: 100,\r\n    transitionDuration: 5,\r\n    canSwipe: true,\r\n    indicators: true,\r\n    scale: false,\r\n    autoplay: false,\r\n    indicators: (i) => (\r\n      <div className=\"indicator\">\r\n        <img\r\n          src={\r\n            productDetails?.stock === \"No Stock\" || productDetails?.stock === 0\r\n              ? `http://${base_url}:${port}/images/products/${fetchData?.image}`\r\n              : `http://${base_url}:${port}/images/variants_pics/${productDetails.image[i]}`\r\n          }\r\n          width=\"40px\"\r\n          // className=\"p-1\"\r\n          // style={{ width: \"40px\" }}\r\n        />\r\n      </div>\r\n    ),\r\n  };\r\n\r\n  var viewImages_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"container \">\r\n        <div\r\n          className=\"spinner-border text-primary \"\r\n          role=\"status\"\r\n          style={{ position: \"fixed\", top: \"50%\", left: \"50%\" }}\r\n        >\r\n          <span className=\"sr-only\">{t(\"loading\")}</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewImages_HTMLTABLE = (\r\n      <Grid container>\r\n        <Grid item xs={12} sm={5} md={5} lg={5}>\r\n          <div className=\"row col-md-12 text-center \">\r\n            <Zoom {...zoomOutProperties}>\r\n              {(() => {\r\n                if (Array.isArray(productDetails.image)) {\r\n                  return productDetails.image?.map((image) => {\r\n                    return (\r\n                      <div key={image} style={{ width: \"100%\" }}>\r\n                        <img\r\n                          src={`http://${base_url}:${port}/images/variants_pics/${image}`}\r\n                          style={{\r\n                            height: \"500px\",\r\n                            width: \"100%\",\r\n                            objectFit: \"contain\",\r\n                          }}\r\n                          // className=\"img-thumbnail\"\r\n                          alt=\"\"\r\n                        />\r\n                      </div>\r\n                    );\r\n                  });\r\n                } else {\r\n                  return (\r\n                    <div style={{ width: \"100%\" }}>\r\n                      <img\r\n                        src={\r\n                          productDetails.stock === \"No Stock\" ||\r\n                          productDetails?.stock === 0\r\n                            ? `http://${base_url}:${port}/images/products/${\r\n                                productDetails.image\r\n                                  ? productDetails?.image\r\n                                  : fetchData?.image\r\n                              }`\r\n                            : `http://${base_url}:${port}/images/variants_pics/${productDetails.image}`\r\n                        }\r\n                        style={{\r\n                          height: \"500px\",\r\n                          width: \"100%\",\r\n                          objectFit: \"contain\",\r\n                        }}\r\n                        alt=\"\"\r\n                      />\r\n                    </div>\r\n                  );\r\n                }\r\n              })()}\r\n            </Zoom>\r\n          </div>\r\n        </Grid>\r\n\r\n        <Grid item xs={12} sm={7} md={7} lg={7}>\r\n          <Card\r\n            sx={{\r\n              // height: \"100%\",\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n            }}\r\n          >\r\n            <div className=\"row mx-3 mt-3\">\r\n              <Typography variant=\"overline\" gutterBottom>\r\n                {t(\"product_name\")}: {fetchData?.ProductName}\r\n              </Typography>\r\n              <Typography variant=\"body2\" gutterBottom>\r\n                {t(\"description\")}: {fetchData?.Description}\r\n              </Typography>\r\n              <Typography variant=\"body2\" gutterBottom>\r\n                {t(\"unit\")}: {fetchData?.UnitName}\r\n              </Typography>\r\n\r\n              {themes?.preparation_time != 0 ? (\r\n                <Typography variant=\"body2\" gutterBottom>\r\n                  {t(\"preparation_Time\")}: {fetchData?.preparationTime} Minutes\r\n                </Typography>\r\n              ) : (\r\n                \" \"\r\n              )}\r\n              <p>\r\n                {t(\"price\")} :{\" \"}\r\n                {productDetails.price === 0\r\n                  ? fetchData?.price + sum\r\n                  : parseInt(productDetails.price) + sum}\r\n              </p>\r\n              <p>\r\n                {t(\"stock\")}:{\" \"}\r\n                {productDetails.stock === 0\r\n                  ? fetchData?.stock\r\n                  : productDetails.stock}\r\n              </p>\r\n            </div>\r\n            <div className=\"row mx-3\">\r\n              <Typography variant=\"overline\" gutterBottom>\r\n                {t(\"ingredients\")}\r\n              </Typography>\r\n              <small>Please select the ingredients you want to remove.</small>\r\n            </div>\r\n            <div className=\"row mx-4\">\r\n              {JSON.parse(fetchData.ingredients)?.map((item, i) => {\r\n                return (\r\n                  <div\r\n                    className=\"col-md-auto col-sm-auto col-xl-auto col-lg-auto col-auto\"\r\n                    onClick={() => {\r\n                      changeIngredients(item.label);\r\n                    }}\r\n                    style={\r\n                      ingredients.includes(item.label)\r\n                        ? {\r\n                            cursor: \"pointer\",\r\n\r\n                            padding: \"3px\",\r\n                            margin: \"2px\",\r\n                            border: \"1px solid\",\r\n                            textAlign: \"center\",\r\n                            borderColor: \"red\",\r\n                            textDecoration: \"line-through\",\r\n                            color: \"red\",\r\n                          }\r\n                        : {\r\n                            cursor: \"pointer\",\r\n                            padding: \"3px\",\r\n                            margin: \"2px\",\r\n                            border: \"1px solid\",\r\n                            textAlign: \"center\",\r\n                            // borderRadius: \"10px\",\r\n                            borderColor: \"black\",\r\n                          }\r\n                    }\r\n                  >\r\n                    {item.label}\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n            <div className=\"row m-3\">\r\n              <Accordion>\r\n                <AccordionSummary\r\n                  expandIcon={<ExpandMoreIcon />}\r\n                  aria-controls=\"panel1a-content\"\r\n                  id=\"panel1a-header\"\r\n                >\r\n                  <Typography variant=\"overline\" gutterBottom>\r\n                    {t(\"extras\")}\r\n                  </Typography>\r\n                </AccordionSummary>\r\n                <AccordionDetails>\r\n                  <FormGroup>\r\n                    {JSON.parse(fetchData.extras)?.map((item, i) => {\r\n                      return (\r\n                        <FormControlLabel\r\n                          key={i}\r\n                          control={\r\n                            <Checkbox\r\n                              onChange={(e) => {\r\n                                extraHandlers(e, item.price);\r\n                              }}\r\n                              color=\"default\"\r\n                              sx={{\r\n                                color: themeCustomization?.branch_name_color\r\n                                  ? themeCustomization.branch_name_color\r\n                                  : \"#ff751d\",\r\n                              }}\r\n                            />\r\n                          }\r\n                          label={\r\n                            <Typography variant=\"body2\" gutterBottom>\r\n                              {item.label + \" ( +\" + item.price + \".00\" + \" )\"}\r\n                            </Typography>\r\n                          }\r\n                        />\r\n                      );\r\n                    })}\r\n                  </FormGroup>\r\n                </AccordionDetails>\r\n              </Accordion>\r\n            </div>\r\n\r\n            <div className=\"row m-3\">\r\n              <Typography variant=\"overline\" gutterBottom>\r\n                {t(\"vatiants\")}\r\n              </Typography>\r\n            </div>\r\n\r\n            <div className=\"row mx-2\">\r\n              {Object.keys(showVaralint).map((list, i) => {\r\n                return (\r\n                  <div className=\"row \" key={i}>\r\n                    <div className=\"col-md-auto col-sm-auto col-xl-auto col-lg-auto col-auto\">\r\n                      {list}\r\n                      <div className=\"row\">\r\n                        {showVaralint[list].map((variant) => {\r\n                          return (\r\n                            <div className=\"col-md-auto col-sm-auto col-xl-auto col-lg-auto col-auto\">\r\n                              <div\r\n                                onClick={() => {\r\n                                  changePrice(list, variant);\r\n                                }}\r\n                                style={\r\n                                  skuarray[i] == variant\r\n                                    ? {\r\n                                        cursor: \"pointer\",\r\n                                        margin: \"2px\",\r\n                                        padding: \"5px\",\r\n                                        border: \"1px solid\",\r\n                                        textAlign: \"center\",\r\n                                        borderRadius: \"10px\",\r\n                                        borderColor: \"red\",\r\n                                      }\r\n                                    : {\r\n                                        cursor: \"pointer\",\r\n                                        margin: \"2px\",\r\n\r\n                                        padding: \"5px\",\r\n                                        border: \"1px solid\",\r\n                                        textAlign: \"center\",\r\n                                        borderRadius: \"10px\",\r\n                                        borderColor: \"black\",\r\n                                      }\r\n                                }\r\n                              >\r\n                                {variant}\r\n                              </div>\r\n                            </div>\r\n                          );\r\n                        })}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <Container maxWidth=\"lg\">\r\n        <Header\r\n          // title={branch[0]?.BrancheName}\r\n          categories={0}\r\n          subcategories={0}\r\n          // setSubCategories={setSubCategories}\r\n          // activeSubCategory={activeSubCategory}\r\n        />\r\n        <main>\r\n          <Grid container spacing={2}>\r\n            {viewImages_HTMLTABLE}\r\n          </Grid>\r\n        </main>\r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default ProductDetails;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Thrid\\ProductsList.js",["555","556"],"import React, { useState, useEffect } from \"react\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Container from \"@mui/material/Container\";\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardMedia from \"@mui/material/CardMedia\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport axios from \"axios\";\r\nimport { base_url, port } from \"../../../../../Consts\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport Box from \"@mui/material/Box\";\r\nimport getSymbolFromCurrency from \"currency-symbol-map\";\r\n\r\nexport default function ProductsList(props) {\r\n  const [loading, setLoading] = useState(true);\r\n  const { t } = useTranslation();\r\n  const cateId = atob(props.match.params.id);\r\n  const SubCategoryName = props.history.location.state.SubCategoryName;\r\n\r\n  const [products, setProducts] = useState([]);\r\n  const [themeCustomization, setThemeCustomization] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios.get(`/api/GetProductsBasedOnSubCategory/${cateId}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setProducts(res.data.data);\r\n        console.log(res.data.data);\r\n      }\r\n      setLoading(false);\r\n    });\r\n  }, []);\r\n\r\n  // design start\r\n  const theme = createTheme({\r\n    palette: {\r\n      warning: {\r\n        // button background\r\n        main: themeCustomization?.button_background_color\r\n          ? themeCustomization.button_background_color\r\n          : \"#ff751d\",\r\n      },\r\n    },\r\n    typography: {\r\n      fontFamily: themeCustomization?.font\r\n        ? themeCustomization.font\r\n        : \"sans-serif\",\r\n      subtitle1: {\r\n        fontSize: themeCustomization?.product_discription_font_size\r\n          ? themeCustomization.product_discription_font_size\r\n          : 10,\r\n        color: themeCustomization?.product_discription_color\r\n          ? themeCustomization.product_discription_color\r\n          : \"#777\",\r\n      },\r\n      // price\r\n      body1: {\r\n        fontSize: themeCustomization?.price_font_size\r\n          ? themeCustomization.price_font_size\r\n          : 12,\r\n        color: themeCustomization?.price_color\r\n          ? themeCustomization.price_color\r\n          : \"#f1fcfe\",\r\n      },\r\n      // product Names\r\n      button: {\r\n        fontSize: themeCustomization?.product_name_font_size\r\n          ? themeCustomization.product_name_font_size\r\n          : 14,\r\n        color: themeCustomization?.product_name_color\r\n          ? themeCustomization.product_name_color\r\n          : \"#1f1d1f\",\r\n      },\r\n      // categories and sub categories\r\n      overline: {\r\n        fontSize: themeCustomization?.categories_and_sub_categoies_font_size\r\n          ? themeCustomization.categories_and_sub_categoies_font_size\r\n          : 12,\r\n        color: themeCustomization?.categories_and_sub_categoies_color\r\n          ? themeCustomization.categories_and_sub_categoies_color\r\n          : \"#ff751d\",\r\n      },\r\n      // branch Name\r\n      h4: {\r\n        fontSize: themeCustomization?.branch_name_font_size\r\n          ? themeCustomization.branch_name_font_size\r\n          : 28,\r\n        color: themeCustomization?.branch_name_color\r\n          ? themeCustomization.branch_name_color\r\n          : \"#aa3f32\",\r\n      },\r\n      subtitle2: {\r\n        fontSize: themeCustomization?.branch_name_font_size\r\n          ? themeCustomization.branch_name_font_size\r\n          : 12,\r\n        color: themeCustomization?.branch_name_color\r\n          ? themeCustomization.branch_name_color\r\n          : \"#1f1d1f\",\r\n      },\r\n    },\r\n    components: {\r\n      MuiButton: {\r\n        variants: [\r\n          {\r\n            // button\r\n            props: { variant: \"contained\" },\r\n            style: {\r\n              fontSize: themeCustomization?.button_text_font_size\r\n                ? themeCustomization.button_text_font_size\r\n                : 12,\r\n              color: themeCustomization?.button_text_color\r\n                ? themeCustomization.button_text_color\r\n                : \"#f1fcfe\",\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n  });\r\n  // design end\r\n\r\n  var viewShow_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div\r\n        className=\"spinner-border text-primary \"\r\n        role=\"status\"\r\n        style={{ position: \"fixed\", top: \"50%\", left: \"50%\" }}\r\n      >\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewShow_HTMLTABLE = products?.map((item, i) => {\r\n      return (\r\n        <Grid item xs={12} sm={6} md={6} key={i}>\r\n          <Card sx={{ display: \"flex\" }}>\r\n            <CardMedia\r\n              component=\"img\"\r\n              sx={{\r\n                height: \"150px\",\r\n                width: \"40%\",\r\n                borderRadius: \"10%\",\r\n              }}\r\n              image={`http://${base_url}:${port}/images/products/${item.image}`}\r\n              alt=\"Live from space album cover\"\r\n            />\r\n            <Box sx={{ display: \"flex\", flexDirection: \"column\" }}>\r\n              <Link\r\n                to={{\r\n                  pathname: `/thrid-template/products-list/product-details/${btoa(\r\n                    item.id\r\n                  )}`,\r\n                  state: { themes: themeCustomization },\r\n                }}\r\n              >\r\n                <CardContent sx={{ flexGrow: 1 }}>\r\n                  <Typography\r\n                    variant=\"button\"\r\n                    display=\"block\"\r\n                    gutterBottom\r\n                    className=\"font-weight-bold\"\r\n                  >\r\n                    {item.ProductName}\r\n                  </Typography>\r\n                  <Typography variant=\"subtitle1\" gutterBottom>\r\n                    {item.Description}\r\n                  </Typography>\r\n                  <Typography\r\n                    variant=\"button\"\r\n                    gutterBottom\r\n                    className=\"font-weight-bold\"\r\n                  >\r\n                    {item.price +\r\n                      \" \" +\r\n                      getSymbolFromCurrency(item.currency_code)}\r\n                  </Typography>\r\n                </CardContent>\r\n              </Link>\r\n            </Box>\r\n          </Card>\r\n        </Grid>\r\n      );\r\n    });\r\n  }\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <Container maxWidth=\"lg\" className=\"p-2\">\r\n        <Grid item className=\"text-center\">\r\n          <Typography\r\n            variant=\"button\"\r\n            gutterBottom\r\n            className=\"font-weight-bold m-1\"\r\n          >\r\n            {SubCategoryName}\r\n          </Typography>\r\n        </Grid>\r\n\r\n        <Grid container spacing={2} className=\"mt-1\">\r\n          {viewShow_HTMLTABLE}\r\n        </Grid>\r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Thrid\\ProductDetails.js",["557","558","559","560","561","562","563","564","565","566","567","568","569","570","571","572","573","574","575","576","577"],"import React, { Fragment, useState, useEffect, SyntheticEvent } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// Import css files\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport Container from \"@mui/material/Container\";\r\n// import Slider from \"react-slick\";\r\nimport { base_url, port } from \"../../../../../Consts\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardMedia from \"@mui/material/CardMedia\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Tabs from \"@mui/material/Tabs\";\r\nimport Tab from \"@mui/material/Tab\";\r\nimport Box from \"@mui/material/Box\";\r\n\r\nimport { Zoom } from \"react-slideshow-image\";\r\nimport \"react-slideshow-image/dist/styles.css\";\r\nimport Accordion from \"@mui/material/Accordion\";\r\nimport AccordionSummary from \"@mui/material/AccordionSummary\";\r\nimport AccordionDetails from \"@mui/material/AccordionDetails\";\r\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport \"../style.css\";\r\nconst ProductDetails = (props) => {\r\n  const [themeCustomization, setThemeCustomization] = useState([]);\r\n\r\n  const theme = createTheme({\r\n    palette: {\r\n      warning: {\r\n        // button background\r\n        main: themeCustomization?.button_background_color\r\n          ? themeCustomization.button_background_color\r\n          : \"#ff751d\",\r\n      },\r\n    },\r\n    typography: {\r\n      fontFamily: themeCustomization?.font\r\n        ? themeCustomization.font\r\n        : \"sans-serif\",\r\n      subtitle1: {\r\n        fontSize: themeCustomization?.product_discription_font_size\r\n          ? themeCustomization.product_discription_font_size\r\n          : 10,\r\n        color: themeCustomization?.product_discription_color\r\n          ? themeCustomization.product_discription_color\r\n          : \"#777\",\r\n      },\r\n      // price\r\n      body1: {\r\n        fontSize: themeCustomization?.price_font_size\r\n          ? themeCustomization.price_font_size\r\n          : 12,\r\n        color: themeCustomization?.price_color\r\n          ? themeCustomization.price_color\r\n          : \"#f1fcfe\",\r\n      },\r\n      // product Names\r\n      button: {\r\n        fontSize: themeCustomization?.product_name_font_size\r\n          ? themeCustomization.product_name_font_size\r\n          : 12,\r\n        color: themeCustomization?.product_name_color\r\n          ? themeCustomization.product_name_color\r\n          : \"#ff751d\",\r\n      },\r\n      // categories and sub categories\r\n      overline: {\r\n        fontSize: themeCustomization?.categories_and_sub_categoies_font_size\r\n          ? themeCustomization.categories_and_sub_categoies_font_size\r\n          : 12,\r\n        color: themeCustomization?.categories_and_sub_categoies_color\r\n          ? themeCustomization.categories_and_sub_categoies_color\r\n          : \"#ff751d\",\r\n      },\r\n      // branch Name\r\n      h6: {\r\n        fontSize: themeCustomization?.branch_name_font_size\r\n          ? themeCustomization.branch_name_font_size\r\n          : 14,\r\n        color: themeCustomization?.branch_name_color\r\n          ? themeCustomization.branch_name_color\r\n          : \"#ff751d\",\r\n      },\r\n    },\r\n    components: {\r\n      MuiButton: {\r\n        variants: [\r\n          {\r\n            // button\r\n            props: { variant: \"contained\" },\r\n            style: {\r\n              fontSize: themeCustomization?.button_text_font_size\r\n                ? themeCustomization.button_text_font_size\r\n                : 12,\r\n              color: themeCustomization?.button_text_color\r\n                ? themeCustomization.button_text_color\r\n                : \"#f1fcfe\",\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n  });\r\n  // for localization\r\n  const { t } = useTranslation();\r\n  const id = atob(props.match.params.id);\r\n  //for retriving data using laravel API\r\n  const themes = props.history.location.state.themes;\r\n  let varData = [];\r\n  //for retriving data using laravel API\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [variantData, setVariantData] = useState([]);\r\n  const [showVaralint, setShowVarlist] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [skuarray, setSkuArray] = useState([]);\r\n  const [productDetails, setProductDetails] = useState({\r\n    price: 0,\r\n    stock: 0,\r\n    image: fetchData?.image,\r\n  });\r\n  useEffect(() => {\r\n    const getdata = async () => {\r\n      const product = await axios({\r\n        method: \"GET\",\r\n        url: `/api/GetProduct/${id}`,\r\n      });\r\n      const data = product.data.fetchData;\r\n\r\n      const res = await axios({\r\n        method: \"GET\",\r\n        url: `/api/Getvariations/${id}`,\r\n      });\r\n      setFetchData(data[0]);\r\n      if (res.data.fetchData !== \"\") {\r\n        varData = JSON.parse(res.data.fetchData);\r\n        parseVariants(varData);\r\n      }\r\n\r\n      setLoading(false);\r\n    };\r\n    getdata(); // axios\r\n  }, [id]);\r\n  const changePrice = (varName, variant) => {\r\n    const keys = Object.keys(showVaralint);\r\n    const varlineindex = keys.indexOf(varName);\r\n    const newSkuArray = skuarray;\r\n    newSkuArray[varlineindex] = variant;\r\n    setSkuArray(newSkuArray);\r\n    if (keys.length == newSkuArray.length) {\r\n      caluclatePrice(newSkuArray, variantData);\r\n    }\r\n  };\r\n  const caluclatePrice = (newSkuArray, variantData) => {\r\n    let sku = id + \"-\";\r\n    for (let i = 0; i < newSkuArray.length; i++) {\r\n      if (i == newSkuArray.length - 1) {\r\n        sku += newSkuArray[i];\r\n      } else {\r\n        sku += newSkuArray[i] + \"-\";\r\n      }\r\n    }\r\n\r\n    const priceList = variantData.filter((item) => {\r\n      return item.sku.replace(/\\s+/g, \"\") == sku.replace(/\\s+/g, \"\");\r\n    });\r\n    console.log(newSkuArray);\r\n    let productdetails = { price: 0, stock: 0 };\r\n    if (priceList.length !== 0) {\r\n      const line = priceList.pop();\r\n      const newProductDetails = {\r\n        price: line.price,\r\n        stock: line.stock,\r\n        image: line.image,\r\n      };\r\n      productdetails = newProductDetails;\r\n    } else {\r\n      const newProductDetails = {\r\n        price: 0,\r\n        stock: \"No Stock\",\r\n        image: fetchData.image,\r\n      };\r\n      productdetails = newProductDetails;\r\n    }\r\n    setProductDetails({ ...productdetails });\r\n  };\r\n  const parseVariants = (variantData) => {\r\n    const variants = [];\r\n    const savePostion = [\"postion\", \"sku\", \"price\", \"stock\", \"image\"];\r\n    const varLine = variantData[0];\r\n    const varlinekey = Object.keys(varLine);\r\n    for (let i = 0; i < varlinekey.length; i++) {\r\n      if (savePostion.indexOf(varlinekey[i]) == -1) {\r\n        let listvar = variantData.map((item) => {\r\n          return item[varlinekey[i]];\r\n        });\r\n        // get unique variants\r\n        listvar = listvar.filter(\r\n          (thing, index, self) =>\r\n            index ===\r\n            self.findIndex((t) => t.place === listvar.place && t === thing)\r\n        );\r\n        if (listvar[0] != 0) variants[varlinekey[i]] = listvar;\r\n      }\r\n    }\r\n    let def = [];\r\n    Object.keys(variants).map((item) => {\r\n      def.push(variants[item][0]);\r\n    });\r\n    setSkuArray(def);\r\n    caluclatePrice(def, variantData);\r\n    setShowVarlist(variants);\r\n    setVariantData(variantData);\r\n  };\r\n  const [ingredients, setIntgredients] = useState([]);\r\n  const changeIngredients = (label) => {\r\n    if (!ingredients.includes(label) === false) {\r\n      setIntgredients(ingredients.filter((item) => item !== label));\r\n    } else {\r\n      setIntgredients([...ingredients, label]);\r\n    }\r\n  };\r\n  let [sum, setSum] = useState(0);\r\n\r\n  const extraHandlers = (e, price) => {\r\n    if (e.target.checked) {\r\n      // console.log((sum += parseInt(price)));\r\n      setSum((sum += parseInt(price)));\r\n    } else {\r\n      setSum((sum -= parseInt(price)));\r\n    }\r\n  };\r\n\r\n  const zoomOutProperties = {\r\n    duration: 100,\r\n    transitionDuration: 5,\r\n    canSwipe: true,\r\n    indicators: true,\r\n    scale: false,\r\n    autoplay: false,\r\n    indicators: (i) => (\r\n      <div className=\"indicator\">\r\n        <img\r\n          src={\r\n            productDetails?.stock === \"No Stock\" || productDetails?.stock === 0\r\n              ? `http://${base_url}:${port}/images/products/${fetchData?.image}`\r\n              : `http://${base_url}:${port}/images/variants_pics/${productDetails.image[i]}`\r\n          }\r\n          width=\"40px\"\r\n          // className=\"p-1\"\r\n          // style={{ width: \"40px\" }}\r\n        />\r\n      </div>\r\n    ),\r\n  };\r\n\r\n  var viewImages_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"container \">\r\n        <div\r\n          className=\"spinner-border text-primary \"\r\n          role=\"status\"\r\n          style={{ position: \"fixed\", top: \"50%\", left: \"50%\" }}\r\n        >\r\n          <span className=\"sr-only\">{t(\"loading\")}</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewImages_HTMLTABLE = (\r\n      <Grid container>\r\n        <Grid item xs={12} sm={5} md={5} lg={5}>\r\n          <div className=\"row col-md-12 text-center \">\r\n            <Zoom {...zoomOutProperties}>\r\n              {(() => {\r\n                if (Array.isArray(productDetails.image)) {\r\n                  return productDetails.image?.map((image) => {\r\n                    return (\r\n                      <div key={image} style={{ width: \"100%\" }}>\r\n                        <img\r\n                          src={`http://${base_url}:${port}/images/variants_pics/${image}`}\r\n                          style={{\r\n                            height: \"500px\",\r\n                            width: \"100%\",\r\n                            objectFit: \"contain\",\r\n                          }}\r\n                          // className=\"img-thumbnail\"\r\n                          alt=\"\"\r\n                        />\r\n                      </div>\r\n                    );\r\n                  });\r\n                } else {\r\n                  return (\r\n                    <div style={{ width: \"100%\" }}>\r\n                      <img\r\n                        src={\r\n                          productDetails.stock === \"No Stock\" ||\r\n                          productDetails?.stock === 0\r\n                            ? `http://${base_url}:${port}/images/products/${\r\n                                productDetails.image\r\n                                  ? productDetails?.image\r\n                                  : fetchData?.image\r\n                              }`\r\n                            : `http://${base_url}:${port}/images/variants_pics/${productDetails.image}`\r\n                        }\r\n                        style={{\r\n                          height: \"500px\",\r\n                          width: \"100%\",\r\n                          objectFit: \"contain\",\r\n                        }}\r\n                        alt=\"\"\r\n                      />\r\n                    </div>\r\n                  );\r\n                }\r\n              })()}\r\n            </Zoom>\r\n          </div>\r\n        </Grid>\r\n\r\n        <Grid item xs={12} sm={7} md={7} lg={7}>\r\n          <Card\r\n            sx={{\r\n              // height: \"100%\",\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n            }}\r\n          >\r\n            <div className=\"row mx-3 mt-3\">\r\n              <Typography variant=\"overline\" gutterBottom>\r\n                {t(\"product_name\")}: {fetchData?.ProductName}\r\n              </Typography>\r\n              <Typography variant=\"body2\" gutterBottom>\r\n                {t(\"description\")}: {fetchData?.Description}\r\n              </Typography>\r\n              <Typography variant=\"body2\" gutterBottom>\r\n                {t(\"unit\")}: {fetchData?.UnitName}\r\n              </Typography>\r\n\r\n              {themes?.preparation_time != 0 ? (\r\n                <Typography variant=\"body2\" gutterBottom>\r\n                  {t(\"preparation_Time\")}: {fetchData?.preparationTime} Minutes\r\n                </Typography>\r\n              ) : (\r\n                \" \"\r\n              )}\r\n              <p>\r\n                {t(\"price\")} :{\" \"}\r\n                {productDetails.price === 0\r\n                  ? fetchData?.price + sum\r\n                  : parseInt(productDetails.price) + sum}\r\n              </p>\r\n              <p>\r\n                {t(\"stock\")}:{\" \"}\r\n                {productDetails.stock === 0\r\n                  ? fetchData?.stock\r\n                  : productDetails.stock}\r\n              </p>\r\n            </div>\r\n            <div className=\"row mx-3\">\r\n              <Typography variant=\"overline\" gutterBottom>\r\n                {t(\"ingredients\")}\r\n              </Typography>\r\n              <small>Please select the ingredients you want to remove.</small>\r\n            </div>\r\n            <div className=\"row mx-4\">\r\n              {JSON.parse(fetchData.ingredients)?.map((item, i) => {\r\n                return (\r\n                  <div\r\n                    className=\"col-md-auto col-sm-auto col-xl-auto col-lg-auto col-auto\"\r\n                    onClick={() => {\r\n                      changeIngredients(item.label);\r\n                    }}\r\n                    style={\r\n                      ingredients.includes(item.label)\r\n                        ? {\r\n                            cursor: \"pointer\",\r\n\r\n                            padding: \"3px\",\r\n                            margin: \"2px\",\r\n                            border: \"1px solid\",\r\n                            textAlign: \"center\",\r\n                            borderColor: \"red\",\r\n                            textDecoration: \"line-through\",\r\n                            color: \"red\",\r\n                          }\r\n                        : {\r\n                            cursor: \"pointer\",\r\n                            padding: \"3px\",\r\n                            margin: \"2px\",\r\n                            border: \"1px solid\",\r\n                            textAlign: \"center\",\r\n                            // borderRadius: \"10px\",\r\n                            borderColor: \"black\",\r\n                          }\r\n                    }\r\n                  >\r\n                    {item.label}\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n            <div className=\"row m-3\">\r\n              <Accordion>\r\n                <AccordionSummary\r\n                  expandIcon={<ExpandMoreIcon />}\r\n                  aria-controls=\"panel1a-content\"\r\n                  id=\"panel1a-header\"\r\n                >\r\n                  <Typography variant=\"overline\" gutterBottom>\r\n                    {t(\"extras\")}\r\n                  </Typography>\r\n                </AccordionSummary>\r\n                <AccordionDetails>\r\n                  <FormGroup>\r\n                    {JSON.parse(fetchData.extras)?.map((item, i) => {\r\n                      return (\r\n                        <FormControlLabel\r\n                          key={i}\r\n                          control={\r\n                            <Checkbox\r\n                              onChange={(e) => {\r\n                                extraHandlers(e, item.price);\r\n                              }}\r\n                              color=\"default\"\r\n                              sx={{\r\n                                color: themeCustomization?.branch_name_color\r\n                                  ? themeCustomization.branch_name_color\r\n                                  : \"#ff751d\",\r\n                              }}\r\n                            />\r\n                          }\r\n                          label={\r\n                            <Typography variant=\"body2\" gutterBottom>\r\n                              {item.label + \" ( +\" + item.price + \".00\" + \" )\"}\r\n                            </Typography>\r\n                          }\r\n                        />\r\n                      );\r\n                    })}\r\n                  </FormGroup>\r\n                </AccordionDetails>\r\n              </Accordion>\r\n            </div>\r\n\r\n            <div className=\"row m-3\">\r\n              <Typography variant=\"overline\" gutterBottom>\r\n                {t(\"vatiants\")}\r\n              </Typography>\r\n            </div>\r\n\r\n            <div className=\"row mx-2\">\r\n              {Object.keys(showVaralint).map((list, i) => {\r\n                return (\r\n                  <div className=\"row \" key={i}>\r\n                    <div className=\"col-md-auto col-sm-auto col-xl-auto col-lg-auto col-auto\">\r\n                      {list}\r\n                      <div className=\"row\">\r\n                        {showVaralint[list].map((variant) => {\r\n                          return (\r\n                            <div className=\"col-md-auto col-sm-auto col-xl-auto col-lg-auto col-auto\">\r\n                              <div\r\n                                onClick={() => {\r\n                                  changePrice(list, variant);\r\n                                }}\r\n                                style={\r\n                                  skuarray[i] == variant\r\n                                    ? {\r\n                                        cursor: \"pointer\",\r\n                                        margin: \"2px\",\r\n                                        padding: \"5px\",\r\n                                        border: \"1px solid\",\r\n                                        textAlign: \"center\",\r\n                                        borderRadius: \"10px\",\r\n                                        borderColor: \"red\",\r\n                                      }\r\n                                    : {\r\n                                        cursor: \"pointer\",\r\n                                        margin: \"2px\",\r\n\r\n                                        padding: \"5px\",\r\n                                        border: \"1px solid\",\r\n                                        textAlign: \"center\",\r\n                                        borderRadius: \"10px\",\r\n                                        borderColor: \"black\",\r\n                                      }\r\n                                }\r\n                              >\r\n                                {variant}\r\n                              </div>\r\n                            </div>\r\n                          );\r\n                        })}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <Container maxWidth=\"lg\" className=\"mt-5\">\r\n        <main>\r\n          <Grid container spacing={2}>\r\n            {viewImages_HTMLTABLE}\r\n          </Grid>\r\n        </main>\r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default ProductDetails;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\First\\Header.js",["578","579"],"import React, { useState } from \"react\";\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport axios from \"axios\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\nimport ArrowBackIosIcon from \"@mui/icons-material/ArrowBackIos\";\r\nfunction Header(props) {\r\n  const history = useHistory();\r\n  const { t } = useTranslation();\r\n\r\n  const {\r\n    title,\r\n    subcategories,\r\n    activeSubCategory,\r\n    setProducts,\r\n    setActiveSubCategory,\r\n  } = props;\r\n  // console.log(subcategories);\r\n\r\n  const filterProducts = (subCateID) => {\r\n    axios.get(`/api/GetProductsBasedOnSubCategory/${subCateID}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        // console.log(res.data.data);\r\n        setProducts(res.data.data);\r\n      }\r\n    });\r\n    setActiveSubCategory(subCateID);\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <Toolbar\r\n        sx={{ borderBottom: 1, borderColor: \"divider\", position: \"sticky\" }}\r\n        className=\"top-0 \"\r\n      >\r\n        <IconButton onClick={() => history.goBack()}>\r\n          <ArrowBackIosIcon />\r\n        </IconButton>\r\n        <Typography\r\n          component=\"h2\"\r\n          variant=\"h6\"\r\n          align=\"center\"\r\n          noWrap\r\n          sx={{ flex: 1 }}\r\n        >\r\n          {title}\r\n        </Typography>\r\n        <IconButton>\r\n          <SearchIcon />\r\n        </IconButton>\r\n      </Toolbar>\r\n\r\n      {subcategories === 0 ? (\r\n        \" \"\r\n      ) : (\r\n        <div>\r\n          <Toolbar\r\n            component=\"nav\"\r\n            variant=\"dense\"\r\n            className=\"border mb-2\"\r\n            sx={{ justifyContent: \"space-between\", overflowX: \"auto\" }}\r\n          >\r\n            {subcategories?.map((section, i) => (\r\n              <div\r\n                style={\r\n                  activeSubCategory === section.sub_id\r\n                    ? {\r\n                        cursor: \"pointer\",\r\n                        background: \"black\",\r\n                        margin: \"2px\",\r\n                        padding: \"5px\",\r\n                        border: \"1px solid\",\r\n                        textAlign: \"center\",\r\n                        borderRadius: \"10px\",\r\n                        color: \"#fff\",\r\n                      }\r\n                    : {\r\n                        cursor: \"pointer\",\r\n                        color: \"black\",\r\n                        margin: \"2px\",\r\n                        padding: \"5px\",\r\n                        textAlign: \"center\",\r\n                        borderRadius: \"10px\",\r\n                      }\r\n                }\r\n                key={i}\r\n                underline=\"hover\"\r\n                variant=\"body2\"\r\n                sx={{ p: 1, flexShrink: 0, cursor: \"pointer\" }}\r\n                onClick={() => filterProducts(section.sub_id)}\r\n              >\r\n                {section.SubCategoryName}\r\n              </div>\r\n            ))}\r\n          </Toolbar>\r\n        </div>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\First\\Footer.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\First\\ProductDetails.js",["580","581","582","583","584","585","586","587","588","589","590","591","592","593","594","595","596","597","598","599","600"],"import React, { Fragment, useState, useEffect, SyntheticEvent } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// Import css files\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport Footer from \"./Footer\";\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport Container from \"@mui/material/Container\";\r\n// import Slider from \"react-slick\";\r\nimport Header from \"./Header\";\r\nimport { base_url, port } from \"../../../../../Consts\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardMedia from \"@mui/material/CardMedia\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Tabs from \"@mui/material/Tabs\";\r\nimport Tab from \"@mui/material/Tab\";\r\nimport Box from \"@mui/material/Box\";\r\n\r\nimport { Zoom } from \"react-slideshow-image\";\r\nimport \"react-slideshow-image/dist/styles.css\";\r\nimport Accordion from \"@mui/material/Accordion\";\r\nimport AccordionSummary from \"@mui/material/AccordionSummary\";\r\nimport AccordionDetails from \"@mui/material/AccordionDetails\";\r\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport \"../style.css\";\r\nconst ProductDetails = (props) => {\r\n  const [themeCustomization, setThemeCustomization] = useState([]);\r\n\r\n  const theme = createTheme({\r\n    palette: {\r\n      warning: {\r\n        // button background\r\n        main: themeCustomization?.button_background_color\r\n          ? themeCustomization.button_background_color\r\n          : \"#111\",\r\n      },\r\n    },\r\n    typography: {\r\n      fontFamily: themeCustomization?.font\r\n        ? themeCustomization.font\r\n        : \"sans-serif\",\r\n      subtitle1: {\r\n        fontSize: themeCustomization?.product_discription_font_size\r\n          ? themeCustomization.product_discription_font_size\r\n          : 10,\r\n        color: themeCustomization?.product_discription_color\r\n          ? themeCustomization.product_discription_color\r\n          : \"#777\",\r\n      },\r\n      // price\r\n      body1: {\r\n        fontSize: themeCustomization?.price_font_size\r\n          ? themeCustomization.price_font_size\r\n          : 12,\r\n        color: themeCustomization?.price_color\r\n          ? themeCustomization.price_color\r\n          : \"#111\",\r\n      },\r\n      // product Names\r\n      button: {\r\n        fontSize: themeCustomization?.product_name_font_size\r\n          ? themeCustomization.product_name_font_size\r\n          : 12,\r\n        color: themeCustomization?.product_name_color\r\n          ? themeCustomization.product_name_color\r\n          : \"#111\",\r\n      },\r\n      // categories and sub categories\r\n      overline: {\r\n        fontSize: themeCustomization?.categories_and_sub_categoies_font_size\r\n          ? themeCustomization.categories_and_sub_categoies_font_size\r\n          : 12,\r\n        color: themeCustomization?.categories_and_sub_categoies_color\r\n          ? themeCustomization.categories_and_sub_categoies_color\r\n          : \"#111\",\r\n      },\r\n      // branch Name\r\n      h6: {\r\n        fontSize: themeCustomization?.branch_name_font_size\r\n          ? themeCustomization.branch_name_font_size\r\n          : 14,\r\n        color: themeCustomization?.branch_name_color\r\n          ? themeCustomization.branch_name_color\r\n          : \"#111\",\r\n      },\r\n    },\r\n    components: {\r\n      MuiButton: {\r\n        variants: [\r\n          {\r\n            // button\r\n            props: { variant: \"contained\" },\r\n            style: {\r\n              fontSize: themeCustomization?.button_text_font_size\r\n                ? themeCustomization.button_text_font_size\r\n                : 12,\r\n              color: themeCustomization?.button_text_color\r\n                ? themeCustomization.button_text_color\r\n                : \"#fff\",\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n  });\r\n  // for localization\r\n  const { t } = useTranslation();\r\n  const id = atob(props.match.params.id);\r\n  //for retriving data using laravel API\r\n  const themes = props.history.location.state.themes;\r\n  let varData = [];\r\n  //for retriving data using laravel API\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [variantData, setVariantData] = useState([]);\r\n  const [showVaralint, setShowVarlist] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [skuarray, setSkuArray] = useState([]);\r\n  const [productDetails, setProductDetails] = useState({\r\n    price: 0,\r\n    stock: 0,\r\n    image: fetchData?.image,\r\n  });\r\n  useEffect(() => {\r\n    const getdata = async () => {\r\n      const product = await axios({\r\n        method: \"GET\",\r\n        url: `/api/GetProduct/${id}`,\r\n      });\r\n      const data = product.data.fetchData;\r\n\r\n      const res = await axios({\r\n        method: \"GET\",\r\n        url: `/api/Getvariations/${id}`,\r\n      });\r\n      setFetchData(data[0]);\r\n      if (res.data.fetchData !== \"\") {\r\n        varData = JSON.parse(res.data.fetchData);\r\n        parseVariants(varData);\r\n      }\r\n\r\n      setLoading(false);\r\n    };\r\n    getdata(); // axios\r\n  }, [id]);\r\n  const changePrice = (varName, variant) => {\r\n    const keys = Object.keys(showVaralint);\r\n    const varlineindex = keys.indexOf(varName);\r\n    const newSkuArray = skuarray;\r\n    newSkuArray[varlineindex] = variant;\r\n    setSkuArray(newSkuArray);\r\n    if (keys.length == newSkuArray.length) {\r\n      caluclatePrice(newSkuArray, variantData);\r\n    }\r\n  };\r\n  const caluclatePrice = (newSkuArray, variantData) => {\r\n    let sku = id + \"-\";\r\n    for (let i = 0; i < newSkuArray.length; i++) {\r\n      if (i == newSkuArray.length - 1) {\r\n        sku += newSkuArray[i];\r\n      } else {\r\n        sku += newSkuArray[i] + \"-\";\r\n      }\r\n    }\r\n\r\n    const priceList = variantData.filter((item) => {\r\n      return item.sku.replace(/\\s+/g, \"\") == sku.replace(/\\s+/g, \"\");\r\n    });\r\n    console.log(newSkuArray);\r\n    let productdetails = { price: 0, stock: 0 };\r\n    if (priceList.length !== 0) {\r\n      const line = priceList.pop();\r\n      const newProductDetails = {\r\n        price: line.price,\r\n        stock: line.stock,\r\n        image: line.image,\r\n      };\r\n      productdetails = newProductDetails;\r\n    } else {\r\n      const newProductDetails = {\r\n        price: 0,\r\n        stock: \"No Stock\",\r\n        image: fetchData.image,\r\n      };\r\n      productdetails = newProductDetails;\r\n    }\r\n    setProductDetails({ ...productdetails });\r\n  };\r\n  const parseVariants = (variantData) => {\r\n    const variants = [];\r\n    const savePostion = [\"postion\", \"sku\", \"price\", \"stock\", \"image\"];\r\n    const varLine = variantData[0];\r\n    const varlinekey = Object.keys(varLine);\r\n    for (let i = 0; i < varlinekey.length; i++) {\r\n      if (savePostion.indexOf(varlinekey[i]) == -1) {\r\n        let listvar = variantData.map((item) => {\r\n          return item[varlinekey[i]];\r\n        });\r\n        // get unique variants\r\n        listvar = listvar.filter(\r\n          (thing, index, self) =>\r\n            index ===\r\n            self.findIndex((t) => t.place === listvar.place && t === thing)\r\n        );\r\n        if (listvar[0] != 0) variants[varlinekey[i]] = listvar;\r\n      }\r\n    }\r\n    let def = [];\r\n    Object.keys(variants).map((item) => {\r\n      def.push(variants[item][0]);\r\n    });\r\n    setSkuArray(def);\r\n    caluclatePrice(def, variantData);\r\n    setShowVarlist(variants);\r\n    setVariantData(variantData);\r\n  };\r\n  const [ingredients, setIntgredients] = useState([]);\r\n  const changeIngredients = (label) => {\r\n    if (!ingredients.includes(label) === false) {\r\n      setIntgredients(ingredients.filter((item) => item !== label));\r\n    } else {\r\n      setIntgredients([...ingredients, label]);\r\n    }\r\n  };\r\n  let [sum, setSum] = useState(0);\r\n\r\n  const extraHandlers = (e, price) => {\r\n    if (e.target.checked) {\r\n      // console.log((sum += parseInt(price)));\r\n      setSum((sum += parseInt(price)));\r\n    } else {\r\n      setSum((sum -= parseInt(price)));\r\n    }\r\n  };\r\n\r\n  const zoomOutProperties = {\r\n    duration: 100,\r\n    transitionDuration: 5,\r\n    canSwipe: true,\r\n    indicators: true,\r\n    scale: false,\r\n    autoplay: false,\r\n    indicators: (i) => (\r\n      <div className=\"indicator\">\r\n        <img\r\n          src={\r\n            productDetails?.stock === \"No Stock\" || productDetails?.stock === 0\r\n              ? `http://${base_url}:${port}/images/products/${fetchData?.image}`\r\n              : `http://${base_url}:${port}/images/variants_pics/${productDetails.image[i]}`\r\n          }\r\n          width=\"40px\"\r\n          // className=\"p-1\"\r\n          // style={{ width: \"40px\" }}\r\n        />\r\n      </div>\r\n    ),\r\n  };\r\n\r\n  var viewImages_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"container \">\r\n        <div\r\n          className=\"spinner-border text-primary \"\r\n          role=\"status\"\r\n          style={{ position: \"fixed\", top: \"50%\", left: \"50%\" }}\r\n        >\r\n          <span className=\"sr-only\">{t(\"loading\")}</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewImages_HTMLTABLE = (\r\n      <Grid container>\r\n        <Grid item xs={12} sm={5} md={5} lg={5}>\r\n          <div className=\"row col-md-12 text-center \">\r\n            <Zoom {...zoomOutProperties}>\r\n              {(() => {\r\n                if (Array.isArray(productDetails.image)) {\r\n                  return productDetails.image?.map((image) => {\r\n                    return (\r\n                      <div key={image} style={{ width: \"100%\" }}>\r\n                        <img\r\n                          src={`http://${base_url}:${port}/images/variants_pics/${image}`}\r\n                          style={{\r\n                            height: \"500px\",\r\n                            width: \"100%\",\r\n                            objectFit: \"contain\",\r\n                          }}\r\n                          // className=\"img-thumbnail\"\r\n                          alt=\"\"\r\n                        />\r\n                      </div>\r\n                    );\r\n                  });\r\n                } else {\r\n                  return (\r\n                    <div style={{ width: \"100%\" }}>\r\n                      <img\r\n                        src={\r\n                          productDetails.stock === \"No Stock\" ||\r\n                          productDetails?.stock === 0\r\n                            ? `http://${base_url}:${port}/images/products/${\r\n                                productDetails.image\r\n                                  ? productDetails?.image\r\n                                  : fetchData?.image\r\n                              }`\r\n                            : `http://${base_url}:${port}/images/variants_pics/${productDetails.image}`\r\n                        }\r\n                        style={{\r\n                          height: \"500px\",\r\n                          width: \"100%\",\r\n                          objectFit: \"contain\",\r\n                        }}\r\n                        alt=\"\"\r\n                      />\r\n                    </div>\r\n                  );\r\n                }\r\n              })()}\r\n            </Zoom>\r\n          </div>\r\n        </Grid>\r\n\r\n        <Grid item xs={12} sm={7} md={7} lg={7}>\r\n          <Card\r\n            sx={{\r\n              // height: \"100%\",\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n            }}\r\n          >\r\n            <div className=\"row mx-3 mt-3\">\r\n              <Typography variant=\"overline\" gutterBottom>\r\n                {t(\"product_name\")}: {fetchData?.ProductName}\r\n              </Typography>\r\n              <Typography variant=\"body2\" gutterBottom>\r\n                {t(\"description\")}: {fetchData?.Description}\r\n              </Typography>\r\n              <Typography variant=\"body2\" gutterBottom>\r\n                {t(\"unit\")}: {fetchData?.UnitName}\r\n              </Typography>\r\n\r\n              {themes?.preparation_time != 0 ? (\r\n                <Typography variant=\"body2\" gutterBottom>\r\n                  {t(\"preparation_Time\")}: {fetchData?.preparationTime} Minutes\r\n                </Typography>\r\n              ) : (\r\n                \" \"\r\n              )}\r\n              <p>\r\n                {t(\"price\")} :{\" \"}\r\n                {productDetails.price === 0\r\n                  ? fetchData?.price + sum\r\n                  : parseInt(productDetails.price) + sum}\r\n              </p>\r\n              <p>\r\n                {t(\"stock\")}:{\" \"}\r\n                {productDetails.stock === 0\r\n                  ? fetchData?.stock\r\n                  : productDetails.stock}\r\n              </p>\r\n            </div>\r\n            <div className=\"row mx-3\">\r\n              <Typography variant=\"overline\" gutterBottom>\r\n                {t(\"ingredients\")}\r\n              </Typography>\r\n              <small>Please select the ingredients you want to remove.</small>\r\n            </div>\r\n            <div className=\"row mx-4\">\r\n              {JSON.parse(fetchData.ingredients)?.map((item, i) => {\r\n                return (\r\n                  <div\r\n                    className=\"col-md-auto col-sm-auto col-xl-auto col-lg-auto col-auto\"\r\n                    onClick={() => {\r\n                      changeIngredients(item.label);\r\n                    }}\r\n                    style={\r\n                      ingredients.includes(item.label)\r\n                        ? {\r\n                            cursor: \"pointer\",\r\n\r\n                            padding: \"3px\",\r\n                            margin: \"2px\",\r\n                            border: \"1px solid\",\r\n                            textAlign: \"center\",\r\n                            borderColor: \"red\",\r\n                            textDecoration: \"line-through\",\r\n                            color: \"red\",\r\n                          }\r\n                        : {\r\n                            cursor: \"pointer\",\r\n                            padding: \"3px\",\r\n                            margin: \"2px\",\r\n                            border: \"1px solid\",\r\n                            textAlign: \"center\",\r\n                            // borderRadius: \"10px\",\r\n                            borderColor: \"black\",\r\n                          }\r\n                    }\r\n                  >\r\n                    {item.label}\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n            <div className=\"row m-3\">\r\n              <Accordion>\r\n                <AccordionSummary\r\n                  expandIcon={<ExpandMoreIcon />}\r\n                  aria-controls=\"panel1a-content\"\r\n                  id=\"panel1a-header\"\r\n                >\r\n                  <Typography variant=\"overline\" gutterBottom>\r\n                    {t(\"extras\")}\r\n                  </Typography>\r\n                </AccordionSummary>\r\n                <AccordionDetails>\r\n                  <FormGroup>\r\n                    {JSON.parse(fetchData.extras)?.map((item, i) => {\r\n                      return (\r\n                        <FormControlLabel\r\n                          key={i}\r\n                          control={\r\n                            <Checkbox\r\n                              onChange={(e) => {\r\n                                extraHandlers(e, item.price);\r\n                              }}\r\n                              color=\"default\"\r\n                              sx={{\r\n                                color: themeCustomization?.branch_name_color\r\n                                  ? themeCustomization.branch_name_color\r\n                                  : \"#ff751d\",\r\n                              }}\r\n                            />\r\n                          }\r\n                          label={\r\n                            <Typography variant=\"body2\" gutterBottom>\r\n                              {item.label + \" ( +\" + item.price + \".00\" + \" )\"}\r\n                            </Typography>\r\n                          }\r\n                        />\r\n                      );\r\n                    })}\r\n                  </FormGroup>\r\n                </AccordionDetails>\r\n              </Accordion>\r\n            </div>\r\n\r\n            <div className=\"row m-3\">\r\n              <Typography variant=\"overline\" gutterBottom>\r\n                {t(\"vatiants\")}\r\n              </Typography>\r\n            </div>\r\n\r\n            <div className=\"row mx-2\">\r\n              {Object.keys(showVaralint).map((list, i) => {\r\n                return (\r\n                  <div className=\"row \" key={i}>\r\n                    <div className=\"col-md-auto col-sm-auto col-xl-auto col-lg-auto col-auto\">\r\n                      {list}\r\n                      <div className=\"row\">\r\n                        {showVaralint[list].map((variant) => {\r\n                          return (\r\n                            <div className=\"col-md-auto col-sm-auto col-xl-auto col-lg-auto col-auto\">\r\n                              <div\r\n                                onClick={() => {\r\n                                  changePrice(list, variant);\r\n                                }}\r\n                                style={\r\n                                  skuarray[i] == variant\r\n                                    ? {\r\n                                        cursor: \"pointer\",\r\n                                        margin: \"2px\",\r\n                                        padding: \"5px\",\r\n                                        border: \"1px solid\",\r\n                                        textAlign: \"center\",\r\n                                        borderRadius: \"10px\",\r\n                                        borderColor: \"red\",\r\n                                      }\r\n                                    : {\r\n                                        cursor: \"pointer\",\r\n                                        margin: \"2px\",\r\n\r\n                                        padding: \"5px\",\r\n                                        border: \"1px solid\",\r\n                                        textAlign: \"center\",\r\n                                        borderRadius: \"10px\",\r\n                                        borderColor: \"black\",\r\n                                      }\r\n                                }\r\n                              >\r\n                                {variant}\r\n                              </div>\r\n                            </div>\r\n                          );\r\n                        })}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <Container maxWidth=\"lg\">\r\n        <Header\r\n          // title={branch[0]?.BrancheName}\r\n          categories={0}\r\n          subcategories={0}\r\n          // setSubCategories={setSubCategories}\r\n          // activeSubCategory={activeSubCategory}\r\n        />\r\n        <main>\r\n          <Grid container spacing={2}>\r\n            {viewImages_HTMLTABLE}\r\n          </Grid>\r\n        </main>\r\n\r\n        <Footer title=\"Add to Card\" />\r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default ProductDetails;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Default\\Counter.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\Cart.js",["601","602","603","604","605","606"],"import React, { useState, useEffect } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// Import css files\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport Container from \"@mui/material/Container\";\r\n// import Slider from \"react-slick\";\r\nimport Header from \"./Header\";\r\nimport { base_url, port } from \"../../../../../Consts\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Card from \"@mui/material/Card\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\nimport \"react-slideshow-image/dist/styles.css\";\r\nimport getSymbolFromCurrency from \"currency-symbol-map\";\r\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\"; // requires a loader\r\n// import { Carousel } from \"react-responsive-carousel\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport ClearIcon from \"@mui/icons-material/Clear\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport { Link } from \"react-router-dom\";\r\nimport ReactWhatsapp from \"react-whatsapp\";\r\n\r\nimport \"../style.css\";\r\nvar message = \"\";\r\n\r\nconst Cart = (props) => {\r\n  // for localization\r\n  const { t } = useTranslation();\r\n  const custom = props.history.location.state.custom;\r\n  // design start\r\n  const theme = createTheme({\r\n    palette: {\r\n      background: {\r\n        default: custom?.bgColor ? custom.bgColor : \"#22252a\",\r\n      },\r\n    },\r\n    typography: {\r\n      fontFamily: custom?.font ? custom.font : \"sans-serif\",\r\n      // discription\r\n      subtitle1: {\r\n        fontSize: custom?.pDiscriptionSize\r\n          ? custom.pDiscriptionSize + \"rem\"\r\n          : \"0.75rem\",\r\n\r\n        color: custom?.product_discription_color\r\n          ? custom.product_discription_color\r\n          : \"#fff\",\r\n      },\r\n      // price\r\n      body1: {\r\n        fontSize: custom?.priceSize ? custom.priceSize + \"rem\" : \"1.25rem\",\r\n        color: custom?.price_color ? custom.price_color : \"#fff\",\r\n      },\r\n      // product Names\r\n      button: {\r\n        fontSize: custom?.pNameSize ? custom.pNameSize + \"rem\" : \"1rem\",\r\n        color: custom?.product_name_color ? custom.product_name_color : \"#fff\",\r\n      },\r\n      // Menus\r\n      h6: {\r\n        fontSize: custom?.menusSize ? custom.menusSize + \"rem\" : \"1rem\",\r\n        color: custom?.menusAcriveColor ? custom.menusAcriveColor : \"#f27d1e\",\r\n      },\r\n    },\r\n  });\r\n  // design end\r\n  const [cart, setCart] = useState(\r\n    JSON.parse(localStorage.getItem(\"cart\")) || []\r\n  );\r\n  const [loading, setLoading] = useState(true);\r\n  let [sum, setSum] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setLoading(false);\r\n    cart.map((item) => {\r\n      sum += item.price * item.qty;\r\n    });\r\n    setSum(sum);\r\n  }, []);\r\n\r\n  const handleDecrement = (e, qty, id, price) => {\r\n    e.preventDefault();\r\n    let vars = cart.map((item) =>\r\n      id == item.id\r\n        ? {\r\n            ...item,\r\n            qty: item.qty - (item.qty > 0 ? 1 : 0),\r\n          }\r\n        : item\r\n    );\r\n    if (qty > 1) {\r\n      setCart((cart) => vars);\r\n      setSum((sum -= parseInt(price)));\r\n      localStorage.setItem(\"cart\", JSON.stringify(vars));\r\n    }\r\n  };\r\n  const handelIncrement = (e, qty, id, price, stock) => {\r\n    e.preventDefault();\r\n    if (stock > qty) {\r\n      let vars = cart.map((item) =>\r\n        id == item.id ? { ...item, qty: qty + 1 } : item\r\n      );\r\n      setCart((cart) => vars);\r\n      localStorage.setItem(\"cart\", JSON.stringify(vars));\r\n\r\n      setSum((sum += parseInt(price)));\r\n    } else {\r\n      alert(\"More than that isn't available because it's out of stock.\");\r\n    }\r\n  };\r\n  const remItem = (id, qty, price) => {\r\n    setSum((sum -= price * qty));\r\n\r\n    const data = cart.filter((cart) => {\r\n      return cart.id !== id;\r\n    });\r\n    localStorage.setItem(\"cart\", JSON.stringify(data));\r\n    setCart(data);\r\n  };\r\n\r\n  var viewImages_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"container \">\r\n        <div\r\n          className=\"spinner-border text-primary \"\r\n          role=\"status\"\r\n          style={{ position: \"fixed\", top: \"50%\", left: \"50%\" }}\r\n        >\r\n          <span className=\"sr-only\">{t(\"loading\")}</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewImages_HTMLTABLE = cart?.map((item, i) => {\r\n      message =\r\n        message +\r\n        `*Product Name*: ${item.ProductName} \\n*Category*: ${\r\n          item.CategoryName\r\n        } \\n*Sub Category*: ${item.SubCategoryName} \\n*QTY*: ${\r\n          item.qty\r\n        } \\n*Price*: ${item.price} \\n*Total Price*: ${\r\n          item.qty * item.price\r\n        } *${getSymbolFromCurrency(item.currency_code)}* \\n\\n`;\r\n      return (\r\n        <Card\r\n          key={i}\r\n          sx={{\r\n            // height: \"100%\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            // borderRadius: \"%\",\r\n            backgroundColor: custom?.cardBgColor\r\n              ? custom.cardBgColor\r\n              : \"#2d3134\",\r\n          }}\r\n          className=\"m-1\"\r\n        >\r\n          <div className=\"text-right\">\r\n            <IconButton onClick={() => remItem(item.id, item.qty, item.price)}>\r\n              <ClearIcon\r\n                sx={{\r\n                  color: custom?.menusAcriveColor\r\n                    ? custom.menusAcriveColor\r\n                    : \"#f27d1e\",\r\n                }}\r\n              />\r\n            </IconButton>\r\n          </div>\r\n\r\n          <CardContent sx={{ flexGrow: 1 }}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={3} sm={3} md={3}>\r\n                <img\r\n                  style={{\r\n                    height: \"100px\",\r\n                    width: \"100%\",\r\n                    borderRadius: \"15%\",\r\n                    objectFit: \"contain\",\r\n                  }}\r\n                  src={`http://${base_url}:${port}/images/products/${\r\n                    JSON.parse(item.image)[0]\r\n                  }`}\r\n                  alt=\"Image\"\r\n                  // className=\"h-100\"\r\n                />\r\n              </Grid>\r\n              <Grid item xs={5} sm={5} md={5}>\r\n                <Typography\r\n                  variant=\"button\"\r\n                  style={{ textTransform: \"capitalize\" }}\r\n                  // className=\"font-weight-bold\"\r\n                >\r\n                  {item.ProductName}\r\n                </Typography>\r\n                <Typography\r\n                  variant=\"body1\"\r\n                  gutterBottom\r\n                  className=\"font-weight-bold\"\r\n                >\r\n                  {getSymbolFromCurrency(item.currency_code) +\r\n                    \"  \" +\r\n                    (item.price * item.qty).toFixed(2)}\r\n                </Typography>\r\n                <Typography variant=\"subtitle1\" gutterBottom>\r\n                  {item.UnitName}\r\n                </Typography>\r\n                <Typography variant=\"subtitle1\" gutterBottom>\r\n                  {item.Description}\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item xs={4} sm={4} md={4}>\r\n                <div className=\"row mt-2\">\r\n                  <div className={`row`}>\r\n                    <div className=\"col-4 \">\r\n                      <Typography\r\n                        onClick={(e) =>\r\n                          handleDecrement(e, item.qty, item.id, item.price)\r\n                        }\r\n                        style={{ cursor: \"pointer\" }}\r\n                        variant=\"h6\"\r\n                        gutterBottom\r\n                      >\r\n                        <svg\r\n                          xmlns=\"http://www.w3.org/2000/svg\"\r\n                          width=\"16\"\r\n                          height=\"16\"\r\n                          fill=\"currentColor\"\r\n                          className=\"bi bi-dash-square-dotted  \"\r\n                          viewBox=\"0 0 16 16\"\r\n                        >\r\n                          <path d=\"M2.5 0c-.166 0-.33.016-.487.048l.194.98A1.51 1.51 0 0 1 2.5 1h.458V0H2.5zm2.292 0h-.917v1h.917V0zm1.833 0h-.917v1h.917V0zm1.833 0h-.916v1h.916V0zm1.834 0h-.917v1h.917V0zm1.833 0h-.917v1h.917V0zM13.5 0h-.458v1h.458c.1 0 .199.01.293.029l.194-.981A2.51 2.51 0 0 0 13.5 0zm2.079 1.11a2.511 2.511 0 0 0-.69-.689l-.556.831c.164.11.305.251.415.415l.83-.556zM1.11.421a2.511 2.511 0 0 0-.689.69l.831.556c.11-.164.251-.305.415-.415L1.11.422zM16 2.5c0-.166-.016-.33-.048-.487l-.98.194c.018.094.028.192.028.293v.458h1V2.5zM.048 2.013A2.51 2.51 0 0 0 0 2.5v.458h1V2.5c0-.1.01-.199.029-.293l-.981-.194zM0 3.875v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zM0 5.708v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zM0 7.542v.916h1v-.916H0zm15 .916h1v-.916h-1v.916zM0 9.375v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zm-16 .916v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zm-16 .917v.458c0 .166.016.33.048.487l.98-.194A1.51 1.51 0 0 1 1 13.5v-.458H0zm16 .458v-.458h-1v.458c0 .1-.01.199-.029.293l.981.194c.032-.158.048-.32.048-.487zM.421 14.89c.183.272.417.506.69.689l.556-.831a1.51 1.51 0 0 1-.415-.415l-.83.556zm14.469.689c.272-.183.506-.417.689-.69l-.831-.556c-.11.164-.251.305-.415.415l.556.83zm-12.877.373c.158.032.32.048.487.048h.458v-1H2.5c-.1 0-.199-.01-.293-.029l-.194.981zM13.5 16c.166 0 .33-.016.487-.048l-.194-.98A1.51 1.51 0 0 1 13.5 15h-.458v1h.458zm-9.625 0h.917v-1h-.917v1zm1.833 0h.917v-1h-.917v1zm1.834 0h.916v-1h-.916v1zm1.833 0h.917v-1h-.917v1zm1.833 0h.917v-1h-.917v1zM4.5 7.5a.5.5 0 0 0 0 1h7a.5.5 0 0 0 0-1h-7z\" />\r\n                        </svg>\r\n                      </Typography>\r\n                    </div>\r\n                    <div className=\"col-4\">\r\n                      <Typography\r\n                        variant=\"subtitle1\"\r\n                        gutterBottom\r\n                        className=\"mt-1\"\r\n                      >\r\n                        {item.qty}\r\n                      </Typography>\r\n                    </div>\r\n                    <div className=\"col-4\">\r\n                      <Typography\r\n                        onClick={(e) =>\r\n                          handelIncrement(\r\n                            e,\r\n                            item.qty,\r\n                            item.id,\r\n                            item.price,\r\n                            item.stock\r\n                          )\r\n                        }\r\n                        style={{ cursor: \"pointer\" }}\r\n                        variant=\"h6\"\r\n                        gutterBottom\r\n                      >\r\n                        <svg\r\n                          xmlns=\"http://www.w3.org/2000/svg\"\r\n                          width=\"16\"\r\n                          height=\"16\"\r\n                          fill=\"currentColor\"\r\n                          className=\"bi bi-plus-square-dotted\"\r\n                          viewBox=\"0 0 16 16\"\r\n                        >\r\n                          <path d=\"M2.5 0c-.166 0-.33.016-.487.048l.194.98A1.51 1.51 0 0 1 2.5 1h.458V0H2.5zm2.292 0h-.917v1h.917V0zm1.833 0h-.917v1h.917V0zm1.833 0h-.916v1h.916V0zm1.834 0h-.917v1h.917V0zm1.833 0h-.917v1h.917V0zM13.5 0h-.458v1h.458c.1 0 .199.01.293.029l.194-.981A2.51 2.51 0 0 0 13.5 0zm2.079 1.11a2.511 2.511 0 0 0-.69-.689l-.556.831c.164.11.305.251.415.415l.83-.556zM1.11.421a2.511 2.511 0 0 0-.689.69l.831.556c.11-.164.251-.305.415-.415L1.11.422zM16 2.5c0-.166-.016-.33-.048-.487l-.98.194c.018.094.028.192.028.293v.458h1V2.5zM.048 2.013A2.51 2.51 0 0 0 0 2.5v.458h1V2.5c0-.1.01-.199.029-.293l-.981-.194zM0 3.875v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zM0 5.708v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zM0 7.542v.916h1v-.916H0zm15 .916h1v-.916h-1v.916zM0 9.375v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zm-16 .916v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zm-16 .917v.458c0 .166.016.33.048.487l.98-.194A1.51 1.51 0 0 1 1 13.5v-.458H0zm16 .458v-.458h-1v.458c0 .1-.01.199-.029.293l.981.194c.032-.158.048-.32.048-.487zM.421 14.89c.183.272.417.506.69.689l.556-.831a1.51 1.51 0 0 1-.415-.415l-.83.556zm14.469.689c.272-.183.506-.417.689-.69l-.831-.556c-.11.164-.251.305-.415.415l.556.83zm-12.877.373c.158.032.32.048.487.048h.458v-1H2.5c-.1 0-.199-.01-.293-.029l-.194.981zM13.5 16c.166 0 .33-.016.487-.048l-.194-.98A1.51 1.51 0 0 1 13.5 15h-.458v1h.458zm-9.625 0h.917v-1h-.917v1zm1.833 0h.917v-1h-.917v1zm1.834-1v1h.916v-1h-.916zm1.833 1h.917v-1h-.917v1zm1.833 0h.917v-1h-.917v1zM8.5 4.5a.5.5 0 0 0-1 0v3h-3a.5.5 0 0 0 0 1h3v3a.5.5 0 0 0 1 0v-3h3a.5.5 0 0 0 0-1h-3v-3z\" />\r\n                        </svg>\r\n                      </Typography>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </Grid>\r\n            </Grid>\r\n          </CardContent>\r\n        </Card>\r\n      );\r\n    });\r\n  }\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <Container maxWidth=\"lg\" className=\"mb-2\">\r\n        <Header subcategories={0} cart={cart.length} />\r\n        {cart.length === 0 ? (\r\n          <Grid container spacing={2} className=\"text-center\">\r\n            <Grid item xs={12} sm={12} md={12}>\r\n              No Item Available\r\n            </Grid>\r\n          </Grid>\r\n        ) : (\r\n          <>\r\n            {viewImages_HTMLTABLE}\r\n            <Card\r\n              sx={{\r\n                // height: \"100%\",\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                // borderRadius: \"%\",\r\n                backgroundColor: custom?.cardBgColor\r\n                  ? custom.cardBgColor\r\n                  : \"#2d3134\",\r\n              }}\r\n              className=\"m-1\"\r\n            >\r\n              <CardContent sx={{ flexGrow: 1 }}>\r\n                <Grid container spacing={2}>\r\n                  <Grid item xs={4} sm={4} md={4}>\r\n                    <Typography\r\n                      variant=\"body1\"\r\n                      className=\"font-weight-bold col-12 btn\"\r\n                    >\r\n                      {sum.toFixed(2) +\r\n                        \"  \" +\r\n                        getSymbolFromCurrency(cart[0]?.currency_code)}\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={4} sm={4} md={4}>\r\n                    <p className=\"d-none\">\r\n                      {console.log(message)}\r\n                      {(message = `\\n\\n\\n${message} *Grand Total*: ${sum}`)}\r\n                    </p>\r\n                    {console.log(message)}\r\n\r\n                    <ReactWhatsapp\r\n                      className=\"col-12 btn\"\r\n                      style={{\r\n                        textTransform: \"capitalize\",\r\n                        backgroundColor: theme?.button_background_color\r\n                          ? theme.button_background_color\r\n                          : \"#ff751d\",\r\n                        color: theme?.button_text_color\r\n                          ? theme.button_text_color\r\n                          : \"#f1fcfe\",\r\n                        fontSize: theme?.bTextSize\r\n                          ? theme.bTextSize + \"rem\"\r\n                          : \"1rem\",\r\n                      }}\r\n                      number=\"+93744647067\"\r\n                      message={message}\r\n                      max=\"4096\"\r\n                      type=\"submit\"\r\n                    >\r\n                      {t(\"send_order\")}{\" \"}\r\n                    </ReactWhatsapp>\r\n                  </Grid>\r\n                  <Grid item xs={4} sm={4} md={4}>\r\n                    <button\r\n                      className=\"col-12 btn\"\r\n                      style={{\r\n                        textTransform: \"capitalize\",\r\n                        backgroundColor: theme?.button_background_color\r\n                          ? theme.button_background_color\r\n                          : \"#ff751d\",\r\n                        color: theme?.button_text_color\r\n                          ? theme.button_text_color\r\n                          : \"#f1fcfe\",\r\n                        fontSize: theme?.bTextSize\r\n                          ? theme.bTextSize + \"rem\"\r\n                          : \"1rem\",\r\n                      }}\r\n                      onClick={() => [\r\n                        localStorage.removeItem(\"cart\"),\r\n                        setCart([]),\r\n                      ]}\r\n                    >\r\n                      {t(\"empty_cart\")}{\" \"}\r\n                    </button>\r\n                  </Grid>\r\n                </Grid>\r\n              </CardContent>\r\n            </Card>\r\n          </>\r\n        )}\r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default Cart;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\Counter.js",["607","608","609","610","611","612","613","614","615"],"import React, { useState } from \"react\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\nconst Counter = (props) => {\r\n  const { custom, products, item, cart, setCart } = props;\r\n  // const [show, setShow] = useState(false);\r\n\r\n  const handleDecrement = (e, qty, id) => {\r\n    e.preventDefault();\r\n    if (qty > 1) {\r\n      let vars = cart.map((item) =>\r\n        id === item.id\r\n          ? {\r\n              ...item,\r\n              qty: item.qty - (item.qty > 0 ? 1 : 0),\r\n            }\r\n          : item\r\n      );\r\n      setCart((cart) => vars);\r\n      item.qty = qty - 1;\r\n      localStorage.setItem(\"cart\", JSON.stringify(vars));\r\n    }\r\n  };\r\n  const handelIncrement = (e, qty, id) => {\r\n    e.preventDefault();\r\n    if (item.stock > qty) {\r\n      let vars = cart.map((item) =>\r\n        id === item.id ? { ...item, qty: item.qty + 1 } : item\r\n      );\r\n      setCart((cart) => vars);\r\n      item.qty = qty + 1;\r\n      localStorage.setItem(\"cart\", JSON.stringify(vars));\r\n    } else {\r\n      alert(\"More than that isn't available because it's out of stock.\");\r\n    }\r\n  };\r\n\r\n  const addItem = (id) => {\r\n    const check = cart.every((item) => {\r\n      return item.id !== id;\r\n    });\r\n    if (check) {\r\n      const data = products.filter((product) => {\r\n        return product.id === id;\r\n      });\r\n      localStorage.setItem(\"cart\", JSON.stringify(cart.concat(data)));\r\n      setCart(cart.concat(data));\r\n    } else {\r\n      //  if available\r\n    }\r\n  };\r\n  const remItem = (id) => {\r\n    const data = cart.filter((cart) => {\r\n      return cart.id !== id;\r\n    });\r\n    localStorage.setItem(\"cart\", JSON.stringify(data));\r\n    setCart(data);\r\n    // setShow(false);\r\n  };\r\n  var cartItem = [];\r\n  const getvalue = JSON.parse(localStorage.getItem(\"cart\")) || [];\r\n  if (getvalue) {\r\n    cartItem = getvalue.filter((cart) => {\r\n      return cart.id == item.id;\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className={`col-12 ${cartItem.length == 0 ? \" \" : \"d-none\"} `}>\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width=\"16\"\r\n          height=\"16\"\r\n          fill=\"currentColor\"\r\n          className=\"bi bi-plus-square-dotted\"\r\n          onClick={(e) => [addItem(item.id)]}\r\n          style={{ cursor: \"pointer\" }}\r\n          style={{\r\n            color: custom?.menusDeactiveColor\r\n              ? custom.menusDeactiveColor\r\n              : \"#fff\",\r\n          }}\r\n          viewBox=\"0 0 16 16\"\r\n        >\r\n          <path d=\"M2.5 0c-.166 0-.33.016-.487.048l.194.98A1.51 1.51 0 0 1 2.5 1h.458V0H2.5zm2.292 0h-.917v1h.917V0zm1.833 0h-.917v1h.917V0zm1.833 0h-.916v1h.916V0zm1.834 0h-.917v1h.917V0zm1.833 0h-.917v1h.917V0zM13.5 0h-.458v1h.458c.1 0 .199.01.293.029l.194-.981A2.51 2.51 0 0 0 13.5 0zm2.079 1.11a2.511 2.511 0 0 0-.69-.689l-.556.831c.164.11.305.251.415.415l.83-.556zM1.11.421a2.511 2.511 0 0 0-.689.69l.831.556c.11-.164.251-.305.415-.415L1.11.422zM16 2.5c0-.166-.016-.33-.048-.487l-.98.194c.018.094.028.192.028.293v.458h1V2.5zM.048 2.013A2.51 2.51 0 0 0 0 2.5v.458h1V2.5c0-.1.01-.199.029-.293l-.981-.194zM0 3.875v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zM0 5.708v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zM0 7.542v.916h1v-.916H0zm15 .916h1v-.916h-1v.916zM0 9.375v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zm-16 .916v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zm-16 .917v.458c0 .166.016.33.048.487l.98-.194A1.51 1.51 0 0 1 1 13.5v-.458H0zm16 .458v-.458h-1v.458c0 .1-.01.199-.029.293l.981.194c.032-.158.048-.32.048-.487zM.421 14.89c.183.272.417.506.69.689l.556-.831a1.51 1.51 0 0 1-.415-.415l-.83.556zm14.469.689c.272-.183.506-.417.689-.69l-.831-.556c-.11.164-.251.305-.415.415l.556.83zm-12.877.373c.158.032.32.048.487.048h.458v-1H2.5c-.1 0-.199-.01-.293-.029l-.194.981zM13.5 16c.166 0 .33-.016.487-.048l-.194-.98A1.51 1.51 0 0 1 13.5 15h-.458v1h.458zm-9.625 0h.917v-1h-.917v1zm1.833 0h.917v-1h-.917v1zm1.834-1v1h.916v-1h-.916zm1.833 1h.917v-1h-.917v1zm1.833 0h.917v-1h-.917v1zM8.5 4.5a.5.5 0 0 0-1 0v3h-3a.5.5 0 0 0 0 1h3v3a.5.5 0 0 0 1 0v-3h3a.5.5 0 0 0 0-1h-3v-3z\" />\r\n        </svg>\r\n      </div>\r\n      <div className={`col-12  ${cartItem.length != 0 ? \" \" : \"d-none\"}`}>\r\n        <div className=\"col-4\">\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            {(cartItem.length != 0 ? cartItem[0].qty : item.qty) === 1 ? (\r\n              <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                width=\"16\"\r\n                height=\"16\"\r\n                fill=\"currentColor\"\r\n                className=\"bi bi-trash text-danger\"\r\n                viewBox=\"0 0 16 16\"\r\n                onClick={() => remItem(item.id)}\r\n                style={{ cursor: \"pointer\" }}\r\n              >\r\n                <path d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z\" />\r\n                <path\r\n                  fillRule=\"evenodd\"\r\n                  d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\"\r\n                />\r\n              </svg>\r\n            ) : (\r\n              <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                width=\"16\"\r\n                height=\"16\"\r\n                fill=\"currentColor\"\r\n                className=\"bi bi-dash-square-dotted  \"\r\n                viewBox=\"0 0 16 16\"\r\n                onClick={(e) =>\r\n                  handleDecrement(\r\n                    e,\r\n                    cartItem.length != 0 ? cartItem[0].qty : item.qty,\r\n                    item.id,\r\n                    item.price\r\n                  )\r\n                }\r\n                style={{ cursor: \"pointer\" }}\r\n              >\r\n                <path d=\"M2.5 0c-.166 0-.33.016-.487.048l.194.98A1.51 1.51 0 0 1 2.5 1h.458V0H2.5zm2.292 0h-.917v1h.917V0zm1.833 0h-.917v1h.917V0zm1.833 0h-.916v1h.916V0zm1.834 0h-.917v1h.917V0zm1.833 0h-.917v1h.917V0zM13.5 0h-.458v1h.458c.1 0 .199.01.293.029l.194-.981A2.51 2.51 0 0 0 13.5 0zm2.079 1.11a2.511 2.511 0 0 0-.69-.689l-.556.831c.164.11.305.251.415.415l.83-.556zM1.11.421a2.511 2.511 0 0 0-.689.69l.831.556c.11-.164.251-.305.415-.415L1.11.422zM16 2.5c0-.166-.016-.33-.048-.487l-.98.194c.018.094.028.192.028.293v.458h1V2.5zM.048 2.013A2.51 2.51 0 0 0 0 2.5v.458h1V2.5c0-.1.01-.199.029-.293l-.981-.194zM0 3.875v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zM0 5.708v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zM0 7.542v.916h1v-.916H0zm15 .916h1v-.916h-1v.916zM0 9.375v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zm-16 .916v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zm-16 .917v.458c0 .166.016.33.048.487l.98-.194A1.51 1.51 0 0 1 1 13.5v-.458H0zm16 .458v-.458h-1v.458c0 .1-.01.199-.029.293l.981.194c.032-.158.048-.32.048-.487zM.421 14.89c.183.272.417.506.69.689l.556-.831a1.51 1.51 0 0 1-.415-.415l-.83.556zm14.469.689c.272-.183.506-.417.689-.69l-.831-.556c-.11.164-.251.305-.415.415l.556.83zm-12.877.373c.158.032.32.048.487.048h.458v-1H2.5c-.1 0-.199-.01-.293-.029l-.194.981zM13.5 16c.166 0 .33-.016.487-.048l-.194-.98A1.51 1.51 0 0 1 13.5 15h-.458v1h.458zm-9.625 0h.917v-1h-.917v1zm1.833 0h.917v-1h-.917v1zm1.834 0h.916v-1h-.916v1zm1.833 0h.917v-1h-.917v1zm1.833 0h.917v-1h-.917v1zM4.5 7.5a.5.5 0 0 0 0 1h7a.5.5 0 0 0 0-1h-7z\" />\r\n              </svg>\r\n            )}{\" \"}\r\n          </Typography>\r\n        </div>\r\n        <div className=\"col-4\">\r\n          {\" \"}\r\n          <Typography variant=\"subtitle1\" gutterBottom className=\"mt-1\">\r\n            {cartItem.length != 0 ? cartItem[0].qty : item.qty}\r\n          </Typography>\r\n        </div>\r\n\r\n        <div className=\"col-4\">\r\n          <Typography\r\n            variant=\"h6\"\r\n            gutterBottom\r\n            onClick={(e) =>\r\n              handelIncrement(\r\n                e,\r\n                cartItem.length != 0 ? cartItem[0].qty : item.qty,\r\n                item.id,\r\n                item.price\r\n              )\r\n            }\r\n            style={{ cursor: \"pointer\" }}\r\n          >\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              width=\"16\"\r\n              height=\"16\"\r\n              fill=\"currentColor\"\r\n              className=\"bi bi-plus-square-dotted \"\r\n              viewBox=\"0 0 16 16\"\r\n            >\r\n              <path d=\"M2.5 0c-.166 0-.33.016-.487.048l.194.98A1.51 1.51 0 0 1 2.5 1h.458V0H2.5zm2.292 0h-.917v1h.917V0zm1.833 0h-.917v1h.917V0zm1.833 0h-.916v1h.916V0zm1.834 0h-.917v1h.917V0zm1.833 0h-.917v1h.917V0zM13.5 0h-.458v1h.458c.1 0 .199.01.293.029l.194-.981A2.51 2.51 0 0 0 13.5 0zm2.079 1.11a2.511 2.511 0 0 0-.69-.689l-.556.831c.164.11.305.251.415.415l.83-.556zM1.11.421a2.511 2.511 0 0 0-.689.69l.831.556c.11-.164.251-.305.415-.415L1.11.422zM16 2.5c0-.166-.016-.33-.048-.487l-.98.194c.018.094.028.192.028.293v.458h1V2.5zM.048 2.013A2.51 2.51 0 0 0 0 2.5v.458h1V2.5c0-.1.01-.199.029-.293l-.981-.194zM0 3.875v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zM0 5.708v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zM0 7.542v.916h1v-.916H0zm15 .916h1v-.916h-1v.916zM0 9.375v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zm-16 .916v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zm-16 .917v.458c0 .166.016.33.048.487l.98-.194A1.51 1.51 0 0 1 1 13.5v-.458H0zm16 .458v-.458h-1v.458c0 .1-.01.199-.029.293l.981.194c.032-.158.048-.32.048-.487zM.421 14.89c.183.272.417.506.69.689l.556-.831a1.51 1.51 0 0 1-.415-.415l-.83.556zm14.469.689c.272-.183.506-.417.689-.69l-.831-.556c-.11.164-.251.305-.415.415l.556.83zm-12.877.373c.158.032.32.048.487.048h.458v-1H2.5c-.1 0-.199-.01-.293-.029l-.194.981zM13.5 16c.166 0 .33-.016.487-.048l-.194-.98A1.51 1.51 0 0 1 13.5 15h-.458v1h.458zm-9.625 0h.917v-1h-.917v1zm1.833 0h.917v-1h-.917v1zm1.834-1v1h.916v-1h-.916zm1.833 1h.917v-1h-.917v1zm1.833 0h.917v-1h-.917v1zM8.5 4.5a.5.5 0 0 0-1 0v3h-3a.5.5 0 0 0 0 1h3v3a.5.5 0 0 0 1 0v-3h3a.5.5 0 0 0 0-1h-3v-3z\" />\r\n            </svg>\r\n          </Typography>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Counter;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\pages\\ForgotPassword.js",[],"D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Areas\\Area.js",["616"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport AsyncSelect from \"react-select/async\";\r\nimport CustomAlert from \"../CustomAlert\";\r\n\r\nconst Area = (props) => {\r\n  // validation start\r\n  const initialValues = {\r\n    areaName: \"\",\r\n    city: \"\",\r\n  };\r\n  const validationSchema = () => {\r\n    return Yup.object().shape({\r\n      areaName: Yup.string().required(\"Area Name is required\"),\r\n      city: Yup.string().required(\"Please select a Category\"),\r\n    });\r\n  };\r\n  // validation end\r\n\r\n  // for localization\r\n  const { t } = useTranslation();\r\n  // insert start\r\n  const [modalCentered, setModalCentered] = useState(false);\r\n  const [alert, setAlert] = useState({\r\n    open: false,\r\n    severity: \"success\",\r\n    message: \"\",\r\n  });\r\n  const setAlerts = (open, severity, message) => {\r\n    setAlert({\r\n      open: open,\r\n      severity: severity,\r\n      message: message,\r\n    });\r\n  };\r\n  const save = (data) => {\r\n    const checkCate = fetchData.every((item) => {\r\n      if (item.areaName === data.areaName && item.city_id === data.city) {\r\n        return false;\r\n      } else {\r\n        return true;\r\n      }\r\n    });\r\n\r\n    if (checkCate) {\r\n      const formData = new FormData();\r\n      formData.append(\"city_id\", data.city);\r\n      formData.append(\"areaName\", data.areaName);\r\n      axios.post(\"/api/InsertAreas\", formData).then((res) => {\r\n        if (res.data.status === 200) {\r\n          setCheck(!check);\r\n          setModalCentered(false);\r\n          setAlerts(true, \"success\", res.data.message);\r\n        }\r\n      });\r\n    } else {\r\n      setAlerts(\r\n        true,\r\n        \"warning\",\r\n        \"The name already exists, please try another name.\"\r\n      );\r\n    }\r\n  };\r\n  // insert end\r\n  // edit Attribute start\r\n  const [editmodalCentered, setEditModalCentered] = useState(false);\r\n  const [edit, setEdit] = useState([]);\r\n\r\n  // fetch\r\n  const fetch = (e, id) => {\r\n    e.preventDefault();\r\n\r\n    axios.get(`/api/EditAreas/${id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        const data = res.data.item;\r\n        setEdit(data);\r\n        setSelectedValue({ id: data.city_id, cityName: data.cityName });\r\n        setEditModalCentered(true);\r\n      } else if (res.data.status === 404) {\r\n        setAlerts(true, \"error\", res.data.message);\r\n      }\r\n    });\r\n  };\r\n  // update\r\n  const initialValuesEdit = {\r\n    areaName: edit.areaName,\r\n    city: edit.city_id,\r\n    id: edit.id,\r\n  };\r\n  const update = (data) => {\r\n    const formData = new FormData();\r\n\r\n    formData.append(\"city_id\", selectedValue.id);\r\n    formData.append(\"areaName\", data.areaName);\r\n    formData.append(\"id\", data.id);\r\n\r\n    axios.post(\"/api/UpdateAreas\", formData).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setCheck(!check);\r\n        setSelectedValue(null);\r\n\r\n        setEditModalCentered(false);\r\n        setAlerts(true, \"success\", res.data.message);\r\n\r\n        //  this.props.history.push(\"/\")\r\n      } else if (res.data.status === 404) {\r\n        setAlerts(true, \"error\", res.data.message);\r\n      }\r\n    });\r\n  };\r\n  // edit end\r\n\r\n  // delete Start\r\n  const deleteIngredient = (e, id) => {\r\n    e.preventDefault();\r\n    swal({\r\n      title: \"Are you sure?\",\r\n      text: \"Once deleted, you will not be able to recover this imaginary file!\",\r\n      icon: \"warning\",\r\n      buttons: [t(\"cancel\"), t(\"confirm\")],\r\n      dangerMode: true,\r\n    }).then((willDelete) => {\r\n      if (willDelete) {\r\n        axios.delete(`/api/DeleteAreas/${id}`).then((res) => {\r\n          if (res.data.status === 200) {\r\n            setAlerts(true, \"success\", res.data.message);\r\n\r\n            setCheck(!check);\r\n          } else if (res.data.status === 404) {\r\n            setAlerts(true, \"error\", res.data.message);\r\n          }\r\n        });\r\n      } else {\r\n        setAlerts(true, \"info\", \"Your Data is safe now!\");\r\n      }\r\n    });\r\n  };\r\n  // delete End\r\n\r\n  //retriving data using laravel API for show\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [check, setCheck] = useState(true);\r\n  useEffect(() => {\r\n    axios.get(`/api/getAreasCompany`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setFetchData(res.data.fetchData);\r\n      }\r\n      setLoading(false);\r\n    });\r\n  }, [check]);\r\n\r\n  const [inputValue, setValue] = useState(\"\");\r\n  const [selectedValue, setSelectedValue] = useState(null);\r\n\r\n  // handle input change event\r\n  const handleInputChange = (value) => {\r\n    setValue(\"\");\r\n    setValue(value);\r\n  };\r\n\r\n  // handle selection\r\n  const handleChange = (value) => {\r\n    setSelectedValue(value);\r\n  };\r\n  const loadOptions = (inputValue) => {\r\n    return axios\r\n      .get(`/api/GetCities`, {\r\n        header: {\r\n          \"Content-Type\": \"application/json\",\r\n          Accept: \"application/json\",\r\n          Authorization: \"Bearer \" + localStorage.getItem(\"token\"),\r\n        },\r\n        params: {\r\n          id: inputValue,\r\n        },\r\n      })\r\n      .then((res) => res.data)\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  var viewProducts_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"spinner-border text-primary \" role=\"status\">\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewProducts_HTMLTABLE = fetchData.map((item, i) => {\r\n      return (\r\n        <tr key={item.id}>\r\n          <td>{i + 1}</td>\r\n\r\n          <td> {item.cityName}</td>\r\n          <td> {item.areaName}</td>\r\n          <td>\r\n            {/* <Link to={`add-option/${item.id}`} className=\"btn btn-outline-danger btn-sm\">{t('options')}</Link>&nbsp;&nbsp;&nbsp; */}\r\n            <button\r\n              type=\"button\"\r\n              onClick={(e) => fetch(e, item.id)}\r\n              className=\"btn btn-outline-danger btn-sm\"\r\n            >\r\n              {t(\"edit\")}\r\n            </button>\r\n            &nbsp;&nbsp;&nbsp;\r\n            <button\r\n              type=\"button\"\r\n              onClick={(e) => deleteIngredient(e, item.id)}\r\n              className=\"btn btn-outline-warning btn-sm\"\r\n            >\r\n              {t(\"delete\")}\r\n            </button>\r\n          </td>\r\n        </tr>\r\n      );\r\n    });\r\n  }\r\n  return (\r\n    <Fragment>\r\n      {alert.open ? (\r\n        <CustomAlert\r\n          open={alert.open}\r\n          severity={alert.severity}\r\n          message={alert.message}\r\n          setAlert={setAlert}\r\n        />\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      {/* insert */}\r\n      <Modal className=\"fade\" show={modalCentered}>\r\n        <Modal.Header>\r\n          <Modal.Title>{t(\"add\")}</Modal.Title>\r\n          <Button\r\n            onClick={() => setModalCentered(false)}\r\n            variant=\"\"\r\n            className=\"close\"\r\n          >\r\n            <span>&times;</span>\r\n          </Button>\r\n        </Modal.Header>\r\n        <Formik\r\n          initialValues={initialValues}\r\n          validationSchema={validationSchema}\r\n          onSubmit={save}\r\n        >\r\n          {({ errors, status, setFieldValue, setFieldTouched, touched }) => (\r\n            <Form>\r\n              <Modal.Body>\r\n                <div className=\"form-group\">\r\n                  <label>\r\n                    <strong>{t(\"city\")}</strong>\r\n                  </label>\r\n\r\n                  <AsyncSelect\r\n                    cacheOptions\r\n                    defaultOptions\r\n                    // value={selectedValue}\r\n                    getOptionLabel={(e) => e.cityName}\r\n                    getOptionValue={(e) => e.id}\r\n                    loadOptions={loadOptions}\r\n                    onInputChange={handleInputChange}\r\n                    // onChange={handleChange}\r\n                    onChange={(getOptionValue) => {\r\n                      setFieldValue(\"city\", getOptionValue.id);\r\n                    }}\r\n                  />\r\n                  {errors.city ? (\r\n                    <small\r\n                      className=\"invalid\"\r\n                      style={{ color: \"red\", marginTop: \".5rem\" }}\r\n                    >\r\n                      {errors.city}\r\n                    </small>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label>\r\n                    <strong>{t(\"name_area\")}</strong>\r\n                  </label>\r\n\r\n                  <Field\r\n                    name=\"areaName\"\r\n                    type=\"text\"\r\n                    className={\r\n                      \"form-control\" +\r\n                      (errors.areaName && touched.areaName ? \" is-invalid\" : \"\")\r\n                    }\r\n                    placeholder=\"Name....\"\r\n                  />\r\n                  <ErrorMessage\r\n                    name=\"areaName\"\r\n                    component=\"div\"\r\n                    className=\"invalid-feedback\"\r\n                  />\r\n                </div>\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                <Button\r\n                  onClick={() => setModalCentered(false)}\r\n                  variant=\"danger light\"\r\n                >\r\n                  {t(\"close\")}\r\n                </Button>\r\n                <Button variant=\"primary\" type=\"submit\">\r\n                  {t(\"save\")}{\" \"}\r\n                </Button>\r\n              </Modal.Footer>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </Modal>\r\n      {/* Edit Modal */}\r\n      <Modal className=\"fade\" show={editmodalCentered}>\r\n        <Modal.Header>\r\n          <Modal.Title>{t(\"edit\")} </Modal.Title>\r\n          <Button\r\n            onClick={() => setEditModalCentered(false)}\r\n            variant=\"\"\r\n            className=\"close\"\r\n          >\r\n            <span>&times;</span>\r\n          </Button>\r\n        </Modal.Header>\r\n        <Formik\r\n          initialValues={initialValuesEdit}\r\n          validationSchema={validationSchema}\r\n          onSubmit={update}\r\n        >\r\n          {({ errors, status, touched }) => (\r\n            <Form>\r\n              <Modal.Body>\r\n                <div className=\"form-group\">\r\n                  <label>\r\n                    <strong>{t(\"city\")}</strong>\r\n                  </label>\r\n                  <AsyncSelect\r\n                    cacheOptions\r\n                    defaultOptions\r\n                    value={selectedValue}\r\n                    getOptionLabel={(e) => e.cityName}\r\n                    getOptionValue={(e) => e.id}\r\n                    loadOptions={loadOptions}\r\n                    onInputChange={handleInputChange}\r\n                    onChange={handleChange}\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label>\r\n                    <strong>{t(\"name_area\")}</strong>\r\n                  </label>\r\n                  <Field\r\n                    name=\"areaName\"\r\n                    type=\"text\"\r\n                    className={\r\n                      \"form-control\" +\r\n                      (errors.areaName && touched.areaName ? \" is-invalid\" : \"\")\r\n                    }\r\n                    placeholder=\"Name....\"\r\n                  />\r\n                  <ErrorMessage\r\n                    name=\"areaName\"\r\n                    component=\"div\"\r\n                    className=\"invalid-feedback\"\r\n                  />\r\n                </div>\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                <Button\r\n                  onClick={() => setEditModalCentered(false)}\r\n                  variant=\"danger light\"\r\n                >\r\n                  {t(\"close\")}\r\n                </Button>\r\n                <Button variant=\"primary\" type=\"submit\">\r\n                  {t(\"update\")}{\" \"}\r\n                </Button>\r\n              </Modal.Footer>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </Modal>\r\n      <div className=\"row\">\r\n        <div className=\"col-xl-12 col-xxl-12 col-lg-12 col-sm-12\">\r\n          <div className=\"card\">\r\n            <div className=\"card-header border-0\">\r\n              <div>\r\n                <h4 className=\"card-title mb-2\">{t(\"areas\")}</h4>\r\n              </div>\r\n              <div className=\"dropdown\">\r\n                <Button\r\n                  variant=\"primary\"\r\n                  type=\"button\"\r\n                  className=\"mb-2 mr-2\"\r\n                  onClick={() => setModalCentered(true)}\r\n                >\r\n                  {t(\"add\")}\r\n                </Button>\r\n              </div>\r\n            </div>\r\n            <div className=\"card-body p-0\">\r\n              <div className=\"table-responsive \">\r\n                <table className=\"table text-center\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>{t(\"number\")}</th>\r\n                      <th>{t(\"cityName\")}</th>\r\n                      <th>{t(\"areaName\")}</th>\r\n                      <th>{t(\"actions\")}</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>{viewProducts_HTMLTABLE}</tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\nexport default Area;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Design\\Templates\\Dark\\FilterSelection.js",["617","618","619"],"import React, { useState, useEffect } from \"react\";\r\nimport Backdrop from \"@mui/material/Backdrop\";\r\nimport Select from \"react-select\";\r\nimport axios from \"axios\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Link } from \"react-router-dom\";\r\nimport AsyncSelect from \"react-select/async\";\r\n\r\nconst FilterSelection = () => {\r\n  const [areaLocation, setAreaLocation] = useState([]);\r\n  const [branches, setBranches] = useState([]);\r\n  const history = useHistory();\r\n  const { t } = useTranslation();\r\n\r\n  // useEffect(() => {\r\n  //   axios.get(`/api/GetAreas`).then((res) => {\r\n  //     if (res.data.status === 200) {\r\n  //       setAreaLocation(res.data.fetchData);\r\n  //       // console.log(res.data.fetchData);\r\n  //     }\r\n  //   });\r\n  // }, []);\r\n\r\n  const handleSelect = (e) => {\r\n    axios.get(`/api/getServiceArea/${e.value}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setBranches(res.data.fetchData);\r\n        // history.push(`/dark-template/${btoa(res.data.fetchData[0]?.BranchID)}`);\r\n      }\r\n    });\r\n  };\r\n\r\n  const [inputValue, setValue] = useState(\"\");\r\n  const [selectedValue, setSelectedValue] = useState(null);\r\n\r\n  // handle input change event\r\n  const handleInputChange = (value) => {\r\n    setValue(\"\");\r\n    setValue(value);\r\n  };\r\n\r\n  // handle selection\r\n  const handleChange = (value) => {\r\n    setSelectedValue(value);\r\n    axios.get(`/api/GetAreas/${value.id}`).then((res) => {\r\n      if (res.data.status === 200) {\r\n        setAreaLocation(res.data.fetchData);\r\n        // console.log(res.data.fetchData);\r\n      }\r\n    });\r\n  };\r\n  const loadOptions = (inputValue) => {\r\n    return axios\r\n      .get(`/api/GetCities`, {\r\n        header: {\r\n          \"Content-Type\": \"application/json\",\r\n          Accept: \"application/json\",\r\n          Authorization: \"Bearer \" + localStorage.getItem(\"token\"),\r\n        },\r\n        params: {\r\n          id: inputValue,\r\n        },\r\n      })\r\n      .then((res) => res.data)\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n  return (\r\n    <div>\r\n      <Backdrop sx={{ color: \"#22252a\" }} open={true}>\r\n        <div style={{ width: \"50%\" }}>\r\n          <p>Please Select You Area!</p>\r\n          <div className=\"form-group\">\r\n            <label>\r\n              <strong>{t(\"city\")}</strong>\r\n            </label>\r\n            <AsyncSelect\r\n              cacheOptions\r\n              defaultOptions\r\n              value={selectedValue}\r\n              getOptionLabel={(e) => e.cityName}\r\n              getOptionValue={(e) => e.id}\r\n              loadOptions={loadOptions}\r\n              onInputChange={handleInputChange}\r\n              onChange={handleChange}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label>\r\n              <strong>{t(\"location\")}</strong>\r\n            </label>\r\n            <Select\r\n              options={areaLocation.map((o, i) => {\r\n                return { value: o.id, label: o.areaName };\r\n              })}\r\n              onChange={handleSelect}\r\n              className=\"basic-multi-select\"\r\n              classNamePrefix=\"select\"\r\n            />\r\n          </div>\r\n          <div>\r\n            {branches?.map((branch) => {\r\n              return (\r\n                <p key={branch.BranchID} style={{ color: \"#fff\" }}>\r\n                  <Link\r\n                    to={{\r\n                      pathname: `/dark-template/${btoa(branch?.BranchID)}`,\r\n                      state: {\r\n                        deliveryFees: branch.deliveryFees,\r\n                      },\r\n                    }}\r\n                  >\r\n                    <strong style={{ color: \"#fff\" }}>\r\n                      {\" \"}\r\n                      {branch.BrancheName}\r\n                    </strong>\r\n                  </Link>\r\n                </p>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      </Backdrop>\r\n    </div>\r\n  );\r\n};\r\nexport default FilterSelection;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Categories\\Shared.js",["620"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { CBreadcrumb } from \"@coreui/react\";\r\n\r\nconst Shared = (props) => {\r\n  // for localization\r\n  const { t } = useTranslation();\r\n  // ID\r\n  const id = props.history.location.state.id;\r\n  const sub_id = props.history.location.state.sub_id;\r\n\r\n  const [fetchData, setFetchData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    axios.get(`/api/GetSharedCatBranches/${sub_id}`).then((res) => {\r\n      if (res.status === 200) {\r\n        setFetchData(res.data);\r\n        setLoading(false);\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  var viewProducts_HTMLTABLE = \"\";\r\n  if (loading) {\r\n    return (\r\n      <div className=\"spinner-border text-primary \" role=\"status\">\r\n        <span className=\"sr-only\">{t(\"loading\")}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    viewProducts_HTMLTABLE = (\r\n      <div className=\"row\">\r\n        <div className=\"col-xl-12 col-xxl-12 col-lg-12 col-sm-12\">\r\n          <div className=\"card\">\r\n            <div className=\"card-body p-0\">\r\n              <div className=\"table-responsive \">\r\n                <table className=\"table  \">\r\n                  <thead>\r\n                    <tr className=\"card-title\">\r\n                      <th>{t(\"branch_name\")}</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {fetchData.map((item, i) => {\r\n                      return (\r\n                        <tr key={item.id}>\r\n                          <td>{item.BrancheName}</td>\r\n                        </tr>\r\n                      );\r\n                    })}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <Fragment>\r\n      <CBreadcrumb style={{ \"--cui-breadcrumb-divider\": \"'>'\" }}>\r\n        <Link\r\n          to={{\r\n            pathname: `/branches/show`,\r\n            state: { id: id },\r\n          }}\r\n          className=\"font-weight-bold\"\r\n        >\r\n          {t(\"back_to_categories\")}\r\n        </Link>\r\n      </CBreadcrumb>\r\n\r\n      {viewProducts_HTMLTABLE}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Shared;\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\CustomAlert.js",["621"],"import * as React from \"react\";\r\nimport Stack from \"@mui/material/Stack\";\r\nimport Snackbar from \"@mui/material/Snackbar\";\r\nimport MuiAlert from \"@mui/material/Alert\";\r\n\r\nconst Alert = React.forwardRef(function Alert(props, ref) {\r\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport default function CustomAlert(props) {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  // const handleClick = () => {\r\n  //   setOpen(true);\r\n  // };\r\n  React.useEffect(() => {\r\n    setOpen(props.open);\r\n  }, []);\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n\r\n    setOpen(false);\r\n    props.setAlert({\r\n      open: false,\r\n      severity: \"success\",\r\n      message: \"\",\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Stack spacing={2} sx={{ width: \"100%\" }}>\r\n      {/* <Button variant=\"outlined\" onClick={handleClick}>\r\n        Open success snackbar\r\n      </Button> */}\r\n      <Snackbar\r\n        open={open}\r\n        autoHideDuration={2000}\r\n        onClose={handleClose}\r\n        anchorOrigin={{ vertical: \"bottom\", horizontal: \"right\" }}\r\n      >\r\n        <Alert\r\n          onClose={handleClose}\r\n          severity={props.severity}\r\n          sx={{ width: \"100%\" }}\r\n        >\r\n          {props.message}\r\n        </Alert>\r\n      </Snackbar>\r\n      {/* <Alert severity=\"error\">This is an error message!</Alert>\r\n      <Alert severity=\"warning\">This is a warning message!</Alert>\r\n      <Alert severity=\"info\">This is an information message!</Alert>\r\n      <Alert severity=\"success\">This is a success message!</Alert> */}\r\n    </Stack>\r\n  );\r\n}\r\n","D:\\fineDine\\product vaiantion version\\Hellomenu_Clientside\\src\\jsx\\components\\Variants\\NewGrid.js",["622","623","624","625","626","627","628","629","630","631","632","633","634","635","636","637","638","639","640","641","642","643","644","645","646","647","648","649","650","651","652","653","654","655","656","657"],{"ruleId":"658","replacedBy":"659"},{"ruleId":"660","replacedBy":"661"},{"ruleId":"662","severity":1,"message":"663","line":49,"column":19,"nodeType":"664","endLine":49,"endColumn":49},{"ruleId":"665","severity":1,"message":"666","line":63,"column":21,"nodeType":"667","messageId":"668","endLine":63,"endColumn":23},{"ruleId":"665","severity":1,"message":"666","line":70,"column":13,"nodeType":"667","messageId":"668","endLine":70,"endColumn":15},{"ruleId":"665","severity":1,"message":"666","line":78,"column":43,"nodeType":"667","messageId":"668","endLine":78,"endColumn":45},{"ruleId":"665","severity":1,"message":"666","line":106,"column":46,"nodeType":"667","messageId":"668","endLine":106,"endColumn":48},{"ruleId":"665","severity":1,"message":"669","line":116,"column":24,"nodeType":"667","messageId":"668","endLine":116,"endColumn":26},{"ruleId":"670","severity":1,"message":"671","line":120,"column":38,"nodeType":"672","messageId":"673","endLine":120,"endColumn":40},{"ruleId":"674","severity":1,"message":"675","line":154,"column":5,"nodeType":"676","messageId":"668","endLine":154,"endColumn":15},{"ruleId":"677","severity":1,"message":"678","line":156,"column":9,"nodeType":"679","endLine":165,"endColumn":11},{"ruleId":"665","severity":1,"message":"669","line":248,"column":41,"nodeType":"667","messageId":"668","endLine":248,"endColumn":43},{"ruleId":"680","severity":1,"message":"681","line":334,"column":72,"nodeType":"667","messageId":"682","endLine":334,"endColumn":73},{"ruleId":"665","severity":1,"message":"666","line":364,"column":47,"nodeType":"667","messageId":"668","endLine":364,"endColumn":49},{"ruleId":"662","severity":1,"message":"663","line":105,"column":19,"nodeType":"664","endLine":105,"endColumn":58},{"ruleId":"665","severity":1,"message":"666","line":122,"column":21,"nodeType":"667","messageId":"668","endLine":122,"endColumn":23},{"ruleId":"665","severity":1,"message":"666","line":130,"column":13,"nodeType":"667","messageId":"668","endLine":130,"endColumn":15},{"ruleId":"665","severity":1,"message":"666","line":138,"column":43,"nodeType":"667","messageId":"668","endLine":138,"endColumn":45},{"ruleId":"670","severity":1,"message":"671","line":164,"column":29,"nodeType":"672","messageId":"673","endLine":164,"endColumn":31},{"ruleId":"670","severity":1,"message":"671","line":165,"column":38,"nodeType":"672","messageId":"673","endLine":165,"endColumn":40},{"ruleId":"665","severity":1,"message":"666","line":185,"column":46,"nodeType":"667","messageId":"668","endLine":185,"endColumn":48},{"ruleId":"665","severity":1,"message":"669","line":195,"column":24,"nodeType":"667","messageId":"668","endLine":195,"endColumn":26},{"ruleId":"670","severity":1,"message":"671","line":199,"column":38,"nodeType":"672","messageId":"673","endLine":199,"endColumn":40},{"ruleId":"665","severity":1,"message":"669","line":231,"column":60,"nodeType":"667","messageId":"668","endLine":231,"endColumn":62},{"ruleId":"683","severity":1,"message":"684","line":235,"column":16,"nodeType":"685","messageId":"686","endLine":235,"endColumn":23},{"ruleId":"665","severity":1,"message":"669","line":258,"column":32,"nodeType":"667","messageId":"668","endLine":258,"endColumn":34},{"ruleId":"665","severity":1,"message":"666","line":433,"column":43,"nodeType":"667","messageId":"668","endLine":433,"endColumn":45},{"ruleId":"665","severity":1,"message":"666","line":466,"column":39,"nodeType":"667","messageId":"668","endLine":466,"endColumn":41},{"ruleId":"665","severity":1,"message":"666","line":535,"column":34,"nodeType":"667","messageId":"668","endLine":535,"endColumn":36},{"ruleId":"680","severity":1,"message":"681","line":560,"column":72,"nodeType":"667","messageId":"682","endLine":560,"endColumn":73},{"ruleId":"680","severity":1,"message":"681","line":566,"column":71,"nodeType":"667","messageId":"682","endLine":566,"endColumn":72},{"ruleId":"665","severity":1,"message":"666","line":575,"column":36,"nodeType":"667","messageId":"668","endLine":575,"endColumn":38},{"ruleId":"665","severity":1,"message":"666","line":609,"column":49,"nodeType":"667","messageId":"668","endLine":609,"endColumn":51},{"ruleId":"662","severity":1,"message":"687","line":74,"column":6,"nodeType":"688","endLine":74,"endColumn":8,"suggestions":"689"},{"ruleId":"662","severity":1,"message":"687","line":82,"column":6,"nodeType":"688","endLine":82,"endColumn":8,"suggestions":"690"},{"ruleId":"665","severity":1,"message":"666","line":190,"column":24,"nodeType":"667","messageId":"668","endLine":190,"endColumn":26},{"ruleId":"665","severity":1,"message":"666","line":200,"column":49,"nodeType":"667","messageId":"668","endLine":200,"endColumn":51},{"ruleId":"665","severity":1,"message":"666","line":202,"column":51,"nodeType":"667","messageId":"668","endLine":202,"endColumn":53},{"ruleId":"665","severity":1,"message":"666","line":204,"column":51,"nodeType":"667","messageId":"668","endLine":204,"endColumn":53},{"ruleId":"665","severity":1,"message":"666","line":206,"column":51,"nodeType":"667","messageId":"668","endLine":206,"endColumn":53},{"ruleId":"665","severity":1,"message":"666","line":207,"column":51,"nodeType":"667","messageId":"668","endLine":207,"endColumn":53},{"ruleId":"665","severity":1,"message":"666","line":209,"column":51,"nodeType":"667","messageId":"668","endLine":209,"endColumn":53},{"ruleId":"665","severity":1,"message":"666","line":216,"column":49,"nodeType":"667","messageId":"668","endLine":216,"endColumn":51},{"ruleId":"665","severity":1,"message":"666","line":218,"column":51,"nodeType":"667","messageId":"668","endLine":218,"endColumn":53},{"ruleId":"665","severity":1,"message":"666","line":220,"column":51,"nodeType":"667","messageId":"668","endLine":220,"endColumn":53},{"ruleId":"665","severity":1,"message":"666","line":222,"column":51,"nodeType":"667","messageId":"668","endLine":222,"endColumn":53},{"ruleId":"665","severity":1,"message":"666","line":223,"column":51,"nodeType":"667","messageId":"668","endLine":223,"endColumn":53},{"ruleId":"665","severity":1,"message":"666","line":225,"column":51,"nodeType":"667","messageId":"668","endLine":225,"endColumn":53},{"ruleId":"665","severity":1,"message":"666","line":232,"column":51,"nodeType":"667","messageId":"668","endLine":232,"endColumn":53},{"ruleId":"665","severity":1,"message":"666","line":234,"column":53,"nodeType":"667","messageId":"668","endLine":234,"endColumn":55},{"ruleId":"665","severity":1,"message":"666","line":236,"column":53,"nodeType":"667","messageId":"668","endLine":236,"endColumn":55},{"ruleId":"665","severity":1,"message":"666","line":238,"column":53,"nodeType":"667","messageId":"668","endLine":238,"endColumn":55},{"ruleId":"665","severity":1,"message":"666","line":239,"column":53,"nodeType":"667","messageId":"668","endLine":239,"endColumn":55},{"ruleId":"665","severity":1,"message":"666","line":241,"column":53,"nodeType":"667","messageId":"668","endLine":241,"endColumn":55},{"ruleId":"691","severity":1,"message":"692","line":289,"column":19,"nodeType":"679","endLine":301,"endColumn":21},{"ruleId":"683","severity":1,"message":"693","line":8,"column":8,"nodeType":"685","messageId":"686","endLine":8,"endColumn":17},{"ruleId":"683","severity":1,"message":"694","line":18,"column":8,"nodeType":"685","messageId":"686","endLine":18,"endColumn":29},{"ruleId":"683","severity":1,"message":"695","line":20,"column":5,"nodeType":"685","messageId":"686","endLine":20,"endColumn":9},{"ruleId":"683","severity":1,"message":"696","line":32,"column":10,"nodeType":"685","messageId":"686","endLine":32,"endColumn":18},{"ruleId":"683","severity":1,"message":"697","line":32,"column":20,"nodeType":"685","messageId":"686","endLine":32,"endColumn":31},{"ruleId":"662","severity":1,"message":"687","line":58,"column":6,"nodeType":"688","endLine":58,"endColumn":8,"suggestions":"698"},{"ruleId":"677","severity":1,"message":"678","line":198,"column":17,"nodeType":"679","endLine":207,"endColumn":19},{"ruleId":"665","severity":1,"message":"666","line":273,"column":38,"nodeType":"667","messageId":"668","endLine":273,"endColumn":40},{"ruleId":"677","severity":1,"message":"678","line":293,"column":23,"nodeType":"679","endLine":300,"endColumn":25},{"ruleId":"665","severity":1,"message":"666","line":305,"column":42,"nodeType":"667","messageId":"668","endLine":305,"endColumn":44},{"ruleId":"683","severity":1,"message":"699","line":25,"column":8,"nodeType":"685","messageId":"686","endLine":25,"endColumn":21},{"ruleId":"683","severity":1,"message":"700","line":26,"column":10,"nodeType":"685","messageId":"686","endLine":26,"endColumn":16},{"ruleId":"665","severity":1,"message":"666","line":103,"column":14,"nodeType":"667","messageId":"668","endLine":103,"endColumn":16},{"ruleId":"665","severity":1,"message":"666","line":110,"column":14,"nodeType":"667","messageId":"668","endLine":110,"endColumn":16},{"ruleId":"665","severity":1,"message":"666","line":121,"column":14,"nodeType":"667","messageId":"668","endLine":121,"endColumn":16},{"ruleId":"665","severity":1,"message":"666","line":134,"column":12,"nodeType":"667","messageId":"668","endLine":134,"endColumn":14},{"ruleId":"683","severity":1,"message":"684","line":139,"column":16,"nodeType":"685","messageId":"686","endLine":139,"endColumn":23},{"ruleId":"665","severity":1,"message":"666","line":308,"column":46,"nodeType":"667","messageId":"668","endLine":308,"endColumn":48},{"ruleId":"665","severity":1,"message":"666","line":317,"column":45,"nodeType":"667","messageId":"668","endLine":317,"endColumn":47},{"ruleId":"665","severity":1,"message":"666","line":324,"column":48,"nodeType":"667","messageId":"668","endLine":324,"endColumn":50},{"ruleId":"683","severity":1,"message":"701","line":7,"column":8,"nodeType":"685","messageId":"686","endLine":7,"endColumn":14},{"ruleId":"683","severity":1,"message":"702","line":25,"column":10,"nodeType":"685","messageId":"686","endLine":25,"endColumn":20},{"ruleId":"662","severity":1,"message":"687","line":66,"column":6,"nodeType":"688","endLine":66,"endColumn":8,"suggestions":"703"},{"ruleId":"665","severity":1,"message":"666","line":197,"column":64,"nodeType":"667","messageId":"668","endLine":197,"endColumn":66},{"ruleId":"665","severity":1,"message":"666","line":199,"column":68,"nodeType":"667","messageId":"668","endLine":199,"endColumn":70},{"ruleId":"665","severity":1,"message":"666","line":201,"column":68,"nodeType":"667","messageId":"668","endLine":201,"endColumn":70},{"ruleId":"665","severity":1,"message":"666","line":203,"column":68,"nodeType":"667","messageId":"668","endLine":203,"endColumn":70},{"ruleId":"665","severity":1,"message":"666","line":205,"column":68,"nodeType":"667","messageId":"668","endLine":205,"endColumn":70},{"ruleId":"665","severity":1,"message":"666","line":207,"column":68,"nodeType":"667","messageId":"668","endLine":207,"endColumn":70},{"ruleId":"683","severity":1,"message":"704","line":6,"column":8,"nodeType":"685","messageId":"686","endLine":6,"endColumn":14},{"ruleId":"683","severity":1,"message":"701","line":7,"column":8,"nodeType":"685","messageId":"686","endLine":7,"endColumn":14},{"ruleId":"683","severity":1,"message":"695","line":23,"column":5,"nodeType":"685","messageId":"686","endLine":23,"endColumn":9},{"ruleId":"662","severity":1,"message":"687","line":64,"column":6,"nodeType":"688","endLine":64,"endColumn":8,"suggestions":"705"},{"ruleId":"665","severity":1,"message":"666","line":286,"column":43,"nodeType":"667","messageId":"668","endLine":286,"endColumn":45},{"ruleId":"677","severity":1,"message":"678","line":306,"column":25,"nodeType":"679","endLine":313,"endColumn":27},{"ruleId":"665","severity":1,"message":"666","line":318,"column":47,"nodeType":"667","messageId":"668","endLine":318,"endColumn":49},{"ruleId":"683","severity":1,"message":"706","line":4,"column":8,"nodeType":"685","messageId":"686","endLine":4,"endColumn":17},{"ruleId":"670","severity":1,"message":"671","line":17,"column":21,"nodeType":"672","messageId":"673","endLine":17,"endColumn":23},{"ruleId":"665","severity":1,"message":"666","line":38,"column":20,"nodeType":"667","messageId":"668","endLine":38,"endColumn":22},{"ruleId":"665","severity":1,"message":"666","line":57,"column":18,"nodeType":"667","messageId":"668","endLine":57,"endColumn":20},{"ruleId":"665","severity":1,"message":"666","line":57,"column":41,"nodeType":"667","messageId":"668","endLine":57,"endColumn":43},{"ruleId":"665","severity":1,"message":"669","line":40,"column":21,"nodeType":"667","messageId":"668","endLine":40,"endColumn":23},{"ruleId":"665","severity":1,"message":"666","line":58,"column":45,"nodeType":"667","messageId":"668","endLine":58,"endColumn":47},{"ruleId":"670","severity":1,"message":"671","line":161,"column":30,"nodeType":"672","messageId":"673","endLine":161,"endColumn":32},{"ruleId":"683","severity":1,"message":"707","line":38,"column":10,"nodeType":"685","messageId":"686","endLine":38,"endColumn":18},{"ruleId":"662","severity":1,"message":"708","line":47,"column":6,"nodeType":"688","endLine":47,"endColumn":13,"suggestions":"709"},{"ruleId":"665","severity":1,"message":"669","line":138,"column":37,"nodeType":"667","messageId":"668","endLine":138,"endColumn":39},{"ruleId":"665","severity":1,"message":"669","line":139,"column":37,"nodeType":"667","messageId":"668","endLine":139,"endColumn":39},{"ruleId":"665","severity":1,"message":"669","line":50,"column":55,"nodeType":"667","messageId":"668","endLine":50,"endColumn":57},{"ruleId":"662","severity":1,"message":"708","line":136,"column":6,"nodeType":"688","endLine":136,"endColumn":13,"suggestions":"710"},{"ruleId":"683","severity":1,"message":"711","line":7,"column":10,"nodeType":"685","messageId":"686","endLine":7,"endColumn":21},{"ruleId":"683","severity":1,"message":"712","line":7,"column":23,"nodeType":"685","messageId":"686","endLine":7,"endColumn":38},{"ruleId":"665","severity":1,"message":"666","line":311,"column":57,"nodeType":"667","messageId":"668","endLine":311,"endColumn":59},{"ruleId":"665","severity":1,"message":"669","line":35,"column":30,"nodeType":"667","messageId":"668","endLine":35,"endColumn":32},{"ruleId":"683","severity":1,"message":"713","line":135,"column":9,"nodeType":"685","messageId":"686","endLine":135,"endColumn":18},{"ruleId":"662","severity":1,"message":"708","line":158,"column":6,"nodeType":"688","endLine":158,"endColumn":13,"suggestions":"714"},{"ruleId":"665","severity":1,"message":"666","line":170,"column":22,"nodeType":"667","messageId":"668","endLine":170,"endColumn":24},{"ruleId":"683","severity":1,"message":"715","line":201,"column":10,"nodeType":"685","messageId":"686","endLine":201,"endColumn":20},{"ruleId":"683","severity":1,"message":"716","line":202,"column":10,"nodeType":"685","messageId":"686","endLine":202,"endColumn":23},{"ruleId":"683","severity":1,"message":"717","line":211,"column":9,"nodeType":"685","messageId":"686","endLine":211,"endColumn":21},{"ruleId":"662","severity":1,"message":"718","line":87,"column":6,"nodeType":"688","endLine":87,"endColumn":15,"suggestions":"719"},{"ruleId":"683","severity":1,"message":"720","line":16,"column":17,"nodeType":"685","messageId":"686","endLine":16,"endColumn":20},{"ruleId":"683","severity":1,"message":"720","line":17,"column":17,"nodeType":"685","messageId":"686","endLine":17,"endColumn":20},{"ruleId":"683","severity":1,"message":"721","line":6,"column":16,"nodeType":"685","messageId":"686","endLine":6,"endColumn":26},{"ruleId":"683","severity":1,"message":"722","line":6,"column":28,"nodeType":"685","messageId":"686","endLine":6,"endColumn":41},{"ruleId":"683","severity":1,"message":"723","line":7,"column":10,"nodeType":"685","messageId":"686","endLine":7,"endColumn":17},{"ruleId":"683","severity":1,"message":"724","line":8,"column":10,"nodeType":"685","messageId":"686","endLine":8,"endColumn":21},{"ruleId":"683","severity":1,"message":"725","line":9,"column":13,"nodeType":"685","messageId":"686","endLine":9,"endColumn":16},{"ruleId":"683","severity":1,"message":"726","line":41,"column":9,"nodeType":"685","messageId":"686","endLine":41,"endColumn":20},{"ruleId":"662","severity":1,"message":"708","line":173,"column":6,"nodeType":"688","endLine":173,"endColumn":13,"suggestions":"727"},{"ruleId":"683","severity":1,"message":"728","line":25,"column":11,"nodeType":"685","messageId":"686","endLine":25,"endColumn":15},{"ruleId":"670","severity":1,"message":"671","line":71,"column":34,"nodeType":"672","messageId":"673","endLine":71,"endColumn":36},{"ruleId":"665","severity":1,"message":"669","line":199,"column":28,"nodeType":"667","messageId":"668","endLine":199,"endColumn":30},{"ruleId":"662","severity":1,"message":"708","line":215,"column":6,"nodeType":"688","endLine":215,"endColumn":13,"suggestions":"729"},{"ruleId":"662","severity":1,"message":"718","line":73,"column":6,"nodeType":"688","endLine":73,"endColumn":15,"suggestions":"730"},{"ruleId":"670","severity":1,"message":"671","line":82,"column":32,"nodeType":"672","messageId":"673","endLine":82,"endColumn":34},{"ruleId":"665","severity":1,"message":"669","line":153,"column":28,"nodeType":"667","messageId":"668","endLine":153,"endColumn":30},{"ruleId":"662","severity":1,"message":"687","line":158,"column":6,"nodeType":"688","endLine":158,"endColumn":13,"suggestions":"731"},{"ruleId":"665","severity":1,"message":"666","line":171,"column":19,"nodeType":"667","messageId":"668","endLine":171,"endColumn":21},{"ruleId":"670","severity":1,"message":"671","line":187,"column":19,"nodeType":"672","messageId":"673","endLine":187,"endColumn":21},{"ruleId":"665","severity":1,"message":"666","line":208,"column":49,"nodeType":"667","messageId":"668","endLine":208,"endColumn":51},{"ruleId":"683","severity":1,"message":"728","line":20,"column":11,"nodeType":"685","messageId":"686","endLine":20,"endColumn":15},{"ruleId":"683","severity":1,"message":"720","line":20,"column":17,"nodeType":"685","messageId":"686","endLine":20,"endColumn":20},{"ruleId":"665","severity":1,"message":"666","line":128,"column":19,"nodeType":"667","messageId":"668","endLine":128,"endColumn":21},{"ruleId":"662","severity":1,"message":"732","line":174,"column":6,"nodeType":"688","endLine":174,"endColumn":13,"suggestions":"733"},{"ruleId":"665","severity":1,"message":"666","line":179,"column":49,"nodeType":"667","messageId":"668","endLine":179,"endColumn":51},{"ruleId":"670","severity":1,"message":"671","line":197,"column":50,"nodeType":"672","messageId":"673","endLine":197,"endColumn":52},{"ruleId":"670","severity":1,"message":"671","line":200,"column":39,"nodeType":"672","messageId":"673","endLine":200,"endColumn":41},{"ruleId":"734","severity":1,"message":"735","line":120,"column":17,"nodeType":"679","endLine":125,"endColumn":18},{"ruleId":"736","severity":1,"message":"737","line":49,"column":53,"nodeType":"738","messageId":"739","endLine":49,"endColumn":54,"suggestions":"740"},{"ruleId":"662","severity":1,"message":"708","line":89,"column":6,"nodeType":"688","endLine":89,"endColumn":8,"suggestions":"741"},{"ruleId":"742","severity":1,"message":"743","line":103,"column":17,"nodeType":"744","messageId":"745","endLine":103,"endColumn":41},{"ruleId":"683","severity":1,"message":"746","line":41,"column":10,"nodeType":"685","messageId":"686","endLine":41,"endColumn":15},{"ruleId":"683","severity":1,"message":"717","line":45,"column":9,"nodeType":"685","messageId":"686","endLine":45,"endColumn":21},{"ruleId":"742","severity":1,"message":"743","line":451,"column":29,"nodeType":"744","messageId":"745","endLine":451,"endColumn":51},{"ruleId":"683","severity":1,"message":"728","line":39,"column":11,"nodeType":"685","messageId":"686","endLine":39,"endColumn":15},{"ruleId":"670","severity":1,"message":"671","line":120,"column":42,"nodeType":"672","messageId":"673","endLine":120,"endColumn":44},{"ruleId":"665","severity":1,"message":"666","line":121,"column":27,"nodeType":"667","messageId":"668","endLine":121,"endColumn":29},{"ruleId":"662","severity":1,"message":"687","line":134,"column":6,"nodeType":"688","endLine":134,"endColumn":13,"suggestions":"747"},{"ruleId":"665","severity":1,"message":"666","line":218,"column":30,"nodeType":"667","messageId":"668","endLine":218,"endColumn":32},{"ruleId":"665","severity":1,"message":"666","line":259,"column":45,"nodeType":"667","messageId":"668","endLine":259,"endColumn":47},{"ruleId":"665","severity":1,"message":"666","line":260,"column":44,"nodeType":"667","messageId":"668","endLine":260,"endColumn":46},{"ruleId":"665","severity":1,"message":"666","line":345,"column":44,"nodeType":"667","messageId":"668","endLine":345,"endColumn":46},{"ruleId":"665","severity":1,"message":"666","line":360,"column":55,"nodeType":"667","messageId":"668","endLine":360,"endColumn":57},{"ruleId":"665","severity":1,"message":"666","line":361,"column":54,"nodeType":"667","messageId":"668","endLine":361,"endColumn":56},{"ruleId":"683","severity":1,"message":"748","line":6,"column":8,"nodeType":"685","messageId":"686","endLine":6,"endColumn":12},{"ruleId":"683","severity":1,"message":"721","line":10,"column":16,"nodeType":"685","messageId":"686","endLine":10,"endColumn":26},{"ruleId":"670","severity":1,"message":"671","line":42,"column":42,"nodeType":"672","messageId":"673","endLine":42,"endColumn":44},{"ruleId":"665","severity":1,"message":"666","line":48,"column":32,"nodeType":"667","messageId":"668","endLine":48,"endColumn":34},{"ruleId":"670","severity":1,"message":"671","line":61,"column":34,"nodeType":"672","messageId":"673","endLine":61,"endColumn":36},{"ruleId":"665","severity":1,"message":"666","line":68,"column":19,"nodeType":"667","messageId":"668","endLine":68,"endColumn":21},{"ruleId":"665","severity":1,"message":"666","line":69,"column":19,"nodeType":"667","messageId":"668","endLine":69,"endColumn":21},{"ruleId":"665","severity":1,"message":"666","line":70,"column":19,"nodeType":"667","messageId":"668","endLine":70,"endColumn":21},{"ruleId":"665","severity":1,"message":"666","line":71,"column":19,"nodeType":"667","messageId":"668","endLine":71,"endColumn":21},{"ruleId":"665","severity":1,"message":"666","line":72,"column":19,"nodeType":"667","messageId":"668","endLine":72,"endColumn":21},{"ruleId":"662","severity":1,"message":"749","line":100,"column":6,"nodeType":"688","endLine":100,"endColumn":13,"suggestions":"750"},{"ruleId":"665","severity":1,"message":"666","line":102,"column":29,"nodeType":"667","messageId":"668","endLine":102,"endColumn":31},{"ruleId":"665","severity":1,"message":"669","line":104,"column":15,"nodeType":"667","messageId":"668","endLine":104,"endColumn":17},{"ruleId":"670","severity":1,"message":"671","line":120,"column":29,"nodeType":"672","messageId":"673","endLine":120,"endColumn":31},{"ruleId":"665","severity":1,"message":"669","line":122,"column":34,"nodeType":"667","messageId":"668","endLine":122,"endColumn":36},{"ruleId":"683","severity":1,"message":"751","line":145,"column":19,"nodeType":"685","messageId":"686","endLine":145,"endColumn":23},{"ruleId":"665","severity":1,"message":"666","line":146,"column":37,"nodeType":"667","messageId":"668","endLine":146,"endColumn":39},{"ruleId":"665","severity":1,"message":"669","line":153,"column":30,"nodeType":"667","messageId":"668","endLine":153,"endColumn":32},{"ruleId":"665","severity":1,"message":"669","line":155,"column":27,"nodeType":"667","messageId":"668","endLine":155,"endColumn":29},{"ruleId":"665","severity":1,"message":"669","line":206,"column":18,"nodeType":"667","messageId":"668","endLine":206,"endColumn":20},{"ruleId":"665","severity":1,"message":"666","line":209,"column":29,"nodeType":"667","messageId":"668","endLine":209,"endColumn":31},{"ruleId":"670","severity":1,"message":"752","line":217,"column":28,"nodeType":"672","messageId":"753","endLine":217,"endColumn":30},{"ruleId":"665","severity":1,"message":"666","line":240,"column":30,"nodeType":"667","messageId":"668","endLine":240,"endColumn":32},{"ruleId":"670","severity":1,"message":"671","line":241,"column":27,"nodeType":"672","messageId":"673","endLine":241,"endColumn":29},{"ruleId":"665","severity":1,"message":"666","line":380,"column":53,"nodeType":"667","messageId":"668","endLine":380,"endColumn":55},{"ruleId":"665","severity":1,"message":"666","line":385,"column":39,"nodeType":"667","messageId":"668","endLine":385,"endColumn":41},{"ruleId":"665","severity":1,"message":"666","line":409,"column":44,"nodeType":"667","messageId":"668","endLine":409,"endColumn":46},{"ruleId":"665","severity":1,"message":"666","line":427,"column":36,"nodeType":"667","messageId":"668","endLine":427,"endColumn":38},{"ruleId":"683","severity":1,"message":"754","line":18,"column":8,"nodeType":"685","messageId":"686","endLine":18,"endColumn":15},{"ruleId":"683","severity":1,"message":"728","line":20,"column":11,"nodeType":"685","messageId":"686","endLine":20,"endColumn":15},{"ruleId":"662","severity":1,"message":"687","line":63,"column":6,"nodeType":"688","endLine":63,"endColumn":13,"suggestions":"755"},{"ruleId":"680","severity":1,"message":"681","line":170,"column":74,"nodeType":"667","messageId":"682","endLine":170,"endColumn":75},{"ruleId":"662","severity":1,"message":"756","line":20,"column":6,"nodeType":"688","endLine":20,"endColumn":14,"suggestions":"757"},{"ruleId":"665","severity":1,"message":"666","line":25,"column":27,"nodeType":"667","messageId":"668","endLine":25,"endColumn":29},{"ruleId":"670","severity":1,"message":"671","line":54,"column":33,"nodeType":"672","messageId":"673","endLine":54,"endColumn":35},{"ruleId":"670","severity":1,"message":"671","line":57,"column":39,"nodeType":"672","messageId":"673","endLine":57,"endColumn":41},{"ruleId":"665","severity":1,"message":"666","line":85,"column":13,"nodeType":"667","messageId":"668","endLine":85,"endColumn":15},{"ruleId":"665","severity":1,"message":"666","line":85,"column":29,"nodeType":"667","messageId":"668","endLine":85,"endColumn":31},{"ruleId":"665","severity":1,"message":"666","line":85,"column":47,"nodeType":"667","messageId":"668","endLine":85,"endColumn":49},{"ruleId":"665","severity":1,"message":"666","line":85,"column":65,"nodeType":"667","messageId":"668","endLine":85,"endColumn":67},{"ruleId":"665","severity":1,"message":"666","line":92,"column":27,"nodeType":"667","messageId":"668","endLine":92,"endColumn":29},{"ruleId":"665","severity":1,"message":"666","line":93,"column":24,"nodeType":"667","messageId":"668","endLine":93,"endColumn":26},{"ruleId":"665","severity":1,"message":"666","line":99,"column":23,"nodeType":"667","messageId":"668","endLine":99,"endColumn":25},{"ruleId":"665","severity":1,"message":"669","line":206,"column":31,"nodeType":"667","messageId":"668","endLine":206,"endColumn":33},{"ruleId":"683","severity":1,"message":"758","line":1,"column":17,"nodeType":"685","messageId":"686","endLine":1,"endColumn":25},{"ruleId":"683","severity":1,"message":"759","line":1,"column":48,"nodeType":"685","messageId":"686","endLine":1,"endColumn":62},{"ruleId":"683","severity":1,"message":"760","line":3,"column":10,"nodeType":"685","messageId":"686","endLine":3,"endColumn":14},{"ruleId":"683","severity":1,"message":"701","line":8,"column":8,"nodeType":"685","messageId":"686","endLine":8,"endColumn":14},{"ruleId":"683","severity":1,"message":"761","line":17,"column":8,"nodeType":"685","messageId":"686","endLine":17,"endColumn":19},{"ruleId":"683","severity":1,"message":"693","line":18,"column":8,"nodeType":"685","messageId":"686","endLine":18,"endColumn":17},{"ruleId":"683","severity":1,"message":"762","line":20,"column":8,"nodeType":"685","messageId":"686","endLine":20,"endColumn":12},{"ruleId":"683","severity":1,"message":"763","line":21,"column":8,"nodeType":"685","messageId":"686","endLine":21,"endColumn":11},{"ruleId":"683","severity":1,"message":"764","line":22,"column":8,"nodeType":"685","messageId":"686","endLine":22,"endColumn":11},{"ruleId":"683","severity":1,"message":"765","line":35,"column":30,"nodeType":"685","messageId":"686","endLine":35,"endColumn":51},{"ruleId":"662","severity":1,"message":"663","line":145,"column":19,"nodeType":"664","endLine":145,"endColumn":49},{"ruleId":"665","severity":1,"message":"666","line":159,"column":21,"nodeType":"667","messageId":"668","endLine":159,"endColumn":23},{"ruleId":"665","severity":1,"message":"666","line":166,"column":13,"nodeType":"667","messageId":"668","endLine":166,"endColumn":15},{"ruleId":"665","severity":1,"message":"666","line":174,"column":43,"nodeType":"667","messageId":"668","endLine":174,"endColumn":45},{"ruleId":"665","severity":1,"message":"666","line":202,"column":46,"nodeType":"667","messageId":"668","endLine":202,"endColumn":48},{"ruleId":"665","severity":1,"message":"669","line":212,"column":24,"nodeType":"667","messageId":"668","endLine":212,"endColumn":26},{"ruleId":"670","severity":1,"message":"671","line":216,"column":38,"nodeType":"672","messageId":"673","endLine":216,"endColumn":40},{"ruleId":"674","severity":1,"message":"675","line":250,"column":5,"nodeType":"676","messageId":"668","endLine":250,"endColumn":15},{"ruleId":"677","severity":1,"message":"678","line":252,"column":9,"nodeType":"679","endLine":261,"endColumn":11},{"ruleId":"665","severity":1,"message":"669","line":351,"column":41,"nodeType":"667","messageId":"668","endLine":351,"endColumn":43},{"ruleId":"680","severity":1,"message":"681","line":446,"column":73,"nodeType":"667","messageId":"682","endLine":446,"endColumn":74},{"ruleId":"665","severity":1,"message":"666","line":478,"column":47,"nodeType":"667","messageId":"668","endLine":478,"endColumn":49},{"ruleId":"683","severity":1,"message":"765","line":25,"column":30,"nodeType":"685","messageId":"686","endLine":25,"endColumn":51},{"ruleId":"662","severity":1,"message":"766","line":35,"column":6,"nodeType":"688","endLine":35,"endColumn":8,"suggestions":"767"},{"ruleId":"683","severity":1,"message":"758","line":1,"column":17,"nodeType":"685","messageId":"686","endLine":1,"endColumn":25},{"ruleId":"683","severity":1,"message":"759","line":1,"column":48,"nodeType":"685","messageId":"686","endLine":1,"endColumn":62},{"ruleId":"683","severity":1,"message":"760","line":3,"column":10,"nodeType":"685","messageId":"686","endLine":3,"endColumn":14},{"ruleId":"683","severity":1,"message":"761","line":15,"column":8,"nodeType":"685","messageId":"686","endLine":15,"endColumn":19},{"ruleId":"683","severity":1,"message":"693","line":16,"column":8,"nodeType":"685","messageId":"686","endLine":16,"endColumn":17},{"ruleId":"683","severity":1,"message":"762","line":18,"column":8,"nodeType":"685","messageId":"686","endLine":18,"endColumn":12},{"ruleId":"683","severity":1,"message":"763","line":19,"column":8,"nodeType":"685","messageId":"686","endLine":19,"endColumn":11},{"ruleId":"683","severity":1,"message":"764","line":20,"column":8,"nodeType":"685","messageId":"686","endLine":20,"endColumn":11},{"ruleId":"683","severity":1,"message":"765","line":33,"column":30,"nodeType":"685","messageId":"686","endLine":33,"endColumn":51},{"ruleId":"662","severity":1,"message":"663","line":143,"column":19,"nodeType":"664","endLine":143,"endColumn":49},{"ruleId":"665","severity":1,"message":"666","line":157,"column":21,"nodeType":"667","messageId":"668","endLine":157,"endColumn":23},{"ruleId":"665","severity":1,"message":"666","line":164,"column":13,"nodeType":"667","messageId":"668","endLine":164,"endColumn":15},{"ruleId":"665","severity":1,"message":"666","line":172,"column":43,"nodeType":"667","messageId":"668","endLine":172,"endColumn":45},{"ruleId":"665","severity":1,"message":"666","line":200,"column":46,"nodeType":"667","messageId":"668","endLine":200,"endColumn":48},{"ruleId":"665","severity":1,"message":"669","line":210,"column":24,"nodeType":"667","messageId":"668","endLine":210,"endColumn":26},{"ruleId":"670","severity":1,"message":"671","line":214,"column":38,"nodeType":"672","messageId":"673","endLine":214,"endColumn":40},{"ruleId":"674","severity":1,"message":"675","line":248,"column":5,"nodeType":"676","messageId":"668","endLine":248,"endColumn":15},{"ruleId":"677","severity":1,"message":"678","line":250,"column":9,"nodeType":"679","endLine":259,"endColumn":11},{"ruleId":"665","severity":1,"message":"669","line":349,"column":41,"nodeType":"667","messageId":"668","endLine":349,"endColumn":43},{"ruleId":"680","severity":1,"message":"681","line":444,"column":73,"nodeType":"667","messageId":"682","endLine":444,"endColumn":74},{"ruleId":"665","severity":1,"message":"666","line":476,"column":47,"nodeType":"667","messageId":"668","endLine":476,"endColumn":49},{"ruleId":"683","severity":1,"message":"768","line":1,"column":17,"nodeType":"685","messageId":"686","endLine":1,"endColumn":25},{"ruleId":"683","severity":1,"message":"769","line":12,"column":11,"nodeType":"685","messageId":"686","endLine":12,"endColumn":12},{"ruleId":"683","severity":1,"message":"758","line":1,"column":17,"nodeType":"685","messageId":"686","endLine":1,"endColumn":25},{"ruleId":"683","severity":1,"message":"759","line":1,"column":48,"nodeType":"685","messageId":"686","endLine":1,"endColumn":62},{"ruleId":"683","severity":1,"message":"760","line":3,"column":10,"nodeType":"685","messageId":"686","endLine":3,"endColumn":14},{"ruleId":"683","severity":1,"message":"761","line":17,"column":8,"nodeType":"685","messageId":"686","endLine":17,"endColumn":19},{"ruleId":"683","severity":1,"message":"693","line":18,"column":8,"nodeType":"685","messageId":"686","endLine":18,"endColumn":17},{"ruleId":"683","severity":1,"message":"762","line":20,"column":8,"nodeType":"685","messageId":"686","endLine":20,"endColumn":12},{"ruleId":"683","severity":1,"message":"763","line":21,"column":8,"nodeType":"685","messageId":"686","endLine":21,"endColumn":11},{"ruleId":"683","severity":1,"message":"764","line":22,"column":8,"nodeType":"685","messageId":"686","endLine":22,"endColumn":11},{"ruleId":"683","severity":1,"message":"765","line":35,"column":30,"nodeType":"685","messageId":"686","endLine":35,"endColumn":51},{"ruleId":"662","severity":1,"message":"663","line":145,"column":19,"nodeType":"664","endLine":145,"endColumn":49},{"ruleId":"665","severity":1,"message":"666","line":159,"column":21,"nodeType":"667","messageId":"668","endLine":159,"endColumn":23},{"ruleId":"665","severity":1,"message":"666","line":166,"column":13,"nodeType":"667","messageId":"668","endLine":166,"endColumn":15},{"ruleId":"665","severity":1,"message":"666","line":174,"column":43,"nodeType":"667","messageId":"668","endLine":174,"endColumn":45},{"ruleId":"665","severity":1,"message":"666","line":202,"column":46,"nodeType":"667","messageId":"668","endLine":202,"endColumn":48},{"ruleId":"665","severity":1,"message":"669","line":212,"column":24,"nodeType":"667","messageId":"668","endLine":212,"endColumn":26},{"ruleId":"670","severity":1,"message":"671","line":216,"column":38,"nodeType":"672","messageId":"673","endLine":216,"endColumn":40},{"ruleId":"674","severity":1,"message":"675","line":250,"column":5,"nodeType":"676","messageId":"668","endLine":250,"endColumn":15},{"ruleId":"677","severity":1,"message":"678","line":252,"column":9,"nodeType":"679","endLine":261,"endColumn":11},{"ruleId":"665","severity":1,"message":"669","line":351,"column":41,"nodeType":"667","messageId":"668","endLine":351,"endColumn":43},{"ruleId":"680","severity":1,"message":"681","line":446,"column":73,"nodeType":"667","messageId":"682","endLine":446,"endColumn":74},{"ruleId":"665","severity":1,"message":"666","line":478,"column":47,"nodeType":"667","messageId":"668","endLine":478,"endColumn":49},{"ruleId":"683","severity":1,"message":"760","line":23,"column":10,"nodeType":"685","messageId":"686","endLine":23,"endColumn":14},{"ruleId":"670","severity":1,"message":"671","line":78,"column":21,"nodeType":"672","messageId":"673","endLine":78,"endColumn":23},{"ruleId":"662","severity":1,"message":"770","line":79,"column":14,"nodeType":"667","endLine":79,"endColumn":35},{"ruleId":"665","severity":1,"message":"666","line":87,"column":10,"nodeType":"667","messageId":"668","endLine":87,"endColumn":12},{"ruleId":"665","severity":1,"message":"666","line":104,"column":12,"nodeType":"667","messageId":"668","endLine":104,"endColumn":14},{"ruleId":"691","severity":1,"message":"692","line":177,"column":17,"nodeType":"679","endLine":189,"endColumn":19},{"ruleId":"683","severity":1,"message":"768","line":1,"column":17,"nodeType":"685","messageId":"686","endLine":1,"endColumn":25},{"ruleId":"665","severity":1,"message":"666","line":64,"column":22,"nodeType":"667","messageId":"668","endLine":64,"endColumn":24},{"ruleId":"665","severity":1,"message":"666","line":70,"column":49,"nodeType":"667","messageId":"668","endLine":70,"endColumn":51},{"ruleId":"742","severity":1,"message":"743","line":79,"column":11,"nodeType":"744","messageId":"745","endLine":83,"endColumn":13},{"ruleId":"665","severity":1,"message":"669","line":89,"column":50,"nodeType":"667","messageId":"668","endLine":89,"endColumn":52},{"ruleId":"665","severity":1,"message":"669","line":92,"column":31,"nodeType":"667","messageId":"668","endLine":92,"endColumn":33},{"ruleId":"665","severity":1,"message":"669","line":120,"column":37,"nodeType":"667","messageId":"668","endLine":120,"endColumn":39},{"ruleId":"665","severity":1,"message":"669","line":135,"column":30,"nodeType":"667","messageId":"668","endLine":135,"endColumn":32},{"ruleId":"665","severity":1,"message":"669","line":146,"column":33,"nodeType":"667","messageId":"668","endLine":146,"endColumn":35},{"ruleId":"683","severity":1,"message":"715","line":158,"column":10,"nodeType":"685","messageId":"686","endLine":158,"endColumn":20},{"ruleId":"683","severity":1,"message":"771","line":1,"column":27,"nodeType":"685","messageId":"686","endLine":1,"endColumn":36},{"ruleId":"683","severity":1,"message":"772","line":13,"column":9,"nodeType":"685","messageId":"686","endLine":13,"endColumn":16},{"ruleId":"683","severity":1,"message":"715","line":34,"column":10,"nodeType":"685","messageId":"686","endLine":34,"endColumn":20},{"ruleId":"662","severity":1,"message":"773","line":24,"column":6,"nodeType":"688","endLine":24,"endColumn":8,"suggestions":"774"},{"ruleId":"662","severity":1,"message":"775","line":18,"column":6,"nodeType":"688","endLine":18,"endColumn":8,"suggestions":"776"},{"ruleId":"683","severity":1,"message":"771","line":1,"column":37,"nodeType":"685","messageId":"686","endLine":1,"endColumn":46},{"ruleId":"670","severity":1,"message":"671","line":31,"column":28,"nodeType":"672","messageId":"673","endLine":31,"endColumn":30},{"ruleId":"665","severity":1,"message":"666","line":35,"column":20,"nodeType":"667","messageId":"668","endLine":35,"endColumn":22},{"ruleId":"665","severity":1,"message":"666","line":36,"column":20,"nodeType":"667","messageId":"668","endLine":36,"endColumn":22},{"ruleId":"665","severity":1,"message":"666","line":61,"column":27,"nodeType":"667","messageId":"668","endLine":61,"endColumn":29},{"ruleId":"670","severity":1,"message":"752","line":78,"column":46,"nodeType":"672","messageId":"753","endLine":78,"endColumn":48},{"ruleId":"670","severity":1,"message":"671","line":90,"column":33,"nodeType":"672","messageId":"673","endLine":90,"endColumn":35},{"ruleId":"670","severity":1,"message":"671","line":93,"column":39,"nodeType":"672","messageId":"673","endLine":93,"endColumn":41},{"ruleId":"670","severity":1,"message":"752","line":113,"column":56,"nodeType":"672","messageId":"753","endLine":113,"endColumn":58},{"ruleId":"670","severity":1,"message":"671","line":141,"column":29,"nodeType":"672","messageId":"673","endLine":141,"endColumn":31},{"ruleId":"665","severity":1,"message":"666","line":144,"column":15,"nodeType":"667","messageId":"668","endLine":144,"endColumn":17},{"ruleId":"665","severity":1,"message":"666","line":144,"column":31,"nodeType":"667","messageId":"668","endLine":144,"endColumn":33},{"ruleId":"665","severity":1,"message":"666","line":144,"column":49,"nodeType":"667","messageId":"668","endLine":144,"endColumn":51},{"ruleId":"665","severity":1,"message":"666","line":144,"column":67,"nodeType":"667","messageId":"668","endLine":144,"endColumn":69},{"ruleId":"665","severity":1,"message":"666","line":148,"column":19,"nodeType":"667","messageId":"668","endLine":148,"endColumn":21},{"ruleId":"665","severity":1,"message":"666","line":148,"column":35,"nodeType":"667","messageId":"668","endLine":148,"endColumn":37},{"ruleId":"665","severity":1,"message":"666","line":149,"column":28,"nodeType":"667","messageId":"668","endLine":149,"endColumn":30},{"ruleId":"665","severity":1,"message":"666","line":149,"column":44,"nodeType":"667","messageId":"668","endLine":149,"endColumn":46},{"ruleId":"665","severity":1,"message":"666","line":150,"column":19,"nodeType":"667","messageId":"668","endLine":150,"endColumn":21},{"ruleId":"665","severity":1,"message":"666","line":150,"column":35,"nodeType":"667","messageId":"668","endLine":150,"endColumn":37},{"ruleId":"665","severity":1,"message":"666","line":156,"column":21,"nodeType":"667","messageId":"668","endLine":156,"endColumn":23},{"ruleId":"665","severity":1,"message":"666","line":156,"column":39,"nodeType":"667","messageId":"668","endLine":156,"endColumn":41},{"ruleId":"665","severity":1,"message":"666","line":157,"column":40,"nodeType":"667","messageId":"668","endLine":157,"endColumn":42},{"ruleId":"665","severity":1,"message":"666","line":162,"column":29,"nodeType":"667","messageId":"668","endLine":162,"endColumn":31},{"ruleId":"665","severity":1,"message":"666","line":164,"column":21,"nodeType":"667","messageId":"668","endLine":164,"endColumn":23},{"ruleId":"665","severity":1,"message":"666","line":177,"column":25,"nodeType":"667","messageId":"668","endLine":177,"endColumn":27},{"ruleId":"665","severity":1,"message":"666","line":177,"column":51,"nodeType":"667","messageId":"668","endLine":177,"endColumn":53},{"ruleId":"665","severity":1,"message":"666","line":181,"column":18,"nodeType":"667","messageId":"668","endLine":181,"endColumn":20},{"ruleId":"665","severity":1,"message":"666","line":181,"column":36,"nodeType":"667","messageId":"668","endLine":181,"endColumn":38},{"ruleId":"665","severity":1,"message":"666","line":182,"column":34,"nodeType":"667","messageId":"668","endLine":182,"endColumn":36},{"ruleId":"665","severity":1,"message":"666","line":190,"column":22,"nodeType":"667","messageId":"668","endLine":190,"endColumn":24},{"ruleId":"665","severity":1,"message":"669","line":203,"column":27,"nodeType":"667","messageId":"668","endLine":203,"endColumn":29},{"ruleId":"665","severity":1,"message":"669","line":253,"column":31,"nodeType":"667","messageId":"668","endLine":253,"endColumn":33},{"ruleId":"665","severity":1,"message":"666","line":283,"column":55,"nodeType":"667","messageId":"668","endLine":283,"endColumn":57},{"ruleId":"665","severity":1,"message":"666","line":287,"column":57,"nodeType":"667","messageId":"668","endLine":287,"endColumn":59},{"ruleId":"665","severity":1,"message":"666","line":290,"column":40,"nodeType":"667","messageId":"668","endLine":290,"endColumn":42},"no-native-reassign",["777"],"no-negated-in-lhs",["778"],"react-hooks/exhaustive-deps","Assignments to the 'varData' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-dupe-keys","Duplicate key 'indicators'.","ObjectExpression","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","no-unused-vars","'setCart' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'branchId'. Either include it or remove the dependency array.","ArrayExpression",["779"],["780"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'CardMedia' is defined but never used.","'getSymbolFromCurrency' is defined but never used.","'hold' is assigned a value but never used.","'products' is assigned a value but never used.","'setProducts' is assigned a value but never used.",["781"],"'ReactWhatsapp' is defined but never used.","'Swiper' is defined but never used.","'Footer' is defined but never used.","'categories' is assigned a value but never used.",["782"],"'Header' is defined but never used.",["783"],"'Container' is defined but never used.","'template' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["784"],["785"],"'CBreadcrumb' is defined but never used.","'CBreadcrumbItem' is defined but never used.","'locations' is assigned a value but never used.",["786"],"'inputValue' is assigned a value but never used.","'selectedValue' is assigned a value but never used.","'handleChange' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'templateId'. Either include it or remove the dependency array.",["787"],"'url' is assigned a value but never used.","'useHistory' is defined but never used.","'useRouteMatch' is defined but never used.","'useForm' is defined but never used.","'yupResolver' is defined but never used.","'yup' is defined but never used.","'handleInput' is assigned a value but never used.",["788"],"'path' is assigned a value but never used.",["789"],["790"],["791"],"React Hook useEffect has missing dependencies: 'branchId' and 'productId'. Either include them or remove the dependency array.",["792"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-useless-escape","Unnecessary escape character: \\/.","Literal","unnecessaryEscape",["793","794"],["795"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'state' is assigned a value but never used.",["796"],"'Grid' is defined but never used.","React Hook useEffect has missing dependencies: 'attributes.length' and 'id'. Either include them or remove the dependency array.",["797"],"'attr' is assigned a value but never used.","Array.prototype.filter() expects a value to be returned at the end of arrow function.","expectedAtEnd","'AddIcon' is defined but never used.",["798"],"React Hook useEffect has a missing dependency: 'setVarantGrid'. Either include it or remove the dependency array.",["799"],"'Fragment' is defined but never used.","'SyntheticEvent' is defined but never used.","'Link' is defined but never used.","'CardContent' is defined but never used.","'Tabs' is defined but never used.","'Tab' is defined but never used.","'Box' is defined but never used.","'setThemeCustomization' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'cateId'. Either include it or remove the dependency array.",["800"],"'useState' is defined but never used.","'t' is assigned a value but never used.","Assignments to the 'sum' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","'useEffect' is defined but never used.","'history' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'sub_id'. Either include it or remove the dependency array.",["801"],"React Hook React.useEffect has a missing dependency: 'props.open'. Either include it or remove the dependency array. If 'setOpen' needs the current value of 'props.open', you can also switch to useReducer instead of useState and read 'props.open' in the reducer.",["802"],"no-global-assign","no-unsafe-negation",{"desc":"803","fix":"804"},{"desc":"803","fix":"805"},{"desc":"803","fix":"806"},{"desc":"803","fix":"807"},{"desc":"803","fix":"808"},{"desc":"809","fix":"810"},{"desc":"809","fix":"811"},{"desc":"809","fix":"812"},{"desc":"813","fix":"814"},{"desc":"809","fix":"815"},{"desc":"809","fix":"816"},{"desc":"813","fix":"817"},{"desc":"818","fix":"819"},{"desc":"820","fix":"821"},{"messageId":"822","fix":"823","desc":"824"},{"messageId":"825","fix":"826","desc":"827"},{"desc":"828","fix":"829"},{"desc":"818","fix":"830"},{"desc":"831","fix":"832"},{"desc":"818","fix":"833"},{"desc":"834","fix":"835"},{"desc":"836","fix":"837"},{"desc":"838","fix":"839"},{"desc":"840","fix":"841"},"Update the dependencies array to be: [branchId]",{"range":"842","text":"843"},{"range":"844","text":"843"},{"range":"845","text":"843"},{"range":"846","text":"843"},{"range":"847","text":"843"},"Update the dependencies array to be: [check, id]",{"range":"848","text":"849"},{"range":"850","text":"849"},{"range":"851","text":"849"},"Update the dependencies array to be: [loading, templateId]",{"range":"852","text":"853"},{"range":"854","text":"849"},{"range":"855","text":"849"},{"range":"856","text":"853"},"Update the dependencies array to be: [branchId, check]",{"range":"857","text":"858"},"Update the dependencies array to be: [branchId, check, productId]",{"range":"859","text":"860"},"removeEscape",{"range":"861","text":"862"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"863","text":"864"},"Replace the `\\` with `\\\\` to include the actual backslash character.","Update the dependencies array to be: [id]",{"range":"865","text":"866"},{"range":"867","text":"858"},"Update the dependencies array to be: [attributes.length, check, id]",{"range":"868","text":"869"},{"range":"870","text":"858"},"Update the dependencies array to be: [setVarantGrid, values]",{"range":"871","text":"872"},"Update the dependencies array to be: [cateId]",{"range":"873","text":"874"},"Update the dependencies array to be: [sub_id]",{"range":"875","text":"876"},"Update the dependencies array to be: [props.open]",{"range":"877","text":"878"},[2543,2545],"[branchId]",[2974,2976],[2270,2272],[2505,2507],[2446,2448],[1517,1524],"[check, id]",[4085,4092],[5035,5042],[2781,2790],"[loading, templateId]",[5571,5578],[6934,6941],[2289,2298],[5217,5224],"[branchId, check]",[6092,6099],"[branchId, check, productId]",[1172,1173],"",[1172,1172],"\\",[3191,3193],"[id]",[4340,4347],[3164,3171],"[attributes.length, check, id]",[2321,2328],[642,650],"[setVarantGrid, values]",[1371,1373],"[cateId]",[740,742],"[sub_id]",[536,538],"[props.open]"]