[{"C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\index.js":"1","C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\App.js":"2","C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\pages\\Login.js":"3","C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\pages\\Registration.js":"4","C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\Public Link\\BranchDetails.js":"5","C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\PublicRoute.js":"6","C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\Public Link\\VariantDetails.js":"7","C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\Public Link\\ShowProducts.js":"8","C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\index.js":"9","C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\Attributes\\Options.js":"10","C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\Attributes\\Attributes.js":"11","C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\Branches\\Tables.js":"12","C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\utils\\index.js":"13","C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\PrivateRoute.js":"14","C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\layouts\\Footer.js":"15","C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\Variants\\VariantDetails.js":"16","C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\Dashboard\\Home\\Home.js":"17","C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\Dashboard\\Profile\\Profile.js":"18","C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\layouts\\nav\\index.js":"19","C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\layouts\\PageTitle.js":"20","C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\layouts\\nav\\NavHader.js":"21","C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\layouts\\nav\\Header.js":"22","C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\layouts\\nav\\SideBar.js":"23","C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\Orders\\Order.js":"24","C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\Orders\\Basket.js":"25","C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\Branches\\branches.js":"26","C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\Categories\\Category.js":"27","C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\Categories\\SubCategory.js":"28","C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\Branches\\Branches.js":"29","C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\Companies\\company.js":"30","C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\Companies\\Company.js":"31","C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\Variants\\gallary.js":"32","C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\Variants\\Gallary.js":"33","C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\Variants\\Variants.js":"34","C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\Inventories\\inventory.js":"35","C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\Products\\Product.js":"36","C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\Inventories\\Inventory.js":"37","C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\Services\\serviceArea.js":"38","C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\Units\\unit.js":"39","C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\Services\\ServiceArea.js":"40","C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\Units\\Unit.js":"41","C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\Consts.js":"42"},{"size":1386,"mtime":1637772548243,"results":"43","hashOfConfig":"44"},{"size":2726,"mtime":1637776568650,"results":"45","hashOfConfig":"44"},{"size":5827,"mtime":1637772548257,"results":"46","hashOfConfig":"44"},{"size":7743,"mtime":1637772548257,"results":"47","hashOfConfig":"44"},{"size":28872,"mtime":1637772548250,"results":"48","hashOfConfig":"44"},{"size":432,"mtime":1637772548251,"results":"49","hashOfConfig":"44"},{"size":14868,"mtime":1637772548251,"results":"50","hashOfConfig":"44"},{"size":11201,"mtime":1637772548250,"results":"51","hashOfConfig":"44"},{"size":3611,"mtime":1637773405924,"results":"52","hashOfConfig":"44"},{"size":13297,"mtime":1637772548245,"results":"53","hashOfConfig":"44"},{"size":11529,"mtime":1637772548244,"results":"54","hashOfConfig":"44"},{"size":15139,"mtime":1637772548245,"results":"55","hashOfConfig":"44"},{"size":214,"mtime":1637772548257,"results":"56","hashOfConfig":"44"},{"size":542,"mtime":1637772548249,"results":"57","hashOfConfig":"44"},{"size":489,"mtime":1637772548253,"results":"58","hashOfConfig":"44"},{"size":14187,"mtime":1637772548252,"results":"59","hashOfConfig":"44"},{"size":1852,"mtime":1637772548247,"results":"60","hashOfConfig":"44"},{"size":23716,"mtime":1637772548247,"results":"61","hashOfConfig":"44"},{"size":688,"mtime":1637772548255,"results":"62","hashOfConfig":"44"},{"size":823,"mtime":1637772548254,"results":"63","hashOfConfig":"44"},{"size":953,"mtime":1637772548254,"results":"64","hashOfConfig":"44"},{"size":8079,"mtime":1637772548254,"results":"65","hashOfConfig":"44"},{"size":5315,"mtime":1637772548255,"results":"66","hashOfConfig":"44"},{"size":4354,"mtime":1637772548249,"results":"67","hashOfConfig":"44"},{"size":7014,"mtime":1637772548248,"results":"68","hashOfConfig":"44"},{"size":29962,"mtime":1637772548245,"results":"69","hashOfConfig":"44"},{"size":19620,"mtime":1637772548246,"results":"70","hashOfConfig":"44"},{"size":16607,"mtime":1637772548246,"results":"71","hashOfConfig":"44"},{"size":29962,"mtime":1637772548245,"results":"72","hashOfConfig":"44"},{"size":12675,"mtime":1637772548247,"results":"73","hashOfConfig":"44"},{"size":12675,"mtime":1637772548247,"results":"74","hashOfConfig":"44"},{"size":9410,"mtime":1637772548252,"results":"75","hashOfConfig":"44"},{"size":9410,"mtime":1637772548252,"results":"76","hashOfConfig":"44"},{"size":45598,"mtime":1637772548253,"results":"77","hashOfConfig":"44"},{"size":12733,"mtime":1637772548248,"results":"78","hashOfConfig":"44"},{"size":21660,"mtime":1637772548249,"results":"79","hashOfConfig":"44"},{"size":12733,"mtime":1637772548248,"results":"80","hashOfConfig":"44"},{"size":11868,"mtime":1637772548251,"results":"81","hashOfConfig":"44"},{"size":11609,"mtime":1637772548252,"results":"82","hashOfConfig":"44"},{"size":11868,"mtime":1637772548251,"results":"83","hashOfConfig":"44"},{"size":11609,"mtime":1637772548252,"results":"84","hashOfConfig":"44"},{"size":70,"mtime":1637774087467,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"kz7czk",{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"92"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"92"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"92"},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\index.js",[],"C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\App.js",[],"C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\pages\\Login.js",[],["174","175"],"C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\pages\\Registration.js",[],"C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\Public Link\\BranchDetails.js",["176","177","178","179","180"],"import React, { useEffect, useState, Fragment } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport {  Nav } from \"react-bootstrap\";\r\nimport { Link as RLink } from \"react-router-dom\"\r\nimport 'react-awesome-slider/dist/styles.css';\r\nimport {  Modal, Form, Col, Card,  Button } from \"react-bootstrap\";\r\nimport { CContainer,   CNavbar, CNavbarBrand, CNavbarToggler, CCollapse, CNavbarNav, CNavItem, CNavLink } from '@coreui/react'\r\n// Import css files\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\n// import InfiniteScroll from 'react-infinite-scroller';\r\nimport Slider from \"react-slick\";\r\nimport { Link } from 'react-scroll'\r\n// import Counter from './Counter'\r\nimport swal from \"sweetalert\"\r\nimport ReactWhatsapp from 'react-whatsapp';\r\n\r\nvar hold = 1;\r\n\r\nconst BranchDetails = (props) => {\r\n   const { t } = useTranslation();\r\n   const branchId = atob(props.match.params.id);\r\n   const [modalCentered, setModalCentered] = useState(false);\r\n\r\n   // atob(branchNameId)\r\n   const [loading, setLoading] = useState(true);\r\n   const [data, setData] = useState([])\r\n   const [categories, setCategories] = useState([])\r\n   const [subcategories, setSubCategories] = useState([])\r\n   // const [products, setProducts]= useState([])\r\n   const [products, setProducts] = useState([])\r\n   const [activeCategory, setActiveCategory] = useState(0)\r\n   const [activeSubCategory, setActiveSubCategory] = useState(0)\r\n   const [activeVariant, setActiveVariant] = useState(0)\r\n   const [grandTotal, setGrandTotal] = useState(0)\r\n\r\n   useEffect(() => {\r\n      axios.get(`/api/GetBranchForShow/${branchId}`).then(res => {\r\n         if (res.data.status === 200) {\r\n            setData(res.data.data);\r\n         }\r\n         setLoading(false);\r\n      });\r\n      axios.get(`/api/GetCategories/${branchId}`).then(res => {\r\n         if (res.data.status === 200) {\r\n            setCategories(res.data.fetchData);\r\n            // setActiveCategory(res.data.fetchData[0].id);\r\n         }\r\n\r\n      });\r\n      axios.get(`/api/getSubCateBasedOnBranch/${branchId}`).then(res => {\r\n         if (res.data.status === 200) {\r\n            // console.log(res.data.fetchData);\r\n            axios.get(`/api/GetProductsBasedOnSubCategory/${res.data.fetchData[0].sub_id}`).then(res => {\r\n               if (res.data.status === 200) {\r\n                  console.log(res.data.fetchData);\r\n                  setProducts(res.data.fetchData);\r\n\r\n                  setActiveSubCategory(res.data.fetchData[0].sub_category_id)\r\n               }\r\n            });\r\n            setSubCategories(res.data.fetchData);\r\n            // setProducts([]);\r\n            // setVariants([]);\r\n         }\r\n      });\r\n\r\n   }, [branchId])\r\n   const [changeState, setChangeState] = useState(true)\r\n   const fetchMoreData = () => {\r\n      if (hold < subcategories.length) {\r\n         axios.get(`/api/getSubCateBasedOnBranch/${branchId}`).then(res => {\r\n            if (res.data.status === 200) {\r\n               // console.log(res.data.fetchData);\r\n               setActiveSubCategory(res.data.fetchData[hold].sub_id)\r\n               axios.get(`/api/GetProductsBasedOnSubCategory/${res.data.fetchData[hold].sub_id}`).then(res => {\r\n                  if (res.data.status === 200) {\r\n                     if (res.data.fetchData.length === 0) {\r\n                        hold = hold + 1\r\n                        // console.log(res.data.fetchData);\r\n                        fetchMoreData()\r\n                     } else {\r\n                        hold = hold + 1\r\n                        setProducts(products.concat(res.data.fetchData))\r\n\r\n                     }\r\n\r\n\r\n                  }\r\n\r\n               });\r\n\r\n               setSubCategories(res.data.fetchData);\r\n\r\n\r\n            }\r\n         });\r\n      } else {\r\n         setChangeState(false);\r\n      }\r\n      // console.log(hold);\r\n\r\n\r\n   }\r\n   const filterCategory = (cateId) => {\r\n      axios.get(`/api/GetSubCategories/${cateId}`).then(res => {\r\n         if (res.data.status === 200) {\r\n            // console.log(res.data.fetchData);\r\n            setSubCategories(res.data.fetchData);\r\n            // console.log(subcategories.length);\r\n            // setProducts([]);\r\n            // setVariants([]);\r\n         }\r\n      });\r\n      setActiveCategory(cateId);\r\n\r\n   }\r\n   // this function called by child (counter)\r\n   const filterProducts = (subCateID) => {\r\n      //  const updateItem=variants.filter((curElem) => {\r\n      //    return curElem.sub_category_id===subCateID;\r\n      // })\r\n      // setVariants(updateItem);\r\n\r\n      // axios.get(`/api/GetProductsBasedOnSubCategory/${subCateID}`).then(res => {\r\n      //    if (res.data.status === 200) {\r\n      //       setVariants(res.data.fetchData)\r\n      //    }\r\n      // });\r\n      setActiveSubCategory(subCateID);\r\n   }\r\n   // this function called by child (counter)\r\n\r\n   const activeVariants = (item) => {\r\n      setActiveVariant(item);\r\n\r\n   }\r\n   const getGrandTotal = (item) => {\r\n      setGrandTotal(grandTotal + item);\r\n   }\r\n   const clearSession = (e) => {\r\n      swal({\r\n         title: \"Are you sure?\",\r\n         text: \"Once cleared, you will not be able to recover this files!\",\r\n         icon: \"warning\",\r\n         buttons: [t('cancel'), t('confirm')],\r\n         dangerMode: true,\r\n      })\r\n         .then((willDelete) => {\r\n            if (willDelete) {\r\n               sessionStorage.clear();\r\n               setModalCentered(false);\r\n            } else {\r\n               swal(\"Your Data is safe now!\");\r\n            }\r\n         });\r\n\r\n   }\r\n   const [orderInsert, setOrderInsert] = useState([])\r\n   // const [orderDetails, setOrderDetails ]= useState([])\r\n   const handleInput = (e) => {\r\n      e.persist();\r\n      setOrderInsert({ ...orderInsert, [e.target.name]: e.target.value });\r\n   };\r\n   //   const handleOrderDetails= (vID,e) => {\r\n   //    e.persist();\r\n   //    setOrderDetails({ ...orderDetails,\r\n\r\n   //          [e.target.name]: e.target.value \r\n   //       });\r\n   //   }\r\n   const saveOrder = (e) => {\r\n      e.preventDefault();\r\n      axios.post(`/api/InsertOrder`, orderInsert).then(res => {\r\n         if (res.data.status === 200) {\r\n            setOrderInsert([])\r\n            setModalCentered(false);\r\n            swal(\"Success\", res.data.message, \"success\");\r\n         } else if (res.data.status === 404) {\r\n            swal(\"Success\", res.data.message, \"success\");\r\n         }\r\n      });\r\n   }\r\n\r\n\r\n   // const filterVariants = (productID)=>{\r\n   //    axios.get(`/api/Getvariations/${productID}`).then(res => {\r\n   //       if(res.data.status === 200){\r\n   //          setVariants(res.data.fetchData);\r\n   //       }\r\n   //     });\r\n\r\n   // }\r\n\r\n   // const [quantity, setQuantity] = useState(1);\r\n   // const [show, setShow] = useState(false);\r\n   // const showFunction = (e, variant_id)=>{\r\n\r\n   //    setShow(!show);\r\n   //    console.log(e.currentTarget.id);\r\n   // }\r\n   // const handleDecrement = (e,variant_id) => {\r\n   //    e.preventDefault();\r\n\r\n   //    if (quantity > 1) {\r\n   //       setQuantity(prevCount => prevCount - 1);\r\n   //    } else if (quantity === 1) {\r\n   //       setShow(false)\r\n   //    }\r\n   // }\r\n   // const handelIncrement = (e,variant_id) => {\r\n   //    e.preventDefault();\r\n   //       variants.map((item) =>{\r\n   //        return (item.variantID === variant_id ? setQuantity(prevCount => prevCount + 1): item)\r\n   //       }\r\n   //    )\r\n\r\n   //    // setQuantity(prevCount => prevCount + 1);\r\n   // }\r\n\r\n\r\n   const [visible, setVisible] = useState(false)\r\n   var viewShow_HTMLTABLE = \"\";\r\n   if (loading) {\r\n      return <div className=\"spinner-border text-primary \" role=\"status\" style={{ position: 'fixed', top: '50%', left: '50%' }}><span className=\"sr-only\">{t('loading')}</span></div>\r\n   } else {\r\n      var value;\r\n      viewShow_HTMLTABLE =\r\n         products.map((item, i) => {\r\n\r\n            return (\r\n               <div className=\"col-xl-3 col-lg-3 col-md-4 col-sm-4 col-xs-4 col-half-offset\" key={i} id={item.SubCategoryName} >\r\n                  {item.ProductName === value ? <h5 className=\"row mt-2 mx-3 invisible\">{item.ProductName}</h5> : <h5 className=\"row mt-2 mx-3 text-uppercase font-weight-bold text-black\">{item.ProductName}</h5>}\r\n                  <h6 className=\"d-none\">{value = item.ProductName}</h6>\r\n                  <div>\r\n                     <div className={`card ${activeVariant === item.variantID ? \"border border-success\" : \"\"} `}>\r\n                        <div className=\"card-body\">\r\n                           <div className=\"new-arrival-product\">\r\n\r\n                              <div className=\"text-center bg-white\">\r\n                                 <img className=\"img-fluid w-100 img-thumbnail\" style={{ height: '100px', objectFit: 'contain' }} src={`http://192.168.1.103/yesilik1/public/images/products/${item.image}`} alt=\"\" />\r\n                              </div>\r\n                              {/* <Counter item={item} activeVariants={activeVariant => setActiveVariant(activeVariant)}\r\n                                 // getGrandTotal={grandTotal => setGrandTotal(grandTotal)} \r\n                                 /> */}\r\n                              <RLink to={`/product/${item.product_id}`} className=\"text-black\">\r\n                                 <div className=\"new-arrival-content text-center mt-3\">\r\n                                    <h4>\r\n                                       {item.ProductName}\r\n                                       <p className=\"text-success\">{item.UnitName}</p>\r\n                                    </h4>\r\n\r\n                                    {/* <span className=\"price\">{item.CurrentPrice + ' ' + item.currency_code}</span>\r\n                                    <s className=\"ms-2\">{item.OldPrice + ' ' + item.currency_code}</s> */}\r\n                                 </div>\r\n                              </RLink>\r\n\r\n\r\n                              {/* <div id={item.variantID}  className={`input-group`}>\r\n                                 <RLink  onClick={(e)=>handleDecrement(e,item.variantID)} className=\"input-group-text \">{quantity === 1 ? <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-trash\" viewBox=\"0 0 16 16\">\r\n                                    <path d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z\" />\r\n                                    <path fillRule=\"evenodd\" d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\" />\r\n                                 </svg> : t('minus')} </RLink>\r\n                                 <div className=\"input-group-text bg-white \"> {quantity}</div>\r\n                                 <RLink  onClick={(e)=>handelIncrement(e,item.variantID)} className=\"input-group-text\" disabled={item.Buyingquantity - item.SellingQuantity === quantity ? 'disabled' : ''}>{t('plus')} </RLink>\r\n                              </div>\r\n                              \r\n                              {item.Buyingquantity - item.SellingQuantity === quantity\r\n                                 ?\r\n                                 <div className=\"text-danger\">\r\n                                    {t('not_available')}\r\n                                 </div>\r\n                                 : \"\"\r\n                              } */}\r\n                           </div>\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n\r\n               </div>\r\n\r\n            )\r\n         })\r\n   }\r\n\r\n   const settings = {\r\n      dots: false,\r\n      // className: \"center\",\r\n      centerMode: true,\r\n      infinite: true,\r\n      swipeToSlide: true,\r\n      centerPadding: \"10px\",\r\n      slidesToShow: subcategories.length >= 7 ? 7 : subcategories.length,\r\n      slidesToScroll: 1,\r\n      speed: 1000,\r\n      responsive: [\r\n         {\r\n            breakpoint: 1024,\r\n            settings: {\r\n               slidesToShow: subcategories.length >= 5 ? 5 : subcategories.length,\r\n               slidesToScroll: 1,\r\n               infinite: true,\r\n               dots: true,\r\n               speed: 1000,\r\n\r\n            }\r\n         },\r\n         {\r\n            breakpoint: 600,\r\n            settings: {\r\n               slidesToShow: subcategories.length >= 2 ? 2 : 1,\r\n               slidesToScroll: 1,\r\n               initialSlide: 1,\r\n               speed: 1000\r\n\r\n            }\r\n         },\r\n         {\r\n            breakpoint: 480,\r\n            settings: {\r\n               speed: 1000,\r\n\r\n               slidesToShow: subcategories.length >= 1 ? 1 : 1,\r\n               slidesToScroll: 1\r\n            }\r\n         }\r\n      ]\r\n   };\r\n\r\n   var sum = 0;\r\n   var message = '';\r\n\r\n   return (\r\n\r\n      <div style={{ marginTop: 5 }}>\r\n         <Fragment>\r\n\r\n            <CNavbar expand=\"lg\" colorScheme=\"light\" className=\"bg-light\" placement=\"sticky-top\" >\r\n               {/* <Row> */}\r\n               {/* <Col lg={12}> */}\r\n               <CContainer fluid>\r\n                  {data.map((item, i) => (\r\n                     <CNavbarBrand className=\"text-center text-uppercase font-weight-bold text-primary\" key={i}>{item.BrancheName}</CNavbarBrand>\r\n                  ))}\r\n                  <CNavbarToggler\r\n                     aria-label=\"Toggle navigation\"\r\n                     aria-expanded={visible}\r\n                     onClick={() => setVisible(!visible)}\r\n                  />\r\n                  <CCollapse className=\"navbar-collapse\" visible={visible}>\r\n                     <CNavbarNav>\r\n                        {categories.map((data, i) => (\r\n                           <CNavItem as=\"li\" key={i} >\r\n                              <CNavLink href=\"#\"\r\n                                 onClick={() => filterCategory(data.id)}\r\n\r\n                                 className={`text-capitalize font-weight-bold ${activeCategory === data.id ? \"active bg-primary text-white\" : \" \"}`}\r\n                              >\r\n                                 {data.CategoryName}\r\n                              </CNavLink>\r\n                           </CNavItem>\r\n                        ))}\r\n                     </CNavbarNav>\r\n                  </CCollapse>\r\n               </CContainer>\r\n               {/* </Col> */}\r\n\r\n               {/* </Row> */}\r\n            </CNavbar>\r\n            <CNavbar colorScheme=\"light\" className=\"bg-white\" placement=\"sticky-top\" >\r\n\r\n               <Col lg={12}>\r\n                  <Card  >\r\n                     <Card.Body>\r\n                        <Slider {...settings}>\r\n                           {subcategories.map((item, i) => (\r\n                              <div key={i} className=\"px-1 text-center text-capitalize\" >\r\n                                 <Nav.Item as=\"li\"  >\r\n                                    <Link\r\n                                       onClick={() => filterProducts(item.sub_id)}\r\n                                       smooth={true}\r\n                                       duration={1000}\r\n                                       to={`${item.SubCategoryName}`}\r\n                                       // eventKey={item.SubCategoryName.toLowerCase()}\r\n                                       className={`text-capitalize font-weight-bold ${activeSubCategory === item.sub_id ? \"active border border-primary text-primary   \" : \" \"}`}\r\n                                    >\r\n                                       <div>\r\n                                          <img className={`w-100 img-thumbnail mt-1 mx-1 ${activeSubCategory === item.sub_id ? \"border border-primary\" : \" \"}`} style={{ height: '60px', objectFit: 'contain' }} src={`http://192.168.1.103/yesilik1/public/images/sub_catagories/${item.SubCategoryIcon}`} alt=\"\" />\r\n                                       </div>\r\n                                       <div className=\"mt-2\">\r\n                                          {item.SubCategoryName}\r\n                                       </div>\r\n                                    </Link>\r\n                                 </Nav.Item>\r\n                              </div>\r\n                           )\r\n                           )}\r\n                        </Slider>\r\n                     </Card.Body>\r\n                  </Card>\r\n               </Col>\r\n            </CNavbar>\r\n\r\n         </Fragment>\r\n         <div className=\"row mt-2 mx-2\">\r\n\r\n            {viewShow_HTMLTABLE}\r\n         </div>\r\n         <InfiniteScroll\r\n            dataLength={products.length} //This is important field to render the next data\r\n            next={fetchMoreData}\r\n            hasMore={changeState}\r\n            loader={<p className=\"text-center pt-5\" style={{ height: 120 }}><b>{t('loading')}</b></p>}\r\n            endMessage={\r\n               <p style={{ textAlign: 'center ', height: 120 }} >\r\n                  <b>{t('yay_you_have_seen_it_all')}</b>\r\n               </p>\r\n            }\r\n         >\r\n\r\n         </InfiniteScroll>\r\n\r\n         <Modal className=\"fade bd-example-modal-lg\" show={modalCentered} size=\"lg\">\r\n            <Form onSubmit={saveOrder} method=\"POST\">\r\n               <Modal.Header>\r\n                  <Modal.Title>{t('basket')}</Modal.Title>\r\n                  <Button\r\n                     onClick={() => setModalCentered(false)}\r\n                     variant=\"\"\r\n                     className=\"close\"\r\n                  >\r\n                     <span>&times;</span>\r\n                  </Button>\r\n               </Modal.Header>\r\n               <Modal.Body>\r\n                  {products.map((item, i) => {\r\n\r\n                     { var variant = JSON.parse(sessionStorage.getItem(`variant${item.variantID}`)) }\r\n                     if (variant != null) {\r\n                        { var quantity = sessionStorage.getItem(`quantity${item.variantID}`) }\r\n                        sum = sum + (variant?.CurrentPrice * quantity)\r\n                        message = `${message} *Product Name*: ${variant.ProductName} \\n *Variant Name*: ${variant.VariationName} \\n *QTY*: ${quantity} \\n *Unit*: ${variant.UnitName} \\n *Price*: ${variant.CurrentPrice} \\n *Total Price*: ${quantity * variant.CurrentPrice} *${variant.currency_code}* \\n\\n\\n`\r\n                        return (\r\n                           <div className=\"row border-bottom text-capitalize my-2\" key={i} style={{ color: \"black\" }} >\r\n                              <div className=\"col-xl-2 col-lg-2 col-md-4 col-sm-4 col-xs-4 mb-2 align-self-center \">\r\n                                 <div className=\"text-center bg-white\">\r\n                                    <img className=\"img-fluid w-100 img-thumbnail\" style={{ height: '100px', objectFit: 'contain' }} src={`http://192.168.1.103/yesilik1/public/images/variants_pics/${variant?.PicturesLocation}`} alt=\"\" />\r\n                                 </div>\r\n                              </div>\r\n                              <div className=\"col-xl-3 col-lg-3 col-md-4 col-sm-4 col-xs-4 align-self-center font-weight-bold\">\r\n                                 <span >{variant?.VariationName}</span>\r\n                              </div>\r\n\r\n                              <div className=\"col-xl-2 col-lg-2 col-md-4 col-sm-4 col-xs-4 align-self-center\">\r\n\r\n                                 {variant?.CurrentPrice} {variant?.currency_code}\r\n                              </div>\r\n                              <div className=\"col-xl-3 col-lg-2 col-md-4 col-sm-4 col-xs-4 align-self-center\">\r\n                                 {/* <Counter item={item} show={true} quantity={quantity} activeVariants={activeVariant => setActiveVariant(activeVariant)}\r\n                              /> */}\r\n                                 {quantity}\r\n                              </div>\r\n                              <div className=\"col-xl-2 col-lg-2 col-md-4 col-sm-4 col-xs-4 align-self-center font-weight-bold\">\r\n                                 {variant?.CurrentPrice * quantity} {variant?.currency_code}\r\n                              </div>\r\n                              {/* <div className=\"col-xl-2 col-lg-2 col-md-4 col-sm-4 col-xs-4 align-self-center\">\r\n                             \r\n                              </div>\r\n                              <div className=\"col-xl-10 col-lg-10 col-md-4 col-sm-4 col-xs-4 mb-3\">\r\n                                 <textarea className=\"form-control col-xl-12\" type=\"text\"\r\n\r\n                                    name=\"note\" placeholder={t('note')} onChange={(e)=>handleOrderDetails(variant.variantID,e)}\r\n                                    value={orderDetails.note}\r\n                                    ></textarea>\r\n                              </div> */}\r\n                           </div>\r\n                        )\r\n                     }\r\n                  }\r\n                  )\r\n                  }\r\n\r\n                  <p className=\"d-none\">{message = `\\n\\n\\n${message} *Grand Total*: ${sum}`}</p>\r\n                  <div className=\"row\" style={{ color: \"black\" }}>\r\n                     <div className=\"col-xl-12 col-lg-12 col-md-4 col-sm-4 col-xs-4 mb-3 align-self-center text-center font-weight-bolder \">\r\n                        <p> {t('grand_total')}</p>\r\n                        <span>\r\n                           {sum}\r\n                        </span>\r\n                     </div>\r\n                     <div className=\"col-xl-12 col-lg-12 col-md-4 col-sm-4 col-xs-4 mb-3\">\r\n                        <div className=\"form-group\">\r\n                           <label className=\"mb-1\"> {t('phone_number')} </label>\r\n                           <input\r\n                              type=\"text\"\r\n                              className=\"form-control\"\r\n                              placeholder={t('phone_number')}\r\n                              name=\"phoneNumber\"\r\n                              onChange={handleInput}\r\n                              value={orderInsert.phoneNumber}\r\n                           />\r\n\r\n                        </div>\r\n                     </div>\r\n                     <div className=\"col-xl-12 col-lg-12 col-md-4 col-sm-4 col-xs-4\">\r\n                        <div className=\"form-group\">\r\n                           <textarea className=\"form-control col-xl-12\" type=\"text\"\r\n\r\n                              name=\"generalNote\" placeholder={t('general_note')}\r\n                              onChange={handleInput}\r\n                              value={orderInsert.generalNote}\r\n                           ></textarea>\r\n\r\n                        </div>\r\n                     </div>\r\n                     <div className=\"col-xl-12 col-lg-12 col-md-4 col-sm-4 col-xs-4 mb-3 align-self-center text-center font-weight-bolder \">\r\n                        <p> {t('Address')}</p>\r\n                     </div>\r\n                     <div className=\"col-xl-12 col-lg-12 col-md-4 col-sm-4 col-xs-4\">\r\n                        <div className=\"form-group\">\r\n                           <textarea className=\"form-control col-xl-12\" type=\"text\"\r\n\r\n                              name=\"address\" placeholder={t('address')}\r\n                              onChange={handleInput}\r\n                              value={orderInsert.address}\r\n                           ></textarea>\r\n\r\n                        </div>\r\n                     </div>\r\n                     <div className=\"col-xl-4 col-lg-4 col-md-4 col-sm-4 col-xs-4 mb-3\">\r\n                        <div className=\"form-group\">\r\n                           <label className=\"mb-1\"> {t('buildingNo')} </label>\r\n                           <input\r\n                              type=\"text\"\r\n                              className=\"form-control\"\r\n                              placeholder={t('buildingNo')}\r\n                              name=\"buildingNo\"\r\n                              onChange={handleInput}\r\n                              value={orderInsert.buildingNo}\r\n                           />\r\n\r\n                        </div>\r\n                     </div>\r\n                     <div className=\"col-xl-4 col-lg-4 col-md-4 col-sm-4 col-xs-4 mb-3\">\r\n                        <div className=\"form-group\">\r\n                           <label className=\"mb-1\"> {t('floor')} </label>\r\n                           <input\r\n                              type=\"text\"\r\n                              className=\"form-control\"\r\n                              placeholder={t('floor')}\r\n                              name=\"floor\"\r\n                              onChange={handleInput}\r\n                              value={orderInsert.floor}\r\n                           />\r\n\r\n                        </div>\r\n                     </div>\r\n                     <div className=\"col-xl-4 col-lg-4 col-md-4 col-sm-4 col-xs-4 mb-3\">\r\n                        <div className=\"form-group\">\r\n                           <label className=\"mb-1\"> {t('flat')} </label>\r\n                           <input\r\n                              type=\"text\"\r\n                              className=\"form-control\"\r\n                              placeholder={t('flat')}\r\n                              name=\"flat\"\r\n                              onChange={handleInput}\r\n                              value={orderInsert.flat}\r\n                           />\r\n\r\n                        </div>\r\n                     </div>\r\n                     <div className=\"col-xl-12 col-lg-12 col-md-4 col-sm-4 col-xs-4\">\r\n                        <div className=\"form-group\">\r\n                           <textarea className=\"form-control col-xl-12\" type=\"text\"\r\n\r\n                              name=\"directions\" placeholder={t('directions')}\r\n                              onChange={handleInput}\r\n                              value={orderInsert.directions}\r\n\r\n\r\n                           ></textarea>\r\n\r\n                        </div>\r\n                     </div>\r\n\r\n                  </div>\r\n\r\n               </Modal.Body>\r\n               <Modal.Footer>\r\n                  <Button\r\n                     onClick={() => setModalCentered(false)}\r\n                     variant=\"danger light\"\r\n                  >\r\n                     {t('close')}\r\n                  </Button>\r\n                  <Button variant=\"danger\" onClick={(e) => clearSession(e)}> {t('clear_basket')} </Button>\r\n                  {/* <Button variant=\"success\" type=\"submit\"> {t('send_order')} </Button> */}\r\n                  <ReactWhatsapp className=\"btn btn-success\" number=\"905411251310\" message={message} type=\"submit\" >{t('send_order')} </ReactWhatsapp>\r\n\r\n               </Modal.Footer>\r\n            </Form>\r\n         </Modal>\r\n         <CNavbar expand=\"lg\" colorScheme=\"light\" className=\"row bg-light text-center\" placement=\"fixed-bottom\" >\r\n\r\n            {/* <div className=\"col-xl-4 col-xxl-4 col-lg-4 col-sm-4 \">\r\n               <strong>{t('grand_total')}</strong>\r\n               <p className=\"text-dark\">{sum}</p>\r\n\r\n            </div>\r\n            <div className=\"col-xl-4 col-xxl-4 col-lg-4 col-sm-4 \">\r\n               <strong>{t('delivery_fee')}</strong>\r\n               <p className=\"text-dark\">Free</p>\r\n            </div> */}\r\n            <div className=\"col-xl-12 col-xxl-12 col-lg-12 col-sm-12 \">\r\n               <Button variant=\"outline-success\" onClick={() => setModalCentered(true)}>\r\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-whatsapp\" viewBox=\"0 0 16 16\">\r\n                     <path d=\"M13.601 2.326A7.854 7.854 0 0 0 7.994 0C3.627 0 .068 3.558.064 7.926c0 1.399.366 2.76 1.057 3.965L0 16l4.204-1.102a7.933 7.933 0 0 0 3.79.965h.004c4.368 0 7.926-3.558 7.93-7.93A7.898 7.898 0 0 0 13.6 2.326zM7.994 14.521a6.573 6.573 0 0 1-3.356-.92l-.24-.144-2.494.654.666-2.433-.156-.251a6.56 6.56 0 0 1-1.007-3.505c0-3.626 2.957-6.584 6.591-6.584a6.56 6.56 0 0 1 4.66 1.931 6.557 6.557 0 0 1 1.928 4.66c-.004 3.639-2.961 6.592-6.592 6.592zm3.615-4.934c-.197-.099-1.17-.578-1.353-.646-.182-.065-.315-.099-.445.099-.133.197-.513.646-.627.775-.114.133-.232.148-.43.05-.197-.1-.836-.308-1.592-.985-.59-.525-.985-1.175-1.103-1.372-.114-.198-.011-.304.088-.403.087-.088.197-.232.296-.346.1-.114.133-.198.198-.33.065-.134.034-.248-.015-.347-.05-.099-.445-1.076-.612-1.47-.16-.389-.323-.335-.445-.34-.114-.007-.247-.007-.38-.007a.729.729 0 0 0-.529.247c-.182.198-.691.677-.691 1.654 0 .977.71 1.916.81 2.049.098.133 1.394 2.132 3.383 2.992.47.205.84.326 1.129.418.475.152.904.129 1.246.08.38-.058 1.171-.48 1.338-.943.164-.464.164-.86.114-.943-.049-.084-.182-.133-.38-.232z\" />\r\n                  </svg>\r\n                  {t('order_now_by_whatsapp')}\r\n               </Button>\r\n\r\n            </div>\r\n         </CNavbar>\r\n\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default BranchDetails;\r\n","C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\PublicRoute.js",[],"C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\Public Link\\VariantDetails.js",["181","182","183","184","185"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\"\r\nimport { Link } from \"react-router-dom\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport Slider from \"react-slick\";\r\nimport { Table } from \"react-bootstrap\";\r\n\r\nconst VariantDetails = (props) => {\r\n    // for localization\r\n    const { t } = useTranslation();\r\n    // let { id } = useParams();\r\n    const id = props.match.params.id;\r\n    //for retriving data using laravel API\r\n    const [fetchData, setFetchData] = useState([]);\r\n    const [variantData, setVariantData] = useState([]);\r\n    const [variantDetails, setVariantDetails] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    // Quantity increment/decrement using hooks start\r\n    const [quantity, setQuantity] = useState(1);\r\n    const handleDecrement = () => {\r\n        if (quantity > 1) {\r\n            setQuantity(prevCount => prevCount - 1);\r\n        }\r\n    }\r\n    const handelIncrement = () => {\r\n\r\n        setQuantity(prevCount => prevCount + 1);\r\n    }\r\n    const [variants, setVariants] = useState([])\r\n\r\n    // Quantity increment/decrement using hooks end\r\n    useEffect(() => {\r\n        axios.get(`/api/GetPictures/${id}`).then(res => {\r\n            if (res.data.status === 200) {\r\n                setFetchData(res.data.fetchData);\r\n            }\r\n            setLoading(false);\r\n        });\r\n\r\n        axios.get(`/api/Getvariant/${id}`).then(res => {\r\n            if (res.data.status === 200) {\r\n                setVariantData(res.data.variantdata);\r\n                axios.get(`/api/Getvariations/${res.data.variantdata[0].product_id}`).then(res => {\r\n                    if (res.data.status === 200) {\r\n                        setVariants(res.data.fetchData);\r\n                        // console.log(res.data.fetchData);\r\n\r\n                    }\r\n                });\r\n            }\r\n        });\r\n        axios.get(`/api/GetVarinatDetails/${id}`).then(res => {\r\n            if (res.data.status === 200) {\r\n                // console.log(res.data.fetchData);\r\n                setVariantDetails(res.data.fetchData);\r\n            }\r\n        });\r\n    }, [quantity, id]);\r\n\r\n    var viewImages_HTMLTABLE = \"\";\r\n    if (loading) {\r\n        return <div className=\"container \"><div className=\"spinner-border text-primary \" role=\"status\" style={{ position: 'fixed', top: '50%', left: '50%' }}><span className=\"sr-only\">{t('loading')}</span></div></div>\r\n    } else {\r\n        viewImages_HTMLTABLE =\r\n            fetchData.map((item, i) => {\r\n                return (\r\n                    <div className=\"col-xl-12 col-lg-12 col-sm-12 my-2\" key={item.id}>\r\n                        <div className=\"card overflow-hidden\">\r\n                            {/* <div className=\"card-body\"> */}\r\n                            <div className=\"text-center\">\r\n                                <div className=\"profile-photo\">\r\n                                    <img\r\n                                        style={{ height: '200px', objectFit: 'contain' }}\r\n                                        src={`http://192.168.1.103/yesilik1/public/images/variants_pics/${item.PicturesLocation}`}\r\n                                        className=\"d-block w-100 img-thumbnail\"\r\n                                        alt=\"\"\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            {/* </div> */}\r\n                        </div>\r\n                    </div>\r\n                )\r\n            })\r\n\r\n    }\r\n    // add to basket start   \r\n    const addBaskets = (e) => {\r\n        e.preventDefault();\r\n        const basket = {\r\n            VariantQuantity: quantity,\r\n        }\r\n        axios.post(`/api/InsertBasket/${id}`, basket).then(res => {\r\n            if (res.data.status === 200) {\r\n                setQuantity(1);\r\n                // setVariantData([]);\r\n                swal(\"Success\", res.data.message, \"success\");\r\n                // thisClicked.closest(\"tr\").remove();\r\n            } else if (res.data.status === 404) {\r\n                swal(\"Success\", res.data.message, \"success\");\r\n            }\r\n        });\r\n\r\n    }\r\n    // add to basket end   \r\n    return (\r\n        <div className=\"container\">\r\n            <Fragment>\r\n                {/* <PageTItle headingPara={t('variants')} activeMenu={t('variant_details')} motherMenu={t('variants')} /> */}\r\n                {/* <!-- Insert  Modal --> */}\r\n                <div className=\"row\" >\r\n                    <div className=\"col-xl-12 col-xxl-12 col-lg-12 col-sm-12 \">\r\n                        <div className=\"row\" >\r\n                            {/* <div > */}\r\n                            <Slider dots={false} infinite={true} slidesToShow={1} slidesToScroll={1}>\r\n                                {viewImages_HTMLTABLE}\r\n                            </Slider>\r\n                            {/* </div> */}\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                    <div className=\"col-xl-12 col-xxl-12 col-lg-12 col-sm-12 mt-4\">\r\n                        <div >\r\n                            {t('availability')} {variants.length}\r\n                        </div>\r\n                        <Slider dots={false} infinite={true} slidesToShow={variants.length >= 4 ? 4 : variants.length} slidesToScroll={1}>\r\n                            {variants.map((item, i) => (\r\n                                <div key={i} className=\"px-1 text-center text-capitalize \" >\r\n                                    {/* <Item as=\"li\" > */}\r\n                                    <Link\r\n                                        to={`/variant-details/${item.variantID}`}\r\n                                        // eventKey={item.SubCategoryName.toLowerCase()}\r\n                                        className={`text-capitalize font-weight-bold ${id == item.variantID ? \"active text-primary\" : \" \"}`}\r\n                                    >\r\n                                        <div>\r\n                                            <img className={`w-100 img-thumbnail mt-1 mx-1 ${id == item.variantID ? \"border border-primary\" : \" \"}`} style={{ height: '80px', objectFit: 'contain' }} src={`http://192.168.1.103/yesilik1/public/images/variants_pics/${item.PicturesLocation}`} alt=\"\" />\r\n                                        </div>\r\n                                        {/* <div className=\"\">\r\n                                        {item.VariationName}\r\n                                    </div> */}\r\n                                    </Link>\r\n                                    {/* </Item> */}\r\n                                </div>\r\n                            )\r\n                            )}\r\n                        </Slider>\r\n                    </div>\r\n\r\n                    <div className=\"col-xl-12 col-xxl-12 col-lg-12 col-sm-12\">\r\n                        {variantData.map((item, i) => {\r\n                            return (\r\n                                <div className=\"card\" key={i}>\r\n                                    <div className=\"card-header font-weight-bold\">\r\n                                        Product Variation Details\r\n                                    </div>\r\n                                    <div className=\"card-body\">\r\n                                        <div className=\"row\">\r\n                                            <div className=\"col-xl-12 col-lg-12  col-md-12 col-xxl-12 col-sm-12\">\r\n                                                <div className=\"product-detail-content\">\r\n                                                    <div className=\"new-arrival-content pr\">\r\n                                                        <h4 >{item.VariationName}</h4>\r\n                                                        <div className=\"star-rating d-inline mb-2\">\r\n                                                            {item.ProductName}\r\n                                                        </div>\r\n                                                        <br></br>\r\n                                                        <p className=\"price\">{item.CurrentPrice + ' ' + item.currency_code}</p>\r\n                                                        <br></br>\r\n                                                        <br></br>\r\n                                                        <p>\r\n                                                            {t('availability')}:\r\n                                                            <span className=\"item\">\r\n                                                                {item.IsAvailable === 0 ? ' Yes ' : ' No '}\r\n                                                                <i className=\"fa fa-shopping-basket\"></i>\r\n                                                            </span>\r\n\r\n                                                        </p>\r\n\r\n                                                        <p>\r\n                                                            {t('variant_code')}:\r\n                                                            <span className=\"item\">{id}</span>\r\n                                                        </p>\r\n                                                        <p>\r\n                                                            {t('unit')}: <span className=\"item\">{item.UnitName}</span>\r\n                                                        </p>\r\n                                                        <h4 className=\"m-b-15\">{t('description')}</h4>\r\n                                                        <p className=\"text-content\"> {item.productDescription}</p>\r\n                                                        <h4 className=\"m-b-15\">{t('advice')}</h4>\r\n                                                        <p className=\"text-content\"> {item.productAdvice}</p>\r\n                                                        <p>{t('variant_details')} </p>\r\n                                                        <Table responsive striped bordered hover>\r\n                                                            <thead>\r\n                                                                <tr>\r\n                                                                    <th>{t('name')}</th>\r\n                                                                    <th>{t('value')}</th>\r\n                                                                </tr>\r\n                                                            </thead>\r\n                                                            <tbody>\r\n                                                                {\r\n                                                                    variantDetails.map((item) => {\r\n                                                                        return (\r\n                                                                            <tr key={item.id}>\r\n                                                                                <td>{item.name}</td>\r\n                                                                                <td>{item.value}</td>\r\n                                                                            </tr>\r\n                                                                        )\r\n                                                                    })\r\n                                                                }\r\n                                                            </tbody>\r\n                                                        </Table>\r\n\r\n                                                        {/* <div className=\"col-2 px-0 mt-2\">\r\n                                                            <div className=\"input-group\">\r\n                                                                <button type=\"button\" onClick={handleDecrement} className=\"input-group-text \">{t('minus')}</button>\r\n                                                                    <div className=\"input-group-text bg-white \"> {quantity}</div>\r\n                                                                <button type=\"button\" onClick={handelIncrement} className=\"input-group-text\" disabled={item.Buyingquantity - item.SellingQuantity === quantity ? 'disabled' : ''}>{t('plus')} </button>\r\n                                                            </div>\r\n                                                            {item.Buyingquantity - item.SellingQuantity === quantity\r\n                                                                ?\r\n                                                                <div className=\"text-danger\">\r\n                                                                    {t('not_available')}\r\n                                                                </div>\r\n                                                                : \"\"\r\n                                                            }\r\n                                                        </div> */}\r\n                                                        {/* <div className=\"shopping-cart mt-5\"> */}\r\n                                                        {/* <Link\r\n                                                                to=\"/page-login\"\r\n                                                                className=\"btn btn-primary btn-lg\">\r\n                                                                <i className=\"fa fa-shopping-basket mr-2\"></i>\r\n                                                                {t('add_to_basket')}\r\n                                                            </Link> */}\r\n                                                        {/* <button\r\n                                                type=\"button\"\r\n                                                onClick={addBaskets}\r\n                                                className=\"btn btn-primary btn-lg\">\r\n                                                <i className=\"fa fa-shopping-basket mr-2\"></i>\r\n                                                    {t('add_to_basket')}\r\n                                            </button>\r\n                                         */}\r\n                                                        {/* </div> */}\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </Fragment>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VariantDetails;\r\n","C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\Public Link\\ShowProducts.js",[],"C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\index.js",[],"C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\Attributes\\Options.js",[],"C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\Attributes\\Attributes.js",[],"C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\Branches\\Tables.js",[],"C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\utils\\index.js",[],"C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\PrivateRoute.js",[],"C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\layouts\\Footer.js",[],"C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\Variants\\VariantDetails.js",[],"C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\Dashboard\\Home\\Home.js",[],"C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\Dashboard\\Profile\\Profile.js",[],"C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\layouts\\nav\\index.js",[],"C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\layouts\\PageTitle.js",[],"C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\layouts\\nav\\NavHader.js",[],"C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\layouts\\nav\\Header.js",[],"C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\layouts\\nav\\SideBar.js",[],"C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\Orders\\Order.js",[],"C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\Orders\\Basket.js",[],"C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\Branches\\branches.js",[],"C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\Categories\\Category.js",[],"C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\Categories\\SubCategory.js",[],"C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\Branches\\Branches.js",[],"C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\Companies\\company.js",[],"C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\Companies\\Company.js",[],"C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\Variants\\gallary.js",[],"C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\Variants\\Gallary.js",[],"C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\Variants\\Variants.js",["186"],"import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { Button, Modal, Form } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert\"\r\nimport { Link } from \"react-router-dom\"\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from 'yup';\r\nimport { CBreadcrumb, CBreadcrumbItem, CDropdownMenu, CDropdownToggle, CDropdown } from '@coreui/react'\r\nimport Select from 'react-select';\r\n\r\nconst Variants = (props) => {\r\n    // validation start\r\n    const schema = yup.object().shape({\r\n        variant_name: yup.string().required(\"This field is a required field\"),\r\n        quantity: yup.number().positive().integer().required().typeError('You must specify a number'),\r\n        Description: yup.string().required(\"This field is a required field\"),\r\n        sku: yup.string().required(\"This field is a required field\"),\r\n        Advice: yup.string().required(\"This field is a required field\"),\r\n        CurrentPrice: yup.number().positive().integer().required().typeError('You must specify a number'),\r\n        // OldPrice: yup.number().positive().integer().required().typeError('You must specify a number'),\r\n        // UnitID: yup.string().required(\"This field is a required field\"),\r\n    }).required();\r\n    const { register, handleSubmit, reset, formState: { errors } } = useForm({\r\n        resolver: yupResolver(schema)\r\n    });\r\n    // validation end \r\n    // for localization\r\n    const { t } = useTranslation();\r\n    const id = props.match.params.id;\r\n    // edit modal\r\n    const [editmodalCentered, setEditModalCentered] = useState(false);\r\n    // insert a section\r\n\r\n    // edit code\r\n    const [editVariant, setEditVariant] = useState([]);\r\n    const editHandleInput = (e) => {\r\n        e.persist();\r\n        setEditVariant({ ...editVariant, [e.target.name]: e.target.value });\r\n    };\r\n    const fetchVariant = (e, id) => {\r\n        e.preventDefault();\r\n        axios.get(`/api/Editvariations/${id}`).then(res => {\r\n            if (res.data.status === 200) {\r\n                // console.log(res.data.variant);\r\n                setEditVariant(res.data.variant);\r\n                setEditModalCentered(true);\r\n            } else if (res.data.status === 404) {\r\n                swal(\"Error\", res.data.message, \"error\");\r\n            }\r\n\r\n        });\r\n\r\n    }\r\n    const updateVariant = (e) => {\r\n        e.preventDefault();\r\n        axios.post(\"/api/UpdateVariations\", editVariant).then(res => {\r\n            if (res.data.status === 200) {\r\n                // console.log(res.data.status);\r\n                setEditVariant('');\r\n                swal(\"Success\", res.data.message, \"success\");\r\n                setEditModalCentered(false)\r\n                //  this.props.history.push(\"/\")\r\n            }\r\n        });\r\n\r\n    };\r\n    // edit End\r\n    // insert Start\r\n    const [modalCentered, setModalCentered] = useState(false);\r\n    const [variantInsert, setVariantInsert] = useState({});\r\n    const handleInput = (e) => {\r\n        e.persist();\r\n        setVariantInsert({ ...variantInsert, [e.target.name]: e.target.value });\r\n    };\r\n    const [options, setOptions] = useState([]);\r\n    const selectOnChange = (index, event) => {\r\n        event.preventDefault();\r\n        event.persist();\r\n\r\n        setOptions({\r\n            ...options,\r\n            [event.target.name]: event.target.value,\r\n\r\n        });\r\n        // console.log(options);\r\n        // console.log(displayValue);\r\n    };\r\n    // for add details start\r\n    const [form, setForm] = useState([]);\r\n    const prevIsValid = () => {\r\n        if (form.length === 0) {\r\n            return true;\r\n        }\r\n\r\n        const someEmpty = form.some(\r\n            (item) => item.value === \"\" || item.name === \"\"\r\n        );\r\n\r\n        if (someEmpty) {\r\n            form.map((item, index) => {\r\n                const allPrev = [...form];\r\n\r\n                if (form[index].name === \"\") {\r\n                    allPrev[index].errors.name = \"Name is required\";\r\n                }\r\n\r\n                if (form[index].value === \"\") {\r\n                    allPrev[index].errors.value = \"Value is required\";\r\n                }\r\n                setForm(allPrev);\r\n            });\r\n        }\r\n\r\n        return !someEmpty;\r\n    };\r\n\r\n    const handleAddLink = (e) => {\r\n        e.preventDefault();\r\n        const inputState = {\r\n            name: \"\",\r\n            value: \"\",\r\n\r\n            errors: {\r\n                name: null,\r\n                value: null,\r\n            },\r\n        };\r\n\r\n        if (prevIsValid()) {\r\n            setForm((prev) => [...prev, inputState]);\r\n        }\r\n    };\r\n\r\n    const onChange = (index, event) => {\r\n        event.preventDefault();\r\n        event.persist();\r\n\r\n        setForm((prev) => {\r\n            return prev.map((item, i) => {\r\n                if (i !== index) {\r\n                    console.log(item);\r\n\r\n                    return item;\r\n                }\r\n\r\n                return {\r\n                    ...item,\r\n                    [event.target.name]: event.target.value,\r\n\r\n                    errors: {\r\n                        ...item.errors,\r\n                        [event.target.name]:\r\n                            event.target.value.length > 0\r\n                                ? null\r\n                                : [event.target.name] + \" Is required\",\r\n                    },\r\n                };\r\n            });\r\n        });\r\n    };\r\n\r\n    const handleRemoveField = (e, index) => {\r\n        e.preventDefault();\r\n\r\n        setForm((prev) => prev.filter((item) => item !== prev[index]));\r\n    };\r\n    // end \r\n    const saveInventory = (e) => {\r\n        // e.preventDefault();\r\n        console.log(displayValue[0]);\r\n\r\n        const formData = new FormData();\r\n        for (let i = 0; i < imageState.image.length; i++) {\r\n            formData.append(\"file[]\", imageState.image[i]);\r\n        }\r\n        formData.append('variant_name', variantInsert.variant_name);\r\n        formData.append('quantity', variantInsert.quantity);\r\n        formData.append('Description', variantInsert.Description);\r\n        formData.append('Advice', variantInsert.Advice);\r\n        formData.append('CurrentPrice', variantInsert.CurrentPrice);\r\n        formData.append('sku', variantInsert.sku);\r\n        formData.append('attribute', JSON.stringify(displayValue));\r\n        formData.append('option', JSON.stringify(options));\r\n        formData.append('form', JSON.stringify(form));\r\n        axios.post(`/api/InsertInventory/${id}`, formData).then(res => {\r\n            if (res.data.status === 200) {\r\n                setVariantInsert({});\r\n                setDisplayValue([]);\r\n                setOptions([]);\r\n                reset();\r\n                swal(\"Success\", res.data.message, \"success\");\r\n                setForm([]);\r\n                setModalCentered(false)\r\n                setSelectedFiles([]);\r\n            }\r\n        });\r\n    };\r\n    // for Pictures start\r\n    const [selectedFiles, setSelectedFiles] = useState([]);\r\n    const [imageState, setImageState] = useState([]);\r\n    const handleImageChange = (e) => {\r\n        const imagesArray = [];\r\n        for (let i = 0; i < e.target.files.length; i++) {\r\n            imagesArray.push(e.target.files[i]);\r\n        }\r\n        setImageState({ ...imageState, image: imagesArray });\r\n\r\n        setSelectedFiles([]);\r\n        if (e.target.files) {\r\n            const filesArray = Array.from(e.target.files).map((file) => URL.createObjectURL(file));\r\n            setSelectedFiles((prevImages) => prevImages.concat(filesArray));\r\n            Array.from(e.target.files).map(\r\n                (file) => URL.revokeObjectURL(file)\r\n            );\r\n        }\r\n\r\n    };\r\n    const renderPhotos = (source) => {\r\n        return source.map((photo) => {\r\n            return <img className=\"p-2\" src={photo} alt=\"\" key={photo} style={{ width: \"100\", height: \"100px\" }} />;\r\n        });\r\n    };\r\n    // for Pictures End\r\n\r\n    //for retriving data using laravel API\r\n    const [fetchData, setFetchData] = useState([]);\r\n    const [attributes, setAttributes] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    useEffect(() => {\r\n        axios.get(`/api/Getvariations/${id}`).then(res => {\r\n            if (res.data.status === 200) {\r\n                setFetchData(res.data.fetchData);\r\n                // console.log(fetchData);\r\n            }\r\n            setLoading(false);\r\n        });\r\n        axios.get(`/api/GetAttributes`).then(res => {\r\n            if (res.data.status === 200) {\r\n                setAttributes(res.data.fetchData);\r\n            }\r\n        });\r\n    }, [id, variantInsert, attributes, editVariant]);\r\n\r\n\r\n    // select box \r\n    const [displayValue, setDisplayValue] = useState([]);\r\n    const handleSelectEvent = (e) => {\r\n        setDisplayValue(Array.isArray(e) ? e.map(item => item.label) : [])\r\n    }\r\n\r\n    // insert Attribute Start\r\n    const [attributeInsert, setAttributeInsert] = useState([]);\r\n    const [attributeModal, setAttributeModal] = useState(false);\r\n    const handleInputAttribute = (e) => {\r\n        e.persist();\r\n        setAttributeInsert({ ...attributeInsert, [e.target.name]: e.target.value });\r\n    };\r\n    const saveAttribute = (e) => {\r\n        e.preventDefault();\r\n        axios.post(\"/api/InsertAttribute\", attributeInsert).then(res => {\r\n            if (res.data.status === 200) {\r\n                setAttributeInsert([]);\r\n                reset();\r\n\r\n                swal(\"Success\", res.data.message, \"success\");\r\n                setAttributeModal(false)\r\n                //  this.props.history.push(\"/\")\r\n            }\r\n        });\r\n    };\r\n    // insert Attribute End\r\n\r\n    // delete variant Start \r\n    const deleteVariant = (e, id) => {\r\n        e.preventDefault();\r\n        swal({\r\n            title: \"Are you sure?\",\r\n            text: \"Once deleted, you will not be able to recover this imaginary file!\",\r\n            icon: \"warning\",\r\n            buttons: [t('cancel'), t('confirm')],\r\n            dangerMode: true,\r\n        })\r\n            .then((willDelete) => {\r\n                if (willDelete) {\r\n                    axios.delete(`/api/Deletevariations/${id}`).then(res => {\r\n                        if (res.data.status === 200) {\r\n                            setVariantInsert({});\r\n                            swal(\"Success\", res.data.message, \"success\");\r\n                            // thisClicked.closest(\"tr\").remove();\r\n                        } else if (res.data.status === 404) {\r\n                            swal(\"Error\", res.data.message, \"error\");\r\n                        }\r\n                    });\r\n\r\n                } else {\r\n                    swal(\"Your Data is safe now!\");\r\n                }\r\n            });\r\n    }\r\n    // delete variant End\r\n\r\n\r\n    var branchID = 0;\r\n    var CategoryID = 0;\r\n    var sub_category_id = 0;\r\n    var viewProducts_HTMLTABLE = \"\";\r\n    if (loading) {\r\n        return <div className=\"spinner-border text-primary \" role=\"status\" ><span className=\"sr-only\">{t('loading')}</span></div>\r\n    } else {\r\n\r\n        viewProducts_HTMLTABLE =\r\n            fetchData.map((item, i) => {\r\n                branchID = item.branchID;\r\n                CategoryID = item.CategoryID;\r\n                sub_category_id = item.sub_category_id;\r\n                return (\r\n                    <div className=\"col-xl-3 col-lg-4 col-sm-6\" key={i}>\r\n                        <div className=\"card overflow-hidden\">\r\n                            <div className=\"card-body\">\r\n                                <div className=\"text-center\">\r\n\r\n                                    <img\r\n                                        style={{ height: '100px', objectFit: 'contain' }}\r\n\r\n                                        src={`http://localhost:8000/images/variants_pics/${item.PicturesLocation}`}\r\n                                        className=\" w-40 img-thumbnail\"\r\n                                        alt=\"\"\r\n                                    />\r\n\r\n                                    <h4 className=\"mt-4 mb-1\"> {item.VariationName}</h4>\r\n                                    {/* <p className=\"text-muted\">{item.Description} </p> */}\r\n                                    <CDropdown variant=\"btn-group\">\r\n                                        {/* <CButton color=\"primary\" size=\"sm\"></CButton> */}\r\n                                        <CDropdownToggle color=\"primary\" size=\"lg\" split=\"hover\" shape=\"rounded\" caret={false}><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" fill=\"currentColor\" className=\"bi bi-three-dots\" viewBox=\"0 0 16 16\">\r\n                                            <path d=\"M3 9.5a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm5 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm5 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3z\" />\r\n                                        </svg></CDropdownToggle>\r\n                                        <CDropdownMenu>\r\n                                            <div className=\"mx-3 my-2\">\r\n\r\n                                                <Link\r\n                                                    to=\"\"\r\n                                                    onClick={(e) => fetchVariant(e, item.variantID)}\r\n                                                >\r\n                                                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-pencil-square\" viewBox=\"0 0 16 16\">\r\n                                                        <path d=\"M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z\" />\r\n                                                        <path fillRule=\"evenodd\" d=\"M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z\" />\r\n                                                    </svg>\r\n                                                    <span> {t('edit')}</span>\r\n                                                </Link>\r\n                                            </div>\r\n\r\n                                            <div className=\"mx-3 my-2\">\r\n\r\n                                                <Link\r\n                                                    to=\"\"\r\n                                                    onClick={(e) => deleteVariant(e, item.variantID)}\r\n                                                >\r\n                                                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-trash\" viewBox=\"0 0 16 16\">\r\n                                                        <path d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z\" />\r\n                                                        <path fillRule=\"evenodd\" d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\" />\r\n                                                    </svg>\r\n                                                    <span> {t('delete')}</span>\r\n\r\n\r\n                                                </Link>\r\n                                            </div>\r\n\r\n                                            <div className=\"mx-3 my-2\">\r\n                                                <Link to={`/gallery/${item.variantID}`}><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-images\" viewBox=\"0 0 16 16\">\r\n                                                    <path d=\"M4.502 9a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3z\" />\r\n                                                    <path d=\"M14.002 13a2 2 0 0 1-2 2h-10a2 2 0 0 1-2-2V5A2 2 0 0 1 2 3a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v8a2 2 0 0 1-1.998 2zM14 2H4a1 1 0 0 0-1 1h9.002a2 2 0 0 1 2 2v7A1 1 0 0 0 15 11V3a1 1 0 0 0-1-1zM2.002 4a1 1 0 0 0-1 1v8l2.646-2.354a.5.5 0 0 1 .63-.062l2.66 1.773 3.71-3.71a.5.5 0 0 1 .577-.094l1.777 1.947V5a1 1 0 0 0-1-1h-10z\" />\r\n                                                </svg> <span> {t('gallery')}</span></Link>\r\n                                            </div>\r\n                                            <div className=\"mx-3 my-2\">\r\n                                                <Link to={`/show_variant_detials/${item.variantID}`}><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-ticket-detailed\" viewBox=\"0 0 16 16\">\r\n                                                    <path fill-rule=\"evenodd\" d=\"M0 4.5A1.5 1.5 0 0 1 1.5 3h13A1.5 1.5 0 0 1 16 4.5V6a.5.5 0 0 1-.5.5 1.5 1.5 0 0 0 0 3 .5.5 0 0 1 .5.5v1.5a1.5 1.5 0 0 1-1.5 1.5h-13A1.5 1.5 0 0 1 0 11.5V10a.5.5 0 0 1 .5-.5 1.5 1.5 0 1 0 0-3A.5.5 0 0 1 0 6V4.5ZM1.5 4a.5.5 0 0 0-.5.5v1.05a2.5 2.5 0 0 1 0 4.9v1.05a.5.5 0 0 0 .5.5h13a.5.5 0 0 0 .5-.5v-1.05a2.5 2.5 0 0 1 0-4.9V4.5a.5.5 0 0 0-.5-.5h-13ZM4 5.5a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5Zm0 5a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5ZM5 7a1 1 0 0 0 0 2h6a1 1 0 1 0 0-2H5Z\" />\r\n                                                </svg> <span> {t('details')}</span></Link>\r\n                                            </div>\r\n\r\n                                        </CDropdownMenu>\r\n                                    </CDropdown>\r\n\r\n\r\n\r\n                                </div>\r\n                            </div>\r\n\r\n\r\n                        </div>\r\n                    </div>\r\n                )\r\n            })\r\n\r\n    }\r\n    return (\r\n        <Fragment>\r\n            <CBreadcrumb style={{ \"--cui-breadcrumb-divider\": \"'>'\" }}>\r\n                <CBreadcrumbItem className=\"font-weight-bold\" href=\"/branches\" >{t('Branches')}</CBreadcrumbItem>\r\n                <CBreadcrumbItem className=\"font-weight-bold\" href={`/category/${branchID}`} >{t('categories')}</CBreadcrumbItem>\r\n                <CBreadcrumbItem className=\"font-weight-bold\" href={`/sub-category/${CategoryID}`} >{t('sub_category')}</CBreadcrumbItem>\r\n                <CBreadcrumbItem className=\"font-weight-bold\" href={`/products/${sub_category_id}`}>{t('products')} </CBreadcrumbItem>\r\n                <CBreadcrumbItem active> {t('variants')} </CBreadcrumbItem>\r\n            </CBreadcrumb>\r\n            {/* <PageTItle headingPara={t('variants')} activeMenu={t('variant_list')} motherMenu={t('variants')} /> */}\r\n            {/* <!-- Insert  Modal for Attribute --> */}\r\n            <Modal className=\"fade\" show={attributeModal}>\r\n                <Form onSubmit={saveAttribute} method=\"POST\" encType=\"multipart/form-data\">\r\n                    <Modal.Header>\r\n                        <Modal.Title>{t('add_attribute')}</Modal.Title>\r\n                        <Button\r\n                            onClick={() => setAttributeModal(false)}\r\n                            variant=\"\"\r\n                            className=\"close\"\r\n                        >\r\n                            <span>&times;</span>\r\n                        </Button>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <div className=\"form-group\">\r\n                            <label className=\"mb-1 \"> <strong>{t('attribute_name')} </strong> </label>\r\n                            <input\r\n                                type=\"text\"\r\n                                className=\"form-control\"\r\n                                placeholder={t('attribute_name')}\r\n                                name=\"attributeName\"\r\n                                required\r\n                                onChange={handleInputAttribute}\r\n                                value={attributeInsert.attributeName}\r\n                            />\r\n\r\n                        </div>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button\r\n                            onClick={() => setAttributeModal(false)}\r\n                            variant=\"danger light\"\r\n                        >\r\n                            {t('close')}\r\n                        </Button>\r\n                        <Button variant=\"primary\" type=\"submit\">{t('save')}</Button>\r\n\r\n                    </Modal.Footer>\r\n                </Form>\r\n            </Modal>\r\n            \r\n            {/* <!-- Insert  Modal for variant  --> */}\r\n            <Modal className=\"fade bd-example-modal-lg\" show={modalCentered} size=\"lg\">\r\n                <Form onSubmit={handleSubmit(saveInventory)} method=\"POST\" encType=\"multipart/form-data\">\r\n                    <Modal.Header>\r\n                        <Modal.Title>{t('add_variants')}</Modal.Title>\r\n                        <Button\r\n                            onClick={() => setModalCentered(false)}\r\n                            variant=\"\"\r\n                            className=\"close\"\r\n                        >\r\n                            <span>&times;</span>\r\n                        </Button>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <div className=\"row\" >\r\n                            <div className=\"col-xl-12 col-xxl-12 col-lg-12 col-sm-12 \">\r\n                                <div className=\"form-group\">\r\n                                    <div className=\"d-flex justify-content-between\">\r\n                                        <label className=\"mb-1 \"> <strong>{t('attributes')}</strong> </label>\r\n                                        <label className=\" \"> {t('attributes_add_note')}\r\n                                            <Link\r\n                                                onClick={() => setAttributeModal(true)}\r\n                                            >\r\n                                                {t('add_attribute')}\r\n                                            </Link>\r\n                                        </label>\r\n                                    </div>\r\n                                    <Select\r\n                                        // defaultValue={[colourOptions[2], colourOptions[3]]}\r\n                                        isMulti\r\n                                        name=\"colors\"\r\n                                        options={attributes.map((o, i) => {\r\n                                            return { id: i, value: o.id, label: o.attributeName };\r\n                                        })}\r\n                                        className=\"basic-multi-select\"\r\n                                        classNamePrefix=\"select\"\r\n                                        onChange={handleSelectEvent}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"col-xl-12 col-xxl-12 col-lg-12 col-sm-12 mt-3\">\r\n                                {\r\n                                    displayValue?.map((item, i) => {\r\n                                        return (\r\n                                            <div className=\"col-xl-12 col-xxl-12 col-lg-12 col-sm-12\" key={i}>\r\n                                                <div className=\"form-group\">\r\n                                                    <label className=\"mb-1 \"> <strong>{item}</strong> </label>\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        className=\"form-control\"\r\n                                                        name={item}\r\n                                                        placeholder={item}\r\n                                                        value={options.option}\r\n                                                        onChange={(e) => selectOnChange(i, e)}\r\n                                                    />\r\n\r\n\r\n                                                </div>\r\n                                            </div>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </div>\r\n                            <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                                <div className=\"form-group\">\r\n                                    <label className=\"mb-1 \"> <strong>{t('variant_name')}</strong> </label>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        {...register(\"variant_name\")}\r\n                                        className=\"form-control\"\r\n                                        placeholder={t('variant_name')}\r\n                                        name=\"variant_name\"\r\n                                        onChange={handleInput}\r\n                                        value={variantInsert.variant_name}\r\n                                    />\r\n                                    <div className=\"text-danger\">\r\n                                        {errors.variant_name?.message}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                                <div className=\"form-group\">\r\n                                    <label className=\"mb-1 \"> <strong>{t('quantity')}</strong> </label>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        {...register(\"quantity\")}\r\n                                        className=\"form-control\"\r\n                                        placeholder={t('quantity')}\r\n                                        name=\"quantity\"\r\n                                        onChange={handleInput}\r\n                                        value={variantInsert.quantity}\r\n                                    />\r\n                                    <div className=\"text-danger\">\r\n                                        {errors.quantity?.message}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                                <div className=\"form-group\">\r\n                                    <label className=\"mb-1 \"> <strong>{t('description')}</strong> </label>\r\n                                    <textarea\r\n                                        type=\"text\"\r\n                                        {...register(\"Description\")}\r\n                                        className=\"form-control\"\r\n                                        placeholder={t('description')}\r\n                                        name=\"Description\"\r\n                                        onChange={handleInput}\r\n                                        value={variantInsert.Description}\r\n                                    />\r\n                                    <div className=\"text-danger\">\r\n                                        {errors.Description?.message}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                                <div className=\"form-group\">\r\n                                    <label className=\"mb-1 \"> <strong>{t('advice')}</strong> </label>\r\n                                    <textarea\r\n                                        type=\"text\"\r\n                                        {...register(\"Advice\")}\r\n                                        className=\"form-control\"\r\n                                        placeholder={t('advice')}\r\n                                        name=\"Advice\"\r\n                                        onChange={handleInput}\r\n                                        value={variantInsert.Advice}\r\n                                    />\r\n                                    <div className=\"text-danger\">\r\n                                        {errors.Advice?.message}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                                <div className=\"form-group\">\r\n                                    <label className=\"mb-1 \"> <strong>{t('price')}</strong> </label>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        {...register(\"CurrentPrice\")}\r\n\r\n                                        className=\"form-control\"\r\n                                        placeholder={t('price')}\r\n                                        name=\"CurrentPrice\"\r\n                                        onChange={handleInput}\r\n                                        value={variantInsert.CurrentPrice}\r\n                                    />\r\n                                    <div className=\"text-danger\">\r\n                                        {errors.CurrentPrice?.message}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n                                <div className=\"form-group\">\r\n                                    <label className=\"mb-1 \"> <strong>{t('sku')}</strong> </label>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        {...register(\"sku\")}\r\n\r\n                                        className=\"form-control\"\r\n                                        placeholder={t('price')}\r\n                                        name=\"sku\"\r\n                                        onChange={handleInput}\r\n                                        value={variantInsert.sku}\r\n                                    />\r\n                                    <div className=\"text-danger\">\r\n                                        {errors.sku?.message}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"col-xl-6 col-xxl-6 col-lg-6 col-sm-12\">\r\n\r\n                                <div className=\"form-group\">\r\n                                    <label className=\"mb-1 \"> <strong>{t('images')}</strong> </label>\r\n                                    {/* <div className=\"file-loading\"> */}\r\n                                    <input\r\n                                        type=\"file\"\r\n                                        name=\"file\"\r\n                                        className=\"form-control\"\r\n                                        onChange={handleImageChange}\r\n                                        multiple\r\n                                        required\r\n                                        data-overwrite-initial=\"false\"\r\n                                        data-min-file-count=\"1\" />\r\n                                </div>\r\n\r\n                                {/* </div> */}\r\n                            </div>\r\n                            <div className=\"result\">{renderPhotos(selectedFiles)}</div>\r\n                            <div className=\"col-xl-12 col-xxl-12 col-lg-12 col-sm-12\">\r\n\r\n                                <div className=\"form-group\">\r\n                                    <label className=\"mb-1 \"> <strong>{t('variant_details')}</strong> </label>\r\n                                    {/* <div className=\"file-loading\"> */}\r\n                                </div>\r\n\r\n                                {/* </div> */}\r\n                            </div>\r\n                            <div className=\"col-xl-12 col-xxl-12 col-lg-12 col-sm-12\">\r\n\r\n                                {form.map((item, index) => (\r\n                                    <div className=\"row my-1\" key={`item-${index}`}>\r\n                                        <div className=\"col-xl-5 col-xxl-5 col-lg-5 col-sm-12 \">\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                className={\r\n                                                    item.errors.name\r\n                                                        ? \"form-control  is-invalid\"\r\n                                                        : \"form-control\"\r\n                                                }\r\n                                                name=\"name\"\r\n                                                placeholder={t('name')}\r\n                                                value={item.name}\r\n                                                onChange={(e) => onChange(index, e)}\r\n                                            />\r\n\r\n                                            {item.errors.name && (\r\n                                                <div className=\"invalid-feedback\">{item.errors.name}</div>\r\n                                            )}\r\n                                        </div>\r\n\r\n                                        <div className=\"col-xl-5 col-xxl-5 col-lg-5 col-sm-12 mt-1\">\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                className={\r\n                                                    item.errors.value\r\n                                                        ? \"form-control  is-invalid\"\r\n                                                        : \"form-control\"\r\n                                                }\r\n                                                name=\"value\"\r\n                                                placeholder={t('value')}\r\n                                                value={item.value}\r\n                                                onChange={(e) => onChange(index, e)}\r\n                                            />\r\n\r\n                                            {item.errors.value && (\r\n                                                <div className=\"invalid-feedback\">{item.errors.value}</div>\r\n                                            )}\r\n                                        </div>\r\n                                        <div className=\"col-xl-2 col-xxl-2 col-lg-2 col-sm-12 mt-1\">\r\n                                            <button\r\n                                                className=\"btn btn-warning \"\r\n                                                onClick={(e) => handleRemoveField(e, index)}\r\n                                            >\r\n                                                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-x-lg\" viewBox=\"0 0 16 16\">\r\n                                                    <path fillRule=\"evenodd\" d=\"M13.854 2.146a.5.5 0 0 1 0 .708l-11 11a.5.5 0 0 1-.708-.708l11-11a.5.5 0 0 1 .708 0Z\" />\r\n                                                    <path fillRule=\"evenodd\" d=\"M2.146 2.146a.5.5 0 0 0 0 .708l11 11a.5.5 0 0 0 .708-.708l-11-11a.5.5 0 0 0-.708 0Z\" />\r\n                                                </svg>\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n\r\n                            <div className=\"col-xl-4 col-xxl-4 col-lg-3 col-sm-12\">\r\n                                <button className=\"btn btn-primary mt-2\" onClick={handleAddLink}>\r\n                                    {t('add_details')}\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button\r\n                            onClick={() => setModalCentered(false)}\r\n                            variant=\"danger light\"\r\n                        >\r\n                            {t('close')}\r\n                        </Button>\r\n                        <Button variant=\"primary\" type=\"submit\"> {t('save')} </Button>\r\n\r\n                    </Modal.Footer>\r\n                </Form>\r\n            </Modal>\r\n            {/* Edit Modal */}\r\n            <Modal className=\"fade bd-example-modal-lg\" show={editmodalCentered} size=\"lg\">\r\n                <Form onSubmit={updateVariant} method=\"POST\" >\r\n                    <Modal.Header>\r\n                        <Modal.Title>{t('edit_variant')}</Modal.Title>\r\n                        <Button\r\n                            onClick={() => setEditModalCentered(false)}\r\n                            variant=\"\"\r\n                            className=\"close\"\r\n                        >\r\n                            <span>&times;</span>\r\n                        </Button>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <div className=\"row\" >\r\n                            <div className=\"col-xl-6 col-xxl-6 col-lg-12 col-sm-12\">\r\n                                <div className=\"form-group\">\r\n                                    <label className=\"mb-1 \"> <strong>{t('id')}</strong> </label>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        disabled=\"disabled\"\r\n                                        className=\"form-control\"\r\n                                        name=\"id\"\r\n                                        required\r\n                                        onChange={editHandleInput}\r\n                                        value={editVariant.id}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-xl-6 col-xxl-6 col-lg-12 col-sm-12\">\r\n                                <div className=\"form-group\">\r\n                                    <label className=\"mb-1 \"> <strong>{t('variant_name')}</strong> </label>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        className=\"form-control\"\r\n                                        placeholder={t('variant_name')}\r\n                                        name=\"VariationName\"\r\n                                        required\r\n                                        onChange={editHandleInput}\r\n                                        value={editVariant.VariationName}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            {/* <div className=\"col-xl-6 col-xxl-6 col-lg-12 col-sm-12\">\r\n                                <div className=\"form-group\">\r\n                                    <label className=\"mb-1 \"> <strong>{t('unit')}</strong> </label>\r\n                                    <select type=\"text\"\r\n                                        className=\"form-control\"\r\n                                        placeholder={t('unit')}\r\n                                        name=\"UnitID\"\r\n                                        required\r\n                                        onChange={editHandleInput}\r\n                                        value={editVariant.UnitID}>\r\n                                        <option value={editVariant.UnitID}>selected</option> )\r\n                                        {\r\n                                            unitData.map((item) =>\r\n                                                <option value={item.id} key={item.id}>{item.UnitName}</option>)\r\n                                        }</select>\r\n                                </div>\r\n                            </div> */}\r\n                            <div className=\"col-xl-6 col-xxl-6 col-lg-12 col-sm-12\">\r\n                                <div className=\"form-group\">\r\n                                    <label className=\"mb-1 \"> <strong>{t('description')}</strong> </label>\r\n                                    <textarea\r\n                                        type=\"text\"\r\n                                        className=\"form-control\"\r\n                                        placeholder={t('description')}\r\n                                        name=\"Description\"\r\n                                        required\r\n                                        onChange={editHandleInput}\r\n                                        value={editVariant.Description}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-xl-6 col-xxl-6 col-lg-12 col-sm-12\">\r\n                                <div className=\"form-group\">\r\n                                    <label className=\"mb-1 \"> <strong>{t('advice')}</strong> </label>\r\n                                    <textarea\r\n                                        type=\"text\"\r\n                                        className=\"form-control\"\r\n                                        placeholder={t('advice')}\r\n                                        name=\"Advice\"\r\n                                        required\r\n                                        onChange={editHandleInput}\r\n                                        value={editVariant.Advice}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-xl-6 col-xxl-6 col-lg-12 col-sm-12\">\r\n                                <div className=\"form-group\">\r\n                                    <label className=\"mb-1 \"> <strong>{t('current_price')} </strong> </label>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        className=\"form-control\"\r\n                                        placeholder={t('current_price')}\r\n                                        name=\"CurrentPrice\"\r\n                                        required\r\n                                        onChange={editHandleInput}\r\n                                        value={editVariant.CurrentPrice}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-xl-6 col-xxl-6 col-lg-12 col-sm-12\">\r\n\r\n                                <div className=\"form-group\">\r\n                                    <label className=\"mb-1 \"> <strong>{t('old_price')} </strong> </label>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        className=\"form-control\"\r\n                                        placeholder={t('old_price')}\r\n                                        name=\"OldPrice\"\r\n                                        required\r\n                                        onChange={editHandleInput}\r\n                                        value={editVariant.OldPrice}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button\r\n                            onClick={() => setEditModalCentered(false)}\r\n                            variant=\"danger light\"\r\n                        >\r\n                            {t('close')}\r\n                        </Button>\r\n                        <Button variant=\"primary\" type=\"submit\">{t('update')} </Button>\r\n\r\n                    </Modal.Footer>\r\n                </Form>\r\n            </Modal>\r\n            <div className=\"row\" >\r\n                <div className=\"col-xl-3 col-lg-3 col-sm-4 \" >\r\n                    <div className=\"card overflow-hidden \"  >\r\n                        <div className=\"card-body d-flex justify-content-center text-center\" style={{ border: \"2px dashed red\" }}>\r\n                            <div className=\"align-self-center text-center\">\r\n                                <button type=\"button\" className=\"btn btn-outline-primary\"\r\n                                    onClick={() => setModalCentered(true)}>\r\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" fill=\"currentColor\" className=\"bi bi-plus\" viewBox=\"0 0 16 16\">\r\n                                        <path d=\"M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z\" />\r\n                                    </svg>\r\n                                    {t('add_variant')}\r\n                                </button>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {viewProducts_HTMLTABLE}\r\n            </div>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default Variants;\r\n","C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\Inventories\\inventory.js",[],"C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\Products\\Product.js",[],"C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\Inventories\\Inventory.js",[],"C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\Services\\serviceArea.js",[],"C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\Units\\unit.js",[],"C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\Services\\ServiceArea.js",[],"C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\jsx\\components\\Units\\Unit.js",[],"C:\\Users\\zakip\\OneDrive\\Desktop\\Hellomenu_Clientside\\src\\Consts.js",[],{"ruleId":"187","replacedBy":"188"},{"ruleId":"189","replacedBy":"190"},{"ruleId":"191","severity":1,"message":"192","line":136,"column":10,"nodeType":"193","messageId":"194","endLine":136,"endColumn":24},{"ruleId":"191","severity":1,"message":"195","line":140,"column":10,"nodeType":"193","messageId":"194","endLine":140,"endColumn":23},{"ruleId":"196","severity":1,"message":"197","line":438,"column":43,"nodeType":"198","messageId":"199","endLine":438,"endColumn":45},{"ruleId":"200","severity":1,"message":"201","line":440,"column":22,"nodeType":"202","messageId":"203","endLine":440,"endColumn":102},{"ruleId":"200","severity":1,"message":"201","line":442,"column":25,"nodeType":"202","messageId":"203","endLine":442,"endColumn":95},{"ruleId":"191","severity":1,"message":"204","line":24,"column":11,"nodeType":"193","messageId":"194","endLine":24,"endColumn":26},{"ruleId":"191","severity":1,"message":"205","line":29,"column":11,"nodeType":"193","messageId":"194","endLine":29,"endColumn":26},{"ruleId":"191","severity":1,"message":"206","line":92,"column":11,"nodeType":"193","messageId":"194","endLine":92,"endColumn":21},{"ruleId":"207","severity":1,"message":"208","line":138,"column":91,"nodeType":"209","messageId":"210","endLine":138,"endColumn":93},{"ruleId":"207","severity":1,"message":"208","line":141,"column":97,"nodeType":"209","messageId":"210","endLine":141,"endColumn":99},{"ruleId":"196","severity":1,"message":"211","line":102,"column":36,"nodeType":"198","messageId":"212","endLine":102,"endColumn":38},"no-native-reassign",["213"],"no-negated-in-lhs",["214"],"no-unused-vars","'activeVariants' is assigned a value but never used.","Identifier","unusedVar","'getGrandTotal' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'handleDecrement' is assigned a value but never used.","'handelIncrement' is assigned a value but never used.","'addBaskets' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Array.prototype.map() expects a return value from arrow function.","expectedInside","no-global-assign","no-unsafe-negation"]