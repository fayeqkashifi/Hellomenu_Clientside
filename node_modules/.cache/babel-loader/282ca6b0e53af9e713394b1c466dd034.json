{"ast":null,"code":"var _jsxFileName = \"D:\\\\fineDine\\\\source code\\\\Client-Side\\\\src\\\\jsx\\\\components\\\\Branches\\\\ShowBranchDetails.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { useTranslation } from \"react-i18next\";\nimport { Navbar, Container, Nav, Button } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ShowBranchDetails = props => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const branchId = atob(props.match.params.id); // atob(branchNameId)\n\n  const [loading, setLoading] = useState(true);\n  const [data, setData] = useState([]);\n  const [categories, setCategories] = useState([]);\n  useEffect(() => {\n    axios.get(`/api/GetBranchForShow/${branchId}`).then(res => {\n      if (res.data.status === 200) {\n        setData(res.data.data);\n      }\n\n      setLoading(false);\n    });\n    axios.get(`/api/GetCategories/${branchId}`).then(res => {\n      if (res.data.status === 200) {\n        setCategories(res.data.fetchData);\n      }\n    });\n  }, []);\n  var viewShow_HTMLTABLE = \"\";\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: t('loading')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 14\n    }, this);\n  } else {\n    viewShow_HTMLTABLE = data.map((item, i) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-xl-4 col-lg-6 col-sm-6\",\n        children: item.BrancheName\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 15\n      }, this);\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row justify-content-center  h-200 align-items-center h-80\",\n    children: /*#__PURE__*/_jsxDEV(Navbar, {\n      bg: \"success\",\n      variant: \"dark\",\n      children: [data.map((item, i) => {\n        return /*#__PURE__*/_jsxDEV(Navbar.Brand, {\n          to: \"#\",\n          children: item.BrancheName\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 19\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(Nav, {\n        className: \"me-auto\",\n        children: categories.map((item, i) => {\n          return /*#__PURE__*/_jsxDEV(Button, {\n            onClick: `${item.CategoryName}`,\n            children: item.CategoryName\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 22\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }, this), viewShow_HTMLTABLE]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 10\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 7\n  }, this);\n};\n\n_s(ShowBranchDetails, \"PxLDN9+aWFfDNITgkd99ufVnMo8=\", false, function () {\n  return [useTranslation];\n});\n\n_c = ShowBranchDetails;\nexport default ShowBranchDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"ShowBranchDetails\");","map":{"version":3,"sources":["D:/fineDine/source code/Client-Side/src/jsx/components/Branches/ShowBranchDetails.js"],"names":["React","useEffect","useState","axios","useTranslation","Navbar","Container","Nav","Button","ShowBranchDetails","props","t","branchId","atob","match","params","id","loading","setLoading","data","setData","categories","setCategories","get","then","res","status","fetchData","viewShow_HTMLTABLE","map","item","i","BrancheName","CategoryName"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Navbar, Container,  Nav, Button } from \"react-bootstrap\";\r\n\r\nconst ShowBranchDetails = (props) => {\r\n\tconst { t } = useTranslation();\r\n   const branchId =atob(props.match.params.id);\r\n   // atob(branchNameId)\r\n   const [loading, setLoading]= useState(true); \r\n   const [data, setData]= useState([])\r\n   const [categories, setCategories]= useState([])\r\n   useEffect(()=>{\r\n\r\n      axios.get(`/api/GetBranchForShow/${branchId}`).then(res => {\r\n         if(res.data.status === 200){\r\n            setData(res.data.data);\r\n         }\r\n         setLoading(false);\r\n       });\r\n      axios.get(`/api/GetCategories/${branchId}`).then(res => {\r\n         if(res.data.status === 200){\r\n            setCategories(res.data.fetchData);\r\n         }\r\n       });\r\n      \r\n\r\n   },[])\r\n   var viewShow_HTMLTABLE=\"\";\r\n   if(loading){\r\n      return <h4>{t('loading')}</h4>\r\n  }else{\r\n      viewShow_HTMLTABLE = \r\n      data.map((item,i)=>{\r\n          return (\r\n              <div className=\"col-xl-4 col-lg-6 col-sm-6\" key={i}>\r\n               {item.BrancheName}\r\n              </div>\r\n          )\r\n      })\r\n  }\r\n   \r\n   return (\r\n      <div className=\"row justify-content-center  h-200 align-items-center h-80\">\r\n      \r\n         <Navbar bg=\"success\" variant=\"dark\">\r\n            {data.map((item,i)=>{\r\n               return(\r\n                  <Navbar.Brand to=\"#\" key={i}>{item.BrancheName}</Navbar.Brand>\r\n               )\r\n            }) }\r\n            <Nav className=\"me-auto\">\r\n               {categories.map((item,i)=>{\r\n                  return(\r\n                     <Button onClick={`${item.CategoryName}`} key={i}>{item.CategoryName}</Button>\r\n                  )\r\n               }) }\r\n            \r\n            </Nav>\r\n            {viewShow_HTMLTABLE}\r\n         </Navbar>\r\n\r\n      </div>\r\n   );\r\n\r\n};\r\n\r\nexport default ShowBranchDetails;\r\n"]},"metadata":{},"sourceType":"module"}