{"ast":null,"code":"import { persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport { put, takeLatest } from \"redux-saga/effects\";\nimport { getUserByToken } from \"./authCrud\";\nexport const actionTypes = {\n  Login: \"[Login] Action\",\n  Logout: \"[Logout] Action\",\n  Register: \"[Register] Action\",\n  UserRequested: \"[Request User] Action\",\n  UserLoaded: \"[Load User] Auth API\"\n};\nconst initialAuthState = {\n  user: undefined,\n  authToken: undefined\n};\nexport const reducer = persistReducer({\n  storage,\n  key: \"v706-demo3-auth\",\n  whitelist: [\"user\", \"authToken\"]\n}, (state = initialAuthState, action) => {\n  switch (action.type) {\n    case actionTypes.Login:\n      {\n        const {\n          authToken\n        } = action.payload;\n        return {\n          authToken,\n          user: undefined\n        };\n      }\n\n    case actionTypes.Register:\n      {\n        const {\n          authToken\n        } = action.payload;\n        return {\n          authToken,\n          user: undefined\n        };\n      }\n\n    case actionTypes.Logout:\n      {\n        // TODO: Change this code. Actions in reducer aren't allowed.\n        return initialAuthState;\n      }\n\n    case actionTypes.UserLoaded:\n      {\n        const {\n          user\n        } = action.payload;\n        return { ...state,\n          user\n        };\n      }\n\n    default:\n      return state;\n  }\n});\nexport const actions = {\n  login: authToken => ({\n    type: actionTypes.Login,\n    payload: {\n      authToken\n    }\n  }),\n  register: authToken => ({\n    type: actionTypes.Register,\n    payload: {\n      authToken\n    }\n  }),\n  logout: () => ({\n    type: actionTypes.Logout\n  }),\n  requestUser: user => ({\n    type: actionTypes.UserRequested,\n    payload: {\n      user\n    }\n  }),\n  fulfillUser: user => ({\n    type: actionTypes.UserLoaded,\n    payload: {\n      user\n    }\n  })\n};\nexport function* saga() {\n  yield takeLatest(actionTypes.Login, function* loginSaga() {\n    yield put(actions.requestUser());\n  });\n  yield takeLatest(actionTypes.Register, function* registerSaga() {\n    yield put(actions.requestUser());\n  });\n  yield takeLatest(actionTypes.UserRequested, function* userRequested() {\n    const {\n      data: user\n    } = yield getUserByToken();\n    yield put(actions.fulfillUser(user));\n  });\n}","map":{"version":3,"sources":["D:/fineDine/source code/Client-Side/src/jsx/_redux/authRedux.js"],"names":["persistReducer","storage","put","takeLatest","getUserByToken","actionTypes","Login","Logout","Register","UserRequested","UserLoaded","initialAuthState","user","undefined","authToken","reducer","key","whitelist","state","action","type","payload","actions","login","register","logout","requestUser","fulfillUser","saga","loginSaga","registerSaga","userRequested","data"],"mappings":"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","sourcesContent":["import { persistReducer } from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport { put, takeLatest } from \"redux-saga/effects\";\r\nimport { getUserByToken } from \"./authCrud\";\r\n\r\nexport const actionTypes = {\r\n  Login: \"[Login] Action\",\r\n  Logout: \"[Logout] Action\",\r\n  Register: \"[Register] Action\",\r\n  UserRequested: \"[Request User] Action\",\r\n  UserLoaded: \"[Load User] Auth API\"\r\n};\r\n\r\nconst initialAuthState = {\r\n  user: undefined,\r\n  authToken: undefined\r\n};\r\n\r\nexport const reducer = persistReducer(\r\n  { storage, key: \"v706-demo3-auth\", whitelist: [\"user\", \"authToken\"] },\r\n  (state = initialAuthState, action) => {\r\n    switch (action.type) {\r\n      case actionTypes.Login: {\r\n        const { authToken } = action.payload;\r\n\r\n        return { authToken, user: undefined };\r\n      }\r\n\r\n      case actionTypes.Register: {\r\n        const { authToken } = action.payload;\r\n\r\n        return { authToken, user: undefined };\r\n      }\r\n\r\n      case actionTypes.Logout: {\r\n        // TODO: Change this code. Actions in reducer aren't allowed.\r\n        return initialAuthState;\r\n      }\r\n\r\n      case actionTypes.UserLoaded: {\r\n        const { user } = action.payload;\r\n        return { ...state, user };\r\n      }\r\n\r\n      default:\r\n        return state;\r\n    }\r\n  }\r\n);\r\n\r\nexport const actions = {\r\n  login: authToken => ({ type: actionTypes.Login, payload: { authToken } }),\r\n  register: authToken => ({\r\n    type: actionTypes.Register,\r\n    payload: { authToken }\r\n  }),\r\n  logout: () => ({ type: actionTypes.Logout }),\r\n  requestUser: user => ({ type: actionTypes.UserRequested, payload: { user } }),\r\n  fulfillUser: user => ({ type: actionTypes.UserLoaded, payload: { user } })\r\n};\r\n\r\nexport function* saga() {\r\n  yield takeLatest(actionTypes.Login, function* loginSaga() {\r\n    yield put(actions.requestUser());\r\n  });\r\n\r\n  yield takeLatest(actionTypes.Register, function* registerSaga() {\r\n    yield put(actions.requestUser());\r\n  });\r\n\r\n  yield takeLatest(actionTypes.UserRequested, function* userRequested() {\r\n    const { data: user } = yield getUserByToken();\r\n\r\n    yield put(actions.fulfillUser(user));\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}