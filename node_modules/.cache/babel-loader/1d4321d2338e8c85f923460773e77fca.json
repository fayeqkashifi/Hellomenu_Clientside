{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\zakip\\\\OneDrive\\\\Desktop\\\\Hellomenu_Clientside\\\\src\\\\jsx\\\\components\\\\Variants\\\\Grid.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { Fragment, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst VariantsLine = props => {\n  _s();\n\n  const {\n    items,\n    attributes,\n    productid,\n    setVarantGrid\n  } = props;\n  const [values, setValues] = useState(items);\n  let [errors, setErrors] = useState({});\n\n  const genrateSku = () => {\n    let sku = productid + \"-\";\n    let c = 1;\n    attributes.map(atter => {\n      if (values[atter.attributeName] != \"\") {\n        if (c == attributes.length) {\n          sku += values[atter.attributeName];\n        } else {\n          sku += values[atter.attributeName] + \"-\";\n        }\n      }\n\n      c++;\n    });\n    return sku;\n  };\n\n  const Change = event => {\n    setValues({ ...values,\n      [event.target.name]: event.target.value\n    });\n  };\n\n  const changeSku = event => {\n    const name = event.target.name;\n    const check = attributes.some(attribute => {\n      return attribute.attributeName === name;\n    });\n\n    if (!check) {\n      const error = {};\n\n      if (isNaN(event.target.value)) {\n        error[name] = true;\n        error[name + \"message\"] = \"Please Enter A Real Number\";\n        setErrors({ ...errors,\n          ...error\n        });\n      } else {\n        error[name] = false;\n        error[name + \"message\"] = \"\";\n        setErrors({ ...errors,\n          ...error\n        });\n      }\n    }\n\n    let sku = genrateSku();\n\n    if (sku != \"\") {\n      setValues({ ...values,\n        sku: sku\n      });\n      setVarantGrid(values);\n    }\n  };\n\n  const outputs = [];\n\n  for (const [key, value] of Object.entries(values)) {\n    if (key != \"postion\") {\n      outputs.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-xl-2 col-lg-2 col-sm-2 p-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: errors[key] ? \" form-control is-invalid\" : \"form-control\",\n          disabled: key == \"sku\",\n          value: value,\n          onBlur: event => {\n            changeSku(event);\n          },\n          onChange: event => Change(event),\n          name: key\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), errors[key] ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"invalid-feedback\",\n          children: errors[key + \"message\"]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this));\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"col-xl-12 col-lg-12 col-sm-12 \",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: outputs\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n\n_s(VariantsLine, \"nfZ7q8g6O9n9slHWYVJLHVX1B+I=\");\n\n_c = VariantsLine;\n\nconst VariantsGrid = props => {\n  _s2();\n\n  const {\n    attributes,\n    numberOfVar,\n    productid,\n    getJSONVaraints\n  } = props;\n  const [varintGrid, setVariantGrid] = useState([]);\n\n  const setVarantGrid = item => {\n    if (item.sku !== \"\") {\n      let modifyVariant = varintGrid;\n      modifyVariant[item.postion] = item;\n      setVariantGrid(modifyVariant);\n    }\n\n    getJSONVaraints(JSON.stringify(varintGrid));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"col-xl-12 col-lg-12 col-sm-12 \",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex flex-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"col-md-2  p-4\",\n          children: \"SKU\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"col-md-2  p-4\",\n          children: \"price\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"col-md-2  p-4\",\n          children: \"Stock\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), attributes.map(sec => /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"col-md-2  p-4\",\n          children: sec.attributeName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), numberOfVar.map(item => /*#__PURE__*/_jsxDEV(VariantsLine, {\n        setVarantGrid: item => setVarantGrid(item),\n        items: item,\n        productid: productid,\n        attributes: attributes\n      }, item.postion, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(VariantsGrid, \"UYMM9vDh7yganSos/M7hcXS8T4g=\");\n\n_c2 = VariantsGrid;\nexport default VariantsGrid;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"VariantsLine\");\n$RefreshReg$(_c2, \"VariantsGrid\");","map":{"version":3,"sources":["C:/Users/zakip/OneDrive/Desktop/Hellomenu_Clientside/src/jsx/components/Variants/Grid.js"],"names":["React","Fragment","useState","useTranslation","VariantsLine","props","items","attributes","productid","setVarantGrid","values","setValues","errors","setErrors","genrateSku","sku","c","map","atter","attributeName","length","Change","event","target","name","value","changeSku","check","some","attribute","error","isNaN","outputs","key","Object","entries","push","VariantsGrid","numberOfVar","getJSONVaraints","varintGrid","setVariantGrid","item","modifyVariant","postion","JSON","stringify","sec"],"mappings":"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","sourcesContent":["import React, { Fragment, useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nconst VariantsLine = (props) => {\r\n  const { items, attributes, productid, setVarantGrid } = props;\r\n  const [values, setValues] = useState(items);\r\n  let [errors, setErrors] = useState({});\r\n  const genrateSku = () => {\r\n    let sku = productid + \"-\";\r\n    let c = 1;\r\n    attributes.map((atter) => {\r\n      if (values[atter.attributeName] != \"\") {\r\n        if (c == attributes.length) {\r\n          sku += values[atter.attributeName];\r\n        } else {\r\n          sku += values[atter.attributeName] + \"-\";\r\n        }\r\n      }\r\n      c++;\r\n    });\r\n    return sku;\r\n  };\r\n  const Change = (event) => {\r\n    setValues({\r\n      ...values,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n  const changeSku = (event) => {\r\n    const name = event.target.name;\r\n    const check = attributes.some((attribute) => {\r\n      return attribute.attributeName === name;\r\n    });\r\n\r\n    if (!check) {\r\n      const error = {};\r\n      if (isNaN(event.target.value)) {\r\n        error[name] = true;\r\n        error[name + \"message\"] = \"Please Enter A Real Number\";\r\n        setErrors({ ...errors, ...error });\r\n      } else {\r\n        error[name] = false;\r\n        error[name + \"message\"] = \"\";\r\n        setErrors({ ...errors, ...error });\r\n      }\r\n    }\r\n    let sku = genrateSku();\r\n\r\n    if (sku != \"\") {\r\n      setValues({\r\n        ...values,\r\n        sku: sku,\r\n      });\r\n      setVarantGrid(values);\r\n    }\r\n  };\r\n  const outputs = [];\r\n  for (const [key, value] of Object.entries(values)) {\r\n    if (key != \"postion\") {\r\n      outputs.push(\r\n        <div className=\"col-xl-2 col-lg-2 col-sm-2 p-4\">\r\n          <input\r\n            className={\r\n              errors[key] ? \" form-control is-invalid\" : \"form-control\"\r\n            }\r\n            disabled={key == \"sku\"}\r\n            value={value}\r\n            onBlur={(event) => {\r\n              changeSku(event);\r\n            }}\r\n            onChange={(event) => Change(event)}\r\n            name={key}\r\n          ></input>\r\n          {errors[key] ? (\r\n            <div className=\"invalid-feedback\">{errors[key + \"message\"]}</div>\r\n          ) : null}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  return (\r\n    <div className=\"col-xl-12 col-lg-12 col-sm-12 \">\r\n      <div className=\"row\">{outputs}</div>\r\n    </div>\r\n  );\r\n};\r\nconst VariantsGrid = (props) => {\r\n  const { attributes, numberOfVar, productid, getJSONVaraints } = props;\r\n  const [varintGrid, setVariantGrid] = useState([]);\r\n  const setVarantGrid = (item) => {\r\n    if (item.sku !== \"\") {\r\n      let modifyVariant = varintGrid;\r\n      modifyVariant[item.postion] = item;\r\n      setVariantGrid(modifyVariant);\r\n    }\r\n    getJSONVaraints(JSON.stringify(varintGrid));\r\n  };\r\n  return (\r\n    <Fragment>\r\n      <div class=\"col-xl-12 col-lg-12 col-sm-12 \">\r\n        <div className=\"d-flex flex-row\">\r\n          <div class=\"col-md-2  p-4\">SKU</div>\r\n          <div class=\"col-md-2  p-4\">price</div>\r\n          <div class=\"col-md-2  p-4\">Stock</div>\r\n\r\n          {attributes.map((sec) => (\r\n            <div class=\"col-md-2  p-4\">{sec.attributeName}</div>\r\n          ))}\r\n        </div>\r\n        {numberOfVar.map((item) => (\r\n          <VariantsLine\r\n            key={item.postion}\r\n            setVarantGrid={(item) => setVarantGrid(item)}\r\n            items={item}\r\n            productid={productid}\r\n            attributes={attributes}\r\n          ></VariantsLine>\r\n        ))}\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\nexport default VariantsGrid;\r\n"]},"metadata":{},"sourceType":"module"}